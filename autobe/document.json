{
  "operations": [
    {
      "specification": "PATCH /discussionBoard/users provides advanced, paginated user search and listing. This endpoint interacts with the 'discussion_board_user' Prisma table, enabling filtered listing of user accounts based on numerous search and filter criteria (username, email, creation date, status, etc.). It is used for administrative, moderation, and analytics purposes, giving access to both active and inactive users as per business needs. The operation supports pagination, sorting, and advanced filters, allowing role-based access control—a common task for admin and moderator dashboards. Its request body structure supports complex queries. The response is a paginated list, never just a simple array, following best practices for scalable API designs.",
      "description": "The PATCH /discussionBoard/users endpoint enables the retrieval of a paginated, filtered, and sorted list of user core records ('discussion_board_user'), fulfilling the requirements for user management found in core functionality and administrative business needs.\n\nIt references the 'discussion_board_user' Prisma table, allowing for queries based on a user's username, email, activation status, creation/update timestamps, and soft deletion status. Administrators and moderators typically use this endpoint to perform user account audits, trend analysis, and onboarding checks.\n\nSecurity is critical and this endpoint should be restricted to users with adequate administrative or moderation privileges, reflecting RBAC (Role-Based Access Control) policies defined in policy docs. Use cases include finding users by specific criteria, supporting mass actions via user selection, and auditing platform growth.\n\nExpected request validation covers pagination (page, size), text search (username, email), boolean filtering (is_active), temporal queries (created_at, updated_at ranges), and status. Error handling includes improper query structure, unauthorized access, and invalid filter values.\n\nInteroperates with the user creation, read, update, and delete endpoints, and may be referenced after bulk moderation operations or role changes.",
      "summary": "List and filter user accounts using the discussion_board_user table, supporting advanced search/pagination.",
      "parameters": [],
      "requestBody": {
        "description": "User search and pagination criteria for listing users.",
        "typeName": "IDiscussionBoardUser.IRequest"
      },
      "responseBody": {
        "description": "Paginated response containing filtered user records.",
        "typeName": "IPageIDiscussionBoardUser"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/users",
      "method": "patch"
    },
    {
      "specification": "GET /discussionBoard/users/{id} fetches the full record for a single registered user based on UUID. This endpoint accesses 'discussion_board_user' and returns all core profile and account status fields. It is typically used for account inspection, profile detail display, or as part of admin/moderator workflows. It requires the user id as UUID path param. Response includes all user core data except password hash. If the user is not found or access is restricted, appropriate errors are returned. Role-based protection is enforced.",
      "description": "The GET /discussionBoard/users/{id} endpoint retrieves the detailed profile of an individual user from the 'discussion_board_user' Prisma table, matching the supplied UUID path parameter.\n\nThis endpoint delivers atomic details required for administrative review, profile inspection, and user detail display, such as username, email, account status, timestamps, and soft deletion status. Password hashes are omitted by security policy. Only users with sufficient privileges (admins, possibly moderators) can access this endpoint.\n\nValidation covers correct UUID format for user id, with error handling for not found and unauthorized access cases. The endpoint's output may serve as source data for user details in admin UI or user audit logs.\n\nTightly collaborates with endpoints for user update, delete, and audit trail features.",
      "summary": "Get detailed core user account for specific id from discussion_board_user.",
      "parameters": [
        {
          "name": "id",
          "description": "The UUID of the user to fetch.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed user core account data record.",
        "typeName": "IDiscussionBoardUser"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/users/{id}",
      "method": "get"
    },
    {
      "specification": "POST /discussionBoard/users creates a new user core record and triggers full registration flow. This endpoint writes to 'discussion_board_user', establishing the minimum registration identity (username, email, password hash) while enforcing uniqueness constraints. Inputs require validated email, unique username, and a securely pre-hashed password. On success, the endpoint responds with the full user core record (except password hash). Invoked by registration UIs as well as for admin-initiated account creation tasks. Account activation and onboarding flows follow as per business logic.",
      "description": "The POST /discussionBoard/users endpoint handles the registration of new users, creating a new entry in 'discussion_board_user'. Registration requires unique username and email, with password provided as a properly pre-hashed value by the presentation layer, which is never stored or transmitted in plaintext. Upon registration, is_active can default as enabled or require separate activation, depending on system policy. Creation and update timestamps are recorded automatically, and soft deletion status starts as null.\n\nRequest body follows the 'ICreate' input contract, ensuring all database integrity constraints (unique username/email, required fields, secure password hash). Response includes all created user details except the password hash (never exposed), aligning with privacy and security standards.\n\nUpon success, user profile and role assignment endpoints can be used to further configure the account. Error handling covers conflict (duplicate username/email), invalid input data, and potential RBAC restrictions.",
      "summary": "Register a new user (discussion_board_user), enforcing uniqueness and secure credential storage.",
      "parameters": [],
      "requestBody": {
        "description": "User registration input details.",
        "typeName": "IDiscussionBoardUser.ICreate"
      },
      "responseBody": {
        "description": "Created user core record (without password hash).",
        "typeName": "IDiscussionBoardUser"
      },
      "authorization": null,
      "path": "/discussionBoard/users",
      "method": "post"
    },
    {
      "specification": "PUT /discussionBoard/users/{id} updates an existing user's core attributes in 'discussion_board_user'. Only updatable fields are accepted (username, account status, email, but never password via this endpoint). It enforces all uniqueness, referential, and business rules (no duplicate emails, reserved usernames). Path parameter is the user UUID. Used for admin user maintenance, user-initiated profile change, or account status adjustments.",
      "description": "The PUT /discussionBoard/users/{id} endpoint modifies an existing user's core data fields (discussion_board_user), identified by the UUID path parameter.\n\nPermissable updates include display username (if unique), email (if unique), and status information, never direct password manipulation (separate flow is enforced for password change for security). The endpoint enforces all needed uniqueness and consistency checks, updating timestamps to reflect modification. Only authorized users (admin/moderator or the user themselves, depending on role policy) may update most fields.\n\nRequest must follow the IUpdate contract schema, with careful validation. Errors cover not-found, unauthorized, and validation failures (format, conflict). On success, the updated user object is returned for display or audit.\n\nRelated endpoints: change password, update profile, and audit logging operations.",
      "summary": "Update an existing user's core record (discussion_board_user) by id.",
      "parameters": [
        {
          "name": "id",
          "description": "Target user's UUID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "User update data (excluding password).",
        "typeName": "IDiscussionBoardUser.IUpdate"
      },
      "responseBody": {
        "description": "Updated user core data record.",
        "typeName": "IDiscussionBoardUser"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/users/{id}",
      "method": "put"
    },
    {
      "specification": "DELETE /discussionBoard/users/{id} deletes or disables a user account by UUID, writing to discussion_board_user.deleted_at and updating is_active. This endpoint enables both administrative deletion (soft delete for GDPR and compliance) and user self-deletion if policy allows. Enforcement of referential rules is key to prevent deleting users active in threads/comments etc. On success, returns empty body or deletion status. Role-based access enforced; only admin or moderator may delete most users.",
      "description": "The DELETE /discussionBoard/users/{id} endpoint implements user account deletion/deactivation, setting deleted_at and updating is_active in the discussion_board_user table for the specified UUID.\n\nThis is a soft delete—user records remain for audit but are marked inactive and timestamped for historical/compliance purposes. It supports both administrative actions and (policy-dependent) user-requested deletion. User cannot be deleted if referential integrity would be compromised (e.g., if they own visible content unless cascading is allowed).\n\nAuthorization enforced: Only admins/moderators can delete user accounts barring explicit self-deletion policy. Validation checks UUID exists, access rights, and referential safety. Errors are raised if referential violations may occur, user is not found, or permissions are lacking.\n\nSuccess response is empty body or object indicating operation status, never direct user record payload. Related endpoints handle content reassignment or anonymization as needed.",
      "summary": "Delete/disable a user by id (soft delete, GDPR compliance) in discussion_board_user.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the user to delete/disable.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Operation success indicator (usually empty object or status field).",
        "typeName": "IOperationStatus"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/users/{id}",
      "method": "delete"
    },
    {
      "specification": "PATCH /discussionBoard/userProfiles provides filtered and paginated searching for user profile entities. This endpoint queries the 'discussion_board_user_profile' table, supporting full-text and attribute-based search (display_name, bio, profile picture, etc.). Admins or users themselves may fetch lists of profile records, supporting bulk analytics or admin dashboards. Business use cases include monitoring profile completion/enhancement, showcasing top profiles, and moderation/audit workflows. Input is a complex search body; output is a paginated page structure.",
      "description": "The PATCH /discussionBoard/userProfiles endpoint supplies paginated, searchable lists of user profile records (from discussion_board_user_profile), supporting search/filter by display_name, bio, and other profile fields. Results are paged, with support for complex queries for moderation and admin views.\n\nThis endpoint references the 'discussion_board_user_profile' Prisma table, with business logic to support privacy policies (e.g., admin access to all records, users to their own). Use cases cover profile analytics, batch inspection, and dynamic display of profiles in leaderboards or discovery flows.\n\nRequest validation covers pagination metadata and filter structure validation. Error handling for malformed requests or permissions issues. Response is a standard paginated payload. This endpoint links to profile detail, update, and user table endpoints as well.",
      "summary": "Paginated, filtered profile search from discussion_board_user_profile table.",
      "parameters": [],
      "requestBody": {
        "description": "Profile search and pagination payload.",
        "typeName": "IDiscussionBoardUserProfile.IRequest"
      },
      "responseBody": {
        "description": "Paginated user profile search results.",
        "typeName": "IPageIDiscussionBoardUserProfile"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userProfiles",
      "method": "patch"
    },
    {
      "specification": "GET /discussionBoard/userProfiles/{id} fetches a single user profile by its UUID. It accesses 'discussion_board_user_profile', returning all profile fields (display_name, bio, profile_picture_uri, etc.) for a given record. Used in both detailed profile display and in admin/moderator review interfaces. Auth required. Fails with not-found or permission error if profile is inaccessible or non-existent.",
      "description": "The GET /discussionBoard/userProfiles/{id} endpoint retrieves a detailed profile entity from the discussion_board_user_profile table for a specified UUID. It returns bio, display name, profile picture URI, and other user-set profile data.\n\nBusiness scenarios include user-facing profile pages, admin and moderator inspection, and profile audits. Request must supply a valid UUID path parameter. Security logic ensures only privileged users or profile owners can access non-public profiles. Not-found or forbidden errors occur where needed.\n\nThe endpoint may be used after searching profiles, for viewing a profile in detail, or to populate profile displays in activity logs. It connects to update and audit endpoints as well.",
      "summary": "Get a single user profile (discussion_board_user_profile) by id.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID for the user profile to fetch.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "User profile entity object.",
        "typeName": "IDiscussionBoardUserProfile"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userProfiles/{id}",
      "method": "get"
    },
    {
      "specification": "POST /discussionBoard/userProfiles creates a new user profile entity, inserting a row in the 'discussion_board_user_profile' table. This endpoint is called after user core creation (registration), or for admin user seeding. Validates uniqueness (user_id) and presence of required fields. Request body expects display name, bio, profile picture URI, etc. On success, returns full profile object. Inputs must be sanitized and conform to length/format rules. Role-based access control applies to prevent duplicate profiles for a user.",
      "description": "The POST /discussionBoard/userProfiles endpoint allows creation of a user profile record in the discussion_board_user_profile table, for use after a user is registered or when admins initialize a new account profile.\n\nBusiness use cases include profile setup, enrichment by admins, or update by the account owner after registration. The endpoint enforces only one profile per user (uniqueness via user_id), and all data is validated for constraints and business rules (length, proper URIs for images, etc.).\n\nSuccess returns the created profile object, minus sensitive info if any. Related endpoints handle core user account, and role assignments.",
      "summary": "Create a new profile (discussion_board_user_profile) entity.",
      "parameters": [],
      "requestBody": {
        "description": "Profile creation data (display name, bio, etc.).",
        "typeName": "IDiscussionBoardUserProfile.ICreate"
      },
      "responseBody": {
        "description": "Created user profile object.",
        "typeName": "IDiscussionBoardUserProfile"
      },
      "authorization": null,
      "path": "/discussionBoard/userProfiles",
      "method": "post"
    },
    {
      "specification": "PUT /discussionBoard/userProfiles/{id} updates a user's profile in discussion_board_user_profile by UUID. Fields like display name, bio, or profile picture URI are updatable. Input is validated for format and permissible length. This endpoint is called by the user (to update their own profile) or by admins/moderators for adjustment or moderation flows.",
      "description": "The PUT /discussionBoard/userProfiles/{id} endpoint updates profile fields for the user profile record matching the provided UUID in the discussion_board_user_profile table. Updatable properties include display_name, bio, and profile_picture_uri, with strict validation for formats and allowed values.\n\nSecurity is enforced: only the profile owner or elevated roles (admin, moderator) can invoke this endpoint on an arbitrary profile. Full response is returned for audit or UI update. Error handling covers not-found, unauthorized, and validation failures.\n\nMay be used as part of a user onboarding/completion experience, or as a moderation/admin corrective tool. Related to profile get, create, and search endpoints.",
      "summary": "Update an existing user profile (discussion_board_user_profile) by id.",
      "parameters": [
        {
          "name": "id",
          "description": "Target profile's UUID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Updated profile fields (display_name, bio, etc.)",
        "typeName": "IDiscussionBoardUserProfile.IUpdate"
      },
      "responseBody": {
        "description": "Updated user profile object.",
        "typeName": "IDiscussionBoardUserProfile"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userProfiles/{id}",
      "method": "put"
    },
    {
      "specification": "DELETE /discussionBoard/userProfiles/{id} deletes/disables a user profile record referenced by UUID in discussion_board_user_profile. This is a soft delete: the profile is marked as deleted (not removed from the DB), supporting audit/compliance. Security rules are enforced (profile owner or role required). Used in admin operations, moderation, or privacy requests (e.g., GDPR delete).",
      "description": "The DELETE /discussionBoard/userProfiles/{id} endpoint disables or soft-deletes the referenced user profile in discussion_board_user_profile for the specified UUID. The action sets the deleted_at field or marks the profile as inactive without physical deletion, ensuring audit and compliance practices.\n\nAuthorization is enforced to prevent unauthorized profile deletion—admins/moderators or the profile owner may act. A successful deletion responds with an operation status indicator. Errors for not-found or validation are returned as appropriate.\n\nUse cases span administrative corrections, moderation enforcement, and privacy-compliance flows. This endpoint may trigger further data cleanup or notification workflows. Related endpoints include profile get, update, and paginated search endpoints.",
      "summary": "Delete/disable a user profile (discussion_board_user_profile) by id (soft delete).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the user profile to delete/disable.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Operation status indicator (usually empty object or status field).",
        "typeName": "IOperationStatus"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userProfiles/{id}",
      "method": "delete"
    },
    {
      "specification": "PATCH /discussionBoard/roleAssignments returns filtered and paginated listings of discussion_board_role_assignment records. Supports admin/moderator review of platform role history and assignments. Query body supports filter by user_id, role_type, and dates. Output is paginated list of assignments with full details, supporting analytics/dashboards. Security policy restricts this to elevated roles only.",
      "description": "The PATCH /discussionBoard/roleAssignments endpoint retrieves lists of user role assignments ('discussion_board_role_assignment' table), supporting filters by user id, role type, assignment/revocation dates, etc. Results are paginated and sortable for efficient admin and moderator workflows.\n\nUsed for auditing role histories, monitoring moderation and admin assignments, and as part of escalated privilege operations. Prior authorization is required.\n\nInput validation covers pagination and filter structure. Errors are returned for malformed input or unauthorized access. Paginated output details role assignments, with user and role references as applicable. Close link with endpoints for user record management and role-specific metadata (admin, moderator).",
      "summary": "List/query role assignments (discussion_board_role_assignment) with filters and pagination.",
      "parameters": [],
      "requestBody": {
        "description": "Role assignment filter and pagination request.",
        "typeName": "IDiscussionBoardRoleAssignment.IRequest"
      },
      "responseBody": {
        "description": "Paginated role assignment records result.",
        "typeName": "IPageIDiscussionBoardRoleAssignment"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/roleAssignments",
      "method": "patch"
    },
    {
      "specification": "GET /discussionBoard/roleAssignments/{id} fetches an individual record from discussion_board_role_assignment by UUID. Used for reviewing the history of a user's roles or assignment details. Path param is role assignment UUID. Response is assignment detail object. Used as part of admin/moderator audit and privilege mapping tasks. Access is restricted to privileged roles.",
      "description": "The GET /discussionBoard/roleAssignments/{id} endpoint retrieves a single role assignment entity from the discussion_board_role_assignment table for the specified UUID.\n\nIt returns full assignment details, including user id, role_type, assignment date, and revocation date, supporting platform and user audit use cases. It is employed by administrative interfaces, audit dashboards, or moderator privilege review features.\n\nPath parameter must be a valid UUID. Errors occur for not-found or unauthorized requests. The endpoint links to role assignment operations and user core CRUD endpoints.",
      "summary": "Read a single role assignment (discussion_board_role_assignment) by id.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the role assignment entity to fetch.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Role assignment record detail object.",
        "typeName": "IDiscussionBoardRoleAssignment"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/roleAssignments/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new role assignment for a user. This operation is based on the discussion_board_role_assignment table, allowing an admin to assign a 'member', 'admin', 'moderator', or 'guest' role to a user. It's essential for managing user access permissions and audit trails for role allocation. Assignment must specify user, role_type, start date, and optionally pre-defined revoke date. Business logic should ensure that assignments do not overlap and conflicts are prevented. Typical use cases: granting moderator or admin access, enabling temporary roles, supporting role granularity for compliance. Related endpoints: update, delete, and list assignments for audits.",
      "description": "This API endpoint creates a new role assignment for a user, as defined in the discussion_board_role_assignment Prisma schema table. The endpoint supports administrators in assigning a new role to a user, with strict enforcement that each assignment is atomic and records both the assignment timestamp and, optionally, a future revocation timestamp. This operation is critical for upholding the role-based access control described in the requirements analysis, allowing for fine-grained and auditable management of member, moderator, admin, or guest privileges.\n\nThe request body must include the user_id of the target, the role_type to be assigned (valid roles: member, moderator, admin, guest), and the assigned_at timestamp. The endpoint should validate that the role assignment does not duplicate an active role for the same user and that role revocation rules are followed. Proper handling of business errors and permission checks must be enforced.\n\nRelated endpoints include updating (PUT), deleting (DELETE), and listing (PATCH) role assignments. Only users with the appropriate administrator privileges can use this endpoint. Errors may occur if the user does not exist, the role already exists for this user and period, or the assignment data is invalid.",
      "summary": "Creates a new role assignment for a user (discussion_board_role_assignment table).",
      "parameters": [],
      "requestBody": {
        "description": "Information required to create a role assignment for a user.",
        "typeName": "IDiscussionBoardRoleAssignment.ICreate"
      },
      "responseBody": {
        "description": "Created discussion board role assignment object.",
        "typeName": "IDiscussionBoardRoleAssignment"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/roleAssignments",
      "method": "post"
    },
    {
      "specification": "Update a role assignment for a user by assignment ID. This operation modifies an existing discussion_board_role_assignment record, enabling administrators to change role type, assignment period, or revoke an active role. Enforces auditability and precision in role management, as required by role escalation and compliance workflows. Business logic: cannot alter history of prior revocations, and modifications only apply to future privileges. Related to create, delete, and list endpoints for role assignments.",
      "description": "This API endpoint updates an existing role assignment specified by its ID, as defined in the discussion_board_role_assignment table. The operation lets administrators change the role type (e.g., from 'member' to 'moderator'), set or alter the revoke date, or update audit metadata. Every change is logged and subject to strict permission checks, ensuring alignment with the system's audit trail requirements and security best practices.\n\nThe request body must provide the necessary update fields, including role_type and revoked_at if modifying revocation date. Previous assignment and revocation timestamps are not changed retroactively. Related endpoints include assignment creation (POST), removal (DELETE), and audit listing (PATCH). Only users with administrator privileges are allowed to perform this update. Errors include: role assignment not found, invalid modification to past assignments, or permission denial.",
      "summary": "Updates an existing role assignment by ID (discussion_board_role_assignment table).",
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the role assignment to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update in the role assignment (e.g., role_type, revoked_at).",
        "typeName": "IDiscussionBoardRoleAssignment.IUpdate"
      },
      "responseBody": {
        "description": "The updated discussion board role assignment object.",
        "typeName": "IDiscussionBoardRoleAssignment"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/roleAssignments/{id}",
      "method": "put"
    },
    {
      "specification": "Remove a role assignment for a user by assignment ID. This endpoint deletes an existing discussion_board_role_assignment, which is crucial for revoking privileges and enforcing the access control policy. Only administrators can execute this, and deletions must respect audit trail and business logic, allowing only permissible removal scenarios. Related to create, update, and list endpoints for role assignments. Should verify that the assignment is not required for historical compliance or active moderation cases before hard delete.",
      "description": "This endpoint deletes a specific role assignment identified by ID from the discussion_board_role_assignment table. The operation revokes the associated privileges and is a core part of the compliance process outlined in the requirements analysis. Only administrator-level users are allowed to invoke this endpoint, and all deletions should be logged for audit purpose.\n\nThe path parameter 'id' must be a valid UUID corresponding to the assignment to be deleted. Role assignment records tied to unrevoked or critical permissions may require additional business validation before deletion. If the operation is successful, the role is removed, and an audit log is generated. Related endpoints: role assignment creation (POST), update (PUT), and listing (PATCH). Error states: assignment not found, permission denied, or business logic violation.",
      "summary": "Deletes a specific role assignment by ID (discussion_board_role_assignment table).",
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the role assignment to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Success status or details of the deleted assignment.",
        "typeName": "IDiscussionBoardRoleAssignment"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/roleAssignments/{id}",
      "method": "delete"
    },
    {
      "specification": "Searches and retrieves a paginated list of admin records based on supplied filters, as defined in the discussion_board_admin table. Supports advanced querying for staff audits, role management, and historical tracking of administrator assignments. Query predicates include filtering by active/revoked status, date ranges, and text search on notes/reason. Supports pagination and sorting.",
      "description": "This endpoint lists admin users from the discussion_board_admin table, returning a paginated, filterable set of current and historical admin metadata. The PATCH method enables complex search parameters via the request body for audits, compliance checking, and assignment review. Results may be filtered by status (active/revoked), assignment or revocation datetime ranges, and administrator notes for context.\n\nAll returned data strictly corresponds to admin entities and tracks elevation reason, notes, assignment period, and status. Only authorized users (typically staff or moderators) are permitted. Errors include invalid search parameters or authorization failure. Related endpoints include admin creation, update, get, and delete.",
      "summary": "Lists and searches admin records (discussion_board_admin table) with pagination and filtering.",
      "parameters": [],
      "requestBody": {
        "description": "Search/filter criteria for admin listing, including status, assignment date, and free text.",
        "typeName": "IDiscussionBoardAdmin.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of matching admin records.",
        "typeName": "IPageIDiscussionBoardAdmin"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/admins",
      "method": "patch"
    },
    {
      "specification": "Retrieve a specific admin record by its ID. Looks up the discussion_board_admin table and returns all metadata for the admin account, including user reference, assignment/revocation dates, reason, and notes. This operation is critical for detailed role audits or when presenting admin profile information in management UIs or audit logs.",
      "description": "This endpoint retrieves a single admin record from the discussion_board_admin table, identified by the record's UUID. It returns all normalized metadata for the admin, including the referenced user, elevation reason, notes, assignment date, and revocation date if applicable. This read-only operation is permitted for authorized admin or moderator users seeking to view current or historical admin assignments and details.\n\nRelated endpoints include admin listing (PATCH), creation (POST), update (PUT), and delete (DELETE). Path parameter 'id' must be a valid UUID. Errors include record not found or permission denied.",
      "summary": "Retrieves a specific admin record by ID (discussion_board_admin table).",
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the admin record to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The discussion board admin record, including user, assignment, and notes.",
        "typeName": "IDiscussionBoardAdmin"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/admins/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new admin record for a user. This operation inserts into the discussion_board_admin table, allowing assignment of admin privileges to a user, including elevation reason and administrative notes. The user must already be present in discussion_board_user and assigned the admin role in role_assignment before being granted admin privileges here. Business logic ensures role consistency and audit integrity. Strict permission requirements: only other admins can create admins.",
      "description": "This endpoint creates a new admin record in the discussion_board_admin table. Admin creation requires the target user to already be assigned the 'admin' role in the role_assignment table, ensuring consistency with access controls outlined in the requirements analysis. The creation request must specify the user_id, elevation_reason, notes, and assignment date, and may specify a future revocation date.\n\nThe operation is logged for audit, with related endpoints for admin update (PUT), get (GET), delete (DELETE), and list (PATCH). Only users with the admin role have permission. Error handling includes existing admin records, missing user, or inconsistent role assignments.",
      "summary": "Creates a new admin record for a user (discussion_board_admin table).",
      "parameters": [],
      "requestBody": {
        "description": "Information required to create an admin record, including user assignment and metadata.",
        "typeName": "IDiscussionBoardAdmin.ICreate"
      },
      "responseBody": {
        "description": "Created discussion board admin record.",
        "typeName": "IDiscussionBoardAdmin"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/admins",
      "method": "post"
    },
    {
      "specification": "Update an admin record by ID. Modifies the discussion_board_admin entity, with allowed changes to elevation reason, notes, or revocation date. No changes are permitted to the user reference or historical assigned_at fields. Operation logs the change for audit compliance. Typical usage includes updating assignment rationale, administrative comments, or soft-revoking admin rights.",
      "description": "This endpoint updates specific fields of an existing admin record, identified by its UUID, as defined in the discussion_board_admin table. Permitted updates include changing the elevation_reason, notes, or revocation date. The path parameter 'id' must be a valid UUID. Updating user_id or the initial assigned_at is strictly forbidden to maintain audit and compliance integrity.\n\nThe update operation is logged and must be performed by an authenticated admin. Related endpoints: admin create (POST), read (GET), delete (DELETE), and filtered list (PATCH). Errors: admin not found, invalid updates, or permission denied.",
      "summary": "Updates an admin record by ID (discussion_board_admin table).",
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the admin record to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the admin record (notes, elevation_reason, revoked_at).",
        "typeName": "IDiscussionBoardAdmin.IUpdate"
      },
      "responseBody": {
        "description": "The updated discussion board admin record.",
        "typeName": "IDiscussionBoardAdmin"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/admins/{id}",
      "method": "put"
    },
    {
      "specification": "Delete an admin record by its ID. Removes a discussion_board_admin entity, revoking active admin metadata. Business logic enforces that admin records with current assignments or required for past audit compliance should not be deleted unless consistent with role revocation policy. Operation is critical for security and access controls, with impacts logged for traceability.",
      "description": "The delete API operation removes an admin record, identified by its UUID, from the discussion_board_admin table. This operation is used to revoke admin privileges and clean up historical metadata no longer needed for audit or compliance. The path parameter 'id' is validated as a UUID. Only authenticated admin-level users may perform deletions.\n\nThe API ensures that deletions do not violate audit or compliance requirements, and all actions are logged accordingly. Related operations: create (POST), get (GET), update (PUT), and list (PATCH). Errors: record not found, active admin restriction, or permission denied.",
      "summary": "Deletes an admin record by ID (discussion_board_admin table).",
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the admin record to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Success status or the deleted admin record.",
        "typeName": "IDiscussionBoardAdmin"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/admins/{id}",
      "method": "delete"
    },
    {
      "specification": "List/search moderator records in a paginated and filterable way. Uses the discussion_board_moderator table to support audits, role management, and historical review of moderator assignments. Filtering allowed on active/revoked status, dates, and notes. Typical use-case: compliance audits, moderator management.",
      "description": "This API operation retrieves a paginated and filterable list of moderator records from the discussion_board_moderator table. By using PATCH, advanced search predicates and pagination details can be specified in the request body (see schema for search options). Returns moderator user references, assignment dates, revocation status, and notes as required by the requirements and business logic for managing community staff.\n\nThis endpoint is available to admin and moderator users, supporting audits and team management. Related endpoints: create (POST), read (GET), update (PUT), and delete (DELETE). Errors: invalid filter, unauthorized access, or database issues.",
      "summary": "Lists and searches moderator records (discussion_board_moderator table) with pagination and search filtering.",
      "parameters": [],
      "requestBody": {
        "description": "Search, filter, and pagination criteria for listing moderators.",
        "typeName": "IDiscussionBoardModerator.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of moderator records matching the filters.",
        "typeName": "IPageIDiscussionBoardModerator"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderators",
      "method": "patch"
    },
    {
      "specification": "Retrieve a specific moderator record by ID. Reads the discussion_board_moderator table, returning all moderator-specific data for the matching user, including assignment/revocation dates and administrative notes. Used for detailed staff audits or personnel review.",
      "description": "This endpoint fetches the full record of a moderator, as defined in the discussion_board_moderator table, based on their UUID. Returns user reference, assignment metadata, notes, and revocation details if present. Only available to admin and moderator users for audit, compliance, and management review.\n\nPath parameter 'id' must be a UUID. Related endpoints: moderator listing (PATCH), create (POST), update (PUT), and delete (DELETE). Errors: moderator record not found or access denied.",
      "summary": "Gets details of a moderator record by ID (discussion_board_moderator table).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the moderator record to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Moderator record with user assignment and notes.",
        "typeName": "IDiscussionBoardModerator"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderators/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new moderator record for a user. Inserts into the discussion_board_moderator table, granting moderation specific privileges for the board. User must have active 'moderator' role in assignment record. The record supports assignment tracking, onboarding notes, and status. Strict role and permission enforcement is required for audit and compliance. Related to create/update/list/delete endpoints for moderator management.",
      "description": "This API creates a new moderator record in the discussion_board_moderator table, representing the assignment of moderator duties to a user. The target must have the 'moderator' role assigned in discussion_board_role_assignment. The request body must provide user_id, assignment date, optional revocation date, and notes for onboarding or compliance.\n\nOnly admin users can create moderator records. The operation is logged for audit, with related endpoints for listing, update, get, and delete. Error conditions: user missing, existing active moderator record, or access violation.",
      "summary": "Creates a new moderator record for a user (discussion_board_moderator table).",
      "parameters": [],
      "requestBody": {
        "description": "Information required to create a moderator record (user assignment, assignment date, notes).",
        "typeName": "IDiscussionBoardModerator.ICreate"
      },
      "responseBody": {
        "description": "Created moderator record object.",
        "typeName": "IDiscussionBoardModerator"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderators",
      "method": "post"
    },
    {
      "specification": "Update an existing moderator record by ID. Modifies discussion_board_moderator fields such as notes or revocation date but never the user ID or initial assignment date. All changes are subject to strict audit and permission logic, and all changes are logged. Used to sunset moderator status, document onboarding, or revise staff history.",
      "description": "Updates a moderator record specified by ID, allowing modification of notes and revocation status in the discussion_board_moderator table. The request body provides new values for `notes` and/or `revoked_at`. User ID and initial assigned_at cannot be changed; these are immutable keys to meet compliance. Only admin or elevated moderator users can update moderator records. Successful update is audited for traceability.\n\nRelated endpoints: create moderator (POST), get (GET), list (PATCH), and delete (DELETE). Error cases: record not found, immutable field attempted to modify, access denied, or invalid update information.",
      "summary": "Updates an existing moderator record by ID (discussion_board_moderator table).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of moderator record to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for moderator record (notes, revoked_at).",
        "typeName": "IDiscussionBoardModerator.IUpdate"
      },
      "responseBody": {
        "description": "Updated moderator record.",
        "typeName": "IDiscussionBoardModerator"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderators/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a moderator record from the discussion_board_moderator table. This operation is critical for administrative actions that remove a user's moderator privileges. It ensures referential and business logic consistency: only permissible if the user is properly demoted or banned, all audit trails are updated, and related role assignments are cleaned up. The deletion is typically performed by an admin as described in the moderation policy (escalation/removal). If the moderator participated in unresolved actions, additional business logic may reject the operation. Endpoint strictly checks the moderator's current status and returns errors on constraint violations.",
      "description": "This endpoint provides the ability to remove a moderator record from the discussion_board_moderator entity, fulfilling administrative moderation removal as described in the requirements analysis and moderation policy. The operation will accept the moderator's unique ID, validate that the user currently holds moderator status, and fully remove all associated moderator metadata, including history (but not user account or content). This action is typically restricted to admins. The operation enforces business logic regarding active escalations, pending moderation actions, and history preservation. If the moderator has unresolved reports or actions, the delete request may be rejected until resolution. Errors such as not found or insufficient rights are returned clearly. This API is closely coupled with endpoints for role assignments and warnings/actions logged.",
      "summary": "Delete a specific moderator from discussion_board_moderator (Moderation role removal)",
      "parameters": [
        {
          "name": "id",
          "description": "Target moderator's ID (must be a valid UUID referencing the discussion_board_moderator record)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderators/{id}",
      "method": "delete"
    },
    {
      "specification": "Fetches a paginated and optionally filtered list of guest users from the discussion_board_guest table. Designed to provide advanced search capability for analytics, auditing, and maintenance of guest session records, including inspection by admins or system operators. It covers auditing, complaint/click fraud investigation, or service usage previews by non-registered users.",
      "description": "This operation retrieves a pageable, sortable, and filterable list of guest records from the discussion_board_guest entity, enabling administrative or analytical access to guest user data. The returned data may include session_token, first_seen_at, last_seen_at, and possibly derived activity metrics. Filtering may be supported on session_token, date ranges, or activity window. This endpoint is most often used for system analytics, abuse tracking, or to facilitate cleanup of legacy guest records. Authentication and strong permission controls required. Pagination and sorting parameters must be included in the request body as specified in IDiscussionBoardGuest.IRequest. Related endpoints include guest record creation and deletion.",
      "summary": "List/filter guest users from discussion_board_guest (admin/system maintenance)",
      "parameters": [],
      "requestBody": {
        "description": "Filtering, pagination, sorting for guest record list retrieval",
        "typeName": "IDiscussionBoardGuest.IRequest"
      },
      "responseBody": {
        "description": "Paginated list and summary of guest user records",
        "typeName": "IPageDiscussionBoardGuest"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/guests",
      "method": "patch"
    },
    {
      "specification": "Retrieves information about a specific guest user, looked up by the guest's UUID from the discussion_board_guest table. This endpoint is essential for viewing analytic, audit, or session data related to a particular guest, for troubleshooting or rare user-case investigations. Only available to system actors with elevated permissions (e.g., admins).",
      "description": "This API fetches a complete guest user record from discussion_board_guest based on its unique identifier. Data returned includes session_token, timestamps for first and last activity, and may include derived context such as recent interaction details. The operation supports audit and analytics use cases, but not typical application-facing workflows (as guests aren't authenticated users). Related operations include listing, updating, or deleting guest records.",
      "summary": "Fetch a single guest user's information from discussion_board_guest (audit/analytics)",
      "parameters": [
        {
          "name": "id",
          "description": "Target guest's unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Complete guest user record details",
        "typeName": "IDiscussionBoardGuest"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/guests/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new guest record in the discussion_board_guest table, for tracking unauthenticated/anonymous user sessions, in support of analytics or controlled preview experiences. Used to log new guest entry, supply optional session_token, and timestamp first interaction. System actors or certain endpoints may create guest entries to establish an audit trail before registration or to monitor non-member access.",
      "description": "This operation inserts a new row into the discussion_board_guest table, representing a new unauthenticated user accessing the platform. The caller supplies a session_token (optionally), and the API captures access timestamps and identifiers. Guest records are used for analytic/audit purposes and may be referenced if the guest later registers or is flagged for unusual activity. Associated endpoints allow later read, update, or deletion. All input is validated as per IDiscussionBoardGuest.ICreate request schema.",
      "summary": "Create a guest record in discussion_board_guest (anonymous session tracking)",
      "parameters": [],
      "requestBody": {
        "description": "Data for new guest user creation (session token, etc.)",
        "typeName": "IDiscussionBoardGuest.ICreate"
      },
      "responseBody": {
        "description": "Created guest user record object",
        "typeName": "IDiscussionBoardGuest"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/guests",
      "method": "post"
    },
    {
      "specification": "Updates the record of a specific guest in the discussion_board_guest table, allowing for corrections or analytic enhancement (such as updating last_seen_at, session_token, or flagging anomalous activity). Only privileged system actors (e.g., admin) may access this endpoint. The target guest is selected by UUID path parameter.",
      "description": "The endpoint enables authorized actors to update data for a specific guest session record, identified by its unique UUID, in discussion_board_guest. Permitted changes may include session_token, last_seen_at, or other analytic fields. The operation does not convert the guest into a registered user, nor affect platform state for other users. Changes are validated and updates are logged for audit compliance as defined by platform policy. Associated endpoints include guest creation, retrieval, and deletion.",
      "summary": "Update a specific guest user record in discussion_board_guest (system only)",
      "parameters": [
        {
          "name": "id",
          "description": "Guest user unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the guest user record",
        "typeName": "IDiscussionBoardGuest.IUpdate"
      },
      "responseBody": {
        "description": "Updated guest user record",
        "typeName": "IDiscussionBoardGuest"
      },
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/guests/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a guest user record from discussion_board_guest, supporting cleanup, removal, or retention limit enforcement for guest analytics. Used primarily by system operators or admins. Ensures only records with valid UUIDs are deleted, and logs all deletions for audit and compliance.",
      "description": "This endpoint allows system actors to remove a single guest user record from discussion_board_guest, identified by its UUID. Commonly used for housekeeping, privacy, or retention-limiting after analytic periods expire. Related operations include read, list, and update. Record existence, authorization, and audit trails are strictly enforced. Errors for not found or insufficient permission are clearly defined.",
      "summary": "Delete a guest user record from discussion_board_guest (system clean-up)",
      "parameters": [
        {
          "name": "id",
          "description": "Target guest user's unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "authorization": {
        "role": [
          "admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/guests/{id}",
      "method": "delete"
    },
    {
      "specification": "Provides a paginated, filterable list of forum categories from discussion_board_forum_category. Designed to populate category dropdowns, support analytics, or power navigation menus. The request body can specify keyword, creation date ranges, or sorting, per the IDiscussionBoardForumCategory.IRequest interface.",
      "description": "Returns a pageable and optionally filtered collection of forum category records for the discussion board, supporting advanced UI navigation and analytics tools. Filters may be applied to category name, creation/update timestamps, and descriptions. Typically used by board UI, administrative dashboards, or search/autocomplete. Related endpoints handle individual category CRUD or category snapshot listings. Access may be open, or restricted to certain user roles depending on business policy. Pagination and search are integral for large boards. Response returns data in IPageDiscussionBoardForumCategory format.",
      "summary": "List/Filter forum categories in discussion_board_forum_category (navigation/analytic)",
      "parameters": [],
      "requestBody": {
        "description": "Pagination and filter/search criteria for forum categories",
        "typeName": "IDiscussionBoardForumCategory.IRequest"
      },
      "responseBody": {
        "description": "Paginated forum category list",
        "typeName": "IPageDiscussionBoardForumCategory"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumCategories",
      "method": "patch"
    },
    {
      "specification": "Fetches details of a specific forum category from discussion_board_forum_category, by its unique identifier. Used to display category information, settings, or analytic summaries in UI or admin panels. Only accessible if user has view permissions for this category.",
      "description": "Retrieves the full record of a forum category specified by UUID, including its name, description, creation/update dates, and other metadata. Interface supports category information panels, editing interfaces, or deep category search (either for navigation or analytic purposes). Related endpoints support creation, update, delete, and snapshot/history operations. Errors are clearly defined for not found or forbidden access cases.",
      "summary": "Get a single forum category record from discussion_board_forum_category",
      "parameters": [
        {
          "name": "id",
          "description": "The forum category's unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Forum category record details",
        "typeName": "IDiscussionBoardForumCategory"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumCategories/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new forum category record in discussion_board_forum_category, supporting the administrative addition of navigable topics to the discussion board. Restricted to authorized roles and enforces unique category name, description, and ordering per business rules.",
      "description": "This operation inserts a new forum category into discussion_board_forum_category, creating a new root navigational entity for discussions. Input must validate against IDiscussionBoardForumCategory.ICreate request schema, including unique name and optional description (enforced by business logic in the service layer). Upon success, returns the full created forum category record. Related endpoints include forum category update, delete, read and listing. The operation is usually restricted to admins and high-ranking moderators to avoid change collisions.",
      "summary": "Create a forum category in discussion_board_forum_category (admin/moderator only)",
      "parameters": [],
      "requestBody": {
        "description": "Payload to create a new forum category",
        "typeName": "IDiscussionBoardForumCategory.ICreate"
      },
      "responseBody": {
        "description": "Created forum category record",
        "typeName": "IDiscussionBoardForumCategory"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumCategories",
      "method": "post"
    },
    {
      "specification": "Updates the record for a given forum category (by UUID) in discussion_board_forum_category. Used for administrative correction, refinement, or retitling of board categories. Only permitted for users with proper access level (moderator/admin). Validates unique name and user access rights before update.",
      "description": "This endpoint enables privileged users (admins/moderators) to update an existing forum category's data, such as its name or description, based on unique category UUID. Sends updated data via the request body conforming to IDiscussionBoardForumCategory.IUpdate. Part of CRUD suite for category management; related endpoints handle creation, retrieval, deletion, and historical snapshotting. Business logic ensures unique name constraint and may restrict changing categories with dependent subcategories to avoid referential breaks. Returns the updated record upon success.",
      "summary": "Update a forum category record in discussion_board_forum_category (admin/moderator)",
      "parameters": [
        {
          "name": "id",
          "description": "Forum category unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Updated data for forum category",
        "typeName": "IDiscussionBoardForumCategory.IUpdate"
      },
      "responseBody": {
        "description": "Updated forum category record",
        "typeName": "IDiscussionBoardForumCategory"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumCategories/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a forum category from discussion_board_forum_category, supporting administrative/curatorial maintenance of top-level board categories. This may be restricted by referential integrity checks: only possible if no dependent subcategories. Only system admins or high-ranking moderators can execute this action.",
      "description": "Removes a forum category entity from the discussion_board_forum_category table by UUID. Deletion rules ensure that dependent subcategories are either migrated, deleted, or the action is blocked according to platform policy. Operation is logged for audit. Related endpoints cover category creation, update, listing, and recovery of deleted categories if supported. API returns errors for not found, insufficient permission, or business logic constraint violations. Action is reserved for admins/moderators only.",
      "summary": "Delete a forum category from discussion_board_forum_category (admin/mod only, referential checks)",
      "parameters": [
        {
          "name": "id",
          "description": "Target forum category unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumCategories/{id}",
      "method": "delete"
    },
    {
      "specification": "Returns a pageable, filterable list of all forum subcategories in discussion_board_forum_subcategory, supporting navigation, analytics, or admin management. The request body allows filtering by parent category, name, and supports standard pagination and sorting as per IDiscussionBoardForumSubcategory.IRequest.",
      "description": "This endpoint queries the discussion_board_forum_subcategory table and returns a paginated list suitable for powering UI navigation, analytics, or administrative subcategory management. Filters may apply to category ID, name, or creation/updated timestamps. Output is pageable and filterable via the request body, and the response uses IPageDiscussionBoardForumSubcategory schema. Related endpoints exist to create, update, read, or delete individual subcategories.",
      "summary": "List/filter forum subcategories in discussion_board_forum_subcategory",
      "parameters": [],
      "requestBody": {
        "description": "Filtering, search, and pagination info for listing forum subcategories",
        "typeName": "IDiscussionBoardForumSubcategory.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of forum subcategory records",
        "typeName": "IPageDiscussionBoardForumSubcategory"
      },
      "authorization": {
        "role": [
          "admin",
          "moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumSubcategories",
      "method": "patch"
    },
    {
      "specification": "Implements the retrieval of a specific forum subcategory by its unique identifier (UUID). This operation enables clients to view detailed information about a forum subcategory, satisfying requirements for topic organization and fine-grained discussion segmentation. It references the 'discussion_board_forum_subcategory' Prisma table, ensuring that the 'id' parameter corresponds to the subcategory's UUID. The endpoint is essential for displaying subcategory details in user interfaces, such as navigation and filters. It is designed to allow retrieval for browsing, editing, or moderation. The endpoint assumes role-based access where only users or admins authorized to view the forum category structure are permitted. Soft-deleted subcategories should be handled according to business logic (either excluded or flagged). Errors are returned if the subcategory does not exist or access is unauthorized.",
      "description": "This GET operation provides a detailed view of a single forum subcategory, as defined in the 'discussion_board_forum_subcategory' Prisma table. Each subcategory is uniquely identified by its 'id' (UUID), which must be provided as a path parameter. The API retrieves the metadata of the forum subcategory, including its parent category relationship, name, description, and timestamps for audit and UI display. The endpoint is protected by standard role-based access controls, such that only authorized users, moderators, or admins can retrieve subcategory details. The operation follows Prisma schema best practices: atomic values, soft-delete handling (nullable timestamps), and referential integrity, guaranteeing consistent and reliable data throughout the forum structure. If the specified subcategory is not found, the API returns an appropriate error (such as 404 Not Found).",
      "summary": "Get details of a specific forum subcategory (discussion_board_forum_subcategory) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "The UUID of the forum subcategory to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Forum subcategory details",
        "typeName": "IDiscussionBoardForumSubcategory"
      },
      "path": "/discussionBoard/forumSubcategories/{id}",
      "method": "get"
    },
    {
      "specification": "Implements creation of a new forum subcategory within the discussion board structure. This satisfies requirements for dynamic topic management, enabling administrators or moderators to expand or reorganize discussion areas. Utilizes the 'discussion_board_forum_subcategory' Prisma table for CRUD operations, with referential integrity to parent forum categories. Incoming request body must contain validated subcategory data (name, description, parent forum_category_id). Upon success, returns the created subcategory object, including the generated UUID and timestamps. Only users with appropriate permissions (usually administrators or moderators) are authorized. Duplicates or invalid references will trigger error responses.",
      "description": "This POST operation allows authorized users (typically admins or moderators) to create a new forum subcategory, supporting organizational requirements for hierarchical topic management in the discussion board. The request body maps to 'IDiscussionBoardForumSubcategory.ICreate' and must include referenced forum_category_id, subcategory name, and optional description. The operation enforces normalization and referential integrity by ensuring the 'forum_category_id' exists and the subcategory name is unique within its parent. On success, the operation returns the created subcategory record, including audit info. Validation errors (e.g., duplicate name, missing category) result in suitable errors. Business logic follows the Prisma schema's design for atomic, normalized values and audit timestamps.",
      "summary": "Create a new forum subcategory (discussion_board_forum_subcategory).",
      "parameters": [],
      "requestBody": {
        "description": "Data for creating a new forum subcategory",
        "typeName": "IDiscussionBoardForumSubcategory.ICreate"
      },
      "responseBody": {
        "description": "Created forum subcategory",
        "typeName": "IDiscussionBoardForumSubcategory"
      },
      "path": "/discussionBoard/forumSubcategories",
      "method": "post"
    },
    {
      "specification": "Implements the update of an existing forum subcategory's details, including its name, description, or parent category reference. Uses the 'discussion_board_forum_subcategory' Prisma table and follows the update patterns dictated by the requirements documents. Only authorized users (usually moderators or admins) may perform updates. The operation requires the subcategory's 'id' as a path parameter and the new field values in the request body. Updates are atomic, audit-timestamped, and follow strict validation on field uniqueness (e.g., name must remain unique within the parent). Returns the updated subcategory or an error if the subcategory is not found or the request is invalid.",
      "description": "This PUT operation enables modification of forum subcategory details, such as name, description, or forum_category_id. The endpoint is mapped to the 'discussion_board_forum_subcategory' entity, with the target subcategory identified by the 'id' path parameter. The request body ('IDiscussionBoardForumSubcategory.IUpdate') contains only changed fields or a full replacement set, following domain update best practices (atomicity, referential integrity, and audit timestamping). Authorization is enforced; unauthorized attempts will yield errors. Upon success, the response delivers the updated subcategory object for consumption in moderator/admin panels or configuration UIs. The operation guarantees correspondence with the latest normalized schema state.",
      "summary": "Update a forum subcategory (discussion_board_forum_subcategory) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the forum subcategory to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "New data for the forum subcategory.",
        "typeName": "IDiscussionBoardForumSubcategory.IUpdate"
      },
      "responseBody": {
        "description": "Updated forum subcategory record",
        "typeName": "IDiscussionBoardForumSubcategory"
      },
      "path": "/discussionBoard/forumSubcategories/{id}",
      "method": "put"
    },
    {
      "specification": "Implements deletion (typically soft-delete) of a forum subcategory from the discussion board structure, satisfying the administrative requirement to manage forum segmentation. Uses the 'discussion_board_forum_subcategory' Prisma table and adheres to normalized deletion logic (probable soft-delete via timestamp). The 'id' path parameter specifies the subcategory target. Deletion is allowed exclusively for users with high-level permissions (moderator or admin). Attempts to delete non-existent or protected subcategories (with dependent threads) return appropriate errors. Success results in a confirmation or the deleted (or now-inactive) subcategory record.",
      "description": "This DELETE operation authorizes moderators or administrators to remove a subcategory from the forum structure. Path parameter 'id' identifies the subcategory; the system checks for any dependent child threads prior to deletion, returning errors if deletion is blocked by business logic. Deletion is typically a soft-delete (sets 'deleted_at'), complying with auditability requirements. Operation adheres strictly to the Prisma schema for normalized entity handling, ensuring referential integrity. After successful deletion, the response confirms the change, providing either the now-deleted entity or a minimal confirmation object, per response contract.",
      "summary": "Delete a forum subcategory (discussion_board_forum_subcategory) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the forum subcategory to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Deleted subcategory (soft-delete) confirmation",
        "typeName": "IDiscussionBoardForumSubcategory"
      },
      "path": "/discussionBoard/forumSubcategories/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a filtered, paginated, and optionally sorted list of discussion threads, supporting advanced searching and forum navigation for users. Implements requirements for thread discovery, topic browsing, and searching by metadata (subcategory, author, title, etc.) as described in the requirements documentation. Utilizes the 'discussion_board_thread' table and supports query composition based on user search parameters. Ensures results respect soft-deletion, visibility, and user permissions. Returns paged data in a standard response envelope.",
      "description": "This PATCH operation enables complex listing, searching, and filtering of threads (forum topics) using the discussion_board_thread table, in accordance with requirements for scalable forum organization. The request body references 'IDiscussionBoardThread.IRequest' and may include filters by subcategory, author, creation date, keywords, or sorting options. The endpoint enforces access controls and returns relevant threads in a paged response ('IPageDiscussionBoardThread'), including pagination metadata (page size, number, etc.). Atomic field selection and normalized relationships ensure high performance and consistent output. Ergonomic for both user discovery experiences and admin dashboards. Handles empty result sets and validation errors responsibly.",
      "summary": "List/search discussion threads (discussion_board_thread) with filters and paging.",
      "parameters": [],
      "requestBody": {
        "description": "Filters, paging, and sorting info for thread search",
        "typeName": "IDiscussionBoardThread.IRequest"
      },
      "responseBody": {
        "description": "Paginated threads list",
        "typeName": "IPageDiscussionBoardThread"
      },
      "path": "/discussionBoard/threads",
      "method": "patch"
    },
    {
      "specification": "Retrieves details of a specific discussion thread, identified by its UUID. Supports user browsing, moderator review, or thread presentation as described in requirements. Draws data from the normalized 'discussion_board_thread' Prisma model, using the 'id' path parameter. The endpoint ensures users (or authorized guests) can access full metadata, thread structure, and related fields, excluding soft-deleted entities unless specifically permitted. Result enables rendering complete conversation context in the UI.",
      "description": "This GET operation fetches all details of a selected discussion thread, resolving relationships to posts and subcategory as needed. Backend logic relies on the 'discussion_board_thread' table, using the thread's UUID (id) for referential integrity and lookup. The endpoint incorporates standard permission checks, surfacing 404/403 errors for non-existent or restricted threads. Returned data is detailed, mapped to the latest normalized structure, and suitable for both display and in-depth moderation analysis (e.g., historical state, audit). Handles soft-deleted and hidden state per system rules.",
      "summary": "Get a specific discussion thread (discussion_board_thread) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the thread to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Thread details by ID",
        "typeName": "IDiscussionBoardThread"
      },
      "path": "/discussionBoard/threads/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new discussion thread in a specified forum subcategory. Implements requirements for user engagement, topic initiation, and thread creation permissions. Draws from the Prisma 'discussion_board_thread' table for core storage, referencing the author and subcategory. The request body must contain required thread attributes (title, forum_subcategory_id). Access controls restrict creation to registered users (members, moderators, admins). On success, provides the new thread's full details including generated UUID, timestamps, and normalized subcategory reference.",
      "description": "This POST operation initiates topic creation by accepting thread definition data (see 'IDiscussionBoardThread.ICreate'), creating a new record in the discussion_board_thread table. Required fields include title, subcategory reference, and author identification (authenticated user). The endpoint ensures unique thread titles within a subcategory and applies business validation for content, permissions, and state. On successful creation, response returns the normalized thread record for immediate navigation or display. Handles duplicate, unauthorized, or invalid requests with clear error feedback.",
      "summary": "Create a new discussion thread (discussion_board_thread).",
      "parameters": [],
      "requestBody": {
        "description": "Thread creation data.",
        "typeName": "IDiscussionBoardThread.ICreate"
      },
      "responseBody": {
        "description": "Created thread object",
        "typeName": "IDiscussionBoardThread"
      },
      "path": "/discussionBoard/threads",
      "method": "post"
    },
    {
      "specification": "Updates an existing discussion thread, supporting edits to title, subcategory, or moderation state. Implements forum requirement for post-publication changes and moderator/admin interventions. Target thread is identified by 'id' (UUID) path parameter, new data supplied in the request body. Uses the 'discussion_board_thread' table, updating atomic fields and enforcing unique title/per subcategory, referential integrity, and audit-timestamp logic. Access controls restrict operation to thread author or privileged roles; errors surfaced on unauthorized or invalid edits. Returns the updated thread object.",
      "description": "This PUT operation allows thread metadata to be edited, enabling users or moderators to update title, move threads to new subcategories, or enforce moderation actions per platform policy. The target is selected via path parameter 'id', with new values provided in 'IDiscussionBoardThread.IUpdate' format in the request body. Data integrity is maintained under Prisma relationships and normalized requirements. Audit timestamps are refreshed upon update, and all changes reflect immediately in read-side projections. Returns updated thread or error information if constraints or permissions block the action.",
      "summary": "Update a discussion thread (discussion_board_thread) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the thread to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Updated thread data.",
        "typeName": "IDiscussionBoardThread.IUpdate"
      },
      "responseBody": {
        "description": "Updated thread details",
        "typeName": "IDiscussionBoardThread"
      },
      "path": "/discussionBoard/threads/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes (soft-deletes) a discussion thread identified by its UUID. Satisfies requirements for moderation, content removal, and administrative clean-up. Utilizes the 'discussion_board_thread' Prisma table's soft-delete facilities (deleted_at). Thread is referenced by 'id' path parameter. Access requires thread author, moderator, or admin role. If successful, returns a deletion confirmation or the deleted thread object. Attempts to delete non-existent or already-deleted threads return suitable errors.",
      "description": "This DELETE operation soft-deletes a thread entity by updating the 'deleted_at' timestamp in accordance with forum moderation policy. The endpoint enforces business rules for authorship and moderator/admin permissions, drawing thread records from the discussion_board_thread table using a validated UUID. The response returns a confirmation or the deleted record, suit for audit logging and user notification. Handles edge cases (thread not found, access denied, dependent resources) responsibly, in line with best practices for 3NF data integrity and role-based access security.",
      "summary": "Delete a discussion thread (discussion_board_thread) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the thread to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Deleted thread (soft-delete) confirmation",
        "typeName": "IDiscussionBoardThread"
      },
      "path": "/discussionBoard/threads/{id}",
      "method": "delete"
    },
    {
      "specification": "Returns a filtered, paginated, and optionally sorted list of posts for advanced thread or forum exploration. Implements requirements for in-depth post discovery, full-text search, and navigation by metadata (author, thread_id, parent_post_id, etc.). Based on the Prisma 'discussion_board_post' table's structure and 3NF design. Accepts request body with search/pagination/sort fields. Ensures only visible and authorized posts are returned; handles soft deletion and hierarchical (parent/child) queries. Response is standard paginated list.",
      "description": "This PATCH operation provides a robust search and listing tool for posts within the discussion board, supporting UI/features for browsing, moderator review, and analytics. The request body ('IDiscussionBoardPost.IRequest') allows filter criteria such as thread, author, parent (for reply/child post), content keyword, date range, etc. The endpoint applies business logic for visibility, access, and normalized output, returning paginated results in the 'IPageDiscussionBoardPost' model. Handles empty results, overflows, and input validation as per frontend/UX needs. Implements best practices for scalable search and normalized data returns per the Prisma schema.",
      "summary": "List/search posts (discussion_board_post) with filters and paging.",
      "parameters": [],
      "requestBody": {
        "description": "Posts search/filter/pagination info",
        "typeName": "IDiscussionBoardPost.IRequest"
      },
      "responseBody": {
        "description": "Paginated posts list",
        "typeName": "IPageDiscussionBoardPost"
      },
      "path": "/discussionBoard/posts",
      "method": "patch"
    },
    {
      "specification": "Fetches details of an individual post in the discussion board, identified by its UUID. This endpoint is critical for thread detail pages, moderation tools, or client-side routing. Relies on the 'discussion_board_post' Prisma table for core post information. Uses 'id' path parameter. Ensures correct permissions and visibility (author, moderator, admin, or authorized guest). Returns detailed, normalized post metadata and relationships (thread, author, parent_post) for full render context.",
      "description": "This GET operation obtains all data regarding a specific post entity, including its content, author info, relationships, timestamps, and current visibility/delete status. Matches the 'discussion_board_post' table directly by 'id' (UUID). Error handling covers not found, unauthorized, and deleted post cases. Data is modeled per the normalized schema for integration into full thread views, moderator investigation screens, and user notification systems. All audit and integrity constraints from the Prisma DB are strictly observed.",
      "summary": "Get a specific post (discussion_board_post) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the post to look up.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Post details by ID",
        "typeName": "IDiscussionBoardPost"
      },
      "path": "/discussionBoard/posts/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new post, either as a thread starter or as a reply. Satisfies requirements for user contributions and rich content submission. Uses the 'discussion_board_post' Prisma table, referencing author (discussion_board_user), thread, and optionally parent_post_id for reply chaining. Request body must contain post data, content, and proper references. Only authenticated and authorized users may create posts. Operation handles validation (thread existence, parent_post integrity, visibility settings) and responds with full post details upon success.",
      "description": "This POST operation enables registered users to submit new posts (topics or replies) using an atomic, normalized format per Prisma 'discussion_board_post' schema. Required fields include thread_id (for association), parent_post_id (if reply), author_id (authenticated user), and content. Business logic ensures referenced threads and posts exist, that the user is valid, and that all constraints are respected. On successful creation, the response delivers the post record with full relationship context for UI rendering or further processing. Edge cases (invalid references, permission errors, duplicate/overposted content) are handled by robust error responses.",
      "summary": "Create a new post (discussion_board_post).",
      "parameters": [],
      "requestBody": {
        "description": "Post creation information",
        "typeName": "IDiscussionBoardPost.ICreate"
      },
      "responseBody": {
        "description": "Created post details",
        "typeName": "IDiscussionBoardPost"
      },
      "path": "/discussionBoard/posts",
      "method": "post"
    },
    {
      "specification": "Update a post in the discussion board. This operation targets a specific post by its unique ID and allows changing the content, attachments (via linked attachment records), or updating reference values like thread, parent post, etc. The operation references the discussion_board_post table, which tracks all posts (both thread starters and replies) in the forum structure. Updating a post typically requires permission validation (author or moderator/admin), and a successful call will overwrite the relevant columns and update the timestamp. Related functionality: Soft delete is handled in a different operation; see delete endpoint. This update should validate thread and author relations, enforce moderation rules, and audit history as per updating guidelines.",
      "description": "This API updates an existing post in the discussion board. It supports changes to the content, linked attachments (through post_attachment_link), and can update parent-child reply relationships if provided. The update operation requires that the post exists and that the calling user has the necessary permissions (author, admin, or moderator). The operation writes changes to the discussion_board_post table, referencing business logic around post modification tracking, edit timestamps, and moderation checks (e.g., cannot modify posts after a certain age unless moderator). Validation includes checking thread and parent_post referential integrity, updating \"updated_at\", and rejecting updates if the post is soft-deleted or the user is banned. Related endpoints: delete (for soft/hard deletion), get (for viewing the post).",
      "summary": "Update a discussion_board_post record by its ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the post to update (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update information for the discussion board post.",
        "typeName": "IDiscussionBoardPost.IUpdate"
      },
      "responseBody": {
        "description": "The updated post record after applying changes.",
        "typeName": "IDiscussionBoardPost"
      },
      "path": "/discussionBoard/posts/{id}",
      "method": "put"
    },
    {
      "specification": "Soft-delete an existing post from the discussion board, given its ID. This operation only marks the post as deleted by setting the deleted_at column, and is primarily used for moderation, compliance, or user-driven post removal. The data remains available for audit/history purposes but is excluded from standard listing queries. Associated with the discussion_board_post table from ForumStructure. Soft-deletion should cascade or hide children as per forum policy, and is subject to permission checks (author-only, moderator, or admin).",
      "description": "Marks a specific post (by UUID) as deleted, without physically removing it from the database. This operation writes the current timestamp to the deleted_at column, thereby hiding the post from ordinary views and enforcing retention for moderation/audit. Business logic should check for user authorization (author or moderator/admin), and prevent deletion if policy disallows (e.g., too old, replies exist). Caution: hard deletion is not performed by this endpoint. Related operations: update for modification, get for viewing, and restore if available.",
      "summary": "Soft-delete a discussion_board_post record by its ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the post to delete (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of soft-deletion or the updated post record (with deleted_at set).",
        "typeName": "IDiscussionBoardPost"
      },
      "path": "/discussionBoard/posts/{id}",
      "method": "delete"
    },
    {
      "specification": "Search or list all thread tags in the discussion board. Executes complex filtering, fulltext search, or pagination over the discussion_board_thread_tag table. Used for discovering tags (topics/labels) attached to threads for categorization and filtering. May include sorting by name, usage count, or recency. Related to discoverability and suggested topics features. Typical consumers: tag cloud widgets, admin/management interfaces, or advanced search.",
      "description": "Fetches a paginated, optionally filtered list of all thread tags. This includes support for fulltext searching on name or description, sorting, and control over result pagination. Useful for suggesting tags, tag management, analytics, or query UIs with advanced tag filtering. The endpoint handles list retrieval, combining query request data (like search term, limit, cursor) with sorting directives. Underlying table is discussion_board_thread_tag. Related endpoints: single tag get, tag creation/update/delete.",
      "summary": "List/search discussion_board_thread_tag records (tags used for thread categorization).",
      "parameters": [],
      "requestBody": {
        "description": "Filtering, searching, and pagination options for thread tag listing.",
        "typeName": "IDiscussionBoardThreadTag.IRequest"
      },
      "responseBody": {
        "description": "Paginated and filtered tag results (with pagination info and tag summaries).",
        "typeName": "IPageIDiscussionBoardThreadTag"
      },
      "path": "/discussionBoard/threadTags",
      "method": "patch"
    },
    {
      "specification": "Get a specific thread tag by its unique identifier. Returns all details of the designated tag, as found in the discussion_board_thread_tag table. Used for viewing a tag's metadata, such as name, description, and status. May be used by admins for tag management or by the UI for displaying tag information. Integrity checks: verify existence and not deleted, and enforce permission checks if tags are hidden/archived.",
      "description": "Retrieves all metadata of a single thread tag given its UUID. This includes its name, description, creation and update timestamps, and soft-delete status. Only surface visible tags as appropriate (not deleted), unless user is admin. Used for management or UI display. Underlying entity: discussion_board_thread_tag. Related endpoints: patch (for list/search), post (for creation), put (for update), delete (for archive), etc.",
      "summary": "Fetch details for a single discussion_board_thread_tag by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the thread tag to fetch (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The full tag record, including metadata.",
        "typeName": "IDiscussionBoardThreadTag"
      },
      "path": "/discussionBoard/threadTags/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new thread tag within the discussion board. This adds a new topic label to the discussion_board_thread_tag table for use in thread classification and filtering. Tag names must be unique (see Prisma schema constraint), and business logic may validate for allowed characters and semantic meaning. The operation also records creation and update timestamps. Used by administrators or advanced users for taxonomy management. Tags may be soft-deletable; related tags may trigger suggestions or normalization.",
      "description": "Creates a new thread tag providing a unique name and optional description. This is used for categorizing and filtering threads, supporting board organization and content discovery. Validation checks include uniqueness (tag name) and possibly semantic validation via business logic. Audit and moderation policies may apply to tag creation. Related endpoints: patch (for tag search/list), put (for update), delete (for disabling), get (for retrieval by ID). Underlying table: discussion_board_thread_tag.",
      "summary": "Create a new discussion_board_thread_tag (thread categorization label).",
      "parameters": [],
      "requestBody": {
        "description": "Information required to create a new thread tag.",
        "typeName": "IDiscussionBoardThreadTag.ICreate"
      },
      "responseBody": {
        "description": "The newly-created thread tag record.",
        "typeName": "IDiscussionBoardThreadTag"
      },
      "path": "/discussionBoard/threadTags",
      "method": "post"
    },
    {
      "specification": "Update properties of an existing thread tag using its unique identifier. This modifies fields such as name or description in the discussion_board_thread_tag table. Updatable properties may be limited by business rules (e.g., cannot change a tag's name if attached to active threads). Integrity enforced via uniqueness and soft-delete logic. Used for tag management and taxonomy curation, primarily by administrators.",
      "description": "Updates the metadata of an existing thread tag identified by UUID. Permits changes to properties like name (unique check), description, or status. The request must contain only updatable attributes. Validation includes referential integrity checks (if tag is in use), audit trail of changes, and moderation review if needed. Affects the discussion_board_thread_tag table. Related: get (view), patch (list/search), post (create), delete (disable/archive).",
      "summary": "Update a discussion_board_thread_tag record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the thread tag to update (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields and metadata for updating the tag.",
        "typeName": "IDiscussionBoardThreadTag.IUpdate"
      },
      "responseBody": {
        "description": "The updated tag record after modifications are applied.",
        "typeName": "IDiscussionBoardThreadTag"
      },
      "path": "/discussionBoard/threadTags/{id}",
      "method": "put"
    },
    {
      "specification": "Delete or soft-delete an existing thread tag by its unique identifier. Reflects changes in the discussion_board_thread_tag table, specifically by marking as deleted (deleted_at) rather than removing all records for audit/history purposes. Requires admin or moderator authorization and safeguards against deleting tags in use. Related business rules: cannot delete tags attached to active threads without migration or force operation. Returns updated tag record (with deletion marked) or confirmation. Audit log is updated accordingly.",
      "description": "Soft-deletes a thread tag, hiding it from user-visible lists and tag clouds, but retaining it for audit, rollback, and moderation. Attempts to delete tags still attached to active threads should raise errors or require confirmation/migration pathways. Validates that the requesting user is authorized (admin/moderator) and that the tag is not otherwise protected. The record is not physically deleted. Underlying table: discussion_board_thread_tag. Related endpoints: patch (search/list), post (create), get (retrieve), put (update).",
      "summary": "Soft-delete (archive) a discussion_board_thread_tag record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the thread tag to delete (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The updated tag record with deletion timestamp set, or confirmation.",
        "typeName": "IDiscussionBoardThreadTag"
      },
      "path": "/discussionBoard/threadTags/{id}",
      "method": "delete"
    },
    {
      "specification": "List or search all forum category snapshots—the historical states of categories—using advanced filters or pagination. This operation targets the discussion_board_forum_category_snapshot table, which implements audit history for forum categories. Allows admin, moderators, or auditors to view the change history of category names, descriptions, and the users who made changes, supporting audit trails, rollback, or moderation transparency. Advanced filtering by created date, category, or actor may be needed.",
      "description": "Fetches a paginated and optionally filtered set of forum category snapshots. Each snapshot represents a point-in-time record of a category's settings, including its name, description, and the user who made the change. Advanced filtering enables searches by category, user, dates, or actions. Standard pagination and sorting enhance performance and usability. Underlying table: discussion_board_forum_category_snapshot; related: category, user. Used primarily for audit and moderation review, rollback analysis, and transparency reporting.",
      "summary": "List/search discussion_board_forum_category_snapshot records (category version history).",
      "parameters": [],
      "requestBody": {
        "description": "Filtering/search/pagination options for forum category snapshot search.",
        "typeName": "IDiscussionBoardForumCategorySnapshot.IRequest"
      },
      "responseBody": {
        "description": "Paginated set of category snapshots with filtering metadata.",
        "typeName": "IPageIDiscussionBoardForumCategorySnapshot"
      },
      "path": "/discussionBoard/forumCategorySnapshots",
      "method": "patch"
    },
    {
      "specification": "Get a snapshot record for a given forum category snapshot ID. Intended for audit, moderation review, or rollback. The snapshot is drawn from the discussion_board_forum_category_snapshot table—a point-in-time version of a forum category's name, description, and associated user. Admins and moderators may use this operation for analysis, transparency, or rollbacks. Business rules should ensure only existing/unmodified (not deleted) snapshots are returned unless otherwise privileged.",
      "description": "Retrieves metadata for a specific forum category snapshot using its unique UUID. This includes point-in-time category info (name, description), the change author, and time of change. The operation mainly supports administrative and moderation needs for audit trail and rollback review. Underlying table: discussion_board_forum_category_snapshot. Related: patch (search/list), put (update), post (create), delete (remove).",
      "summary": "Fetch a single discussion_board_forum_category_snapshot by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the forum category snapshot (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The forum category snapshot record, including metadata.",
        "typeName": "IDiscussionBoardForumCategorySnapshot"
      },
      "path": "/discussionBoard/forumCategorySnapshots/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new historical snapshot for a forum category. This is used to store the state of a category at a particular point (for audit, rollback, or compliance). The snapshot records the category's values, the user who triggered the change, and the change timestamp. References the discussion_board_forum_category_snapshot table. Only privileged (admin/moderator) actors should call this API. Creation triggers may include category update, manual backup, or moderation workflows. Integrity validation includes source category and user existence, duplicate snapshot windows, and referencing live entities.",
      "description": "Creates a record in the discussion_board_forum_category_snapshot table to save the state of a forum category for auditing or rollback. The request includes the source category ID, change author, name, description, and snapshot timestamp. This is used by moderation or admin tools to preserve change history, enable transparency, and comply with rollback and audit policies. Creation is limited to privileged actions. Related endpoints: patch (search/list), get (fetch), put (modify/restore), delete (erase for compliance).",
      "summary": "Create a new discussion_board_forum_category_snapshot (for audit/rollback).",
      "parameters": [],
      "requestBody": {
        "description": "Information to create a category snapshot record.",
        "typeName": "IDiscussionBoardForumCategorySnapshot.ICreate"
      },
      "responseBody": {
        "description": "The new forum category snapshot record created.",
        "typeName": "IDiscussionBoardForumCategorySnapshot"
      },
      "path": "/discussionBoard/forumCategorySnapshots",
      "method": "post"
    },
    {
      "specification": "Update an existing forum category snapshot, by its snapshot ID—for example, if correcting metadata or retroactively attaching author info. Applies to records in the discussion_board_forum_category_snapshot table. This operation should only be available for absolute corrections or compliance (e.g., patching an audit record with the correct user/metadata). Integrity and audit must be extremely strict. Used by system admins or compliance staff.",
      "description": "Updates permitted attributes of a forum category snapshot by unique ID. Permitted fields include retroactive correction of author/user reference, or amending name/description for compliance or legal requirements (not typical business operations). Strict logging, audit trail, and privilege validation are mandatory. The operation references the discussion_board_forum_category_snapshot table. Related: post (create new), get (fetch existing), delete (for removal/rollback), patch (list/search).",
      "summary": "Update a discussion_board_forum_category_snapshot record by ID (admin/compliance).",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the category snapshot to update (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Correction metadata or field updates for the snapshot record.",
        "typeName": "IDiscussionBoardForumCategorySnapshot.IUpdate"
      },
      "responseBody": {
        "description": "The updated forum category snapshot record after correction.",
        "typeName": "IDiscussionBoardForumCategorySnapshot"
      },
      "path": "/discussionBoard/forumCategorySnapshots/{id}",
      "method": "put"
    },
    {
      "specification": "Delete or erase a historical forum category snapshot by ID. This action is typically used only in strict regulatory/administrative contexts: for example, removal after legal retention periods or to redact data. Targets a single record in the discussion_board_forum_category_snapshot table. Physical/hard delete may be applied, or soft-delete via a flag (null for deleted_at, depending on business policy). Integrity and privilege checks are mandatory. Caution: Erasing audit records is a sensitive action and must be fully logged.",
      "description": "Deletes (hard or soft, based on policy) a particular forum category snapshot, specified by its UUID. Only allowed for admin or compliance roles, with full audit trail logging and justification recorded. This ensures compliance with legal, regulatory, or privacy erase requirements. Underlying table: discussion_board_forum_category_snapshot. Related endpoints: patch (search/list), get (fetch), post (create), put (update for corrections).",
      "summary": "Delete (erase) a discussion_board_forum_category_snapshot by ID (compliance/audit).",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the forum category snapshot to delete (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of snapshot record removal, or the erased record for audit trail.",
        "typeName": "IDiscussionBoardForumCategorySnapshot"
      },
      "path": "/discussionBoard/forumCategorySnapshots/{id}",
      "method": "delete"
    },
    {
      "specification": "This operation retrieves a paginated, searchable, and filterable list of forum subcategory snapshot records from the 'discussion_board_forum_subcategory_snapshot' table. Forum subcategory snapshots store point-in-time versions of subcategory metadata (such as name, description, and change authorship) for audit trails, compliance, and rollback functionality. The endpoint supports advanced querying, allowing moderators and admins to audit all changes, filter by time, user, or subcategory, and view modifications for compliance investigations or rollback scenarios. The request body enables specifying search or filter criteria like forum_subcategory_id, created_by_id, or snapshot_created_at intervals, as well as pagination and sorting preferences. Access is typically restricted to moderators and higher-level users, as ordinary users do not require audit-level access to snapshot history.",
      "description": "This endpoint provides a list of all forum subcategory snapshots, each representing a historical version of a subcategory. These records support audit trails, moderation compliance, and potential restoration of previous subcategory states as described in the Prisma schema. Only moderators or admins should access this endpoint.\n\nThe endpoint accepts a request body to specify search, filtering, pagination, and sorting options. It allows narrow queries by forum_subcategory_id, created_by_id, or time range, and supports sorting the results by snapshot creation date or subcategory association. The response is a paginated structure containing basic snapshot metadata and navigation details. Soft-deleted snapshots are typically excluded from results unless a special flag is specified.\n\nError responses include improper permissions (403), malformed query parameters (400), or internal server errors (500). Requests should be authenticated with an appropriate staff-level (moderator/admin) token.",
      "summary": "List/filter forum subcategory snapshots from discussion_board_forum_subcategory_snapshot.",
      "parameters": [],
      "requestBody": {
        "description": "Search/filter/pagination input for retrieving subcategory snapshots.",
        "typeName": "IDiscussionBoardForumSubcategorySnapshot.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of forum subcategory snapshots with filtering info.",
        "typeName": "IPageIDiscussionBoardForumSubcategorySnapshot"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumSubcategorySnapshots",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves the details of a specific forum subcategory snapshot identified by its unique ID from the 'discussion_board_forum_subcategory_snapshot' table. Forum subcategory snapshots provide immutable, historical records of changes to forum subcategories (e.g., name, description, author, and timestamp), supporting audits, compliance, and rollback features. This operation is essential for detailed examination of who changed what, when, why, and for reviewing the exact subcategory state at a given point in time.",
      "description": "This endpoint returns the full details of a forum subcategory snapshot based on its unique ID. It is typically used by moderators or administrators reviewing moderation actions, performing audits, or preparing a rollback to an earlier forum subcategory state. The Prisma schema comments highlight that snapshots are immutable, 1:N related to the subcategory and to the user who made the change, and store atomic fields only.\n\nAccess is restricted to users with moderator or admin roles (authorization required). A correct UUID ID is required as a path parameter. Errors include not found (404), unauthorized/forbidden (401/403), and server issues (500). The response includes all snapshot record fields and relationships per schema, with full audit details.",
      "summary": "Get forum subcategory snapshot detail by ID from discussion_board_forum_subcategory_snapshot.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) of the forum subcategory snapshot to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Details of a single forum subcategory snapshot record.",
        "typeName": "IDiscussionBoardForumSubcategorySnapshot"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumSubcategorySnapshots/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new forum subcategory snapshot record in the 'discussion_board_forum_subcategory_snapshot' table. Forum subcategory snapshots are used to capture an immutable, point-in-time record of a subcategory's state (e.g., name, description, author) when a change is made. This allows compliant audit trails, accountability, and potential rollback functionality for forum subcategories, as outlined in the Prisma schema documentation. The POST operation is generally triggered by moderation/admin actions that modify subcategory metadata or when explicit snapshotting is required for record-keeping.",
      "description": "This endpoint allows moderators or admins to create a new forum subcategory snapshot. It is typically invoked during administrative edits to forum subcategory metadata (name, description), to preserve a copy of the subcategory's state before or after a change for full audit compliance. The Prisma schema requires that snapshots include references to the source subcategory and the user responsible for the change, along with the name/description values.\n\nAccess is restricted to staff-level users with moderator or admin roles, with write authority. The request body must be a complete snapshot as per the form fields described in the schema. Validations are performed for data integrity, and errors include missing fields (400), forbidden access (403), and internal errors (500). The response returns the newly created snapshot record, confirming its persistent record in the audit log.",
      "summary": "Create forum subcategory snapshot in discussion_board_forum_subcategory_snapshot.",
      "parameters": [],
      "requestBody": {
        "description": "Snapshot creation input containing all fields per schema.",
        "typeName": "IDiscussionBoardForumSubcategorySnapshot.ICreate"
      },
      "responseBody": {
        "description": "Details of the created forum subcategory snapshot record.",
        "typeName": "IDiscussionBoardForumSubcategorySnapshot"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumSubcategorySnapshots",
      "method": "post"
    },
    {
      "specification": "This operation updates an existing forum subcategory snapshot record in the 'discussion_board_forum_subcategory_snapshot' table, identified by its unique ID. Although forum subcategory snapshots are generally meant to be immutable for audit integrity (as described in the schema comments), this endpoint is available for exceptional adjustments—such as post-creation correction of metadata (e.g., recording error correction, legal compliance updates), but not for altering the original content of snapshots. Use cases should be limited and carefully audited.",
      "description": "This endpoint allows for updates to a forum subcategory snapshot, identified by ID. The Prisma schema's comments detail the expectation that snapshots are typically immutable, so this should only be used in rare cases where corrections are legally required or for fixing major audit discrepancies (for example, to correct abusive content that must not be published, or to annotate a snapshot for legal hold). Use of this endpoint is heavily restricted—only moderators/admins with the highest authority should have access.\n\nRequires the unique snapshot ID as a path parameter. The request body must specify only allowed fields as permitted by business rules (e.g., correction_reason, update_meta). Attempting to change historical fields in ways that break audit trails should be strictly forbidden by both application and review logic. Error conditions include not found (404), forbidden (403), and validation errors (400).\n\nEvery modification is itself auditable, and reasons for change should be logged. The response returns the updated snapshot record as an assurance of the change. Usage should be closely monitored.",
      "summary": "Update forum subcategory snapshot (exceptional cases) in discussion_board_forum_subcategory_snapshot.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) of the forum subcategory snapshot to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields allowed to update in snapshot correction context.",
        "typeName": "IDiscussionBoardForumSubcategorySnapshot.IUpdate"
      },
      "responseBody": {
        "description": "The modified forum subcategory snapshot record (audit details).",
        "typeName": "IDiscussionBoardForumSubcategorySnapshot"
      },
      "authorization": {
        "role": [
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumSubcategorySnapshots/{id}",
      "method": "put"
    },
    {
      "specification": "This operation deletes (removes) a forum subcategory snapshot record from the 'discussion_board_forum_subcategory_snapshot' table, identified by its unique ID. Although forum subcategory snapshots are intended to be immutable and persistent for auditability (see schema), deletion may be required for legal, privacy, or other exceptional compliance reasons (e.g., GDPR right to erasure). This is a destructive and highly privileged operation, requiring admin-level authorization and careful action auditing.",
      "description": "This endpoint deletes a forum subcategory snapshot record, identified by ID. According to the Prisma schema, such deletion should be rare and highly restricted, as snapshots form part of the system's compliance and audit trail. Use this operation only where law, platform policy, or legal rulings compel removal (such as GDPR or explicit court orders). All deletion actions must be logged, authorized at the highest admin level, and the action itself should create an immutable record elsewhere for traceability.\n\nA valid UUID ID is required in the path parameter. Errors include not found (404), forbidden (403), and server errors (500). The response confirms the deletion or returns appropriate failure details. This operation is not reversible and should be subject to platform warnings and double-confirmation workflows.",
      "summary": "Delete forum subcategory snapshot by ID from discussion_board_forum_subcategory_snapshot.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the forum subcategory snapshot to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Status of successful deletion or audit record.",
        "typeName": "IDeleteResult"
      },
      "authorization": {
        "role": [
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/forumSubcategorySnapshots/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a list of comments (with rich search, filtering, pagination) from the 'discussion_board_comment' table. This supports advanced browsing for forum admins/moderators to audit comments, enables end users to locate their own or relevant comments, and underpins moderation tooling. It covers core forum requirements like threaded comment discovery. The request body structure must match IDiscussionBoardComment.IRequest for search/filter criteria (comment content/text search, post association, author, time intervals etc.), and paginates the result using a standard page container.",
      "description": "This endpoint returns a paginated and filterable list of comments, each representing a direct response to a post within a discussion thread. Comments are linked to both the parent post and the author, as described in the schema. The response includes rich metadata for UI, search, moderation, and user profile purposes, including full support for text-based search, author-based filtering, or parent-post selection.\n\nRequest body parameters can specify filters like user_id, post_id, textual content search (with trigrams), created/updated time intervals, and various pagination/sorting options. Only comments not soft-deleted are shown unless otherwise specified. Error cases include malformed requests, permissions, or system errors. Accessible to any authenticated user for their own comments; advanced cross-user search requires moderator/admin roles.",
      "summary": "List/search comments from discussion_board_comment with full filter support.",
      "parameters": [],
      "requestBody": {
        "description": "Search/filter/pagination input for comments.",
        "typeName": "IDiscussionBoardComment.IRequest"
      },
      "responseBody": {
        "description": "Paginated, filterable container of comment records.",
        "typeName": "IPageIDiscussionBoardComment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/comments",
      "method": "patch"
    },
    {
      "specification": "Retrieves details of a specific comment by unique ID from the 'discussion_board_comment' table, with full resolution of relations for audit, moderation, and profile display. Used directly from comment thread UIs. Enforces secure, individual record read.",
      "description": "This endpoint returns all fields of a comment record by its unique identifier. The Prisma schema comments highlight that each comment captures atomic content and references the author, parent post, and supports full audit history and edit/delete tracking. The operation supports all standard error scenarios: not found (404), unauthorized (401), forbidden (403), and server (500). Only authenticated users can access; viewing comment content is generally public, but user-specific data may be restricted unless permissions allow. Soft-deleted comments may be hidden to ordinary users unless a moderation context is given. The result includes comment metadata, body, author, timestamps, and any auditing linkages.",
      "summary": "Get comment details by ID from discussion_board_comment.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the comment to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Details of the single discussion_board_comment record.",
        "typeName": "IDiscussionBoardComment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/comments/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new comment in the 'discussion_board_comment' table. Comments represent user responses to posts (not replies to other comments). Follows schema rules: every comment must reference a post and a user (author). Typical use-case is a logged-in user posting a new comment in an active thread. The request body includes the atomic fields (content, post_id, author_id) as per schema.",
      "description": "This endpoint allows the creation of a top-level comment (direct reply to a post, not a reply to another comment) on a discussion post, capturing content, author, and the parent post association as required in the Prisma schema. Input must supply the full set of required fields. The API enforces all validation rules (e.g., content not empty, post/post author must exist, user authorized to comment). Error scenarios include 400 for invalid input, 403 for insufficient privileges, 404 if target post does not exist, and 500 for server issues. The response includes the fully constructed comment record, including relationships and timestamps. Comment creation may trigger notifications for interested parties as per notification service.",
      "summary": "Create a new post comment in the discussion_board_comment table.",
      "parameters": [],
      "requestBody": {
        "description": "Comment creation fields: content, author, parent post, etc.",
        "typeName": "IDiscussionBoardComment.ICreate"
      },
      "responseBody": {
        "description": "The newly created comment record details.",
        "typeName": "IDiscussionBoardComment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/comments",
      "method": "post"
    },
    {
      "specification": "Updates a comment in the 'discussion_board_comment' table, identified by its unique ID. Applicable fields include content, with edit audit-trail in schema. Edit permission enforced (only author, moderator, or admin).",
      "description": "This endpoint allows editing an existing comment by its ID, per schema requirements that each comment may be edited (with updated_at tracking and audit support). The endpoint first checks that the requestor is the comment author, a moderator, or an admin. Updates are restricted to eligible fields (e.g., content, last updated timestamp). Errors include 404 not found, 403 forbidden if not author/mod, or 400 for invalid input. A successful update returns the complete new comment record. Old versions may be preserved for audit if site moderation requires.",
      "summary": "Edit/update comment content/details by ID in discussion_board_comment.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the comment to edit.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Editable fields for comments (e.g. content); schema driven.",
        "typeName": "IDiscussionBoardComment.IUpdate"
      },
      "responseBody": {
        "description": "Updated comment record after modification.",
        "typeName": "IDiscussionBoardComment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/comments/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a comment from the 'discussion_board_comment' table, identified by its unique ID. Uses soft deletion to preserve audit history as required by forum moderation policies.",
      "description": "This endpoint soft-deletes a comment record by its ID, marking deleted_at in the schema to preserve moderation, rollback, and audit trail requirements. The operation is available to the author, site moderators, or admins as permitted by forum policy. Non-authors cannot delete except as a moderator or admin (permissions enforced). Deletion triggers notifications and audit entries for compliance. Responses include success confirmation or errors for not found (404), forbidden (403), or server failures (500). The deleted record is not physically removed, but marked as deleted for audit and compliance.",
      "summary": "Delete (soft) a comment by ID in discussion_board_comment (for audit compliance).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of comment to delete (soft).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result status or deleted record information.",
        "typeName": "IDeleteResult"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/comments/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a list of comment-reply records (with search, filter, and pagination) from the 'discussion_board_comment_reply' table. This supports browsing threaded/nested reply conversations, typically for moderators, thread authors, or user activity pages. The request body uses the IDiscussionBoardCommentReply.IRequest type as a container for search criteria like parent_comment_id, user_id, content/text, created_at range, etc.",
      "description": "This endpoint lists or searches comment-replies, which are thread-level second-level responses, extending the base comment-reply logic in the schema. Filter/search fields can include comment author, parent comment, content search (gin_trgm), and temporal windows (created/updated). Pagination is applied for efficient large-set view. Non-authorized users may not see deleted/hidden replies. Most common usage is for presenting nested or threaded views under each post comment or for moderator audit. Error scenarios include 400 for malformed filter, 401/403 for permission errors, and 500 for internal failures. Soft-deleted replies are generally hidden from normal listing but may be requested with moderator privileges.",
      "summary": "List/search comment-replies from discussion_board_comment_reply with filtering and pagination.",
      "parameters": [],
      "requestBody": {
        "description": "Container for comment-reply search/filter/paging criteria.",
        "typeName": "IDiscussionBoardCommentReply.IRequest"
      },
      "responseBody": {
        "description": "Paginated/filtered results of comment-reply records.",
        "typeName": "IPageIDiscussionBoardCommentReply"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentReplies",
      "method": "patch"
    },
    {
      "specification": "Retrieves the details of a single comment-reply by its unique identifier from the 'discussion_board_comment_reply' table. Used in threaded views for showing exact reply content, metadata, author, etc. Requires correct ID and role-based permissions.",
      "description": "This endpoint returns the full details of a specific comment-reply, resolving the discussion_board_comment_reply record and related entities (parent comment, author, etc.) as described in the schema. Useful in threaded display, moderation tools, and user profile activity pages. Soft-deleted replies are generally suppressed except for moderator views or author self-access. Standard errors: 404 for not found, 403 for unauthorized access, 500 for server problems. Permissions enforced by user role. Successful result includes all fields and metadata from schema with full audit trail.",
      "summary": "Get comment-reply detail by ID from discussion_board_comment_reply.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique UUID of the comment-reply to fetch.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed record of the requested comment-reply.",
        "typeName": "IDiscussionBoardCommentReply"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentReplies/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new reply to an existing comment. This operation implements the discussion_board_comment_reply table from the schema, allowing a registered user to reply to a parent comment. The API must receive the parent comment ID, authoring user, and content. Follows moderation and threaded discussion logic. Typically used in discussion threads for nested conversations, and subject to moderation/workflow policies (see requirements and schema documentation).",
      "description": "This API enables a registered user to create a new threaded reply to an existing comment, fulfilling the inline and nested discussion requirements for political/economic conversations. The endpoint ensures that each reply is atomic and references its parent comment and author per the discussion_board_comment_reply schema. Reply content must be text and not null.\n\nRelations: The reply is linked to a comment via parent_comment_id and owned by a user. Moderation policies apply, including tracking who authored the reply and possible future moderation actions (edit, delete, report). On creation, notifications may be triggered for the original comment author according to project rules. Validation includes confirming the comment exists, the user is valid, and content is not empty or inappropriate (filtered per moderation policies).\n\nSecurity: Only authenticated, active users can create replies, and anti-spam controls may apply. Subsequent usages include displaying threaded conversations and supporting content moderation review. Errors may include forbidden access, invalid parent comment, or content validation failure.",
      "summary": "Create a new comment reply (discussion_board_comment_reply table).",
      "parameters": [],
      "requestBody": {
        "description": "Information required to create a new comment reply.",
        "typeName": "IDiscussionBoardCommentReply.ICreate"
      },
      "responseBody": {
        "description": "Details of the newly created comment reply.",
        "typeName": "IDiscussionBoardCommentReply"
      },
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentReplies",
      "method": "post"
    },
    {
      "specification": "Update an existing comment reply by ID. This operation modifies entries in the discussion_board_comment_reply table, allowing the author or moderator to change reply content, subject to moderation workflows. It references parent_comment_id for thread structure compliance.",
      "description": "This API updates the content of a specific comment reply, referenced by its ID, within the discussion_board_comment_reply table. Modifications may be made by the original author or a moderator, following business and moderation rules. All modifications are tracked with an updated_at timestamp for audit and rollback.\n\nOnly the reply's content or status may be changed; the parent_comment_id and user_id must not be reassignable post-creation for integrity. Moderation workflows can trigger additional notifications to users or audit records. Authorization requires that the caller is the author or a permitted moderator. Error responses include forbidden modification, missing reply ID, or invalid content updates.",
      "summary": "Update an existing comment reply (discussion_board_comment_reply table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target comment reply's ID to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Edited reply details (content, status, timestamp).",
        "typeName": "IDiscussionBoardCommentReply.IUpdate"
      },
      "responseBody": {
        "description": "The updated comment reply record.",
        "typeName": "IDiscussionBoardCommentReply"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentReplies/{id}",
      "method": "put"
    },
    {
      "specification": "Delete a comment reply by ID. This operation implements soft deletion in the discussion_board_comment_reply table, subject to moderation workflow and audit logging. Only authors or moderators can perform this action.",
      "description": "This API soft-deletes a comment reply by its unique ID, in conformance with discussion_board_comment_reply schema and moderation policies. Soft deletion marks the reply with a deleted_at timestamp for audit and recovery, but does not irreversibly remove the data, supporting moderation and dispute workflows.\n\nOnly reply authors or users with moderator privileges may perform this operation. The system maintains an audit trail for each deletion, potentially notifies stakeholders, and restricts permanent removal to admin-level processes if required by policy. Errors include not-found, forbidden access, or already-deleted status.",
      "summary": "Soft-delete a comment reply (discussion_board_comment_reply table).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the comment reply to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation and details of the deleted comment reply.",
        "typeName": "IDiscussionBoardCommentReply"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentReplies/{id}",
      "method": "delete"
    },
    {
      "specification": "Get a list of post votes with filtering and pagination. Implements feedback/upvoting/analytics via the discussion_board_post_vote table, supporting advanced search (by post_id, user_id, date, etc.). Used for engagement analytics and user feedback summaries. Typically PATCH for complex queries.",
      "description": "This API returns a paginated, filterable list of post votes from the discussion_board_post_vote table. Supports querying by post ID, user ID, time windows, or vote status. Used for analytics, tallying post upvotes, showing user participation, and building trends for admins and moderators. Can sort or search by different criteria (e.g., most upvoted, recent votes).\n\nRequest body includes optional filters (post ID, user ID, date range, etc.), page size, and ordering for analytics use cases. Returns a data page, including pagination info and list of votes. Security: Only users or moderators can retrieve vote lists as per privacy and analytics requirements. Errors: Invalid filters, permission denied, or malformed request.",
      "summary": "Get a filtered/pageable list of post votes (discussion_board_post_vote table).",
      "parameters": [],
      "requestBody": {
        "description": "Query parameters for listing post votes (filter, pagination, sort).",
        "typeName": "IDiscussionBoardPostVote.IRequest"
      },
      "responseBody": {
        "description": "Paged vote summary and analytics data.",
        "typeName": "IPageDiscussionBoardPostVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postVotes",
      "method": "patch"
    },
    {
      "specification": "Get a specific post vote by ID. Implements single record retrieval from the discussion_board_post_vote table, typically for analytics, moderation, or user feedback/review.",
      "description": "This API retrieves one post vote entity by its unique ID from the discussion_board_post_vote table. Used for audit, moderation, or verifying user feedback status. Returns detailed information about the vote, including voter, target post, and timestamps. Authorization is required—typically only moderators or the vote's author can access vote details for privacy and audit reasons. Errors include not-found or insufficient permission.",
      "summary": "Get details of a single post vote (discussion_board_post_vote table).",
      "parameters": [
        {
          "name": "id",
          "description": "Unique ID of the post vote to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed info on the specific post vote.",
        "typeName": "IDiscussionBoardPostVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postVotes/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new post vote (upvote/helpful mark). Implements single upvote/feedback record creation in the discussion_board_post_vote table, preventing duplicates for same user/post. Used in user engagement and feedback features.",
      "description": "This API allows a registered user to upvote or mark a post as helpful. Only one vote is allowed per user per post (duplicates prevented by constraints in discussion_board_post_vote schema). The creation records the voter, post, and vote timestamp. Used for features like upvoting, engagement analytics, and feedback. Moderation may monitor voting patterns for abuse.\n\nAuthorization required; only authenticated users can upvote. Errors include duplicate votes, invalid post, or unauthorized user. Success returns full vote record.",
      "summary": "Create a new post vote (discussion_board_post_vote table).",
      "parameters": [],
      "requestBody": {
        "description": "Vote information to be created (user, post, timestamp).",
        "typeName": "IDiscussionBoardPostVote.ICreate"
      },
      "responseBody": {
        "description": "Newly created post vote record.",
        "typeName": "IDiscussionBoardPostVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postVotes",
      "method": "post"
    },
    {
      "specification": "Update an existing post vote by ID. Allows modifying vote status or correcting erroneous input in discussion_board_post_vote table; subject to application rules (e.g., some systems prohibit vote modification after initial action).",
      "description": "This API updates a single post vote using its unique ID, as found in discussion_board_post_vote table. May allow changing vote timing, status, or other mutable fields as per business logic (typical use: retraction or edit with explicit business rationale). Full compliance with moderation and analytics workflows. Requires authorization, usually only by vote's author or permitted moderator. Returns updated vote data. Errors for not found, forbidden edit, or immutable vote per policy.",
      "summary": "Update a single post vote (discussion_board_post_vote table).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the post vote to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Vote field updates (status, timestamp, etc).",
        "typeName": "IDiscussionBoardPostVote.IUpdate"
      },
      "responseBody": {
        "description": "Updated post vote record.",
        "typeName": "IDiscussionBoardPostVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postVotes/{id}",
      "method": "put"
    },
    {
      "specification": "Delete a post vote by ID (retract vote). Implements soft deletion/removal of record in discussion_board_post_vote table, subject to audit and voting/retraction policies.",
      "description": "This API deletes (usually soft delete for audit trail) a post vote identified by its unique ID from discussion_board_post_vote. The user must be the vote owner or a moderator. Operation supports feedback retraction, anti-abuse monitoring, and user analytics. Returns confirmation with record data. Errors for not found, already-deleted, or forbidden operation.",
      "summary": "Delete a post vote (discussion_board_post_vote table).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the post vote to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result and details for the deleted vote record.",
        "typeName": "IDiscussionBoardPostVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postVotes/{id}",
      "method": "delete"
    },
    {
      "specification": "Get a paginated/filterable list of comment votes. Implements batch retrieval, analytics, or moderation reporting on comment feedback from the discussion_board_comment_vote table.",
      "description": "This API returns a filtered and paginated list of comment votes from the discussion_board_comment_vote table. Useful for analytics (e.g., most upvoted comments), moderation, or reporting. Supports searching and sorting by comment ID, user, date, etc., as per business requirements. Pagination ensures performance on large datasets. Request body specifies filters (comment_id, user_id, date, etc.), sorting, and page info.\n\nSecurity: Only available to authenticated users or moderators. Errors arise from invalid parameters, lack of permission, or overbroad queries. Returns IPageDiscussionBoardCommentVote object containing pagination and data.",
      "summary": "List comment votes with filter/pagination (discussion_board_comment_vote table).",
      "parameters": [],
      "requestBody": {
        "description": "Search/pagination filter info for comment votes.",
        "typeName": "IDiscussionBoardCommentVote.IRequest"
      },
      "responseBody": {
        "description": "Paginated list and meta of comment votes.",
        "typeName": "IPageDiscussionBoardCommentVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentVotes",
      "method": "patch"
    },
    {
      "specification": "Get details for a single comment vote, by its ID. Returns one discussion_board_comment_vote record for moderation or audit purposes, analytics, or user feedback detail.",
      "description": "This API retrieves a single comment vote by its unique ID from the discussion_board_comment_vote table. Used for audit, moderation reporting, or participant feedback. Returns full info on this specific vote (which user, which comment, when cast). Authorization is required to protect privacy; allowed for moderators or the voter themselves. Returns not-found or forbidden on error.",
      "summary": "Get a single comment vote's details (discussion_board_comment_vote table).",
      "parameters": [
        {
          "name": "id",
          "description": "Unique ID of the comment vote record.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Single comment vote record details.",
        "typeName": "IDiscussionBoardCommentVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentVotes/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new comment vote (upvote/feedback on comment). Implements creation in the discussion_board_comment_vote table, supporting constraint of one vote per user/comment combo.",
      "description": "This API enables a registered user to upvote or otherwise mark a comment for feedback in the discussion_board_comment_vote table. Only allows a single vote per user/comment (enforced by schema constraint). Requires user authentication. Success returns full vote record, failure for duplicate, invalid, or unauthorized voting. Triggers analytics, possible notification workflows, and audit trail. Moderation or anti-abuse logic may be triggered for voting patterns.",
      "summary": "Create new comment vote on a comment (discussion_board_comment_vote table).",
      "parameters": [],
      "requestBody": {
        "description": "New comment vote info (user, comment, etc).",
        "typeName": "IDiscussionBoardCommentVote.ICreate"
      },
      "responseBody": {
        "description": "Resulting new comment vote record.",
        "typeName": "IDiscussionBoardCommentVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentVotes",
      "method": "post"
    },
    {
      "specification": "Update an existing comment vote by ID. Implements modification logic for a vote in the discussion_board_comment_vote table (e.g., correcting feedback, changing status or timestamp as allowed by rules).",
      "description": "This API updates a single comment vote by its ID. Per the discussion_board_comment_vote table, only permitted fields (e.g., vote status, updated_at) may be modified, according to business and moderation rules. Full audit trails maintained. Requires authentication and ownership or moderator privilege. Returns full updated record on success, error otherwise.",
      "summary": "Update a single comment vote (discussion_board_comment_vote table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target comment vote's unique ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update on the comment vote.",
        "typeName": "IDiscussionBoardCommentVote.IUpdate"
      },
      "responseBody": {
        "description": "Updated comment vote record.",
        "typeName": "IDiscussionBoardCommentVote"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_moderator"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentVotes/{id}",
      "method": "put"
    },
    {
      "specification": "Implements deletion of a comment vote in the discussion board. This operation allows an authenticated user to remove a previously cast vote from a comment. Business rules require that a user may delete only their own votes and not those of other users. The primary use case is for users to retract upvotes or helpfulness flags. Must handle the case where the vote does not exist or the user is not authorized to delete it. Corresponds to the discussion_board_comment_vote table in the Prisma schema.",
      "description": "This API operation enables a user to delete a vote they previously placed on a comment. Permission validation ensures that the user can only delete votes they personally created, in compliance with the 3NF schema and normalized vote records in discussion_board_comment_vote. Associated audit trails are recommended to maintain voting history for moderation and analytics. If the vote does not exist or does not belong to the caller, a suitable error is returned. Utilizes the path parameter 'id' to specify the target vote by its UUID.",
      "summary": "Delete a comment vote by its ID (discussion_board_comment_vote table)",
      "parameters": [
        {
          "name": "id",
          "description": "Target comment vote's unique identifier (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/commentVotes/{id}",
      "method": "delete"
    },
    {
      "specification": "Fetches a filtered/paginated list of content reports for the discussion board. This is used by moderators and administrators to review active or historical reports against posts or comments. Mapped to the discussion_board_report table, it supports searching reports by status, reporter, content type, or target, and complies with audit and transparency requirements stated in moderation policies.",
      "description": "Retrieves a list of reports based on complex filter criteria, such as report status (e.g., pending, resolved), reported content type, reporting user, or moderation assignment. Pagination and sorting may be included via the request body structure. The API supports moderation workflows for reviewing, triaging, or bulk assessing reports. It refers directly to the discussion_board_report schema, which captures user-generated reports for moderation. Used together with detail/retrieve and update endpoints for complete report lifecycle management. Only accessible to users with moderation privileges.",
      "summary": "List/filter reports on posts/comments (discussion_board_report table)",
      "parameters": [],
      "requestBody": {
        "description": "Filtering, pagination, and search parameters for filtering reports",
        "typeName": "IDiscussionBoardReport.IRequest"
      },
      "responseBody": {
        "description": "Paginated/filterable result set of reports matching criteria",
        "typeName": "IPageIDiscussionBoardReport"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/reports",
      "method": "patch"
    },
    {
      "specification": "Retrieves granular detail about a single content report by ID. Mapped to the discussion_board_report table, this operation allows moderators and administrators to fetch the full context of a specific report, including its reporting user, reported content, review status, and moderator comments or actions taken. A core requirement in moderation workflows for audit and transparent resolution.",
      "description": "This API operation fetches all available detail for a specific report regarding reported posts or comments in the discussion board. Lookup is performed by UUID primary key provided as a path parameter. This endpoint supports auditability and transparency mandates for trust-building moderation, referencing the discussion_board_report schema. It is commonly called after listing/searching reports to resolve or respond to user reports. Only accessible by users with adequate privileges (moderator/admin roles).",
      "summary": "Get details of a specific content report (discussion_board_report table)",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the report (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed information about the content report",
        "typeName": "IDiscussionBoardReport"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/reports/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new user-generated content report. Typical use by end-users to flag problematic or policy-violating posts or comments for moderator review. Mapped to discussion_board_report. On success, a new report entry is created, beginning the moderation workflow.",
      "description": "This API operation is invoked by registered users to create a report alleging rule violations by a post or comment. It ensures the payload (reason, target post or comment, any additional context) meets business validation rules. On receipt, the report is inserted into discussion_board_report, triggering notifications for moderators and audit logging. Supports the initial step in the report/moderation workflow, and must validate that the reporter is authenticated and input conforms to expected targets. Fails if the referenced content does not exist or the user lacks permission. Audit trail compliance is recommended.",
      "summary": "Create a new content report (discussion_board_report table)",
      "parameters": [],
      "requestBody": {
        "description": "Report details (target post/comment, reason, reporter)",
        "typeName": "IDiscussionBoardReport.ICreate"
      },
      "responseBody": {
        "description": "The newly created report record",
        "typeName": "IDiscussionBoardReport"
      },
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/reports",
      "method": "post"
    },
    {
      "specification": "Updates information about a specific report by ID. Primarily used by moderators/admins to record status transitions, comments, or resolution outcomes for a report instance. Adheres to business requirements for tracking moderation outcomes. Mapped to discussion_board_report.",
      "description": "Moderators or admins update a reported item with resolution status, outcome notes, or to assign moderators. The update modifies the record in discussion_board_report and triggers associated workflow steps, such as notifications or status changes for the reported user. Handles permission/validation in line with moderation escalation policies. Failures or forbidden status changes must return errors and be auditable.",
      "summary": "Update a specific content report (discussion_board_report table)",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the report to update (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update (status, notes, moderator assignment, etc.)",
        "typeName": "IDiscussionBoardReport.IUpdate"
      },
      "responseBody": {
        "description": "Updated report data reflecting all changes",
        "typeName": "IDiscussionBoardReport"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/reports/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes (soft-delete or remove) a specific content report by unique ID. Only accessible by moderators or administrators, typically in case of erroneous, spam, or resolved reports. Corresponds to the discussion_board_report table.",
      "description": "This API operation allows authorized personnel to delete a report from the moderation queue. Permission checks are enforced, and the operation may perform a soft or hard delete as dictated by policy and the schema's requirements. Input is the report's UUID as the path parameter. Handles audit logging and failure response if report does not exist or permissions are insufficient. Related moderation actions and histories should be preserved for integrity.",
      "summary": "Delete (soft/hard) a content report by its ID (discussion_board_report table)",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the report to delete (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/reports/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a searchable or filtered set of moderation actions taken within the discussion board. Used by admins and moderators for audits, analytics, or workflow validation. Maps to discussion_board_moderation_action and serves the moderation log feature.",
      "description": "Provides the ability to search, filter, and paginate through historical moderation actions, such as bans, warnings, post removals, and other interventions. Enforces permission for moderators/admins only. This endpoint supports advanced queries over the discussion_board_moderation_action table, with filter criteria (action type, moderator, date ranges, involved content/user) sent in the request body. Results can be used with the detail and create/modify action endpoints for complete lifecycle management.",
      "summary": "List/filter moderation actions (discussion_board_moderation_action table)",
      "parameters": [],
      "requestBody": {
        "description": "Search, filter, and pagination parameters for moderation actions",
        "typeName": "IDiscussionBoardModerationAction.IRequest"
      },
      "responseBody": {
        "description": "Paginated/filterable list of moderation actions",
        "typeName": "IPageIDiscussionBoardModerationAction"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderationActions",
      "method": "patch"
    },
    {
      "specification": "Fetches granular detail about a specific moderation action. Supports audit, compliance, and workflow tracking for all actions in the discussion_board_moderation_action table.",
      "description": "This endpoint retrieves detailed information about a single moderation action using its unique ID. Used by admins and moderators to examine the specifics of why and how a moderation event occurred. Reflects the full data structure of discussion_board_moderation_action, and is required for review, audit, or appeal scenarios. Permission is enforced to restrict to privileged roles. Commonly used in conjunction with list and update endpoints.",
      "summary": "Get details of a specific moderation action (discussion_board_moderation_action table)",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the moderation action (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed moderation action information",
        "typeName": "IDiscussionBoardModerationAction"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderationActions/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new moderation action record. Used by moderators and admins to log interventions, such as warnings, content removals, or bans. Reflects requirements for a comprehensive audit trail. Mapped to discussion_board_moderation_action.",
      "description": "This operation records a new moderation action, triggered in response to a report, rule violation, or at a moderator's discretion. Fields include subject user, moderator, action type, reason, and optional linkages to related content and reports. Business logic ensures data aligns with escalation and audit requirements as detailed in moderation policy. Workflow triggers (notifications, status changes) are handled by downstream processes. Restricted to moderators and admins. On success, the action is inserted into discussion_board_moderation_action.",
      "summary": "Create a new moderation action record (discussion_board_moderation_action table)",
      "parameters": [],
      "requestBody": {
        "description": "Details of the moderation action to create (action type, reason, links)",
        "typeName": "IDiscussionBoardModerationAction.ICreate"
      },
      "responseBody": {
        "description": "A complete moderation action record, as created",
        "typeName": "IDiscussionBoardModerationAction"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderationActions",
      "method": "post"
    },
    {
      "specification": "Updates an existing moderation action by ID, to reflect changes in status (e.g., action escalation, notes, or corrections). Used for maintaining a complete, up-to-date audit log. References discussion_board_moderation_action.",
      "description": "Moderators/admins use this endpoint to update moderation action records, such as adding additional remarks, changing escalation status, or error correction. Accepts the moderation action's UUID via path and an update payload via the body. After successful update, returns the modified record for continued workflow/audit. Role-based permission enforcement required. Related moderation histories or dependencies (e.g., linked warnings/bans) remain intact.",
      "summary": "Update an existing moderation action (discussion_board_moderation_action table)",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the moderation action to update (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Updated moderation action data (fields to change, e.g., status, notes)",
        "typeName": "IDiscussionBoardModerationAction.IUpdate"
      },
      "responseBody": {
        "description": "The updated moderation action object",
        "typeName": "IDiscussionBoardModerationAction"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderationActions/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes (soft- or hard-delete) a moderation action record by ID. Used by admins for correction of erroneous entries or obsolete actions. Corresponds to discussion_board_moderation_action.",
      "description": "Warrants moderator/admin permissions for removing an obsolete or incorrect moderation action. Takes the action ID as input and, based on business policy, may perform a soft delete to preserve audit compliance. Responsible for security-related restrictions, error logging, and enforcing that historical dependencies are not compromised. May trigger workflow for related entities (e.g., warnings, user bans).",
      "summary": "Delete (soft/hard) a moderation action (discussion_board_moderation_action table)",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the moderation action record to delete (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/moderationActions/{id}",
      "method": "delete"
    },
    {
      "specification": "Enables searching/filtering and paging through warning actions issued to users in the discussion board. Used primarily by moderators/admins to monitor warnings, escalation policy, and user comment history. Implements access to the discussion_board_warning table.",
      "description": "This operations supports listing, filtering, and paginating warning records based on criteria such as target user, moderator, reason, or time range. Directly references the normalized warning records in discussion_board_warning, used for audit, escalation handling, or moderation analytics. Business rules enforce moderator/admin access. Used together with detail and update endpoints for full warning workflow control.",
      "summary": "List/filter warnings issued to users (discussion_board_warning table)",
      "parameters": [],
      "requestBody": {
        "description": "Search/filter/pagination data to find warnings by moderator, subject, date, or reason",
        "typeName": "IDiscussionBoardWarning.IRequest"
      },
      "responseBody": {
        "description": "Paginated/filterable warning list",
        "typeName": "IPageIDiscussionBoardWarning"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/warnings",
      "method": "patch"
    },
    {
      "specification": "Retrieve the details of a specific warning record by its ID. This operation is mapped to the discussion_board_warning table, which logs warnings given to users for policy violations or inappropriate behavior as defined in the moderation policy. Each warning is linked to both the moderator who issued it and the user who received the warning, and has descriptive fields such as reason, timestamp, and possible link to a related moderation action. Use this route to view warning details including rationale, issuer, and timestamp for audit or dispute review.",
      "description": "This endpoint enables retrieval of a specific warning record using its unique ID field, referencing the discussion_board_warning schema. It is commonly used for auditing, displaying the reason and timestamp, and showing which moderator issued the warning. Access may be restricted to the warned user, moderators, or administrators, depending on role-based permissions. The endpoint validates the existence of the warning and properly handles not found errors, ensuring clear responses in line with moderation transparency policies described in the requirements documentation. Related endpoints include creation and update operations for warning records, as well as audit logging endpoints for moderation actions.",
      "summary": "Get a specific warning record from the discussion_board_warning table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Warning record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full details of the warning record.",
        "typeName": "IDiscussionBoardWarning"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/warnings/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new warning record for a user in the discussion_board_warning table. This operation logs a policy infraction incident, specifying the user, moderator, reason for the warning, and timestamp. It is a part of the board's moderation audit trail and is crucial for compliance with escalation and transparency policies. This endpoint is generally restricted to moderators and administrators.",
      "description": "This API endpoint enables staff to issue a formal warning to a user. Each warning must specify the subject user, issuing moderator, the warning reason, and records the issuance time. It is designed as a transparent and auditable workflow, supporting future escalation logic (such as moving from warning to ban after repeated offenses). The creation of a warning triggers relevant notifications and can optionally reference related moderation actions for full traceability. Proper validation is enforced for user roles and foreign key integrity. Error handling is included for invalid users or authorization issues. Closely related endpoints include viewing, editing, and deleting warnings, as well as user ban and moderation event logs.",
      "summary": "Create a new warning record in the discussion_board_warning table.",
      "parameters": [],
      "requestBody": {
        "description": "Details for creating a warning record, referencing the subject user, moderator, reason, and any related moderation action.",
        "typeName": "IDiscussionBoardWarning.ICreate"
      },
      "responseBody": {
        "description": "The created warning record, including all details.",
        "typeName": "IDiscussionBoardWarning"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/warnings",
      "method": "post"
    },
    {
      "specification": "Update an existing warning record in the discussion_board_warning table, using the warning's unique ID. This allows moderators and admins to amend the reason, change related moderation action, or correct notes. Maintains moderation transparency and audit standards, and is subject to validation rules for access and data integrity. Only authorized moderators or admins should invoke this endpoint.",
      "description": "This endpoint updates the information of a warning record identified by its ID. Typical use cases include correcting the warning reason, amending involved moderator, or associating the warning record with an updated moderation action. It checks for proper authorization and ensures all business and validation rules regarding warning updates are enforced, such as only allowing changes before further escalation actions occur. Related endpoints are create (POST), retrieve (GET), and delete operations for warnings, as well as audit logs for moderation actions and warnings.",
      "summary": "Update a specific warning record in the discussion_board_warning table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Warning record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Information to update in the warning record.",
        "typeName": "IDiscussionBoardWarning.IUpdate"
      },
      "responseBody": {
        "description": "The updated warning record with new information.",
        "typeName": "IDiscussionBoardWarning"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/warnings/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a warning record from the discussion_board_warning table, identified by its unique ID. Supports moderation audit compliance and removal when a warning is invalidated or upon an appeal. Deletion is typically soft (record marked as deleted), in line with platform moderation transparency standards and GDPR compliance. Only moderators and admins may access this endpoint.",
      "description": "This endpoint allows for the deletion (typically soft delete) of a warning record, given its unique ID. Permissions checks are enforced so that only appropriate moderators or administrators can delete warning records. The deletion maintains audit compliance by not physically removing records but instead marking them as deleted. Related functionality includes appeal workflows, as well as account recovery in the case of a reversed moderation decision. This method complements warning creation and update endpoints and is linked in the moderation action trail for system transparency.",
      "summary": "Delete a specific warning record by ID (soft delete, discussion_board_warning table).",
      "parameters": [
        {
          "name": "id",
          "description": "Warning record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion (soft delete).",
        "typeName": "IDiscussionBoardWarning"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/warnings/{id}",
      "method": "delete"
    },
    {
      "specification": "List or search user ban records in the discussion_board_user_ban table, supporting filtering, pagination, and sorting. This endpoint allows moderators and admins to search for bans (by user, moderator, date, ban reason etc.) for audit, review, or operational tasks. Supports advanced moderation workflows like rapid ban review, appeals processes, and trend monitoring.",
      "description": "This API operation enables listing and searching all user ban records with flexible queries: filter by subject user, moderator, reason, date, or status. Pagination parameters included for efficient display in dashboards or moderation panels. Results include all relevant ban details. Only users with moderator or admin roles may access this endpoint to support moderation transparency, operational management, and appeals processes. Associated endpoints include detailed single record retrieval, creation, updating, and deletion for bans.",
      "summary": "Search and list user ban records in the discussion_board_user_ban table.",
      "parameters": [],
      "requestBody": {
        "description": "Filter and pagination parameters for user ban records (optional).",
        "typeName": "IDiscussionBoardUserBan.IRequest"
      },
      "responseBody": {
        "description": "Paginated or filtered list of user ban records.",
        "typeName": "IPageIDiscussionBoardUserBan"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userBans",
      "method": "patch"
    },
    {
      "specification": "Retrieve details of a specific user ban record by ID from the discussion_board_user_ban table. Used for reviewing the ban reason, moderator who issued the ban, duration, and audit trail compliance. Only accessible to moderators and administrators for transparency and escalation review purposes.",
      "description": "This endpoint fetches a single user ban record based on its unique ID. Returns full details including the banned user, reason, dates, and associated moderator. Coordinated with moderation audit logs and used in workflows such as appeals or ban reviews. Only authorized moderation staff can retrieve sensitive ban data. Errors are handled for non-existent or revoked bans, ensuring clear feedback for management and transparent handling as outlined in moderation documentation.",
      "summary": "Get specific user ban record from discussion_board_user_ban table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "User ban record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The full user ban record details.",
        "typeName": "IDiscussionBoardUserBan"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userBans/{id}",
      "method": "get"
    },
    {
      "specification": "Create and log a new user ban record in the discussion_board_user_ban table. This is used when a moderator bans a user, specifying the subject, the moderator, the reason, ban period, and any related moderation actions. Compliant with audit, escalation, and notification requirements in the moderation policy. Accessible only to moderators and admins.",
      "description": "This endpoint allows moderators or admins to ban a user by creating a new record in the user ban log. Requires input of subject user, moderator, the rationale, and optionally a link to the moderation action log. This supports escalation from warnings to bans in the moderation workflow, and triggers relevant user notifications. All inserts are auditable and integrated with transparency requirements. Related endpoints include querying, updating, and deleting user bans, as well as other moderation log operations.",
      "summary": "Create a new user ban record in the discussion_board_user_ban table.",
      "parameters": [],
      "requestBody": {
        "description": "Information for creating a new user ban record.",
        "typeName": "IDiscussionBoardUserBan.ICreate"
      },
      "responseBody": {
        "description": "The created user ban record, with all identifying information.",
        "typeName": "IDiscussionBoardUserBan"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userBans",
      "method": "post"
    },
    {
      "specification": "Update user ban record details in the discussion_board_user_ban table, using the ban's unique ID. This allows for amending reason, ban duration, or moderator corrections, as well as associating an updated moderation action. Maintains compliance and supports appeals or escalations per moderation workflow. Only accessible to moderators/admins.",
      "description": "This operation edits core details of a user ban, supporting amendments based on new information, successful appeals, or moderator input correction. All updates are logged and validated for consistency. Implementation must enforce privilege boundaries and trigger audit log updates. Related endpoints include creation, retrieval, listing, and deletion of bans, as well as moderation action and warning logs.",
      "summary": "Update a specific user ban record in the discussion_board_user_ban table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "User ban record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Information for updating the user ban record (reason, dates, moderator, etc).",
        "typeName": "IDiscussionBoardUserBan.IUpdate"
      },
      "responseBody": {
        "description": "The updated user ban record details.",
        "typeName": "IDiscussionBoardUserBan"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userBans/{id}",
      "method": "put"
    },
    {
      "specification": "Delete (soft delete) a user ban record in the discussion_board_user_ban table by ID. Used for ban reversals after appeals, erroneous bans, or administrative cleanup. Maintains full audit trail and supports moderation policy requirements for ban outcome reversals. Restricted to moderators/admins.",
      "description": "This endpoint performs a soft delete of a user ban record, referenced by its unique ID. Deletions are always soft (field set, not physical removal) to preserve auditability and reversibility. Deletion permission is restricted to proper staff. Associated with moderation documentation on appeals process and outcome transparency. Related endpoints include create, search, update, and single record retrieval for user bans, as well as related moderation logs.",
      "summary": "Delete (soft delete) a specific user ban record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "User ban record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of soft deletion for the user ban record.",
        "typeName": "IDiscussionBoardUserBan"
      },
      "authorization": {
        "role": [
          "discussion_board_moderator",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userBans/{id}",
      "method": "delete"
    },
    {
      "specification": "List and search notification records for users from the discussion_board_notification table. Enables filtering by user, type, read status, and supports pagination. Fulfills requirements for user and moderation notification visibility, dashboard display, and notification settings. Only accessible to the target user or administrators.",
      "description": "This operation lists, searches, and pages through notification records for users. Query parameters include filtering by recipient, type (reply, mention, moderation, etc.), read/unread status, and sort options. Returns a paginated set of notification records with all necessary metadata for user display. Strict access control only allows the current user, moderators, or admins to view notification lists. It is used for in-app notification dashboards, administration panels, and user audit features. Related endpoints include single notification retrieval and notification creation for system tests or manual delivery.",
      "summary": "List/search user notification records in the discussion_board_notification table.",
      "parameters": [],
      "requestBody": {
        "description": "Filtering, sorting, and pagination criteria for notifications.",
        "typeName": "IDiscussionBoardNotification.IRequest"
      },
      "responseBody": {
        "description": "Paginated or filtered list of notification records.",
        "typeName": "IPageIDiscussionBoardNotification"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/notifications",
      "method": "patch"
    },
    {
      "specification": "Retrieve specific notification record details by its ID from the discussion_board_notification table. Used for displaying a full notification with all fields (type, body, read status etc.) to the user, audit trails, or admin review. Accessible to the recipient user or moderators/admins.",
      "description": "This endpoint retrieves a specific notification by its unique ID, returning the full record including all display fields for the notification. This supports both the recipient and authorized admin/moderator users for viewing history, troubleshooting, or reviewing audit logs. Proper authorization and data validation is enforced through established access controls. Closely related endpoints are listing (PATCH), creation (POST), and user notification setting endpoints.",
      "summary": "Get a specific notification by ID from the discussion_board_notification table.",
      "parameters": [
        {
          "name": "id",
          "description": "Notification record's unique identifier (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The full notification record details.",
        "typeName": "IDiscussionBoardNotification"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/notifications/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new notification delivery record in the discussion_board_notification table. Supports proof/test of notification logic, manual notification injection, or custom notification workflows. Used by system processes or administrators to inject notifications in addition to regular business logic. Only admins and internal processes should access this endpoint.",
      "description": "This API operation allows manual or system-driven creation of a notification record, specifying the target user, notification type, title, body, and defaults for read status and timestamps. It is primarily intended for administrators or system automation, such as forced notification updates, diagnostic purposes, or handling specific moderation notification flows. Closely integrated with notification delivery logic and user notification settings. Related endpoints are listing (PATCH) and retrieval (GET). Full validation is performed for target user, notification content, and type.",
      "summary": "Create a new notification delivery record in the discussion_board_notification table.",
      "parameters": [],
      "requestBody": {
        "description": "Parameters required for creating a new notification record.",
        "typeName": "IDiscussionBoardNotification.ICreate"
      },
      "responseBody": {
        "description": "The created notification record.",
        "typeName": "IDiscussionBoardNotification"
      },
      "authorization": {
        "role": [
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/notifications",
      "method": "post"
    },
    {
      "specification": "Updates an existing notification with the specified ID. This operation allows the user or system to modify fields such as notification read status or content. Associated with the discussion_board_notification table, which stores delivery records for replies, mentions, or moderation-related notifications. All updates must preserve audit history and the integrity of the original triggering event references. Only the user who received the notification or a system process is allowed to perform this operation. Other fields, like notification type, should not be modified by users. Recommended for use in settings such as marking a notification as read or updating notification text for compliance.",
      "description": "This API updates notification delivery records in the discussion_board_notification table, as described in the Prisma schema. It can only be used to modify mutable fields such as is_read and, optionally, title or body. This ensures that changes are auditable and traceable for moderation transparency. Notification types and links to related event objects should not be altered with this endpoint, maintaining the atomic and immutable character of those fields as intended by the schema. Security is enforced so that only notification recipients or authorized personnel can execute updates. If the requested notification is not found or the user is not authorized, the operation returns an error. Related APIs include GET to retrieve a notification and DELETE to remove one for soft-deletion compliance. Only authorized users can update their own notification records.",
      "summary": "Update a discussion_board_notification record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the notification to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Notification update payload.",
        "typeName": "IDiscussionBoardNotification.IUpdate"
      },
      "responseBody": {
        "description": "Updated notification record.",
        "typeName": "IDiscussionBoardNotification"
      },
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/notifications/{id}",
      "method": "put"
    },
    {
      "specification": "Removes (soft-deletes) a notification with the specified ID. This operation clears a notification from user view but keeps a soft-deleted audit record per notification audit and privacy requirements. Corresponds to soft deletion logic in discussion_board_notification, ensuring that deleted notifications are retained for audit or recovery. Only the owner of the notification or a system process can perform this action. This supports user-driven notification management and GDPR compliance.",
      "description": "This endpoint soft-deletes an existing notification in the discussion_board_notification table, setting its deleted_at field while retaining the record for compliance and audit. The operation returns an error if the specified notification doesn't exist or if the user is not authorized to delete it. Security ensures only the recipient of a notification (discussion_board_user) or a relevant system actor can perform the operation. Used in consumer applications for dismissing notifications or in administrative interfaces for enforcing notification retention policies. Related APIs include GET for viewing notifications and PUT for marking them as read or revised.",
      "summary": "Soft-delete a discussion_board_notification record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the notification to soft-delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Soft-deleted notification record.",
        "typeName": "IDiscussionBoardNotification"
      },
      "authorization": {
        "role": [
          "discussion_board_user"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/notifications/{id}",
      "method": "delete"
    },
    {
      "specification": "Fetches a paginated list of user settings records based on search and filter criteria. Useful for administrative dashboards or for user self-management in multi-profile scenarios. This endpoint operates on the discussion_board_user_setting table storing notification preferences, themes, and localization info per user. Designed according to requirements to support searching by language preference, notification opt-in, or theme selection. Returns a paginated, optionally filtered list.",
      "description": "Lists user settings records (discussion_board_user_setting) that match search filters such as notification/in-app email flags, theme, or language preference. Pagination parameters control result set size. This endpoint is secured so only authorized admins or the current user can view these records. Use cases include administrative review of all users’ settings, analytics on notification opt-in rates, or advanced personalized search. If filters are invalid or the requesting user is not authorized, returns an error. Related endpoints allow creation (POST), read by ID (GET), update (PUT), and deletion (DELETE) of specific user setting records.",
      "summary": "List discussion_board_user_setting records with filters and pagination.",
      "parameters": [],
      "requestBody": {
        "description": "User settings search, filter, and pagination info.",
        "typeName": "IDiscussionBoardUserSetting.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of user settings records.",
        "typeName": "IPageIDiscussionBoardUserSetting"
      },
      "authorization": {
        "role": [
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userSettings",
      "method": "patch"
    },
    {
      "specification": "Retrieves a specific user settings record by unique ID for viewing details. This operates on the discussion_board_user_setting entity, which holds individual notification, theme, and language preferences. Used by user-profile screens or admin dashboards to display a particular user's settings for review, update, or support. Ensures requested record is visible only to the owner or an authorized administrator.",
      "description": "Returns a single discussion_board_user_setting as defined in the Prisma schema for user preferences. Authentication verifies that only the owner or administrators can access the requested record. Returns an error for missing records or unauthorized access attempts. Frequently used for displaying preference panels, supporting detailed audits, or for troubleshooting user experience issues. Works together with update (PUT), partial update (PATCH), and delete (DELETE) endpoints for full CRUD coverage.",
      "summary": "Get a discussion_board_user_setting record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the settings record to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "User settings record.",
        "typeName": "IDiscussionBoardUserSetting"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userSettings/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new user settings record for a given user, storing notification, theme, and localization preferences. This acts on the discussion_board_user_setting table from the Prisma schema, supporting the creation of distinct preference profiles per user (limited to one record per user, unique constraint enforced). Used at registration or the first time a user modifies their settings. Only the user or an admin can create their record.",
      "description": "This API creates a new settings record for a user, allowing explicit selection of notification preferences, UI theme, and interface language (as required for accessibility and personalization per requirements document). Conversation participants must be authenticated, and one user cannot have multiple settings records. If an existing record already exists for the specified user, returns an error. Related endpoints allow updating, patching, or deleting existing settings. Security: Only a user or admin can invoke this endpoint for their own settings.",
      "summary": "Create a new discussion_board_user_setting record.",
      "parameters": [],
      "requestBody": {
        "description": "Creation info for user settings.",
        "typeName": "IDiscussionBoardUserSetting.ICreate"
      },
      "responseBody": {
        "description": "Created user settings record.",
        "typeName": "IDiscussionBoardUserSetting"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userSettings",
      "method": "post"
    },
    {
      "specification": "Updates an existing user settings record by ID, modifying preferences for notifications, theme, and localization. This acts on the discussion_board_user_setting table per Prisma schema and requirements doc. Used when users change settings in a web UI or by admin action. Secured by authentication and row-level authorization. Cannot be used to reassign settings to another user.",
      "description": "This endpoint allows a user or admin to fully update settings by ID, replacing notification/email/in-app flags, theme, and language preferences. If the record is not found, returns an error. Use this endpoint only for whole-record changes; to update just a portion, use PATCH (if implemented). Access is limited to the user (for their own record) or admin. Related endpoints include GET by ID, POST for new record creation, PATCH for search, DELETE for record removal.",
      "summary": "Update a discussion_board_user_setting record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the user settings record to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "User settings update payload.",
        "typeName": "IDiscussionBoardUserSetting.IUpdate"
      },
      "responseBody": {
        "description": "Updated user settings record.",
        "typeName": "IDiscussionBoardUserSetting"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userSettings/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes (soft-deletes) a user setting record by ID. Acts on the discussion_board_user_setting table, supporting GDPR and privacy requirements for account removal and cleanup. Ensures that users or admins can remove settings but preserves an audit log via soft deletion.",
      "description": "This endpoint soft-deletes a user setting record from the discussion_board_user_setting table, updating the record's deleted_at flag for recovery and compliance. Only the owner or an administrator is authorized to delete a settings record. Related endpoints allow creation, retrieval, and updating of user setting records. Access is limited by authentication. If not found, or not authorized, returns an error.",
      "summary": "Soft-delete a discussion_board_user_setting record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the user settings record to soft-delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Soft-deleted user settings record.",
        "typeName": "IDiscussionBoardUserSetting"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/userSettings/{id}",
      "method": "delete"
    },
    {
      "specification": "Lists all attachments with search, filter, and pagination. Operates on the discussion_board_attachment table, storing file metadata like file URL and mime type. Used to find attachments by uploader, file type, or within a certain date range. Admin or content managers use this to review files on the discussion board, audit uploads, or clean up unused content.",
      "description": "This endpoint retrieves a paginated list of file attachments from the discussion_board_attachment table, supporting search by file_name, uploader, or mime_type. Used for admin dashboards or for end-user review of their own uploads. Pagination information must be provided in the request body. Returns file metadata records without downloading the actual file. Security: Only the file owner or authorized content admin can list all records. Returns error if invalid filters are applied or unauthorized. Related operations: GET, POST, PUT, DELETE attachment records.",
      "summary": "List discussion_board_attachment records with filters and pagination.",
      "parameters": [],
      "requestBody": {
        "description": "Attachment search, filter, and pagination info.",
        "typeName": "IDiscussionBoardAttachment.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of attachment records.",
        "typeName": "IPageIDiscussionBoardAttachment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/attachments",
      "method": "patch"
    },
    {
      "specification": "Retrieves attachment metadata by unique ID. Operates on the discussion_board_attachment table for details like file name, type, uploader, and storage URL. Does not provide the file content. Used by user upload history, attachment preview in posts, or admin content review.",
      "description": "This API fetches the attachment metadata record from discussion_board_attachment, as described in the Prisma schema. Used for viewing file details, showing previews, or conducting administrative file reviews. Security ensures only attachment owners or administrators can access sensitive details. Related endpoints: PATCH for search/list, POST for creation, PUT for update, DELETE for removal.",
      "summary": "Get a discussion_board_attachment record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the attachment to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Attachment record metadata.",
        "typeName": "IDiscussionBoardAttachment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/attachments/{id}",
      "method": "get"
    },
    {
      "specification": "Uploads and saves a new file attachment, storing file metadata and associating it with the uploading user. Acts on the discussion_board_attachment table according to Prisma schema. Used when end users or admins add files to posts/comments. Records file URL, type, and ownership but not direct file upload data (use storage URI).",
      "description": "Creates a new attachment metadata record in the discussion_board_attachment table. This operation is invoked when users upload images, PDFs, or other supported files to their comments/posts. Only authenticated users can upload, and each attachment must be linked to a valid user. Uploaded files must comply with content security policies and MIME type validation. If the record already exists (same file_url), or the uploader is unauthorized, returns an error. Related endpoints are PATCH (search/list), GET by ID, PUT (update), and DELETE (soft-delete).",
      "summary": "Create a new discussion_board_attachment metadata record.",
      "parameters": [],
      "requestBody": {
        "description": "Attachment metadata creation payload.",
        "typeName": "IDiscussionBoardAttachment.ICreate"
      },
      "responseBody": {
        "description": "Created attachment metadata record.",
        "typeName": "IDiscussionBoardAttachment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/attachments",
      "method": "post"
    },
    {
      "specification": "Updates an existing attachment's metadata (e.g., file name, mime type) but not the actual file content. Used for correcting metadata or redacting sensitive file details. Operates on the discussion_board_attachment table, following 3NF entity structure. Only attachment owners or system admins can perform the update.",
      "description": "This operation updates fields such as file_name or mime_type for a file record in discussion_board_attachment. Security ensures only the original uploader or an admin can make changes. File URL and upload timestamps generally must not be changed by users. If the specified attachment is not found or the user is unauthorized, returns an error. Related endpoints are PATCH for listing, GET by ID, POST for creation, and DELETE for logical removal.",
      "summary": "Update a discussion_board_attachment record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the attachment to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Attachment metadata update payload.",
        "typeName": "IDiscussionBoardAttachment.IUpdate"
      },
      "responseBody": {
        "description": "Updated attachment record.",
        "typeName": "IDiscussionBoardAttachment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/attachments/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes (soft-deletes) an attachment metadata record by ID. Based on the discussion_board_attachment table with soft-delete support via deleted_at timestamp. Used for file cleanup, security removal, or user-driven file management. Only the owner or admin can delete (soft-delete) their attachment records. File content must be handled by the storage layer, not this endpoint.",
      "description": "Performs a soft-delete of an attachment by ID, marking the deleted_at timestamp to shield the file from standard queries while maintaining an audit record. Only the owner or an admin can invoke this operation. Related endpoints include GET (metadata retrieval), PATCH (list), POST (new upload), and PUT (update). Deletion does not remove referenced files from posts/comments; links must be managed separately for logical cleanup.",
      "summary": "Soft-delete a discussion_board_attachment record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the attachment to soft-delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Soft-deleted attachment record.",
        "typeName": "IDiscussionBoardAttachment"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/attachments/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements search, filter, and list operations over the discussion_board_post_attachment_link entity. This endpoint supports retrieving attachment link records for posts with complex search criteria such as post ID, attachment ID, attachment order, sorting, and pagination parameters. The endpoint is used by both users and system administrators to manage and audit the links between posts and their attached files, ensuring visibility into how files are organized and presented within posts. It enforces authorization so that only users with appropriate permissions can use this endpoint, and properly handles soft-deleted records when configured. This operation corresponds to the 'discussion_board_post_attachment_link' table in Prisma.",
      "description": "The PATCH /discussionBoard/postAttachmentLinks endpoint queries the post-attachment linking table, enabling advanced retrieval and search features for listing all or filtered links between posts and attached files. This endpoint is critical for reconstructing file presentation orders, auditing file associations, and performing bulk attachment management. \n\nSecurity considerations enforce that only authenticated users (and, if needed, only those with admin or post owner privileges) can query post attachment links.\n\nBusiness rules may include paginating lists of results, supporting text search by post title/file names, and filtering by attachment status (enabled/disabled). Relationships to users mean that the returned data will often include join info such as file meta, user identity, and possible soft-deletion status.\n\nRelated endpoints are GET (for single records), POST (creation), PUT (update), and DELETE (deletion). Requests that include complex search, filtering, or sorting must use this PATCH endpoint for consistency with other list-based resources. Error handling includes 404 (no results), 403 (unauthorized), and 400 (invalid search parameters).",
      "summary": "List/query post-attachment links (discussion_board_post_attachment_link) with search and pagination support.",
      "parameters": [],
      "requestBody": {
        "description": "Request body for searching, filtering, and paginating post-attachment links.",
        "typeName": "IDiscussionBoardPostAttachmentLink.IRequest"
      },
      "responseBody": {
        "description": "Paginated results of post-attachment links with full metadata.",
        "typeName": "IPageIDiscussionBoardPostAttachmentLink"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postAttachmentLinks",
      "method": "patch"
    },
    {
      "specification": "Implements retrieval of an individual post-attachment link record from discussion_board_post_attachment_link by unique identifier. This endpoint enables inspection of file attachment linking metadata for a specific reference, such as viewing actual file URL, associated post ID, attachment sequence/order, and disabled status. Used for both troubleshooting attachment issues and displaying specific linked files in UI detail views.\n\nCorresponds to Prisma table: discussion_board_post_attachment_link.",
      "description": "The GET /discussionBoard/postAttachmentLinks/{id} endpoint accesses a specific post file attachment link by its unique identifier, returning the complete set of linking information between a post and an attachment file. This endpoint is used by the UI for displaying file attachments in detailed view, debugging attachment relationships, or for users (with permissions) to retrieve information about single file associations. \n\nSecurity/authorization is enforced so that only the owner, admin, or users with specific privileges can access the endpoint. The relation to user, post, and attachment details is included through joins if business logic requires it.\n\nExpected errors include 404 (not found), 403 (unauthorized), or 410 (gone/soft deleted). Related endpoints are PATCH (list), POST (create), PUT (update), and DELETE (remove attachment link).\n\nBusiness logic ensures that only valid, non-removed records are returned unless a special \"show deleted\" flag is enabled for admins.",
      "summary": "Retrieve a single post-attachment link (discussion_board_post_attachment_link) by unique ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the post-attachment link (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Returned details for the specific post-attachment link.",
        "typeName": "IDiscussionBoardPostAttachmentLink"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postAttachmentLinks/{id}",
      "method": "get"
    },
    {
      "specification": "Implements the creation of a new record in the discussion_board_post_attachment_link table, linking a specific post to an uploaded attachment with specified order and status. This operation is used when a user attaches a file (image, PDF, etc.) to a post, and the link (with order and disabled flag) is managed independently of the attachment file’s metadata. Ensures unique linking per (post_id, attachment_id) and assigned order. Authorization and validation ensure users can't link attachments to other users’ posts or use invalid file references. Prisma Model: discussion_board_post_attachment_link.",
      "description": "The POST /discussionBoard/postAttachmentLinks endpoint creates a new link between an existing post and a file attachment, setting the display order, enabled/disabled status, and recording creation metadata. This operation allows users (with valid permission, e.g., post author/admin) to attach files to posts in a specific sequence, and ensures that no duplicate or invalid linkages are created.\n\nInput validation includes: verifying that the referenced post_id and attachment_id exist and belong to the permitted user, that the attachment_order value is unique within the post, and all accompanying metadata (created_at, disabled) is correctly initialized.\n\nAuthorization restricts creation privileges to valid owners or moderators with content rights. Related endpoints: PATCH (search/list), GET (single), PUT (update), DELETE (remove). Error handling covers 400 (invalid request), 403 (permission denied), and 409 (conflicting order or duplicate link).",
      "summary": "Create new post-attachment link (discussion_board_post_attachment_link).",
      "parameters": [],
      "requestBody": {
        "description": "Creation info for a new post-attachment link (post_id, attachment_id, attachment_order, etc).",
        "typeName": "IDiscussionBoardPostAttachmentLink.ICreate"
      },
      "responseBody": {
        "description": "Details for the newly created post-attachment link record.",
        "typeName": "IDiscussionBoardPostAttachmentLink"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postAttachmentLinks",
      "method": "post"
    },
    {
      "specification": "Implements update of a post-attachment link record (for discussion_board_post_attachment_link) by unique ID. Allows a user or admin to modify link details such as attachment order, enabled/disabled flag, or to move attachment references to another post (if business logic allows). All updates are validated to prevent illegal post/link associations and to ensure data consistency (e.g., cannot set duplicate attachment orders for post). Prisma Model: discussion_board_post_attachment_link.",
      "description": "The PUT /discussionBoard/postAttachmentLinks/{id} endpoint provides full update functionality for a specific post-attachment link, modifying fields such as attachment order, the associated post or file (where allowed), and the current enabled/disabled status. \n\nAuthorization ensures only post owners or admins can modify links; validation confirms update does not create order conflicts within the post or violate file ownership requirements. \n\nAll changes are audited (updated_at fields set) and invalid update attempts result in 400/403/404 errors as appropriate. \n\nThis operation is closely tied to PATCH (list/query), GET (single detail), POST (create), and DELETE (remove) endpoints.",
      "summary": "Update a post-attachment link (discussion_board_post_attachment_link) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the post-attachment link (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Full update parameters for the post-attachment link (attachment_order, status, etc).",
        "typeName": "IDiscussionBoardPostAttachmentLink.IUpdate"
      },
      "responseBody": {
        "description": "Updated post-attachment link record after modifications applied.",
        "typeName": "IDiscussionBoardPostAttachmentLink"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postAttachmentLinks/{id}",
      "method": "put"
    },
    {
      "specification": "Implements soft/hard delete of a post-attachment link record in discussion_board_post_attachment_link by unique ID. This operation is used when a file attachment is removed from a post or when an administrator disables/cleans broken attachment references. Soft deletion is the default, supporting full recovery/auditing, but hard delete is supported for permanent cleanup by admins. Model: discussion_board_post_attachment_link.",
      "description": "The DELETE /discussionBoard/postAttachmentLinks/{id} endpoint soft-deletes (or permanently removes, if authorized) the post-attachment link for a particular file from a post. This operation is essential for removing obsolete, broken, or unauthorized attachment associations. Only owners, administrators, or moderators can remove links; deletion is soft by default with actual record flagged as deleted (deleted_at populated), but hard delete is allowed for escalated admin operations.\n\nSecurity checks ensure the caller has permission to modify post/file associations. The business rule prohibits deletion if the link is already not active. Related endpoints: PATCH (list/search), GET (detail), POST (create), PUT (update). All deletions are audit-logged and subject to review. Error responses include 403 (unauthorized), 404 (not found), 409 (already deleted or in use).",
      "summary": "Delete (soft or hard) a post-attachment link (discussion_board_post_attachment_link) by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the post-attachment link (UUID).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation/result of the delete operation on the post-attachment link.",
        "typeName": "IDiscussionBoardPostAttachmentLink.IDeleteResult"
      },
      "authorization": {
        "role": [
          "discussion_board_user",
          "discussion_board_admin"
        ],
        "type": "Bearer"
      },
      "path": "/discussionBoard/postAttachmentLinks/{id}",
      "method": "delete"
    }
  ],
  "components": {
    "schemas": {
      "IDiscussionBoardUser.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Page number to retrieve. Supports pagination for large user lists. Follows IPage.IRequest standard for consistency."
              },
              {
                "type": "null",
                "description": "Page number to retrieve. Supports pagination for large user lists. Follows IPage.IRequest standard for consistency."
              }
            ],
            "description": "Page number to retrieve. Supports pagination for large user lists. Follows IPage.IRequest standard for consistency."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Maximum number of results per page. Supports paginated user listing in accordance with board requirements and IPage.IRequest."
              },
              {
                "type": "null",
                "description": "Maximum number of results per page. Supports paginated user listing in accordance with board requirements and IPage.IRequest."
              }
            ],
            "description": "Maximum number of results per page. Supports paginated user listing in accordance with board requirements and IPage.IRequest."
          },
          "username": {
            "oneOf": [
              {
                "type": "string",
                "description": "Filter users by exact or partial username match. Used in admin search, analytics, and bulk moderation UI. Index applies."
              },
              {
                "type": "null",
                "description": "Filter users by exact or partial username match. Used in admin search, analytics, and bulk moderation UI. Index applies."
              }
            ],
            "description": "Filter users by exact or partial username match. Used in admin search, analytics, and bulk moderation UI. Index applies."
          },
          "email": {
            "oneOf": [
              {
                "type": "string",
                "format": "email",
                "description": "Filter by user email. Used for audits, queries, or registration conflict resolution. Uniqueness enforced."
              },
              {
                "type": "null",
                "format": "email",
                "description": "Filter by user email. Used for audits, queries, or registration conflict resolution. Uniqueness enforced."
              }
            ],
            "description": "Filter by user email. Used for audits, queries, or registration conflict resolution. Uniqueness enforced."
          },
          "is_active": {
            "oneOf": [
              {
                "type": "boolean",
                "description": "Filter for active/inactive account status. For admin dashboards, onboarding flows, or maintenance checks."
              },
              {
                "type": "null",
                "description": "Filter for active/inactive account status. For admin dashboards, onboarding flows, or maintenance checks."
              }
            ],
            "description": "Filter for active/inactive account status. For admin dashboards, onboarding flows, or maintenance checks."
          },
          "created_from": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Lower bound for filtering by creation date. Used in analytics and account trend reports."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Lower bound for filtering by creation date. Used in analytics and account trend reports."
              }
            ],
            "description": "Lower bound for filtering by creation date. Used in analytics and account trend reports."
          },
          "created_to": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Upper bound for filtering by creation date. Used to set range limits in user listing, export, or analytic reports."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Upper bound for filtering by creation date. Used to set range limits in user listing, export, or analytic reports."
              }
            ],
            "description": "Upper bound for filtering by creation date. Used to set range limits in user listing, export, or analytic reports."
          },
          "deleted": {
            "oneOf": [
              {
                "type": "boolean",
                "description": "Search for users by soft-delete status (null/true/false). Used for GDPR audit, restoration, or compliance enumeration."
              },
              {
                "type": "null",
                "description": "Search for users by soft-delete status (null/true/false). Used for GDPR audit, restoration, or compliance enumeration."
              }
            ],
            "description": "Search for users by soft-delete status (null/true/false). Used for GDPR audit, restoration, or compliance enumeration."
          }
        },
        "description": "User search/filter request body for PATCH /discussionBoard/users. Follows pagination/filter/search contracts. Based on discussion_board_user schema, matches business context, role-based access, and 3NF normalization.",
        "required": []
      },
      "IPageIDiscussionBoardUser": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardUser"
            },
            "description": "Array of user records in the page. Each item matches the user entity structure."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page of user records. Used for list/search results in user admin endpoints following IPage<T> structure."
      },
      "IDiscussionBoardUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user. Primary key of discussion_board_user table. Referenced in all user relations. 3NF enforced."
          },
          "username": {
            "type": "string",
            "description": "Unique display and mention name. Used for on-site display, at-mentions, and account navigation. Uniqueness required."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's registration and notification address. Unique per user. Stored only as a unique identifier, not for marketing per privacy rules."
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the account is currently active. Used in onboarding, moderation, ban logic, and as a filter for account actions."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when user was created. Used for audit trails, analytics, and onboarding reports."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when user was last updated, e.g., for profile edits, moderation actions, or credential changes."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Soft delete timestamp. If null, user is active; if set, user is deactivated for moderation, GDPR, or account closure. Used for compliance and reversible moderation."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Soft delete timestamp. If null, user is active; if set, user is deactivated for moderation, GDPR, or account closure. Used for compliance and reversible moderation."
              }
            ],
            "description": "Soft delete timestamp. If null, user is active; if set, user is deactivated for moderation, GDPR, or account closure. Used for compliance and reversible moderation."
          }
        },
        "required": [
          "id",
          "username",
          "email",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "description": "A registered user core entity. Implements business logic for user registration, login, account lifecycle, moderation. Per discussion_board_user Prisma model, all fields normalized. Excludes password_hash for security; only referenceable in internal logic."
      },
      "IDiscussionBoardUser.ICreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Chosen unique username for identity and mentions. Must pass uniqueness checks before insert."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Unique, valid email for registration and notifications. Used for identification throughout the board."
          },
          "password_hash": {
            "type": "string",
            "description": "One-way hashed user password. Presentation layer must hash before submission—never stored or transmitted in cleartext, strictly for secure authentication."
          },
          "is_active": {
            "type": "boolean",
            "description": "Account activation state at creation. Set true for immediate enabling, false for pre-activation flow by admin/policy."
          }
        },
        "required": [
          "username",
          "email",
          "password_hash",
          "is_active"
        ],
        "description": "Input contract for new user registration or admin-initiated creation. Enforces all DB constraints on discussion_board_user—username/email uniqueness, password security, and policy-driven status."
      },
      "IDiscussionBoardUser.IUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "New username (if updating). Must remain unique; enforced on update. Used in profile management or admin correction."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "New email, must be unique; subject to email verification on update. Used for profile self-management and admin correction."
          },
          "is_active": {
            "type": "boolean",
            "description": "Change account status (e.g. activate/deactivate). Used for moderation, admin actions, or onboarding process. If set to false, triggers account freeze/disable rules."
          }
        },
        "description": "Payload for updating user core fields. Only updatable fields are included (username, email, is_active). Used in user-driven or moderated updates. Password change uses separate endpoint for security.",
        "required": []
      },
      "IOperationStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code or message (e.g. 'deleted', 'disabled', 'success'). Indicates operation result."
          }
        },
        "description": "Standard operation status response for destructive/side-effect endpoints (e.g., delete, disable). Indicates whether the operation was successful or what final state was reached.",
        "required": []
      },
      "IDiscussionBoardUserProfile.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Pagination parameter: page number as in IPage.IRequest contract. For listing user profiles in pages."
              },
              {
                "type": "null",
                "description": "Pagination parameter: page number as in IPage.IRequest contract. For listing user profiles in pages."
              }
            ],
            "description": "Pagination parameter: page number as in IPage.IRequest contract. For listing user profiles in pages."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Max number of records per page as in IPage.IRequest. Used for bulk listing or analytics."
              },
              {
                "type": "null",
                "description": "Max number of records per page as in IPage.IRequest. Used for bulk listing or analytics."
              }
            ],
            "description": "Max number of records per page as in IPage.IRequest. Used for bulk listing or analytics."
          },
          "display_name": {
            "oneOf": [
              {
                "type": "string",
                "description": "Display name for filter/search operations. Supports text search (gin_trgm index) for leaderboards, showcase, or moderation."
              },
              {
                "type": "null",
                "description": "Display name for filter/search operations. Supports text search (gin_trgm index) for leaderboards, showcase, or moderation."
              }
            ],
            "description": "Display name for filter/search operations. Supports text search (gin_trgm index) for leaderboards, showcase, or moderation."
          },
          "bio": {
            "oneOf": [
              {
                "type": "string",
                "description": "Filter/query for users with matching or non-empty biographies. Used for directory enrichment, audits, or custom discovery workflows."
              },
              {
                "type": "null",
                "description": "Filter/query for users with matching or non-empty biographies. Used for directory enrichment, audits, or custom discovery workflows."
              }
            ],
            "description": "Filter/query for users with matching or non-empty biographies. Used for directory enrichment, audits, or custom discovery workflows."
          },
          "profile_picture_uri": {
            "oneOf": [
              {
                "type": "string",
                "description": "Query by avatar/profile image URI content. Used for upload review, analytics, or profile completeness."
              },
              {
                "type": "null",
                "description": "Query by avatar/profile image URI content. Used for upload review, analytics, or profile completeness."
              }
            ],
            "description": "Query by avatar/profile image URI content. Used for upload review, analytics, or profile completeness."
          }
        },
        "description": "Request container for profile search/filter/pagination, used in PATCH /discussionBoard/userProfiles. Directly references discussion_board_user_profile schema with 3NF atomic fields. Standard IPage.IRequest style pagination.",
        "required": []
      },
      "IPageIDiscussionBoardUserProfile": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardUserProfile"
            },
            "description": "List of profile entity results (page slice) from user profile table."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated result for user profile search/listing. Follows IPage<T> pattern with data and pagination metadata."
      },
      "IDiscussionBoardUserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for profile record. PK of discussion_board_user_profile. Joins user for display and enrichment."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "FK to core user entity. Ensures strict 1:1 relationship between user and profile per unique index."
          },
          "display_name": {
            "oneOf": [
              {
                "type": "string",
                "description": "Custom display alias for user. Optional, but supports search/enrichment."
              },
              {
                "type": "null",
                "description": "Custom display alias for user. Optional, but supports search/enrichment."
              }
            ],
            "description": "Custom display alias for user. Optional, but supports search/enrichment."
          },
          "bio": {
            "oneOf": [
              {
                "type": "string",
                "description": "User biography text, if any. Used for display and analytics. Optional."
              },
              {
                "type": "null",
                "description": "User biography text, if any. Used for display and analytics. Optional."
              }
            ],
            "description": "User biography text, if any. Used for display and analytics. Optional."
          },
          "profile_picture_uri": {
            "oneOf": [
              {
                "type": "string",
                "description": "URI/link to user's avatar/profile image. Optional, validated as URI string; can be internal/external link. Supports upload review and GDPR removal."
              },
              {
                "type": "null",
                "description": "URI/link to user's avatar/profile image. Optional, validated as URI string; can be internal/external link. Supports upload review and GDPR removal."
              }
            ],
            "description": "URI/link to user's avatar/profile image. Optional, validated as URI string; can be internal/external link. Supports upload review and GDPR removal."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation datetime. Used for audit, onboarding, and history."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last update to this profile. Enables change tracking and analytics."
          }
        },
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "description": "Normalized user profile record per discussion_board_user_profile Prisma model. Holds profile enrichment fields, with strict separation from core user auth info for GDPR and modular design."
      },
      "IDiscussionBoardUserProfile.ICreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "FK to core user entity. Enforced as unique per user. Ties profile to account."
          },
          "display_name": {
            "oneOf": [
              {
                "type": "string",
                "description": "Display alias for user (optional). Shown in UIs, search, and analytics if provided."
              },
              {
                "type": "null",
                "description": "Display alias for user (optional). Shown in UIs, search, and analytics if provided."
              }
            ],
            "description": "Display alias for user (optional). Shown in UIs, search, and analytics if provided."
          },
          "bio": {
            "oneOf": [
              {
                "type": "string",
                "description": "User bio content (optional). For self-presentation/discovery."
              },
              {
                "type": "null",
                "description": "User bio content (optional). For self-presentation/discovery."
              }
            ],
            "description": "User bio content (optional). For self-presentation/discovery."
          },
          "profile_picture_uri": {
            "oneOf": [
              {
                "type": "string",
                "description": "Profile avatar (optional). URI string, file or web link. Can be blank/null."
              },
              {
                "type": "null",
                "description": "Profile avatar (optional). URI string, file or web link. Can be blank/null."
              }
            ],
            "description": "Profile avatar (optional). URI string, file or web link. Can be blank/null."
          }
        },
        "required": [
          "user_id"
        ],
        "description": "Payload for creating a new user profile record, per discussion_board_user_profile. Only user_id required; other fields optional. Creation imposes uniqueness of user_id for 1:1 constraint."
      },
      "IDiscussionBoardUserProfile.IUpdate": {
        "type": "object",
        "properties": {
          "display_name": {
            "oneOf": [
              {
                "type": "string",
                "description": "New display name to set (nullable for removal)."
              },
              {
                "type": "null",
                "description": "New display name to set (nullable for removal)."
              }
            ],
            "description": "New display name to set (nullable for removal)."
          },
          "bio": {
            "oneOf": [
              {
                "type": "string",
                "description": "Updated biography text (nullable for removal)."
              },
              {
                "type": "null",
                "description": "Updated biography text (nullable for removal)."
              }
            ],
            "description": "Updated biography text (nullable for removal)."
          },
          "profile_picture_uri": {
            "oneOf": [
              {
                "type": "string",
                "description": "New avatar image URI (nullable to remove image/ref)."
              },
              {
                "type": "null",
                "description": "New avatar image URI (nullable to remove image/ref)."
              }
            ],
            "description": "New avatar image URI (nullable to remove image/ref)."
          }
        },
        "description": "Payload for updating a user profile's display_name, bio, or avatar link. Follows GDPR principles—blank/null disables/removes a field.",
        "required": []
      },
      "IDiscussionBoardRoleAssignment.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Page number to retrieve in role assignment listing/search."
              },
              {
                "type": "null",
                "description": "Page number to retrieve in role assignment listing/search."
              }
            ],
            "description": "Page number to retrieve in role assignment listing/search."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Maximum number of role assignments to return per page."
              },
              {
                "type": "null",
                "description": "Maximum number of role assignments to return per page."
              }
            ],
            "description": "Maximum number of role assignments to return per page."
          },
          "user_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Filter records by user UUID (role assignment owner)."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Filter records by user UUID (role assignment owner)."
              }
            ],
            "description": "Filter records by user UUID (role assignment owner)."
          },
          "role_type": {
            "oneOf": [
              {
                "type": "string",
                "description": "Filter/search by specific role assignment ('member', 'admin', 'moderator', 'guest')."
              },
              {
                "type": "null",
                "description": "Filter/search by specific role assignment ('member', 'admin', 'moderator', 'guest')."
              }
            ],
            "description": "Filter/search by specific role assignment ('member', 'admin', 'moderator', 'guest')."
          },
          "assigned_from": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Lower inclusive bound of role assignment date for filter/range queries."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Lower inclusive bound of role assignment date for filter/range queries."
              }
            ],
            "description": "Lower inclusive bound of role assignment date for filter/range queries."
          },
          "assigned_to": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Upper inclusive bound of role assignment date for filter/range queries."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Upper inclusive bound of role assignment date for filter/range queries."
              }
            ],
            "description": "Upper inclusive bound of role assignment date for filter/range queries."
          },
          "revoked": {
            "oneOf": [
              {
                "type": "boolean",
                "description": "Restrict to revoked (false), active (true) or all role assignments."
              },
              {
                "type": "null",
                "description": "Restrict to revoked (false), active (true) or all role assignments."
              }
            ],
            "description": "Restrict to revoked (false), active (true) or all role assignments."
          }
        },
        "description": "Role assignment list/search filter object, supporting pagination, assignment, and revocation status queries. Applies to PATCH /discussionBoard/roleAssignments and similar endpoints. Direct reference to discussion_board_role_assignment structure.",
        "required": []
      },
      "IPage.IPagination": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "format": "uint32"
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "description": "페이지당 최대 레코드 수. 디폴트 100"
          },
          "records": {
            "type": "integer",
            "format": "uint32",
            "description": "전체 레코드 수(조건 적용 후)"
          },
          "pages": {
            "type": "integer",
            "format": "uint32",
            "description": "전체 페이지 수. records/limit 올림"
          }
        },
        "required": [
          "current",
          "limit",
          "records",
          "pages"
        ],
        "description": "페이지네이션 정보입니다. 현재 페이지, 해당 쿼리의 limit, 전체 레코드 수, 계산된 전체 페이지 수 등 제공합니다.\n\nPrisma 스키마에 의한 표준 IPage 구조를 따릅니다."
      },
      "IPageIDiscussionBoardRoleAssignment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보를 포함합니다.\n\n이 객체는 현재 페이지, 페이지당 항목 수, 총 레코드 수 및 전체 페이지 수 등 요청 데이터의 페이징 상태를 상세히 설명합니다."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardRoleAssignment"
            },
            "description": "페이지네이션 된 롤 할당 목록입니다.\n\n각 항목은 discussion_board_role_assignment의 세부 정보를 모두 포함하며, 검색 조건에 따라 필터링/정렬됩니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "롤 할당 레코드의 페이지네이션된 컨테이너입니다.\n\n이 타입은 페이징된 discussion_board_role_assignment 조회 결과를 구조화된 형태로 제공합니다.\n관리자/UI 대시보드에서 롤 권한 이력 목록을 표시하거나 통계 분석, 대량 권한 작업, RBAC(역할 기반 접근제어) 정책 검토 시 활용됩니다. 내부적으로 표준 IPage 구조를 따릅니다."
      },
      "IDiscussionBoardRoleAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "롤 할당 레코드 고유 식별자 (UUID)\n\n프리즈마 discussion_board_role_assignment 테이블의 기본 키입니다. 각 롤 할당은 이 값을 기준으로 참조하거나 단일 상세 조회를 진행합니다."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "권한 할당 대상 유저의 고유 식별자 (UUID)\n\n실제 discussion_board_user를 참조하며, 사용자별 롤 변경 및 권한 조회의 기준점이 됩니다."
          },
          "role_type": {
            "type": "string",
            "description": "할당된 롤 유형(예: member, moderator, admin, guest)\n\n시스템에서 허용하는 롤 값만 입력해야 하며, RBAC 정책 및 프리즈마 ENUM과 연동됩니다."
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "description": "이 롤이 유저에게 할당된 시각(ISO 8601 timestamp)\n\n정확한 역할 시작일 및 변경 이력을 감사(audit) 용도로 제공합니다."
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "롤 권한 회수가 발생한 시점 (없을 경우 null)\n\n로그성 데이터로, 해지된 롤은 별도 관리 및 분석에 활용합니다."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "롤 권한 회수가 발생한 시점 (없을 경우 null)\n\n로그성 데이터로, 해지된 롤은 별도 관리 및 분석에 활용합니다."
              }
            ],
            "description": "롤 권한 회수가 발생한 시점 (없을 경우 null)\n\n로그성 데이터로, 해지된 롤은 별도 관리 및 분석에 활용합니다."
          }
        },
        "required": [
          "id",
          "user_id",
          "role_type",
          "assigned_at"
        ],
        "description": "discussion_board_role_assignment 엔터티(롤 할당 단일 건)에 대한 세부 정보 타입입니다.\n\n이 타입은 특정 유저가 언제 어떤 역할을 할당/회수받았는지에 대한 사건 이력을 그대로 구조화합니다. RBAC(역할 기반 접근제어) 정책, 관리자 권한 부여, 롤 히스토리, 감사 로그 등에 실제 사용됩니다. 프리즈마 스키마의 컬럼과 1:1로 매핑되며, 각 필드는 상세 주석이 첨부되어 가이드합니다."
      },
      "IDiscussionBoardRoleAssignment.ICreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "권한을 할당할 타깃 유저의 고유 식별자 (UUID)\n\n회원 가입 또는 기존 유저에게 특정 역할을 부여할 때 이를 지정합니다."
          },
          "role_type": {
            "type": "string",
            "description": "새로 부여하고자 하는 롤 타입(예: member, moderator, admin, guest)\n\n정확히 허용된 값만 입력해야 합니다. 관리자 패널에서는 ENUM 선택을 지원합니다."
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "description": "해당 롤의 부여 시각(UTC 표준, ISO 8601)\n\n즉시 할당이면 현재 시각, 이력 통합시 과거값을 선택할 수 있습니다."
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "롤 권한 해지(회수)가 예정 또는 즉시 반영되는 뉴스(없을 경우 null)\n\n권한 유지 기간이 제한된 특별 롤(임시 권한) 부여에 활용됩니다."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "롤 권한 해지(회수)가 예정 또는 즉시 반영되는 뉴스(없을 경우 null)\n\n권한 유지 기간이 제한된 특별 롤(임시 권한) 부여에 활용됩니다."
              }
            ],
            "description": "롤 권한 해지(회수)가 예정 또는 즉시 반영되는 뉴스(없을 경우 null)\n\n권한 유지 기간이 제한된 특별 롤(임시 권한) 부여에 활용됩니다."
          }
        },
        "required": [
          "user_id",
          "role_type",
          "assigned_at"
        ],
        "description": "새로운 롤 권한 할당 생성 요청 타입입니다.\n\n프리즈마의 discussion_board_role_assignment 생성 작업에 사용되며, 대상 유저, 부여할 롤 타입, 시작 일시, 해지 시점(선택)을 명확히 선언해야 합니다. 관리자나 자동화 시스템(예: 정책에 의한 자동 롤 권한)에서 활용됩니다."
      },
      "IDiscussionBoardRoleAssignment.IUpdate": {
        "type": "object",
        "properties": {
          "role_type": {
            "type": "string",
            "description": "변경하려는 롤 유형(예: member, admin, moderator 등)\n\n관리자 또는 정책에 따라 롤 타겟이 바뀔 때 입력합니다."
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "롤 회수/해지 시점 (없으면 null)\n\n회수 일자를 등록/수정하여 롤 종료나 임시권한 만료를 구현합니다."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "롤 회수/해지 시점 (없으면 null)\n\n회수 일자를 등록/수정하여 롤 종료나 임시권한 만료를 구현합니다."
              }
            ],
            "description": "롤 회수/해지 시점 (없으면 null)\n\n회수 일자를 등록/수정하여 롤 종료나 임시권한 만료를 구현합니다."
          }
        },
        "required": [
          "role_type"
        ],
        "description": "기존 롤 권한 할당 엔터티의 정보 수정 요청 타입입니다.\n\n하나의 롤 할당을 식별(경로 파라미터 등)하여, 롤 타입(역할) 또는 회수 일시(revoked_at)를 변경할 때 사용합니다. 롤 타입 미변경시 revoked_at만 갱신 가능합니다."
      },
      "IDiscussionBoardAdmin.IRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "특정 유저 UUID(주로 관리자 리스트/검색용)"
          }
        },
        "description": "discussion_board_admin 레코드(관리자 권한 할당 메타 정보) 검색용 요청 타입입니다.\n\n관리자 계정 검색, 필터링(특정 유저별, 기간별 등), 대시보드 리스트에 적용 가능합니다. 기본적으로 페이징/검색 조건을 포함해 정의됩니다.",
        "required": []
      },
      "IPageIDiscussionBoardAdmin": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보\n\n현재 페이지, 한 페이지당 레코드 수, 전체 데이터 수, 페이지 수 등의 정보를 포함합니다."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardAdmin"
            },
            "description": "관리자 메타데이터 객체의 페이징 리스트.\n\n각 원소는 단일 discussion_board_admin 상세 정보를 담습니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "discussion_board_admin 엔터티에 대한 페이징 컨테이너입니다.\n\n관리자 권한 부여 이력 조회, 관리자 메타데이터 분석, 감사 로그 출력에 최적화되어 있으며, IPage 컨벤션 및 표준 필드 서술 가이드가 반영되어 있습니다."
      },
      "IDiscussionBoardAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "관리자 메타데이터 엔터티 고유 키값(UUID)\n\n프리즈마 discussion_board_admin 테이블의 PK입니다."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "관리자 권한이 부여된 유저의 고유 식별자(UUID)\n\n핵심 discussion_board_user와 1:1 매핑합니다."
          },
          "elevation_reason": {
            "oneOf": [
              {
                "type": "string",
                "description": "관리자 권한 부여 사유(옵션 필드, null 허용)\n\n관리자 지정/임명 근거 정책, 비고 등을 자유롭게 서술합니다."
              },
              {
                "type": "null",
                "description": "관리자 권한 부여 사유(옵션 필드, null 허용)\n\n관리자 지정/임명 근거 정책, 비고 등을 자유롭게 서술합니다."
              }
            ],
            "description": "관리자 권한 부여 사유(옵션 필드, null 허용)\n\n관리자 지정/임명 근거 정책, 비고 등을 자유롭게 서술합니다."
          },
          "notes": {
            "oneOf": [
              {
                "type": "string",
                "description": "관리자 관련 특이사항 및 메모\n\n정책, 담당자 연락처, 관리영역 등 자유 양식으로 기재합니다."
              },
              {
                "type": "null",
                "description": "관리자 관련 특이사항 및 메모\n\n정책, 담당자 연락처, 관리영역 등 자유 양식으로 기재합니다."
              }
            ],
            "description": "관리자 관련 특이사항 및 메모\n\n정책, 담당자 연락처, 관리영역 등 자유 양식으로 기재합니다."
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "description": "관리자 권한 최초 부여 일자(ISO 8601)\n\n정식 권한 시작일 감사 및 이력 추적에 필수입니다."
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "관리자 권한 회수 일자 (없으면 null)\n\n인사/정책상 권한 회수 등으로 회수 이력 관리에 사용합니다."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "관리자 권한 회수 일자 (없으면 null)\n\n인사/정책상 권한 회수 등으로 회수 이력 관리에 사용합니다."
              }
            ],
            "description": "관리자 권한 회수 일자 (없으면 null)\n\n인사/정책상 권한 회수 등으로 회수 이력 관리에 사용합니다."
          }
        },
        "required": [
          "id",
          "user_id",
          "assigned_at"
        ],
        "description": "discussion_board_admin 엔터티(관리자 권한 부여 메타데이터)의 단건 상세 타입입니다.\n\n이 타입은 각 관리자 할당에 대해 유저 식별, 권한 부여/회수, 담당 영역, 비고 등 정책 적용 및 감사, 이력관리 UI 및 통계 등에 활용합니다. 프리즈마 칼럼 주석과 정책 요구 조건을 상세 반영합니다."
      },
      "IDiscussionBoardAdmin.ICreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "관리자 권한을 부여할 대상 유저의 UUID\n\n실제 discussion_board_user와 1:1 매핑, 반드시 유효 유저/역할이 사전 지정되어야 함"
          },
          "elevation_reason": {
            "oneOf": [
              {
                "type": "string",
                "description": "관리자 임명 사유(정책적 설명, 내부 비고)\n\n임명 근거, 담당영역 등 자유 형식으로 입력"
              },
              {
                "type": "null",
                "description": "관리자 임명 사유(정책적 설명, 내부 비고)\n\n임명 근거, 담당영역 등 자유 형식으로 입력"
              }
            ],
            "description": "관리자 임명 사유(정책적 설명, 내부 비고)\n\n임명 근거, 담당영역 등 자유 형식으로 입력"
          },
          "notes": {
            "oneOf": [
              {
                "type": "string",
                "description": "운영상 추가 메모/비고(예: 고유 담당업무, 연락처)\n\n관리 편의용 자유 텍스트"
              },
              {
                "type": "null",
                "description": "운영상 추가 메모/비고(예: 고유 담당업무, 연락처)\n\n관리 편의용 자유 텍스트"
              }
            ],
            "description": "운영상 추가 메모/비고(예: 고유 담당업무, 연락처)\n\n관리 편의용 자유 텍스트"
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "description": "관리자 권한 부여 일자(Timestamp, ISO 8601)\n\n즉시 부여면 현재 시각, 소급 등록시 과거값 허용"
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "회수 일자(없으면 null)\n\n임시 지정/계약직등 만기일 사전 입력 가능"
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "회수 일자(없으면 null)\n\n임시 지정/계약직등 만기일 사전 입력 가능"
              }
            ],
            "description": "회수 일자(없으면 null)\n\n임시 지정/계약직등 만기일 사전 입력 가능"
          }
        },
        "required": [
          "user_id",
          "assigned_at"
        ],
        "description": "새 관리자 레코드 생성 요청 타입입니다.\n\n프리즈마 discussion_board_admin 테이블 생성 API 요청 바디로 활용되며, 타겟 유저 UUID, 부여 시각, (선택)임명사유/비고/회수일등을 포함합니다. 외부 정책/관리툴/자동화에서 호출시에도 활용할 수 있습니다."
      },
      "IDiscussionBoardAdmin.IUpdate": {
        "type": "object",
        "properties": {
          "elevation_reason": {
            "oneOf": [
              {
                "type": "string",
                "description": "관리자 임명 사유(내부/정책적 설명)\n\n임명 정책변경, 이력보완 등으로 수정 필요시 사용"
              },
              {
                "type": "null",
                "description": "관리자 임명 사유(내부/정책적 설명)\n\n임명 정책변경, 이력보완 등으로 수정 필요시 사용"
              }
            ],
            "description": "관리자 임명 사유(내부/정책적 설명)\n\n임명 정책변경, 이력보완 등으로 수정 필요시 사용"
          },
          "notes": {
            "oneOf": [
              {
                "type": "string",
                "description": "관리자 운영 관련 비고/메모 정보\n\n추가 메모, 연락처 등 정책상 업데이트 목적"
              },
              {
                "type": "null",
                "description": "관리자 운영 관련 비고/메모 정보\n\n추가 메모, 연락처 등 정책상 업데이트 목적"
              }
            ],
            "description": "관리자 운영 관련 비고/메모 정보\n\n추가 메모, 연락처 등 정책상 업데이트 목적"
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "권한 회수 일자(필요시 업데이트)\n\n최신 상태 반영 갱신. null로 두면 권한 유지"
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "권한 회수 일자(필요시 업데이트)\n\n최신 상태 반영 갱신. null로 두면 권한 유지"
              }
            ],
            "description": "권한 회수 일자(필요시 업데이트)\n\n최신 상태 반영 갱신. null로 두면 권한 유지"
          }
        },
        "required": [],
        "description": "기존 관리자 메타데이터 수정 요청 타입입니다.\n\n단일 discussion_board_admin 레코드에서 임명 사유, 운영 비고, 회수시점 등 수정 목적 전용으로 사용합니다. PK 및 user_id, assigned_at은 불변 필드로 간주합니다."
      },
      "IDiscussionBoardModerator.IRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "특정 모더레이터 담당 유저의 UUID(필터링용)"
          }
        },
        "description": "discussion_board_moderator 엔터티 목록(필터 요청용) 구조체입니다.\n\n특정 모더레이터, 선임/해임 이벤트, 기간 필터 등 검색/정렬에 사용하며, 관리자 대시보드, UI 필터, 통계 API 등에서 활용됩니다.",
        "required": []
      },
      "IPageIDiscussionBoardModerator": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 컨테이너(현재 페이지, limit, 전체 count 등 포함)"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardModerator"
            },
            "description": "discussion_board_moderator의 페이징 결과 목록\n\n각 원소에는 모더레이터 이력 및 상세 변동 정보가 포함됨"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "discussion_board_moderator(모더레이터 담당/이력) 데이터의 페이징 결과 컨테이너입니다.\n\n모더레이터 목록조회, 선임/해임 이력, 운영권한 감사 등 관리 인터페이스, 통계 UI 등에 표준 적용됩니다."
      },
      "IDiscussionBoardModerator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "모더레이터 메타데이터 고유 식별자(UUID, PK)\n\n프리즈마 discussion_board_moderator 테이블 주키"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "해당 모더레이터 권한이 부여된 유저의 UUID\n\ndiscussion_board_user와 1:1 매핑"
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "description": "모더레이터 권한 부여 일자(ISO 8601)"
          },
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "모더레이터 권한 회수 시점(null 허용)\n\n모더레이터 담당 해임 등으로 역할 종료시 기입"
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "모더레이터 권한 회수 시점(null 허용)\n\n모더레이터 담당 해임 등으로 역할 종료시 기입"
              }
            ],
            "description": "모더레이터 권한 회수 시점(null 허용)\n\n모더레이터 담당 해임 등으로 역할 종료시 기입"
          },
          "notes": {
            "oneOf": [
              {
                "type": "string",
                "description": "모더레이터 담당 내역/비고/특이사항(필요시 작성)\n\n운영 담당구분, 임시 담당 등 자유기재 허용"
              },
              {
                "type": "null",
                "description": "모더레이터 담당 내역/비고/특이사항(필요시 작성)\n\n운영 담당구분, 임시 담당 등 자유기재 허용"
              }
            ],
            "description": "모더레이터 담당 내역/비고/특이사항(필요시 작성)\n\n운영 담당구분, 임시 담당 등 자유기재 허용"
          }
        },
        "required": [
          "id",
          "user_id",
          "assigned_at"
        ],
        "description": "discussion_board_moderator 메타데이터 단일 상세 타입입니다.\n\n어떤 유저가 언제 모더레이터로 지정(또는 해임)되었는지, 담당 메모 등 운영권한 감사와 이력관리, 정책 실적집계, 인사관리 등에 활용합니다."
      },
      "IDiscussionBoardModerator.ICreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier (UUID) of the user being assigned as a moderator. Must refer to a valid user in the discussion_board_user table. Satisfies the requirement to link moderator privileges to a specific user. Required for all moderator creation actions."
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp in ISO 8601 format for when the moderator assignment starts. Fulfills audit and history requirements. Required for establishing moderator status."
          },
          "notes": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional comments or notes for the moderator assignment. Can include onboarding notes, special qualifications, or references for internal tracking. Not required for creation but recommended for audit/compliance."
              },
              {
                "type": "null",
                "description": "Optional comments or notes for the moderator assignment. Can include onboarding notes, special qualifications, or references for internal tracking. Not required for creation but recommended for audit/compliance."
              }
            ],
            "description": "Optional comments or notes for the moderator assignment. Can include onboarding notes, special qualifications, or references for internal tracking. Not required for creation but recommended for audit/compliance."
          }
        },
        "required": [
          "user_id",
          "assigned_at"
        ],
        "description": "Payload for creating a new moderator assignment. Used by admin users to grant moderation privileges to a user. See discussion_board_moderator Prisma schema and admin/role requirements. Ensures unique moderator assignments and records audit information."
      },
      "IDiscussionBoardModerator.IUpdate": {
        "type": "object",
        "properties": {
          "revoked_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp for when moderator privileges are revoked, if applicable. Null if moderator is still active. Used for curtailing or sunset of moderator roles. Optional at update."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Timestamp for when moderator privileges are revoked, if applicable. Null if moderator is still active. Used for curtailing or sunset of moderator roles. Optional at update."
              }
            ],
            "description": "Timestamp for when moderator privileges are revoked, if applicable. Null if moderator is still active. Used for curtailing or sunset of moderator roles. Optional at update."
          },
          "notes": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional: Updated comments or administrative notes explaining the reason for revoking or changing moderator privileges. Can contain onboarding notes or end-of-service summaries."
              },
              {
                "type": "null",
                "description": "Optional: Updated comments or administrative notes explaining the reason for revoking or changing moderator privileges. Can contain onboarding notes or end-of-service summaries."
              }
            ],
            "description": "Optional: Updated comments or administrative notes explaining the reason for revoking or changing moderator privileges. Can contain onboarding notes or end-of-service summaries."
          }
        },
        "required": [],
        "description": "Data to update a moderator record. Used for revoking moderation, editing notes, or changing sunset status. For use by admins per discussion_board_moderator update requirements."
      },
      "IDiscussionBoardGuest.IRequest": {
        "type": "object",
        "properties": {
          "session_token": {
            "oneOf": [
              {
                "type": "string",
                "description": "Filter by guest session token. Optional; can be null to disable session token filtering."
              },
              {
                "type": "null",
                "description": "Filter by guest session token. Optional; can be null to disable session token filtering."
              }
            ],
            "description": "Filter by guest session token. Optional; can be null to disable session token filtering."
          },
          "first_seen_at_start": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Lower boundary for the guest's first seen timestamp (inclusive). Optional; can be null."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Lower boundary for the guest's first seen timestamp (inclusive). Optional; can be null."
              }
            ],
            "description": "Lower boundary for the guest's first seen timestamp (inclusive). Optional; can be null."
          },
          "first_seen_at_end": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Upper boundary for the guest's first seen timestamp (inclusive). Optional; can be null."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Upper boundary for the guest's first seen timestamp (inclusive). Optional; can be null."
              }
            ],
            "description": "Upper boundary for the guest's first seen timestamp (inclusive). Optional; can be null."
          },
          "last_seen_at_start": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Lower boundary for the guest's last seen timestamp (inclusive). Optional; can be null."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Lower boundary for the guest's last seen timestamp (inclusive). Optional; can be null."
              }
            ],
            "description": "Lower boundary for the guest's last seen timestamp (inclusive). Optional; can be null."
          },
          "last_seen_at_end": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Upper boundary for the guest's last seen timestamp (inclusive). Optional; can be null."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Upper boundary for the guest's last seen timestamp (inclusive). Optional; can be null."
              }
            ],
            "description": "Upper boundary for the guest's last seen timestamp (inclusive). Optional; can be null."
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Pagination: The page number to fetch (1-based). Optional; default is 1."
              },
              {
                "type": "null",
                "description": "Pagination: The page number to fetch (1-based). Optional; default is 1."
              }
            ],
            "description": "Pagination: The page number to fetch (1-based). Optional; default is 1."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Pagination: The maximum number of guest records to return per page. Optional; default is 100."
              },
              {
                "type": "null",
                "description": "Pagination: The maximum number of guest records to return per page. Optional; default is 100."
              }
            ],
            "description": "Pagination: The maximum number of guest records to return per page. Optional; default is 100."
          }
        },
        "required": [],
        "description": "Payload for searching and paginating guest records (discussion_board_guest) by admin/system interfaces. Enables filtering by session token, observation windows, and basic pagination. Used for analytics, maintenance, and auditing."
      },
      "IPageDiscussionBoardGuest": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardGuest"
            },
            "description": "Array of discussion_board_guest records matching search/filter criteria. May be an empty array if no results for given page/limit."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Container for paginated guest records. Data structure for responses from guest search/list endpoints. \"pagination\" contains paging info, \"data\" is the array of guest records."
      },
      "IDiscussionBoardGuest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key for the guest record. Unique identifier for guests, as specified in discussion_board_guest schema."
          },
          "session_token": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional guest session token string, used for tracking and analytics. May be null if not assigned."
              },
              {
                "type": "null",
                "description": "Optional guest session token string, used for tracking and analytics. May be null if not assigned."
              }
            ],
            "description": "Optional guest session token string, used for tracking and analytics. May be null if not assigned."
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of first observed activity (UTC, ISO 8601 format) for this guest."
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of latest recorded activity (UTC, ISO 8601 format) for this guest."
          }
        },
        "required": [
          "id",
          "first_seen_at",
          "last_seen_at"
        ],
        "description": "Represents a guest entity as per discussion_board_guest schema. Used for displaying or processing guest analytics, audit, or system usage tracking. Contains only atomic guest fields."
      },
      "IDiscussionBoardGuest.ICreate": {
        "type": "object",
        "properties": {
          "session_token": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional guest session token to associate with the new guest. May be omitted/null for standard guest creation."
              },
              {
                "type": "null",
                "description": "Optional guest session token to associate with the new guest. May be omitted/null for standard guest creation."
              }
            ],
            "description": "Optional guest session token to associate with the new guest. May be omitted/null for standard guest creation."
          }
        },
        "required": [],
        "description": "Payload for creating a new guest record (discussion_board_guest). Can supply a session token for analytic/audit purposes; other fields handled by system."
      },
      "IDiscussionBoardGuest.IUpdate": {
        "type": "object",
        "properties": {
          "session_token": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optionally update the guest's session token for analytics or tracking changes. Null disables the session token."
              },
              {
                "type": "null",
                "description": "Optionally update the guest's session token for analytics or tracking changes. Null disables the session token."
              }
            ],
            "description": "Optionally update the guest's session token for analytics or tracking changes. Null disables the session token."
          },
          "last_seen_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Optionally update the last seen timestamp for this guest. May be set to null for certain analytic situations."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Optionally update the last seen timestamp for this guest. May be set to null for certain analytic situations."
              }
            ],
            "description": "Optionally update the last seen timestamp for this guest. May be set to null for certain analytic situations."
          }
        },
        "required": [],
        "description": "Payload for updating a guest record in the audit/analytics system (discussion_board_guest). Used by system actors to record new activity or track session key changes."
      },
      "IDiscussionBoardForumCategory.IRequest": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional: Filter categories by display name (case-insensitive, supports partial match). Null disables name filtering."
              },
              {
                "type": "null",
                "description": "Optional: Filter categories by display name (case-insensitive, supports partial match). Null disables name filtering."
              }
            ],
            "description": "Optional: Filter categories by display name (case-insensitive, supports partial match). Null disables name filtering."
          },
          "created_at_start": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Lower boundary for creation timestamp filter. Null disables this boundary."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Lower boundary for creation timestamp filter. Null disables this boundary."
              }
            ],
            "description": "Lower boundary for creation timestamp filter. Null disables this boundary."
          },
          "created_at_end": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Upper boundary for creation timestamp filter. Null disables this boundary."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Upper boundary for creation timestamp filter. Null disables this boundary."
              }
            ],
            "description": "Upper boundary for creation timestamp filter. Null disables this boundary."
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Pagination: Page number (1-based). Optional; defaults to 1 if omitted."
              },
              {
                "type": "null",
                "description": "Pagination: Page number (1-based). Optional; defaults to 1 if omitted."
              }
            ],
            "description": "Pagination: Page number (1-based). Optional; defaults to 1 if omitted."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Pagination: Maximum number of records per page. Optional; defaults to 100."
              },
              {
                "type": "null",
                "description": "Pagination: Maximum number of records per page. Optional; defaults to 100."
              }
            ],
            "description": "Pagination: Maximum number of records per page. Optional; defaults to 100."
          }
        },
        "required": [],
        "description": "Payload for finding and paginating forum categories (discussion_board_forum_category). Used by admin, moderator, or navigation APIs to filter, search, and list board categories with paging."
      },
      "IPageDiscussionBoardForumCategory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardForumCategory"
            },
            "description": "Array of forum categories fulfilling the search/pagination query."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated container of results for forum category list queries. \"pagination\" is metadata, and \"data\" contains the forum categories for each page."
      },
      "IDiscussionBoardForumCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key for the forum category (discussion_board_forum_category.id)."
          },
          "name": {
            "type": "string",
            "description": "Human-friendly display label for the forum category. Must be unique across the system. Example: \"International Politics\"."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional: Category description, may be used as UI tooltip, summary, or search enrichment."
              },
              {
                "type": "null",
                "description": "Optional: Category description, may be used as UI tooltip, summary, or search enrichment."
              }
            ],
            "description": "Optional: Category description, may be used as UI tooltip, summary, or search enrichment."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the category was created (ISO 8601, UTC)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for the most recent update to the category record (ISO 8601, UTC)."
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "Represents a single forum category entity as per the normalized 3NF schema in discussion_board_forum_category. Used for board navigation, analytics, and category CRUD endpoints."
      },
      "IDiscussionBoardForumCategory.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name for the forum category. Must be unique—cannot conflict with any existing board category. Example: \"Global Economy\". Required field for category creation."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional: Category description for search/filtering or UI summary."
              },
              {
                "type": "null",
                "description": "Optional: Category description for search/filtering or UI summary."
              }
            ],
            "description": "Optional: Category description for search/filtering or UI summary."
          }
        },
        "required": [
          "name"
        ],
        "description": "Payload for creating a new forum category (discussion_board_forum_category). Expects at least a unique category name and optionally a description."
      },
      "IDiscussionBoardForumCategory.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optionally update the display name for the category. Set to null to leave unchanged. Name must remain unique if modified."
              },
              {
                "type": "null",
                "description": "Optionally update the display name for the category. Set to null to leave unchanged. Name must remain unique if modified."
              }
            ],
            "description": "Optionally update the display name for the category. Set to null to leave unchanged. Name must remain unique if modified."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optionally update the description for this category; null disables change."
              },
              {
                "type": "null",
                "description": "Optionally update the description for this category; null disables change."
              }
            ],
            "description": "Optionally update the description for this category; null disables change."
          }
        },
        "required": [],
        "description": "Update payload for a forum category. Allows updating either/both name and description for admin/moderator category management."
      },
      "IDiscussionBoardForumSubcategory.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "페이지 번호(1부터 시작). 페이지네이션을 위한 선택적 값입니다. 만약 null이면 기본값(1) 또는 서비스 기본 동작에 따름."
              },
              {
                "type": "null",
                "description": "페이지 번호(1부터 시작). 페이지네이션을 위한 선택적 값입니다. 만약 null이면 기본값(1) 또는 서비스 기본 동작에 따름."
              }
            ],
            "description": "페이지 번호(1부터 시작). 페이지네이션을 위한 선택적 값입니다. 만약 null이면 기본값(1) 또는 서비스 기본 동작에 따름."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "페이지당 반환될 최대 하위 카테고리 수입니다. 예시: 10, 20, 50, 100 등. null이면 서비스 기본값(일반적으로 20~100) 사용."
              },
              {
                "type": "null",
                "description": "페이지당 반환될 최대 하위 카테고리 수입니다. 예시: 10, 20, 50, 100 등. null이면 서비스 기본값(일반적으로 20~100) 사용."
              }
            ],
            "description": "페이지당 반환될 최대 하위 카테고리 수입니다. 예시: 10, 20, 50, 100 등. null이면 서비스 기본값(일반적으로 20~100) 사용."
          },
          "forum_category_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "특정 상위 카테고리(Forum Category) ID(UUID)를 기준으로 하위 카테고리만 페치하고자 할 때 지정합니다. null이면 전체 하위 카테고리가 대상입니다."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "특정 상위 카테고리(Forum Category) ID(UUID)를 기준으로 하위 카테고리만 페치하고자 할 때 지정합니다. null이면 전체 하위 카테고리가 대상입니다."
              }
            ],
            "description": "특정 상위 카테고리(Forum Category) ID(UUID)를 기준으로 하위 카테고리만 페치하고자 할 때 지정합니다. null이면 전체 하위 카테고리가 대상입니다."
          },
          "name": {
            "oneOf": [
              {
                "type": "string",
                "description": "하위 카테고리명을 부분일치로 검색합니다. 예를 들어 '정책' 등. null이면 무시."
              },
              {
                "type": "null",
                "description": "하위 카테고리명을 부분일치로 검색합니다. 예를 들어 '정책' 등. null이면 무시."
              }
            ],
            "description": "하위 카테고리명을 부분일치로 검색합니다. 예를 들어 '정책' 등. null이면 무시."
          },
          "created_at_from": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "하위 카테고리 생성일(이상) 필터. ISO 8601 포맷. null이면 무시."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "하위 카테고리 생성일(이상) 필터. ISO 8601 포맷. null이면 무시."
              }
            ],
            "description": "하위 카테고리 생성일(이상) 필터. ISO 8601 포맷. null이면 무시."
          },
          "created_at_to": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "하위 카테고리 생성일(이하) 필터. ISO 8601 포맷. null이면 무시."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "하위 카테고리 생성일(이하) 필터. ISO 8601 포맷. null이면 무시."
              }
            ],
            "description": "하위 카테고리 생성일(이하) 필터. ISO 8601 포맷. null이면 무시."
          }
        },
        "required": [],
        "description": "토론 게시판의 하위 카테고리(discussion_board_forum_subcategory)에 대한 검색, 필터, 정렬, 페이지네이션 요청 타입입니다.\n\n상위 카테고리, 이름, 생성일 범위 등 다양한 조건으로 하위 카테고리를 조회하기 위해 사용합니다. 페이지네이션, 정렬 등을 지원하며 관리자/모더레이터가 대량으로 조회하거나 UI의 필터되는 목록 제공 시 사용됩니다.\n\n각 속성은 모두 선택적이며, null 또는 미지정 시 해당 조건을 무시합니다."
      },
      "IPageDiscussionBoardForumSubcategory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardForumSubcategory"
            },
            "description": "해당 페이지에 포함된 하위 카테고리 레코드 목록입니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "discussion_board_forum_subcategory를 대상으로 한 페이징 응답 타입입니다. pagination에는 현재 페이지 정보(페이지 번호, 페이지 크기, 전체 레코드, 전체 페이지 수)가 포함되고, data에는 실제 개별 하위 카테고리 엔티티가 배열로 반환됩니다.\n\n이 타입은 특정 검색 또는 필터 조건에 부합하는 하위 카테고리들의 결과 목록 제공(예: UI의 하위 카테고리 목록)에 표준적으로 사용됩니다."
      },
      "IDiscussionBoardForumSubcategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "하위 카테고리 식별자(UUID). discussion_board_forum_subcategory의 PK입니다. 모든 비즈니스/DB 참조 시 반드시 사용."
          },
          "forum_category_id": {
            "type": "string",
            "format": "uuid",
            "description": "상위 카테고리(discussion_board_forum_category)의 식별자(UUID). 어떤 상위 카테고리 소속인지 명확히 구분되며, FK로 integrity를 유지합니다."
          },
          "name": {
            "type": "string",
            "description": "하위 카테고리의 명칭(예시: '통화정책'). UI에 표시됨. Unique(동일 상위 카테고리 내 이름 중복 불가)."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "이 하위 카테고리에 대한 설명 또는 요약. 검색, 목록, 상세 화면 등에 활용됨. null 허용."
              },
              {
                "type": "null",
                "description": "이 하위 카테고리에 대한 설명 또는 요약. 검색, 목록, 상세 화면 등에 활용됨. null 허용."
              }
            ],
            "description": "이 하위 카테고리에 대한 설명 또는 요약. 검색, 목록, 상세 화면 등에 활용됨. null 허용."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "카테고리 생성 일시(ISO8601/RFC3339). Audit/logging, UI 표시 등에 활용됨."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "마지막 업데이트 일시(ISO8601/RFC3339)."
          }
        },
        "required": [
          "id",
          "forum_category_id",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "discussion_board_forum_subcategory는 특정 상위 카테고리 아래에 소속된 포럼 하위 주제 집합을 정의합니다.\n\n예시: '국내정치' 상위 카테고리 아래에 '선거제도', '지역갈등'등의 하위 카테고리들이 존재할 수 있습니다. 하위 카테고리는 포스팅/스레드 그룹핑, UI 네비게이션, 통계 및 관리적 분류 등에 사용됩니다. 이름은 상위 카테고리 내에서 고유해야 하며, 생성/수정/설명 등 메타데이터 및 외래키로 관계를 표현합니다."
      },
      "IDiscussionBoardForumSubcategory.ICreate": {
        "type": "object",
        "properties": {
          "forum_category_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 하위 카테고리가 소속될 상위 카테고리의 식별자(UUID)."
          },
          "name": {
            "type": "string",
            "description": "신규 생성될 하위 카테고리의 명칭. 동 카테고리 내 중복 불가. 예: '사회복지'. (UI 표시용)"
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "신규 생성 하위 카테고리의 설명(선택). null 가능. 예: '복지 정책 관련 토론의 모음'. "
              },
              {
                "type": "null",
                "description": "신규 생성 하위 카테고리의 설명(선택). null 가능. 예: '복지 정책 관련 토론의 모음'. "
              }
            ],
            "description": "신규 생성 하위 카테고리의 설명(선택). null 가능. 예: '복지 정책 관련 토론의 모음'. "
          }
        },
        "required": [
          "forum_category_id",
          "name"
        ],
        "description": "새로운 discussion_board_forum_subcategory (포럼 하위 카테고리) 엔티티를 생성하기 위한 입력 타입입니다.\n\nadmin/moderator가 상위 카테고리 아래에 새로운 주제 그룹을 추가할 때 사용합니다. 이름과 소속 상위 카테고리는 필수이며, 설명은 선택적으로 제공할 수 있습니다."
      },
      "IDiscussionBoardForumSubcategory.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string",
                "description": "하위 카테고리명 변경 요청 시 입력. null이면 미변경. 중복 불가(동일 상위 카테고리 내)."
              },
              {
                "type": "null",
                "description": "하위 카테고리명 변경 요청 시 입력. null이면 미변경. 중복 불가(동일 상위 카테고리 내)."
              }
            ],
            "description": "하위 카테고리명 변경 요청 시 입력. null이면 미변경. 중복 불가(동일 상위 카테고리 내)."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "하위 카테고리 설명 변경. null이면 미변경(eventually nullable, 명시적 null은 설명 삭제)."
              },
              {
                "type": "null",
                "description": "하위 카테고리 설명 변경. null이면 미변경(eventually nullable, 명시적 null은 설명 삭제)."
              }
            ],
            "description": "하위 카테고리 설명 변경. null이면 미변경(eventually nullable, 명시적 null은 설명 삭제)."
          },
          "forum_category_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "상위 카테고리 ID를 다른 값으로 이동할 때 입력. null이면 미변경."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "상위 카테고리 ID를 다른 값으로 이동할 때 입력. null이면 미변경."
              }
            ],
            "description": "상위 카테고리 ID를 다른 값으로 이동할 때 입력. null이면 미변경."
          }
        },
        "required": [],
        "description": "기존 discussion_board_forum_subcategory(하위 카테고리) 엔티티에 대해 부분/전체 변경을 요청할 때 사용하는 입력타입입니다.\n\nname, description, forum_category_id의 변경 중 원하는 값만 부분적으로 제공 가능하며, null 또는 미지정은 해당 필드 수정 없음 의미."
      },
      "IDiscussionBoardThread.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "페이지 번호(1부터 시작). 페이지네이션을 위한 선택적 값."
              },
              {
                "type": "null",
                "description": "페이지 번호(1부터 시작). 페이지네이션을 위한 선택적 값."
              }
            ],
            "description": "페이지 번호(1부터 시작). 페이지네이션을 위한 선택적 값."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "한 페이지에 반환할 최대 스레드 수. null시 시스템 기본값 적용."
              },
              {
                "type": "null",
                "description": "한 페이지에 반환할 최대 스레드 수. null시 시스템 기본값 적용."
              }
            ],
            "description": "한 페이지에 반환할 최대 스레드 수. null시 시스템 기본값 적용."
          },
          "forum_subcategory_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "특정 하위 카테고리 내 스레드만 조회하고자 할 때 설정. null 가능."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "특정 하위 카테고리 내 스레드만 조회하고자 할 때 설정. null 가능."
              }
            ],
            "description": "특정 하위 카테고리 내 스레드만 조회하고자 할 때 설정. null 가능."
          },
          "author_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "스레드 작성자를 기준으로 filter. null이면 무시."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "스레드 작성자를 기준으로 filter. null이면 무시."
              }
            ],
            "description": "스레드 작성자를 기준으로 filter. null이면 무시."
          },
          "title": {
            "oneOf": [
              {
                "type": "string",
                "description": "스레드 제목 키워드 검색. null이면 전체."
              },
              {
                "type": "null",
                "description": "스레드 제목 키워드 검색. null이면 전체."
              }
            ],
            "description": "스레드 제목 키워드 검색. null이면 전체."
          },
          "created_at_from": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "스레드 생성일 범위 검색(이상). ISO8601 포맷."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "스레드 생성일 범위 검색(이상). ISO8601 포맷."
              }
            ],
            "description": "스레드 생성일 범위 검색(이상). ISO8601 포맷."
          },
          "created_at_to": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "스레드 생성일 범위 검색(이하). ISO8601"
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "스레드 생성일 범위 검색(이하). ISO8601"
              }
            ],
            "description": "스레드 생성일 범위 검색(이하). ISO8601"
          },
          "include_deleted": {
            "oneOf": [
              {
                "type": "boolean",
                "description": "삭제(soft-delete)된 스레드도 포함해서 조회할 경우 true 지정."
              },
              {
                "type": "null",
                "description": "삭제(soft-delete)된 스레드도 포함해서 조회할 경우 true 지정."
              }
            ],
            "description": "삭제(soft-delete)된 스레드도 포함해서 조회할 경우 true 지정."
          }
        },
        "required": [],
        "description": "discussion_board_thread 검색/필터/페이지네이션 요청 타입입니다. 포럼 하위 카테고리, 작성자, 스레드명, 생성일 등으로 리스트를 조회할 때 사용합니다. 각 필터 조건은 선택적이며, null 또는 미지정 시 해당 조건 무시. 페이지 및 limit, 삭제 포함여부 등도 지정 가능."
      },
      "IPageDiscussionBoardThread": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardThread"
            },
            "description": "해당 페이지 내 반환되는 토론 스레드 레코드 배열."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "discussion_board_thread 테이블의 스레드 레코드를 페이지 단위로 반환할 때 사용하는 표준 데이터 컨테이너입니다. pagination에는 현재 페이징 정보가, data에는 실제 스레드 상세 배열이 반환됨."
      },
      "IDiscussionBoardThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "스레드 식별자(UUID PK). discussion_board_thread의 PK값."
          },
          "forum_subcategory_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 스레드가 소속된 하위 카테고리 UUID(FK)."
          },
          "author_id": {
            "type": "string",
            "format": "uuid",
            "description": "스레드 생성(작성)자 UUID(discussion_board_user FK)."
          },
          "title": {
            "type": "string",
            "description": "스레드 제목. 한 하위 카테고리 내에서는 고유."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "스레드 최초 생성일. ISO8601."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "최종 수정일. ISO8601."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Soft-delete 시 삭제 시각. 아닐 경우 null."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Soft-delete 시 삭제 시각. 아닐 경우 null."
              }
            ],
            "description": "Soft-delete 시 삭제 시각. 아닐 경우 null."
          }
        },
        "required": [
          "id",
          "forum_subcategory_id",
          "author_id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "discussion_board_thread 엔티티는 토론 게시판 내 하위 카테고리별로 생성되는 토픽(스레드) 단위의 핵심 데이터입니다.\n\n게시글/코멘트들이 속하는 최상위 논의 묶음을 정의하며, 각 스레드는 제목, 생성자, 소속 하위 카테고리에 대한 참조, 생성일/수정일/삭제여부 등의 메타데이터를 가집니다. 삭제여부(soft-delete)는 deleted_at에 반영됩니다."
      },
      "IDiscussionBoardThread.ICreate": {
        "type": "object",
        "properties": {
          "forum_subcategory_id": {
            "type": "string",
            "format": "uuid",
            "description": "해당 스레드가 소속될 하위 카테고리의 UUID. FK로 지정. 필수."
          },
          "author_id": {
            "type": "string",
            "format": "uuid",
            "description": "스레드 생성자(회원)의 UUID. 로그인 세션 또는 관리자 권한 하에서만 명시적으로 지정."
          },
          "title": {
            "type": "string",
            "description": "신규 생성 스레드의 제목. 동일 하위 카테고리 내에서는 고유해야 함."
          }
        },
        "required": [
          "forum_subcategory_id",
          "author_id",
          "title"
        ],
        "description": "새 discussion_board_thread 스레드(토론 토픽)를 생성하기 위한 입력 타입입니다.\n\n필수: 소속 하위 카테고리, 생성자, 제목. 생성일 및 수정일은 서버에서 부여."
      },
      "IDiscussionBoardThread.IUpdate": {
        "type": "object",
        "properties": {
          "forum_subcategory_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "스레드를 다른 하위 카테고리로 이동시킬 경우 사용. null이면 미변경."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "스레드를 다른 하위 카테고리로 이동시킬 경우 사용. null이면 미변경."
              }
            ],
            "description": "스레드를 다른 하위 카테고리로 이동시킬 경우 사용. null이면 미변경."
          },
          "title": {
            "oneOf": [
              {
                "type": "string",
                "description": "스레드 제목 변경. null이면 미변경."
              },
              {
                "type": "null",
                "description": "스레드 제목 변경. null이면 미변경."
              }
            ],
            "description": "스레드 제목 변경. null이면 미변경."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "soft-delete 혹은 복구(undelete)시 지정. 삭제면 현재타임, 복구면 null."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "soft-delete 혹은 복구(undelete)시 지정. 삭제면 현재타임, 복구면 null."
              }
            ],
            "description": "soft-delete 혹은 복구(undelete)시 지정. 삭제면 현재타임, 복구면 null."
          }
        },
        "required": [],
        "description": "기존 discussion_board_thread(스레드) 정보의 일부 또는 전부를 변경 요청 시 사용되는 타입입니다.\n\n변경할 필드는 필요에 따라 일부 선택적으로 지정하며, null입력은 해당 필드 미변경 또는 explicit null(삭제) 의미."
      },
      "IDiscussionBoardPost.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "페이지 번호(1-base). 목록 페이징 시 사용."
              },
              {
                "type": "null",
                "description": "페이지 번호(1-base). 목록 페이징 시 사용."
              }
            ],
            "description": "페이지 번호(1-base). 목록 페이징 시 사용."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "한 페이지 내 최대 반환 레코드 수. null이면 시스템 기본."
              },
              {
                "type": "null",
                "description": "한 페이지 내 최대 반환 레코드 수. null이면 시스템 기본."
              }
            ],
            "description": "한 페이지 내 최대 반환 레코드 수. null이면 시스템 기본."
          },
          "thread_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "특정 스레드의 포스트만 조회 시 지정."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "특정 스레드의 포스트만 조회 시 지정."
              }
            ],
            "description": "특정 스레드의 포스트만 조회 시 지정."
          },
          "author_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "작성자 UUID로 포스트 필터. null이면 무시."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "작성자 UUID로 포스트 필터. null이면 무시."
              }
            ],
            "description": "작성자 UUID로 포스트 필터. null이면 무시."
          },
          "parent_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "특정 부모 포스트(댓글, 답글 등) 하위만 필터할 경우 지정. null이면 무시."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "특정 부모 포스트(댓글, 답글 등) 하위만 필터할 경우 지정. null이면 무시."
              }
            ],
            "description": "특정 부모 포스트(댓글, 답글 등) 하위만 필터할 경우 지정. null이면 무시."
          },
          "content": {
            "oneOf": [
              {
                "type": "string",
                "description": "본문 텍스트 내 키워드/검색어. null이면 전체."
              },
              {
                "type": "null",
                "description": "본문 텍스트 내 키워드/검색어. null이면 전체."
              }
            ],
            "description": "본문 텍스트 내 키워드/검색어. null이면 전체."
          },
          "created_at_from": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "포스트 생성일 기준 검색(이상). ISO8601."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "포스트 생성일 기준 검색(이상). ISO8601."
              }
            ],
            "description": "포스트 생성일 기준 검색(이상). ISO8601."
          },
          "created_at_to": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "포스트 생성일 기준 검색(이하). ISO8601."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "포스트 생성일 기준 검색(이하). ISO8601."
              }
            ],
            "description": "포스트 생성일 기준 검색(이하). ISO8601."
          },
          "include_deleted": {
            "oneOf": [
              {
                "type": "boolean",
                "description": "삭제포함여부(soft-delete 포스트). true면 삭제포함."
              },
              {
                "type": "null",
                "description": "삭제포함여부(soft-delete 포스트). true면 삭제포함."
              }
            ],
            "description": "삭제포함여부(soft-delete 포스트). true면 삭제포함."
          }
        },
        "required": [],
        "description": "discussion_board_post 엔티티의 필터, 찾기, 목록 조회, 페이지네이션을 위한 표준 요청 타입입니다. 스레드, 작성자, 부모 포스트, 본문, 생성일 등 다양한 조건으로 검색/필터가 가능합니다."
      },
      "IPageDiscussionBoardPost": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardPost"
            },
            "description": "현재 페이지에 해당하는 포스트(List)."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "토론 게시판 포스트의 페이징 결과 컨테이너 타입입니다.\n\npagination은 페이지/레코드 관련 메타데이터, data는 실제 포스트 엔티티 배열."
      },
      "IDiscussionBoardPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "고유 게시글 식별자입니다. discussion_board_post의 기본 키이며, 모든 게시글과 참조 간의 무결성을 보장합니다.\n\nUUID 형식이며, 댓글, 투표, 첨부파일 등 게시글에 속하는 항목의 참조 및 추적에 사용됩니다."
          },
          "thread_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 게시글이 속한 스레드의 UUID입니다. 必須로서 discussion_board_thread의 참조 무결성을 보장합니다.\n\n게시판 내의 토론 주제(thread)와 연결되어 있으며, 여러 게시글이 하나의 스레드에 속할 수 있습니다."
          },
          "author_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 게시글을 작성한 사용자의 UUID입니다. 必須 필드로 discussion_board_user의 참조 무결성을 보장하며, 게시글의 소유권과 작성자 정보 표시, 권한 부여, 감사 로그 등에 사용됩니다.\n\n회원 게시물, 콘텐츠 권리, 프로필 노출 등에 직결됩니다."
          },
          "parent_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "답글(계층형 게시글)의 경우 상위(부모) 게시글의 UUID입니다. 기본적으로 null이며, 댓글 트리 구조(답글/재답글)를 지원합니다.\n\n게시글이 독립 글(스레드 최초글)이면 null, 아니면 원글(혹은 맨 위 답글)의 id를 저장합니다."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "답글(계층형 게시글)의 경우 상위(부모) 게시글의 UUID입니다. 기본적으로 null이며, 댓글 트리 구조(답글/재답글)를 지원합니다.\n\n게시글이 독립 글(스레드 최초글)이면 null, 아니면 원글(혹은 맨 위 답글)의 id를 저장합니다."
              }
            ],
            "description": "답글(계층형 게시글)의 경우 상위(부모) 게시글의 UUID입니다. 기본적으로 null이며, 댓글 트리 구조(답글/재답글)를 지원합니다.\n\n게시글이 독립 글(스레드 최초글)이면 null, 아니면 원글(혹은 맨 위 답글)의 id를 저장합니다."
          },
          "content": {
            "type": "string",
            "description": "게시글의 내용(본문)입니다. 리치텍스트, 링크, 인용, 이미지 포함 가능(비슷한 마크다운 혹은 HTML과 유사).\n\n비즈니스 규칙상 필수이며, 입력값 개수, 내용 적정성, 스팸 필터링 등이 이 레이어에서 적용됩니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "해당 게시글이 생성된 일시 정보로, ISO 8601 timestamp를 사용합니다.\n\n정렬, 감사, 신규글 뱃지 등에 사용됩니다."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "게시글이 마지막으로 수정된 시각. 게시글 편집 히스토리, 변경 내역 추적 등에 사용됩니다.\n\n수정이 없으면 생성시각과 일치할 수 있습니다."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "게시글이 삭제/숨김된(soft-deleted) 시각. 삭제 전에는 null.\n\n감사 로그, 복구 기능, 정책적 관리 도구에서 사용됩니다."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "게시글이 삭제/숨김된(soft-deleted) 시각. 삭제 전에는 null.\n\n감사 로그, 복구 기능, 정책적 관리 도구에서 사용됩니다."
              }
            ],
            "description": "게시글이 삭제/숨김된(soft-deleted) 시각. 삭제 전에는 null.\n\n감사 로그, 복구 기능, 정책적 관리 도구에서 사용됩니다."
          }
        },
        "required": [
          "id",
          "thread_id",
          "author_id",
          "content",
          "created_at",
          "updated_at"
        ],
        "description": "게시판의 게시글(글/답글) 핵심 객체입니다.\n\n각 게시글은 토론 스레드에 속하며, 본문, 작성자, 생성/수정일, 정렬/트리 구조(계층형 게시글)를 지원합니다. 정책상 soft-delete를 통한 관리와, 댓글/첨부/투표 등의 관계를 대표 객체로써 연결합니다.\n\nPrisma schema: discussion_board_post 테이블의 모든 컬럼을 포함하며, 각 컬럼의 도메인 의미와 데이터 관리 목적이 설명되어 있습니다."
      },
      "IDiscussionBoardPost.ICreate": {
        "type": "object",
        "properties": {
          "thread_id": {
            "type": "string",
            "format": "uuid",
            "description": "게시글을 생성할 대상 스레드의 UUID입니다. 必須.\n\n정책상 스레드가 존재해야 하며, 없는 스레드일 경우 에러가 발생합니다."
          },
          "author_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 글을 작성하는 유저의 UUID. 必須.\n\n게시글 저작권, 권한 부여, 프로필 연동 등에 반드시 기록됩니다."
          },
          "parent_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "답글일 경우 부모 게시글의 id입니다. 없으면 null.\n\n트리형 게시판(계층 쓰레드) 지원을 위한 구조.\n예시: 답글 작성 - 상위 게시글 id를 지정."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "답글일 경우 부모 게시글의 id입니다. 없으면 null.\n\n트리형 게시판(계층 쓰레드) 지원을 위한 구조.\n예시: 답글 작성 - 상위 게시글 id를 지정."
              }
            ],
            "description": "답글일 경우 부모 게시글의 id입니다. 없으면 null.\n\n트리형 게시판(계층 쓰레드) 지원을 위한 구조.\n예시: 답글 작성 - 상위 게시글 id를 지정."
          },
          "content": {
            "type": "string",
            "description": "게시글 본문(리치텍스트/마크다운 가능). 必須.\n\n포함 내용: 텍스트, URL, 인용, 사진/이미지(첨부는 별도)."
          }
        },
        "required": [
          "thread_id",
          "author_id",
          "content"
        ],
        "description": "게시글 신규 등록 요청 스키마입니다.\n\ndiscussion_board_post의 필수 컬럼 중 서버 자동 생성이나 불필요한 값을 제외하고, 실제 API 생성 시점에 클라이언트가 입력해야 하는 값만 포함합니다.\n\n스레드 참조, 작성자, 본문, 부모글(답글시)를 설정하며, 불변성(변경불가) 컬럼은 누락 또는 서버자동처리됩니다."
      },
      "IDiscussionBoardPost.IUpdate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "수정할 게시글의 본문입니다. 리치텍스트 포맷 사용.\n\n필수 필드는 아니지만, 내용이 포함되어야 진짜로 본문 수정이 적용됩니다."
          },
          "parent_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "답글로 전환/수정 시 지정. 없으면 null로 설정해 계층 구조를 변경.\n\n자체 정책에 따라 부모글 제한이 있을 수 있습니다."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "답글로 전환/수정 시 지정. 없으면 null로 설정해 계층 구조를 변경.\n\n자체 정책에 따라 부모글 제한이 있을 수 있습니다."
              }
            ],
            "description": "답글로 전환/수정 시 지정. 없으면 null로 설정해 계층 구조를 변경.\n\n자체 정책에 따라 부모글 제한이 있을 수 있습니다."
          }
        },
        "description": "기존 게시글의 일부(주로 본문/부모글 지정)를 수정할 때 사용하는 요청 스키마입니다. 불변 속성(id, author 등)은 포함되지 않습니다.\n\n필드 값 모두 optional로, 일부만 보낼 수도 있습니다. 실무에서는 content(내용) 수정이 90% 이상입니다.",
        "required": []
      },
      "IDiscussionBoardThreadTag.IRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "검색/필터 대상 태그명. 부분 일치 검색도 지원하며, 정확한 태그 이름 또는 키워드로 조회할 수 있습니다.\n\n예시: \"정책\", \"금융\", \"regulation\" 등."
          },
          "description": {
            "type": "string",
            "description": "태그 설명에서의 키워드 검색값(옵션), 태그 소개문에 대한 LIKE 검색 등에 사용가능.\n\n주로 관리자 분류, 태그 자세한 성격 파악 등에 이용합니다."
          },
          "created_at_from": {
            "type": "string",
            "format": "date-time",
            "description": "태그 생성일 필터(하한선).\n\n해당 날짜 이후 생성된 태그만 반환."
          },
          "created_at_to": {
            "type": "string",
            "format": "date-time",
            "description": "태그 생성일 필터(상한선).\n\n이 날짜까지 만들어진 태그만 목록에 포함."
          },
          "page": {
            "type": "integer",
            "description": "페이지네이션용 페이지 번호. 1부터 시작하며, 값이 없으면 기본 1 적용."
          },
          "limit": {
            "type": "integer",
            "description": "1페이지당 최대 반환 레코드 수. 시스템 기본/상한 적용(예: 100)."
          }
        },
        "description": "thread_tag(토론 태그) 목록/검색 요청용 파라미터 스키마입니다.\n\n태그명, 설명, 생성일, 페이지네이션 등 다양한 검색 조건을 reflection하여 리스트와 페이징을 동시 지원합니다. 관리자 UI 및 자동완성, 태그 클라우드, 관리 기능 등에 활용됩니다.",
        "required": []
      },
      "IPageIDiscussionBoardThreadTag": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardThreadTag"
            },
            "description": "해당 페이지에 있는 태그 레코드 객체 배열입니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "태그 검색/목록 페이징 결과 컨테이너.\n\npagination(페이지 정보)와 data(실제 태그 객체 배열)를 함께 제공합니다. 대량 데이터 처리시 UI 및 API 연결에 최적화되어 있습니다."
      },
      "IDiscussionBoardThreadTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "태그 고유 식별자입니다. discussion_board_thread_tag의 primary key.\n\n토론 내 태그의 일관성, 참조, 관리에 핵심적으로 사용됩니다."
          },
          "name": {
            "type": "string",
            "description": "사람이 보는 태그의 이름(식별자). 반드시 유일하며, DB에서 중복 불가로 설정되어 있습니다.\n\n검색, 필터, 자동완성 등에 필수적으로 활용됩니다."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "태그의 요약 설명. UI 툴팁, 상세 검색, 컨텍스트 노출 등에 사용.\n\n공란/미기입 허용."
              },
              {
                "type": "null",
                "description": "태그의 요약 설명. UI 툴팁, 상세 검색, 컨텍스트 노출 등에 사용.\n\n공란/미기입 허용."
              }
            ],
            "description": "태그의 요약 설명. UI 툴팁, 상세 검색, 컨텍스트 노출 등에 사용.\n\n공란/미기입 허용."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "태그가 최초로 생성된 시각(ISO 8601).\n\n분석, 최신순 정렬, 생성일별 그룹핑 등에 활용."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "마지막 정보 수정 시각입니다.\n\n버전관리나 관리툴에 표시 목적."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "해당 태그의 soft delete(논리 삭제) 시각.\n\n태그 숨김/아카이브, 감사 추적 등에 사용."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "해당 태그의 soft delete(논리 삭제) 시각.\n\n태그 숨김/아카이브, 감사 추적 등에 사용."
              }
            ],
            "description": "해당 태그의 soft delete(논리 삭제) 시각.\n\n태그 숨김/아카이브, 감사 추적 등에 사용."
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "토론 스레드/포스트에서 콘텐츠 분류를 위한 태그 객체입니다.\n\n태그명, 설명, 생성/수정일자, 논리삭제 일시 등의 모든 discussion_board_thread_tag 컬럼이 매핑되며, Prisma DB의 3NF 요건을 엄밀히 반영합니다.\n\n예시: \"이코노미\", \"정치\", \"법률\"과 같은 구분 기능을 위해 사용됩니다."
      },
      "IDiscussionBoardThreadTag.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "신규 생성할 태그의 이름. DB 중복 불가, 필수.\n\n자동완성 및 분류 최상위에 노출되는 레이블입니다."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "태그 설명, 상세 내용, 배경 등. 필수 아님.\n\n관리자 설명, 도구팁 등에 사용."
              },
              {
                "type": "null",
                "description": "태그 설명, 상세 내용, 배경 등. 필수 아님.\n\n관리자 설명, 도구팁 등에 사용."
              }
            ],
            "description": "태그 설명, 상세 내용, 배경 등. 필수 아님.\n\n관리자 설명, 도구팁 등에 사용."
          }
        },
        "required": [
          "name"
        ],
        "description": "새 discussion_board_thread_tag 레코드를 만들기 위한 입력 스키마입니다.\n\n필수값(이름)과 옵션(설명)만을 받아 신규 태그로 생성합니다."
      },
      "IDiscussionBoardThreadTag.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "태그명 변경시 입력. 중복 금지 정책.\n\n공통적으로 unique해야 하며, 이미 사용 중인 태그명으로 변경 시 오류 발생."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "태그 설명(툴팁/상세) 정보 수정.\n\n비워둘 수 있습니다."
              },
              {
                "type": "null",
                "description": "태그 설명(툴팁/상세) 정보 수정.\n\n비워둘 수 있습니다."
              }
            ],
            "description": "태그 설명(툴팁/상세) 정보 수정.\n\n비워둘 수 있습니다."
          }
        },
        "description": "기존 태그 객체의 일부(이름, 설명)를 수정할 때 사용하는 스키마입니다.\n\n두 값 모두 optional. 통상 description(설명) 변경에서 많이 활용됩니다.",
        "required": []
      },
      "IDiscussionBoardForumCategorySnapshot.IRequest": {
        "type": "object",
        "properties": {
          "forum_category_id": {
            "type": "string",
            "format": "uuid",
            "description": "스냅샷 기준이 되는 카테고리 UUID. 하나의 카테고리에서 여러 스냅샷이 존재 가능."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "해당 카테고리 변경을 실행한 사용자(관리자) UUID.\n\n변경기록 추적, 감사 등에 활용."
          },
          "name": {
            "type": "string",
            "description": "카테고리명 스냅샷(당시 상태의 이름)에서의 필터값.\n\n일반적으로 LIKE 검색, 히스토리 검색 등에 이용."
          },
          "snapshot_created_at_from": {
            "type": "string",
            "format": "date-time",
            "description": "스냅샷 생성 시각(하한선) 필터.\n\n변경 이력 히스토리 페이지 등에서 사용."
          },
          "snapshot_created_at_to": {
            "type": "string",
            "format": "date-time",
            "description": "스냅샷 생성 시각(상한선) 필터.\n\n감사 기간 한정 특화 검색에 이용."
          },
          "page": {
            "type": "integer",
            "description": "페이지네이션용 페이지 번호. default 1."
          },
          "limit": {
            "type": "integer",
            "description": "페이지당 최대 반환 레코드 수. 시스템 기본/상한 적용(예: 100)."
          }
        },
        "description": "카테고리 스냅샷(history) 검색/조회용 파라미터 객체입니다.\n\n카테고리 id, 작성자 id, 이름, 생성일, 페이징 등 다양한 필드 기준으로 이력 검색시 활용합니다.",
        "required": []
      },
      "IPageIDiscussionBoardForumCategorySnapshot": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardForumCategorySnapshot"
            },
            "description": "해당 페이지의 카테고리 스냅샷 데이터 배열"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "카테고리 스냅샷(이력) 검색 시 페이징 컨테이너로 반환되는 결과 스키마입니다.\n\npagination(페이지메타)와 data(정상 레코드 배열 형식)로 구성됩니다."
      },
      "IDiscussionBoardForumCategorySnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "스냅샷 고유 식별자. discussion_board_forum_category_snapshot PK.\n\n각각의 변경 이력별 고유 식별/감사 용도로 사용됨."
          },
          "forum_category_id": {
            "type": "string",
            "format": "uuid",
            "description": "스냅샷 원본 카테고리의 id.\n\n포럼 카테고리와 1:N 관계로 연결."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "변경을 기록한 사용자(관리자) UUID.\n\n이력이 어느 사용자의 요청에 의해 기록됐는지를 명확히 추적합니다."
          },
          "name": {
            "type": "string",
            "description": "당시 카테고리명(스냅샷 시점의 상태 그대로)."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "스냅샷 시점 카테고리 설명. null 가능.\n\n카테고리 간 과거 설명 비교, 롤백 등에 사용됩니다."
              },
              {
                "type": "null",
                "description": "스냅샷 시점 카테고리 설명. null 가능.\n\n카테고리 간 과거 설명 비교, 롤백 등에 사용됩니다."
              }
            ],
            "description": "스냅샷 시점 카테고리 설명. null 가능.\n\n카테고리 간 과거 설명 비교, 롤백 등에 사용됩니다."
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "이 스냅샷 레코드 생성 시각(즉시 변경/기록된 시간). ISO 8601."
          }
        },
        "required": [
          "id",
          "forum_category_id",
          "created_by_id",
          "name",
          "snapshot_created_at"
        ],
        "description": "포럼 카테고리 변경 이력(스냅샷) 레코드 객체입니다.\n\n각 카테고리별로 변경(이름, 설명 등) 이벤트마다 이력이 별도 기록되며, 변화 추적, 롤백, 감사(Authority, Moderator)에서 참조됩니다.\n\nPrisma discussion_board_forum_category_snapshot의 모든 주요 컬럼이 설명과 함께 포함됨."
      },
      "IDiscussionBoardForumCategorySnapshot.ICreate": {
        "type": "object",
        "properties": {
          "forum_category_id": {
            "type": "string",
            "format": "uuid",
            "description": "스냅샷의 기준이 되는 원본 카테고리 id.\n\n반드시 존재하는 카테고리여야 하며, 참조 무결성 검증 필요."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "이력을 생성하는 관리자(또는 사용자)의 UUID. 감사 목적상 필수."
          },
          "name": {
            "type": "string",
            "description": "Snap 대상 카테고리 이름(이 시점의 상태 그대로 저장).\n\n삭제/변경 전 원본을 롤백 목적으로 저장하기 위해 사용."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "스냅샷 설명(변경시점 설명, null 가능).\n\n카테고리 설명 비교/백업 등 활용."
              },
              {
                "type": "null",
                "description": "스냅샷 설명(변경시점 설명, null 가능).\n\n카테고리 설명 비교/백업 등 활용."
              }
            ],
            "description": "스냅샷 설명(변경시점 설명, null 가능).\n\n카테고리 설명 비교/백업 등 활용."
          }
        },
        "required": [
          "forum_category_id",
          "created_by_id",
          "name"
        ],
        "description": "카테고리 변경 이력(스냅샷) 신규 생성 시 사용하는 입력 스키마입니다.\n\n기록 대상 카테고리, 변경자, 이름, 설명(선택값)을 입력하여 스냅샷 테이블에 기록합니다."
      },
      "IDiscussionBoardForumCategorySnapshot.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The forum category's name at the time of this snapshot.\n\nRepresents the title of the category at this point in history, required for operational recovery, audit logging, and moderation review.\n\nReferenced from 'name' in the Prisma schema (discussion_board_forum_category_snapshot), this is atomic text and must be a valid category name as defined by business requirements."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "The description text for the category snapshot at this specific change event.\n\nUsed as the summary text for UI display, tooltips, and content recovery; nullable to permit categories without description.\n\nReferenced from 'description' (nullable) in the discussion_board_forum_category_snapshot schema."
              },
              {
                "type": "null",
                "description": "The description text for the category snapshot at this specific change event.\n\nUsed as the summary text for UI display, tooltips, and content recovery; nullable to permit categories without description.\n\nReferenced from 'description' (nullable) in the discussion_board_forum_category_snapshot schema."
              }
            ],
            "description": "The description text for the category snapshot at this specific change event.\n\nUsed as the summary text for UI display, tooltips, and content recovery; nullable to permit categories without description.\n\nReferenced from 'description' (nullable) in the discussion_board_forum_category_snapshot schema."
          }
        },
        "required": [
          "name"
        ],
        "description": "Update fields for a forum category snapshot record.\n\nTypically contains mutable fields that may be corrected after initial creation, but generally snapshots are immutable unless for legal compliance or audit correction, as described in the Prisma schema documentation for discussion_board_forum_category_snapshot.\n\nUse this schema to correct category historical info, either for admin rectification or regulatory data patching, with.\n\nAll changes should be fully auditable."
      },
      "IDiscussionBoardForumSubcategorySnapshot.IRequest": {
        "type": "object",
        "properties": {
          "forum_subcategory_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) for the subcategory whose snapshots are being retrieved or filtered.\n\nMapped to 'forum_subcategory_id' in the discussion_board_forum_subcategory_snapshot table in Prisma schema.\nUse to fetch or filter change history for a specific board subcategory."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user who created the subcategory snapshot. Used for filtering or auditing moderator actions. Nullable or omitted if not filtering by user."
          },
          "snapshot_created_at_from": {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of snapshot-created time window (inclusive).\n\nFor audit or compliance search to retrieve subcategory snapshot records modified after this instant.\n\nFormat: ISO 8601 date-time string."
          },
          "snapshot_created_at_to": {
            "type": "string",
            "format": "date-time",
            "description": "End of snapshot-created time window (inclusive).\n\nFor audit or compliance search to retrieve subcategory snapshot records modified before this instant.\n\nFormat: ISO 8601 date-time string."
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "Pagination - page number requested (1-based). If null, default page 1 is returned."
              },
              {
                "type": "null",
                "format": "int32",
                "description": "Pagination - page number requested (1-based). If null, default page 1 is returned."
              }
            ],
            "description": "Pagination - page number requested (1-based). If null, default page 1 is returned."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "Pagination: number of records per page returned. If null/undefined, server default (such as 100) is used."
              },
              {
                "type": "null",
                "format": "int32",
                "description": "Pagination: number of records per page returned. If null/undefined, server default (such as 100) is used."
              }
            ],
            "description": "Pagination: number of records per page returned. If null/undefined, server default (such as 100) is used."
          }
        },
        "required": [
          "forum_subcategory_id"
        ],
        "description": "Search filter and pagination request for forum subcategory snapshot history.\n\nUsed by admin/moderator audit dashboards to browse changes, rollback points, and compliance timelines, referencing discussion_board_forum_subcategory_snapshot table and matching business requirements for audit and rollback support."
      },
      "IPageIDiscussionBoardForumSubcategorySnapshot": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Pagination container with current/total/limit metadata for snapshot results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardForumSubcategorySnapshot"
            },
            "description": "List of forum subcategory snapshot records matching query/filter in order.\n\nEach array element references a specific state in subcategory audit trail, as defined by discussion_board_forum_subcategory_snapshot."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated container for returning a list of forum subcategory snapshot records, with pagination and filtering metadata info per requirements."
      },
      "IDiscussionBoardForumSubcategorySnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the forum subcategory snapshot record.\n\nPrimary key as defined in Prisma's discussion_board_forum_subcategory_snapshot."
          },
          "forum_subcategory_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID linking to the parent forum subcategory of this snapshot.\n\nRequired for clear lineage and rollback, as found in schema's forum_subcategory_id."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user who initiated or approved this snapshot record.\n\nProvides full audit trace of moderator/admin impact as described by the schema."
          },
          "name": {
            "type": "string",
            "description": "Snapshot label for subcategory at change time.\n\nSame as the 'name' in current forum subcategory, but as frozen at snapshot. Used for UI display, audit, rollback, and investigation."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Snapshot of the subcategory description, if present in this audit point. Nullable if no description at snapshot event."
              },
              {
                "type": "null",
                "description": "Snapshot of the subcategory description, if present in this audit point. Nullable if no description at snapshot event."
              }
            ],
            "description": "Snapshot of the subcategory description, if present in this audit point. Nullable if no description at snapshot event."
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The exact timestamp (ISO 8601) for when this snapshot record was created, i.e., when the corresponding subcategory was updated or rolled back.\n\nAtomic, required for audit and rollback."
          }
        },
        "required": [
          "id",
          "forum_subcategory_id",
          "created_by_id",
          "name",
          "snapshot_created_at"
        ],
        "description": "Forum subcategory snapshot entity: immutable point-in-time record of all subcategory settings for rollback and audit compliance.\n\nMapped directly to discussion_board_forum_subcategory_snapshot in Prisma schema and reflecting requirements for regulatory and moderation audit reporting."
      },
      "IDiscussionBoardForumSubcategorySnapshot.ICreate": {
        "type": "object",
        "properties": {
          "forum_subcategory_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID for original parent subcategory of this snapshot record. Foreign key as in Prisma's forum_subcategory_id."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "Moderator/admin/user UUID creating/submitting this snapshot."
          },
          "name": {
            "type": "string",
            "description": "Name of the subcategory at this point in history. Audit field for rollback."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Description at snapshot creation (nullable if not set)."
              },
              {
                "type": "null",
                "description": "Description at snapshot creation (nullable if not set)."
              }
            ],
            "description": "Description at snapshot creation (nullable if not set)."
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp the snapshot is captured at (ISO 8601). Safe default: time of mutation, but can be manually overriden for correction."
          }
        },
        "required": [
          "forum_subcategory_id",
          "created_by_id",
          "name",
          "snapshot_created_at"
        ],
        "description": "Input type for creating a new forum subcategory snapshot entry. Used in moderation workflows for audit, rollback, and compliance records. Mapped directly to Prisma schema table discussion_board_forum_subcategory_snapshot."
      },
      "IDiscussionBoardForumSubcategorySnapshot.IUpdate": {
        "type": "object",
        "properties": {
          "forum_subcategory_id": {
            "type": "string",
            "format": "uuid",
            "description": "Optionaly update the subcategory associated with this snapshot (UUID).\n\nRequired in rare audit/compliance corrections only; should otherwise remain immutable."
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "description": "Correction for moderator/admin user reference. Used only for rare corrections, otherwise should not be mutated."
          },
          "name": {
            "type": "string",
            "description": "Fix/correct the name in a snapshot for audit/rollback only. Ordinarily immutable."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Correction value for description content or for legal compliance edits."
              },
              {
                "type": "null",
                "description": "Correction value for description content or for legal compliance edits."
              }
            ],
            "description": "Correction value for description content or for legal compliance edits."
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Rare correction for timestamp (ISO 8601)."
          }
        },
        "description": "Update type for forum subcategory snapshot. Should only permit changes for legal/audit correction or compliance, not for normal mutation.",
        "required": []
      },
      "IDeleteResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation result code or human-readable status description. Example values: 'success', 'not_found', 'already_deleted'. Should provide machine-auditable result context."
          },
          "deleted_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the object that was deleted, matching primary key requirement in referenced table."
          }
        },
        "required": [
          "status",
          "deleted_id"
        ],
        "description": "Standard type for confirming single-object deletion in API results. Used for soft/hard deletes in audit/logging flows."
      },
      "IDiscussionBoardComment.IRequest": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the post to which comments belong. Used for filtering comments per parent post (discussion_board_comment.post_id)."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user (author) who wrote the comment. Used for filtering by author. Optional for user dashboards/admin analytics."
          },
          "content_query": {
            "type": "string",
            "description": "Optional full-text search on comment content. Maps to GIN_TRGM or like operator for advanced moderation UI, user search, or analytics. Not always required, can be used for moderation policies."
          },
          "created_at_from": {
            "type": "string",
            "format": "date-time",
            "description": "Lower bound (inclusive) of creation timestamp range. Filters for time-windowed comment audit. Uses ISO 8601 format."
          },
          "created_at_to": {
            "type": "string",
            "format": "date-time",
            "description": "Upper bound (inclusive) of creation timestamp range. Filters for audit ranges, analytics, or dispute windows. Uses ISO 8601 format."
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "Pagination - page number. Null means first/default page."
              },
              {
                "type": "null",
                "format": "int32",
                "description": "Pagination - page number. Null means first/default page."
              }
            ],
            "description": "Pagination - page number. Null means first/default page."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "Pagination - number of records per page. If not specified, server default applies (such as 100)."
              },
              {
                "type": "null",
                "format": "int32",
                "description": "Pagination - number of records per page. If not specified, server default applies (such as 100)."
              }
            ],
            "description": "Pagination - number of records per page. If not specified, server default applies (such as 100)."
          }
        },
        "required": [
          "post_id"
        ],
        "description": "Comment list/search request type: allows filtering by post, user, content, created timestamp, and supports pagination. Used in admin/moderator comment audits, user dashboards, and thread browsing UIs."
      },
      "IPageIDiscussionBoardComment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Result page metadata object, giving info on items per page, current page, total records, etc."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardComment"
            },
            "description": "Array of comment records found for the query, normalized per the discussion_board_comment entity."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated result type for comment list/search endpoints, including full metadata on page size, current page, result count, etc."
      },
      "IDiscussionBoardComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key UUID of this comment entity, uniquely identifying the comment per discussion_board_comment schema."
          },
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key reference to the parent post (thread). Used for navigation, filtering, and referential integrity."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Author/user ID (UUID) of the comment. Used for action audit, moderation, and attribution."
          },
          "content": {
            "type": "string",
            "description": "Body text of the comment, corresponding to 'content' in the schema. For UI display, moderation, search, and analytics."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the comment was published. Used for ordering, time window audit, discussion history, UI placement."
          },
          "updated_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp if/when the comment was last updated. Null if never edited."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Timestamp if/when the comment was last updated. Null if never edited."
              }
            ],
            "description": "Timestamp if/when the comment was last updated. Null if never edited."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp if/when the comment was deleted (soft delete). Null if active. Used for moderation and audit purposes."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Timestamp if/when the comment was deleted (soft delete). Null if active. Used for moderation and audit purposes."
              }
            ],
            "description": "Timestamp if/when the comment was deleted (soft delete). Null if active. Used for moderation and audit purposes."
          }
        },
        "required": [
          "id",
          "post_id",
          "user_id",
          "content",
          "created_at"
        ],
        "description": "Comment entity object, as per discussion_board_comment Prisma schema, with complete metadata and all required fields for read, audit, notification, or moderation workflows."
      },
      "IDiscussionBoardComment.ICreate": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the post this comment is to be added to. Must be a valid UUID, required per discussion_board_comment.post_id."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the author user (discussion_board_user.id), as required in comment creation for moderation, audit, and notification routing."
          },
          "content": {
            "type": "string",
            "description": "Full body text of the comment, subject to platform content moderation and length constraints. Maps to discussion_board_comment.content."
          }
        },
        "required": [
          "post_id",
          "user_id",
          "content"
        ],
        "description": "Input for creating a new comment entry in the system. Used by registered users when replying to posts and by moderation workflows for programmatic insertion. Tied to Prisma schema's required fields for discussion_board_comment."
      },
      "IDiscussionBoardComment.IUpdate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "New content body for the comment. Used in edit flows for author or moderator initiated change. Mapped to discussion_board_comment.content."
          }
        },
        "required": [
          "content"
        ],
        "description": "Update type used for editing a comment (typically body content only). Only updatable by author, moderator, or admin per business logic and audit policies, mapping to content field in discussion_board_comment."
      },
      "IDiscussionBoardCommentReply.IRequest": {
        "type": "object",
        "properties": {
          "parent_comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier (UUID) of the parent comment to which this reply belongs. This property allows filtering or searching for replies under a specific comment and supports advanced listing of discussion threads. Directly references the primary key of the discussion_board_comment table.\n\nBusiness context: Used for queries, audits, UI display for threaded/nested comment views."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier (UUID) of the user who authored the comment reply. This property supports filtering replies by a particular user, typically for audit purposes, moderation, or user profile views.\n\nBusiness context: Ensures proper attribution and supports permission checks for listing, editing, or deleting replies."
          },
          "content_search": {
            "type": "string",
            "description": "Optional search string to filter replies based on their content. Uses full-text/trigram search for efficiency when searching by keywords or phrases within replies.\n\nBusiness context: Supports moderator review, analytics filtering, or advanced UI search features."
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "Lower bound timestamp (ISO 8601) for when the reply was created. Enables range queries for filtering comment replies within specific periods. Optional filter.\n\nBusiness context: Used in analytics, moderation time windows, or reporting tools."
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "Upper bound timestamp (ISO 8601) for when the reply was created. Enables range queries for filtering comment replies within specific periods. Optional filter.\n\nBusiness context: Used in analytics, moderation time windows, or reporting tools."
          },
          "page": {
            "type": "integer",
            "description": "Page number for paginated reply searches. Used to navigate through multiple pages of result sets in user interfaces or tools. Defaults to 1 if not specified."
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of records to return per page in paginated listings of comment replies. Used to control data volume. Typical values: 10, 20, 50, 100, etc."
          },
          "sort_by": {
            "oneOf": [
              {
                "const": "created_at",
                "description": "Field to sort or order the replies—typically 'created_at' or 'updated_at'. Used for user-driven control of reply order in lists or UIs."
              },
              {
                "const": "updated_at",
                "description": "Field to sort or order the replies—typically 'created_at' or 'updated_at'. Used for user-driven control of reply order in lists or UIs."
              }
            ],
            "description": "Field to sort or order the replies—typically 'created_at' or 'updated_at'. Used for user-driven control of reply order in lists or UIs."
          },
          "sort_order": {
            "oneOf": [
              {
                "const": "asc",
                "description": "Direction of sort: 'asc' (ascending) or 'desc' (descending). Determines chronological order in listings."
              },
              {
                "const": "desc",
                "description": "Direction of sort: 'asc' (ascending) or 'desc' (descending). Determines chronological order in listings."
              }
            ],
            "description": "Direction of sort: 'asc' (ascending) or 'desc' (descending). Determines chronological order in listings."
          }
        },
        "description": "Request contract for listing, searching, or filtering comment-reply records from the discussion_board_comment_reply table.\n\nContains query, filter, and pagination options for retrieving reply objects, enabling flexible moderation review, analytics, or UI displays.\n\nEach property is documented based on the corresponding column or query field in the Prisma schema. This type ensures that all search/filter operations strictly reference normalized fields.",
        "required": []
      },
      "IPageIDiscussionBoardCommentReply": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardCommentReply"
            },
            "description": "The array of comment-reply records for the current page."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated container for a list of comment-reply records (discussion_board_comment_reply), providing pagination metadata and page-wise arrays of replies.\n\nAligns with the standard IPage<T> interface for OpenAPI specifications; every page includes both pagination info and result data."
      },
      "IDiscussionBoardCommentReply": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key. Unique identifier for the comment reply.\n\nReferences: id field in discussion_board_comment_reply. Maintains entity uniqueness and referential integrity."
          },
          "parent_comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key referencing the parent comment (discussion_board_comment).\n\nAssociates reply to the specific comment. 3NF compliance by not repeating parent comment data."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key referencing the registered user who authored the reply.\n\nSupports user attribution and permission checks."
          },
          "content": {
            "type": "string",
            "description": "Text body of the reply. Supports rich text depending on frontend/editor.\n\nAtomic content, not computed or derived. See discussion_board_comment_reply.content."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp for when this reply was created.\n\nSupports sorting, analytics, and regulatory audit fields."
          },
          "updated_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 timestamp of the last update to this reply.\n\nNull if never edited. Enables edit history and compliance investigation."
              },
              {
                "type": "null"
              }
            ],
            "description": "ISO 8601 timestamp of the last update to this reply.\n\nNull if never edited. Enables edit history and compliance investigation."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 timestamp representing soft deletion or moderation action.\n\nNull unless deleted—preserves audit history and rollback options."
              },
              {
                "type": "null"
              }
            ],
            "description": "ISO 8601 timestamp representing soft deletion or moderation action.\n\nNull unless deleted—preserves audit history and rollback options."
          }
        },
        "required": [
          "id",
          "parent_comment_id",
          "user_id",
          "content",
          "created_at"
        ],
        "description": "A single record from discussion_board_comment_reply, representing nested/threaded reply to a parent comment on a post.\n\nProperties and descriptions align with Prisma schema and business documentation for full audit, 3NF normalization, and moderation compliance."
      },
      "IDiscussionBoardCommentReply.ICreate": {
        "type": "object",
        "properties": {
          "parent_comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key referencing the parent comment to which this reply will be attached.\n\nReferentially Integrity: Must exist in discussion_board_comment. See discussion_board_comment_reply.parent_comment_id."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key referencing the user creating the reply. Must be an active, registered user authorized to reply.\n\nSee discussion_board_comment_reply.user_id."
          },
          "content": {
            "type": "string",
            "description": "Content body of the reply. Supports formatting, links, and inline mentions as described in requirements.\n\nAtomic, required for reply creation. See discussion_board_comment_reply.content."
          }
        },
        "required": [
          "parent_comment_id",
          "user_id",
          "content"
        ],
        "description": "Contract for creating a new comment-reply in discussion_board_comment_reply.\n\nIncludes all required atomic fields needed for new reply creation, as enforced in business and moderation workflows. Every property maps 1:1 to a column in the normalized schema."
      },
      "IDiscussionBoardCommentReply.IUpdate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Updated body or text for the reply. Only editable by author or moderator, and subject to moderation/workflow requirements in the business domain.\n\nCorresponds to discussion_board_comment_reply.content. If omitted, content remains unchanged."
          }
        },
        "description": "Contract for editing or updating an existing comment-reply record by ID in discussion_board_comment_reply.\n\nDefines only fields that are mutable post-creation, respecting business and moderation constraints.",
        "required": []
      },
      "IDiscussionBoardPostVote.IRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user who cast the upvote/feedback. Used for filtering votes cast by a specific user, for audit/compliance or profile statistics."
          },
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the post to which the vote applies. Used for filtering votes related to a specific post or to aggregate vote counts for analytics or UI displays."
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "Lower bound timestamp for when a vote was cast, used for filtering votes in a given date window for analytics or trend analysis purposes."
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "Upper bound timestamp for when a vote was cast, supporting filtering of votes in a time range for reporting or analysis."
          },
          "page": {
            "type": "integer",
            "description": "Page number to fetch in paginated vote listings. Defaults to 1 if not specified."
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of vote records per page for pagination. Controls data volume for UI or analytics. Typical values: 10, 20, 50, etc."
          },
          "sort_by": {
            "const": "created_at",
            "description": "Sort key for votes (typically only 'created_at'). Drives order of entries in lists or analytics screens."
          },
          "sort_order": {
            "oneOf": [
              {
                "const": "asc",
                "description": "Sort direction: 'asc' (ascending) or 'desc' (descending) to control chronological or reverse order."
              },
              {
                "const": "desc",
                "description": "Sort direction: 'asc' (ascending) or 'desc' (descending) to control chronological or reverse order."
              }
            ],
            "description": "Sort direction: 'asc' (ascending) or 'desc' (descending) to control chronological or reverse order."
          }
        },
        "description": "Filter/search and pagination request contract for listing records from discussion_board_post_vote.\n\nDefines full suite of filters for retrieving and aggregating vote data for analytics, moderation, and profile engagement features.",
        "required": []
      },
      "IPageDiscussionBoardPostVote": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardPostVote"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated response wrapper for lists of post votes, providing both per-page record groups and summary page info. Implements standard OpenAPI pagination principles mapped to IPageIDiscussionBoardPostVote."
      },
      "IDiscussionBoardPostVote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key, UUID identifier for this vote record. Unique per upvote entry."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID reference to the registered user who cast this vote. Required for validating 1:1 voting constraint and audit compliance."
          },
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the post which received this vote. Ensures referential and analytic integrity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp indicating when the vote was cast. Used for trend analysis, vote history, and audit trail."
          }
        },
        "required": [
          "id",
          "user_id",
          "post_id",
          "created_at"
        ],
        "description": "Atomic record representing a single upvote or helpfulness mark for a post; mapped directly from a row in discussion_board_post_vote.\n\nCorresponds strictly with all normalized fields required for analytics, feedback reporting, and moderation audit."
      },
      "IDiscussionBoardPostVote.ICreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user casting the vote. Must be a registered system user, and may only vote once per post per business rules (unique constraint in schema).\n\nBusiness context: Used in analytics, user engagement scoring, moderation."
          },
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the post being upvoted. Must reference a valid post in the discussion board (discussion_board_post.id).\n\nUsed for upvoting logic and analytics."
          }
        },
        "required": [
          "user_id",
          "post_id"
        ],
        "description": "Input contract to create a new post vote (upvote/feedback) in the voting table. Requires user and post references."
      },
      "IDiscussionBoardPostVote.IUpdate": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optionally override the vote creation time (ISO 8601) as allowed by business logic. Used mostly for correction, not standard updates.\n\nIf omitted, original created_at date is retained."
          }
        },
        "description": "Update contract for discussion_board_post_vote records. Typically allows only correction of audit fields (e.g. created_at), not changing core vote relationships.",
        "required": []
      },
      "IDiscussionBoardCommentVote.IRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user who cast or is being filtered for comment votes. Used for profile analytics, moderation, and audit searching scenarios."
          },
          "comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the comment being filtered against. Supports searching/vote-counting for a particular comment in analytics or UI feedback tools."
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "Lower bound (ISO 8601) filter on when a vote was cast; supports analytic time window queries."
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "Upper bound (ISO 8601) filter; retrieves only votes within a particular period for moderation or trend reports."
          },
          "page": {
            "type": "integer",
            "description": "Page number for paginated search/filter results, enabling navigation in UIs or reports."
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of vote records to return per page, managing payload volume in API responses."
          },
          "sort_by": {
            "const": "created_at",
            "description": "Field available for sort, typically only 'created_at'. Indicates order for engagement or analysis."
          },
          "sort_order": {
            "oneOf": [
              {
                "const": "asc",
                "description": "Direction of result ordering: 'asc' (earliest first) or 'desc' (most recent first)."
              },
              {
                "const": "desc",
                "description": "Direction of result ordering: 'asc' (earliest first) or 'desc' (most recent first)."
              }
            ],
            "description": "Direction of result ordering: 'asc' (earliest first) or 'desc' (most recent first)."
          }
        },
        "description": "Request payload for paginating, filtering, or searching comment vote records (discussion_board_comment_vote).\n\nExposes business-meaningful filters relevant to analytics, moderation, report UIs. All fields reference normalized schema columns and audit requirements.",
        "required": []
      },
      "IPageDiscussionBoardCommentVote": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardCommentVote"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated response wrapper for lists of comment votes. Used to transmit both pagination information and vote records for efficient UI display/analytics processing."
      },
      "IDiscussionBoardCommentVote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "고유 식별자(UUID)로, 각 댓글 추천(투표) 기록을 식별합니다.\n\nPrisma discussion_board_comment_vote.id 컬럼의 설명을 참조하세요. 모든 댓글 추천은 고유하며, 투표 내역 추적, 감사, 피드백 분석에 사용됩니다."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "추천(업보트)한 사용자의 UUID입니다.\n\nPrisma discussion_board_comment_vote.user_id 컬럼 참조. 특정 사용자가 어느 댓글에 투표했는지 추적하며, 각 사용자-댓글 쌍에 하나만 유지됩니다."
          },
          "comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "추천이 집계된 댓글의 UUID입니다.\n\nPrisma discussion_board_comment_vote.comment_id 컬럼 참조. 댓글별 추천/피드백, 인기 댓글 분석에 활용됩니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "투표 행위가 일어난 시간(ISO 8601). \n\nPrisma discussion_board_comment_vote.created_at 컬럼 참조. 투표 시각, 활동 분석, 추천 피드백 시계열 등에 사용됩니다."
          }
        },
        "required": [
          "id",
          "user_id",
          "comment_id",
          "created_at"
        ],
        "description": "댓글 추천(투표) 엔터티. 사용자가 댓글에 남긴 업보트/피드백을 1:1로 기록합니다.\n\nPrisma discussion_board_comment_vote 테이블 구조에 기반하며, 댓글별 인기/피드백 집계 등에 이용됩니다."
      },
      "IDiscussionBoardCommentVote.ICreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "투표(업보트) 행위를 하는 사용자의 UUID입니다. 필수.\n\nPrisma discussion_board_comment_vote.user_id 설명을 따릅니다."
          },
          "comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "표적이 되는 댓글의 UUID입니다. 필수.\n\nPrisma discussion_board_comment_vote.comment_id 설명을 참조하세요."
          }
        },
        "required": [
          "user_id",
          "comment_id"
        ],
        "description": "댓글 추천/업보트 생성 요청 스키마.\n\n투표행위는 (user_id, comment_id)의 1:1 매칭을 강제합니다."
      },
      "IDiscussionBoardCommentVote.IUpdate": {
        "type": "object",
        "properties": {},
        "description": "댓글 투표 수정용 요청 스키마.\n\n보통 투표 후 수정은 불허하며(정책상), 추후 확장/감사 정보에 대비해 명시적으로 빈 객체로 둡니다.\n\nPrisma discussion_board_comment_vote는 투표 상태 자체는 바뀌지 않음.",
        "required": []
      },
      "IDiscussionBoardReport.IRequest": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "필터를 위한 신고 고유 식별자. (선택)\n\nPrisma discussion_board_report.id 참조."
              },
              {
                "type": "null"
              }
            ],
            "description": "필터를 위한 신고 고유 식별자. (선택)\n\nPrisma discussion_board_report.id 참조."
          },
          "reporting_user_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고한 사용자의 UUID. (선택)\n\nPrisma discussion_board_report.reporting_user_id"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고한 사용자의 UUID. (선택)\n\nPrisma discussion_board_report.reporting_user_id"
          },
          "moderator_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "담당 중재자 UUID. (필터/검색 용)"
              },
              {
                "type": "null"
              }
            ],
            "description": "담당 중재자 UUID. (필터/검색 용)"
          },
          "reported_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고된 게시글 UUID. (댓글 신고와 구분)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고된 게시글 UUID. (댓글 신고와 구분)"
          },
          "reported_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고된 댓글 UUID."
              },
              {
                "type": "null"
              }
            ],
            "description": "신고된 댓글 UUID."
          },
          "reason": {
            "oneOf": [
              {
                "type": "string",
                "description": "신고 사유. (예: 'hate speech', 'spam' 등)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고 사유. (예: 'hate speech', 'spam' 등)"
          },
          "status": {
            "oneOf": [
              {
                "type": "string",
                "description": "신고 처리 상태 필터. (예: 'pending', 'resolved')"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고 처리 상태 필터. (예: 'pending', 'resolved')"
          },
          "created_at_start": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "검색 시작 시점(날짜-시간), 신고 생성일 필터."
              },
              {
                "type": "null"
              }
            ],
            "description": "검색 시작 시점(날짜-시간), 신고 생성일 필터."
          },
          "created_at_end": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "검색 마감 시점(날짜-시간)"
              },
              {
                "type": "null"
              }
            ],
            "description": "검색 마감 시점(날짜-시간)"
          },
          "resolved_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "해결 시각 필터(선택)"
              },
              {
                "type": "null"
              }
            ],
            "description": "해결 시각 필터(선택)"
          },
          "pagination": {
            "$ref": "#/components/schemas/IPage.IRequest"
          }
        },
        "description": "신고 조회/검색 및 페이징을 위한 복합 검색 조건 요청 바디.\n\n신고자, 담당자, 신고대상(게시글/댓글), 사유, 상태 등 다수 필터 지원.\n\nPrisma discussion_board_report 구조 및 정책을 참조하여 설계.",
        "required": []
      },
      "IPageIDiscussionBoardReport": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardReport"
            },
            "description": "검색/조회된 신고(records) 목록 배열."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "신고 목록(Report List) 페이지네이션 컨테이너.\n\nPrisma discussion_board_report 개별 신고 상세의 배열 + 페이지 정보(IPagination)."
      },
      "IDiscussionBoardReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "신고 레코드 고유 식별자(UUID).\n\nPrisma discussion_board_report.id 컬럼 참조."
          },
          "reporting_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "신고자 UUID. (신고를 제출한 사용자)\n\nPrisma discussion_board_report.reporting_user_id"
          },
          "moderator_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고 처리 담당 중재자 UUID. (처리 전에는 null)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고 처리 담당 중재자 UUID. (처리 전에는 null)"
          },
          "reported_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고당한 게시글 UUID."
              },
              {
                "type": "null"
              }
            ],
            "description": "신고당한 게시글 UUID."
          },
          "reported_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고당한 댓글 UUID."
              },
              {
                "type": "null"
              }
            ],
            "description": "신고당한 댓글 UUID."
          },
          "reason": {
            "type": "string",
            "description": "신고 사유 (정책 위반 분류, 예: 'hate speech', 'spam')\n\n입력은 옵션으로, 실제 신고 시 사용자 선택/입력."
          },
          "status": {
            "type": "string",
            "description": "신고 처리 상태(예: 'pending', 'in_review', 'resolved', 'dismissed')\n\n정책상 enum 처리 권고."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "신고 접수 시각 (ISO 8601)"
          },
          "resolved_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "신고가 처리(해결/종결)된 시각(선택)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고가 처리(해결/종결)된 시각(선택)"
          }
        },
        "required": [
          "id",
          "reporting_user_id",
          "reason",
          "status",
          "created_at"
        ],
        "description": "개별 신고 상세 레코드. 게시물/댓글에 대한 신고 내용, 사유 및 처리 상태를 포함.\n\nPrisma discussion_board_report 테이블 구조 및 정책 설명을 반영."
      },
      "IDiscussionBoardReport.ICreate": {
        "type": "object",
        "properties": {
          "reporting_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "신고자(제출자) UUID. 필수.\n\nPrisma discussion_board_report.reporting_user_id"
          },
          "reported_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고한 게시글의 UUID (댓글 신고와 구분, 해당 없으면 null)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고한 게시글의 UUID (댓글 신고와 구분, 해당 없으면 null)"
          },
          "reported_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "신고된 댓글의 UUID (게시글 신고와 구분, 해당 없으면 null)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고된 댓글의 UUID (게시글 신고와 구분, 해당 없으면 null)"
          },
          "reason": {
            "type": "string",
            "description": "신고 사유(정책 위반 분류, 예: '욕설', '홍보', '포르노' 등)\n\n사용자 입력 또는 선택지."
          }
        },
        "required": [
          "reporting_user_id",
          "reason"
        ],
        "description": "신고 등록 요청 스키마. 게시글/댓글 신고 모두 지원하며, 둘 중 하나만 입력이 필수.\n\nPrisma discussion_board_report 정책과 입력 검증에 따라 설계."
      },
      "IDiscussionBoardReport.IUpdate": {
        "type": "object",
        "properties": {
          "moderator_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "(선택) 처리 담당자(중재자) UUID. 처리/담당자 지정에 활용"
              },
              {
                "type": "null"
              }
            ],
            "description": "(선택) 처리 담당자(중재자) UUID. 처리/담당자 지정에 활용"
          },
          "status": {
            "type": "string",
            "description": "신고 처리 상태(예: 'in_review', 'resolved', 'dismissed' 등)"
          },
          "resolved_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "신고 처리 완료 시각(선택)"
              },
              {
                "type": "null"
              }
            ],
            "description": "신고 처리 완료 시각(선택)"
          }
        },
        "description": "신고 상태 및 담당자 수정 등 처리를 위한 요청 바디 (PATCH/PUT에 사용).\n\n처리 담당 지정, 상태 변경, 처리 시각 기록에 사용.",
        "required": []
      },
      "IDiscussionBoardModerationAction.IRequest": {
        "type": "object",
        "properties": {
          "moderator_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "중재자 고유 id. (필터링/검색용)"
              },
              {
                "type": "null"
              }
            ],
            "description": "중재자 고유 id. (필터링/검색용)"
          },
          "subject_user_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "조치 대상 사용자 UUID(검색용)"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치 대상 사용자 UUID(검색용)"
          },
          "related_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "관련 게시글 UUID(검색/필터)"
              },
              {
                "type": "null"
              }
            ],
            "description": "관련 게시글 UUID(검색/필터)"
          },
          "related_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "관련 댓글 UUID(검색/필터)"
              },
              {
                "type": "null"
              }
            ],
            "description": "관련 댓글 UUID(검색/필터)"
          },
          "report_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "해당 조치와 연관된 신고 ID (검색)"
              },
              {
                "type": "null"
              }
            ],
            "description": "해당 조치와 연관된 신고 ID (검색)"
          },
          "action_type": {
            "oneOf": [
              {
                "type": "string",
                "description": "조치 유형(필터, 예: 'warn', 'ban', 'remove_post')"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치 유형(필터, 예: 'warn', 'ban', 'remove_post')"
          },
          "action_reason": {
            "oneOf": [
              {
                "type": "string",
                "description": "조치 사유(텍스트 검색)"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치 사유(텍스트 검색)"
          },
          "created_at_start": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "조치 기록 생성 시작일(필터)"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치 기록 생성 시작일(필터)"
          },
          "created_at_end": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "조치 기록 생성 종료일(필터)"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치 기록 생성 종료일(필터)"
          },
          "pagination": {
            "$ref": "#/components/schemas/IPage.IRequest"
          }
        },
        "description": "중재(모더레이션) 로그 검색/조회 요청 바디.\n\n중재자, 대상, 게시글/댓글, 신고, 유형, 사유, 날짜별 필터 등 검색 및 페이지네이션에 적합.",
        "required": []
      },
      "IPageIDiscussionBoardModerationAction": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardModerationAction"
            },
            "description": "중재(Moderation) 액션 레코드 배열."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "중재(Moderation) 액션 로그 목록 페이지 구조.\n\n중재 로그 객체의 배열과 페이지네이션 정보(IPagination) 포함."
      },
      "IDiscussionBoardModerationAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "고유 중재 액션 식별자(UUID).\n\nPrisma discussion_board_moderation_action.id 컬럼에 해당함."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "중재(조치) 담당자 UUID."
          },
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "중재 조치의 대상 사용자 UUID."
          },
          "related_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "조치의 대상인 게시글 UUID (없을 수 있음)"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치의 대상인 게시글 UUID (없을 수 있음)"
          },
          "related_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "조치의 대상인 댓글 UUID (없을 수 있음)"
              },
              {
                "type": "null"
              }
            ],
            "description": "조치의 대상인 댓글 UUID (없을 수 있음)"
          },
          "report_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "이 액션을 야기한 신고id(선택적 1:1 연결)"
              },
              {
                "type": "null"
              }
            ],
            "description": "이 액션을 야기한 신고id(선택적 1:1 연결)"
          },
          "action_type": {
            "type": "string",
            "description": "조치 유형(예: 'warn', 'ban', 'remove_post' 등)\n\n비즈니스 정책상 enum 관리 권장."
          },
          "action_reason": {
            "type": "string",
            "description": "조치 사유 상세(감사 및 투명성 목적)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "조치 이력 생성 시각(ISO8601)"
          }
        },
        "required": [
          "id",
          "moderator_id",
          "subject_user_id",
          "action_type",
          "action_reason",
          "created_at"
        ],
        "description": "단일 중재(Moderation) 액션 상세 레코드. 경고, 사용자 제한, 콘텐츠 삭제 등 각종 조치의 이력 기록.\n\nPrisma discussion_board_moderation_action 구조와 세부정책을 반영."
      },
      "IDiscussionBoardModerationAction.ICreate": {
        "type": "object",
        "properties": {
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "조치/중재 담당자 UUID. 필수."
          },
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "중재 조치 대상 사용자 UUID. 필수."
          },
          "related_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "(옵션) 관련 게시글 UUID(없으면 null)"
              },
              {
                "type": "null"
              }
            ],
            "description": "(옵션) 관련 게시글 UUID(없으면 null)"
          },
          "related_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "(옵션) 관련 댓글 UUID(없으면 null)"
              },
              {
                "type": "null"
              }
            ],
            "description": "(옵션) 관련 댓글 UUID(없으면 null)"
          },
          "report_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "(옵션) 연관된 신고id(있으면 1:1)"
              },
              {
                "type": "null"
              }
            ],
            "description": "(옵션) 연관된 신고id(있으면 1:1)"
          },
          "action_type": {
            "type": "string",
            "description": "중재/조치 유형(예: 'warn', 'ban', 'remove_post' 등), 필수"
          },
          "action_reason": {
            "type": "string",
            "description": "조치 이유 설명. 필수"
          }
        },
        "required": [
          "moderator_id",
          "subject_user_id",
          "action_type",
          "action_reason"
        ],
        "description": "새로운 중재/조치 액션을 등록하는 요청 스키마.\n\n조치 담당자, 대상, (선택) 관련 게시글/댓글/신고, 유형, 사유 필수.\n\nPrisma discussion_board_moderation_action 테이블 정책 및 설명을 반영."
      },
      "IPage.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "description": "목록 요청시 페이지 번호. 1 이상 정수. (기본값 1)"
              },
              {
                "type": "null",
                "description": "목록 요청시 페이지 번호. 1 이상 정수. (기본값 1)"
              }
            ],
            "description": "목록 요청시 페이지 번호. 1 이상 정수. (기본값 1)"
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "description": "페이지당 레코드 개수(최대값 제한 필요). 기본값 100."
              },
              {
                "type": "null",
                "description": "페이지당 레코드 개수(최대값 제한 필요). 기본값 100."
              }
            ],
            "description": "페이지당 레코드 개수(최대값 제한 필요). 기본값 100."
          }
        },
        "description": "페이지네이션 및 리스트 요청용 표준 타입.\n\n다수 리소스의 검색, 필터, 페이지 정보 바디에 활용.",
        "required": []
      },
      "IDiscussionBoardModerationAction.IUpdate": {
        "type": "object",
        "properties": {
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID referencing the moderator who performed the moderation action. Sourced from discussion_board_moderator.id. Used to track who is responsible for this action.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'moderator_id'."
          },
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the user targeted by this moderation action. Sourced from discussion_board_user.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'subject_user_id'."
          },
          "related_post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the post affected by this moderation action, or null if not applicable. Sourced from discussion_board_post.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'related_post_id'."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "The UUID of the post affected by this moderation action, or null if not applicable. Sourced from discussion_board_post.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'related_post_id'."
              }
            ],
            "description": "The UUID of the post affected by this moderation action, or null if not applicable. Sourced from discussion_board_post.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'related_post_id'."
          },
          "related_comment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the comment affected, or null if not relevant. Sourced from discussion_board_comment.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'related_comment_id'."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "The UUID of the comment affected, or null if not relevant. Sourced from discussion_board_comment.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'related_comment_id'."
              }
            ],
            "description": "The UUID of the comment affected, or null if not relevant. Sourced from discussion_board_comment.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'related_comment_id'."
          },
          "report_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the related user report, or null if none. Sourced from discussion_board_report.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'report_id'."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "The UUID of the related user report, or null if none. Sourced from discussion_board_report.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'report_id'."
              }
            ],
            "description": "The UUID of the related user report, or null if none. Sourced from discussion_board_report.id.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'report_id'."
          },
          "action_type": {
            "type": "string",
            "description": "A string describing the type of moderation action, such as 'warn', 'ban', 'remove_post', etc. Used for classification and audit trails.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'action_type'."
          },
          "action_reason": {
            "type": "string",
            "description": "The human-readable reason for this moderation action. Provides audit trail detail and is visible to both enforcement staff and, in some cases, the affected user.\n\nRefer to: Prisma schema 'discussion_board_moderation_action', column 'action_reason'."
          }
        },
        "required": [
          "moderator_id",
          "subject_user_id",
          "action_type",
          "action_reason"
        ],
        "description": "Request body for updating an existing moderation action as found in the discussion_board_moderation_action table.\n\nCovers updateable elements including references to moderator, subject user, the content targeted, the original report (optional), as well as the action type and rationale.\n\nAll fields reference the original Prisma schema for discussion_board_moderation_action."
      },
      "IDiscussionBoardWarning.IRequest": {
        "type": "object",
        "properties": {
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The user (discussion_board_user_id) who received the warnings. Used to filter warning history for a specific user.\n\nPrisma schema: discussion_board_warning, 'subject_user_id'."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The moderator (discussion_board_moderator_id) who issued the warnings. Used for filtering by issuer.\n\nPrisma schema: discussion_board_warning, 'moderator_id'."
          },
          "warning_reason": {
            "type": "string",
            "description": "Filter warnings containing this reason text (full or partial search allowed). Used for analytics and review workflows.\n\nPrisma schema: discussion_board_warning, 'warning_reason'."
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "Start of date range for filtering warnings (inclusive). ISO 8601 timestamp string.\n\nUsed for reporting and audit trails.\n\nNot directly in Prisma, but maps to discussion_board_warning.created_at (GTE filter logic)."
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "End of date range for filtering warnings (inclusive). ISO 8601 timestamp string.\n\nNot directly in Prisma, maps to discussion_board_warning.created_at (LTE filter logic)."
          },
          "page": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "description": "The page number for pagination. Optional; defaults to 1 if omitted."
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "description": "The number of records per page for pagination. Optional."
          }
        },
        "required": [],
        "description": "Request type for searching, filtering, and paginating warning records in the discussion_board_warning table.\n\nMay include target user, moderator, warning reason, and date ranges, as well as standard pagination fields."
      },
      "IPageIDiscussionBoardWarning": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Pagination metadata for the warning list (current page, limit, total records, etc.)."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardWarning"
            },
            "description": "Array of warning records found in this page."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated container for query results over discussion_board_warning records. Contains both pagination info and an array of warning objects for the current page."
      },
      "IDiscussionBoardWarning": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of this warning record (discussion_board_warning.id in Prisma DB)."
          },
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the user receiving the warning.\n\nReference: Prisma 'subject_user_id' column; FKs to discussion_board_user.id."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the moderator who issued the warning.\n\nReference: Prisma 'moderator_id' column; FKs to discussion_board_moderator.id."
          },
          "related_action_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Links to the moderation action that prompted this warning. Null if not applicable. Enforces audit and resolution trails.\n\nReference: Prisma 'related_action_id' column; FKs to discussion_board_moderation_action.id."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Links to the moderation action that prompted this warning. Null if not applicable. Enforces audit and resolution trails.\n\nReference: Prisma 'related_action_id' column; FKs to discussion_board_moderation_action.id."
              }
            ],
            "description": "Links to the moderation action that prompted this warning. Null if not applicable. Enforces audit and resolution trails.\n\nReference: Prisma 'related_action_id' column; FKs to discussion_board_moderation_action.id."
          },
          "warning_reason": {
            "type": "string",
            "description": "The stated reason for this warning. Shown in notifications and audit logs.\n\nReference: Prisma 'warning_reason' column."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when the warning was issued (ISO 8601 format).\n\nReference: Prisma 'created_at' column."
          }
        },
        "required": [
          "id",
          "subject_user_id",
          "moderator_id",
          "warning_reason",
          "created_at"
        ],
        "description": "Represents a warning record as found in the discussion_board_warning table.\n\nIncludes all atomic, auditable fields related to warning issue events, with full references to issuer and subject user. Aligns directly with the Prisma schema definition."
      },
      "IDiscussionBoardWarning.ICreate": {
        "type": "object",
        "properties": {
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The user receiving the warning. Must reference discussion_board_user.id.\n\nRequired for warning creation."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The moderator creating/applying the warning. Must reference discussion_board_moderator.id."
          },
          "related_action_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Linkage to moderation action prompting warning, or null if none. Used for transparent audit linkage."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Linkage to moderation action prompting warning, or null if none. Used for transparent audit linkage."
              }
            ],
            "description": "Linkage to moderation action prompting warning, or null if none. Used for transparent audit linkage."
          },
          "warning_reason": {
            "type": "string",
            "description": "The explicit reason for this warning. Shown to subject user and in logs."
          }
        },
        "required": [
          "subject_user_id",
          "moderator_id",
          "warning_reason"
        ],
        "description": "Request body structure for creating a new warning record (discussion_board_warning table).\n\nRequired fields are subject user, moderator, and reason string. Alignment enforced against the Prisma DB definition."
      },
      "IDiscussionBoardWarning.IUpdate": {
        "type": "object",
        "properties": {
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The moderator who issued this warning. May be updated for correction or reassignment (discussion_board_moderator.id).\n\nReference: Prisma 'moderator_id'."
          },
          "related_action_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Updates the linked moderation action if correction or audit update is needed. Prisma 'related_action_id'."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Updates the linked moderation action if correction or audit update is needed. Prisma 'related_action_id'."
              }
            ],
            "description": "Updates the linked moderation action if correction or audit update is needed. Prisma 'related_action_id'."
          },
          "warning_reason": {
            "type": "string",
            "description": "New or corrected reason for the warning.\n\nReference: Prisma 'warning_reason'."
          }
        },
        "required": [],
        "description": "Structure for updating mutable properties of a warning record (discussion_board_warning table).\n\nAllows update of moderator, related moderation action linkage, or the warning reason. Used for audits, appeals, or moderation history corrections."
      },
      "IDiscussionBoardUserBan.IRequest": {
        "type": "object",
        "properties": {
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The user who is the subject of the ban (discussion_board_user.id).\n\nFilter for historical ban review or subject-driven searches."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The moderator who issued the ban (discussion_board_moderator.id).\n\nAnalytics, review, or trend analysis by staff issuer."
          },
          "ban_reason": {
            "type": "string",
            "description": "Filter bans by free-text reason string (full or partial search).\n\nSearchable for reporting or audit trails."
          },
          "banned_from": {
            "type": "string",
            "format": "date-time",
            "description": "Start of date range for ban events (inclusive). ISO 8601 string.\n\nFor temporal filtering on ban issue date."
          },
          "banned_to": {
            "type": "string",
            "format": "date-time",
            "description": "End of filter window for bans (inclusive). ISO 8601.\n\nSearch for bans issued before/after specific dates."
          },
          "ban_active": {
            "type": "boolean",
            "description": "Filter only currently active (true) or historical (false) bans.\n\nCalculates if ban_lifted_at is null or in the future (application logic, not directly persisted field)."
          },
          "page": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "description": "The page number for pagination (optional, default 1)."
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "description": "The number of results per page (optional, default 20)."
          }
        },
        "required": [],
        "description": "Search/pagination request for user ban records (discussion_board_user_ban table).\n\nMay combine user, moderator, reason string, and temporal fields. Pagination fields are optional."
      },
      "IPageIDiscussionBoardUserBan": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Pagination state info for current page of user bans."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardUserBan"
            },
            "description": "Array of ban records resolved for this query page."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paginated container for discussion_board_user_ban record sets, returned for list/search queries."
      },
      "IDiscussionBoardUserBan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID for the ban record (discussion_board_user_ban.id).\n\nUsed as a stable, auditable reference throughout all ban management operations."
          },
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the user being banned.\n\nFK constraint per the discussion_board_user entity in Prisma."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "Moderator's unique ID (discussion_board_moderator.id).\n\nLinks the ban event to an authorized enforcement actor."
          },
          "related_action_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Refers to the moderation action record for which this ban is a direct or indirect outcome. Used for audit, escalation review, or rollback."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Refers to the moderation action record for which this ban is a direct or indirect outcome. Used for audit, escalation review, or rollback."
              }
            ],
            "description": "Refers to the moderation action record for which this ban is a direct or indirect outcome. Used for audit, escalation review, or rollback."
          },
          "ban_reason": {
            "type": "string",
            "description": "Explicit reason for ban. Two to three sentences or policy code; appears in audit trail and, optionally, user notification."
          },
          "banned_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the ban was enacted (ISO 8601).\n\nSupport for audit/replay and compliance records."
          },
          "ban_lifted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Set if the ban is temporary or has been revoked/lifted. Contains removal date/time or null for permanent bans. Used by appeals, review dashboards, and moderation audits."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Set if the ban is temporary or has been revoked/lifted. Contains removal date/time or null for permanent bans. Used by appeals, review dashboards, and moderation audits."
              }
            ],
            "description": "Set if the ban is temporary or has been revoked/lifted. Contains removal date/time or null for permanent bans. Used by appeals, review dashboards, and moderation audits."
          }
        },
        "required": [
          "id",
          "subject_user_id",
          "moderator_id",
          "ban_reason",
          "banned_at"
        ],
        "description": "Model representation of a user ban event as found in discussion_board_user_ban table.\n\nAll atomic, auditable fields are present, providing reference linkage to subject, moderator, moderation action (optional), rationale, and relevant timestamps. Mapped directly from the normalized Prisma schema design."
      },
      "IDiscussionBoardUserBan.ICreate": {
        "type": "object",
        "properties": {
          "subject_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The user to be banned (discussion_board_user.id). Required upon creation."
          },
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "The issuing moderator's UUID (discussion_board_moderator.id)."
          },
          "related_action_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Link to the underlying moderation action; may be null if ban is an initial incident."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Link to the underlying moderation action; may be null if ban is an initial incident."
              }
            ],
            "description": "Link to the underlying moderation action; may be null if ban is an initial incident."
          },
          "ban_reason": {
            "type": "string",
            "description": "A statement of the explicit reason for the ban. Must be clear and policy-compliant."
          },
          "banned_at": {
            "type": "string",
            "format": "date-time",
            "description": "The exact timestamp of ban initiation (ISO 8601)."
          },
          "ban_lifted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "If set, specifies the time when the ban will expire or was lifted (nullable for permanent bans)."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "If set, specifies the time when the ban will expire or was lifted (nullable for permanent bans)."
              }
            ],
            "description": "If set, specifies the time when the ban will expire or was lifted (nullable for permanent bans)."
          }
        },
        "required": [
          "subject_user_id",
          "moderator_id",
          "ban_reason",
          "banned_at"
        ],
        "description": "Arguments for creating a new user ban event (discussion_board_user_ban). For moderation enforcement, appeals, or compliance documentation."
      },
      "IDiscussionBoardUserBan.IUpdate": {
        "type": "object",
        "properties": {
          "moderator_id": {
            "type": "string",
            "format": "uuid",
            "description": "Updated moderator assigned to this ban record (permits transfer/correction of enforcement responsibility)."
          },
          "related_action_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "Updated moderation action association; corrects audit trail linkage if required."
              },
              {
                "type": "null",
                "format": "uuid",
                "description": "Updated moderation action association; corrects audit trail linkage if required."
              }
            ],
            "description": "Updated moderation action association; corrects audit trail linkage if required."
          },
          "ban_reason": {
            "type": "string",
            "description": "Update or correct rationale for this ban event."
          },
          "ban_lifted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Update (or set) ban end/revocation timestamp. Null if still permanent."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Update (or set) ban end/revocation timestamp. Null if still permanent."
              }
            ],
            "description": "Update (or set) ban end/revocation timestamp. Null if still permanent."
          }
        },
        "required": [],
        "description": "Updation model for user ban records—permits updating moderator assignment, escalation link, rationale, or temporal ban end state. Used for appeals, dispute resolution, or correction of record."
      },
      "IDiscussionBoardNotification.IRequest": {
        "type": "object",
        "properties": {
          "discussion_board_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The target user for notifications (discussion_board_user.id) to filter or search notification events."
          },
          "type": {
            "type": "string",
            "description": "Class/type of notification event (e.g., reply, mention, moderation, etc.). Used for UI filtering and analytics."
          },
          "title": {
            "type": "string",
            "description": "Text search for notification titles, allowing filtering by subject line (partial search enabled)."
          },
          "body": {
            "type": "string",
            "description": "Text search for notification body/content (useful for notification audit workflows or keyword filtering)."
          },
          "is_read": {
            "type": "boolean",
            "description": "Filter for notifications by read/unread status (true for those marked as read, false for unread). Useful for inbox/focus workflows."
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "Begin date/time filter for notification creation (ISO 8601)."
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "End date/time filter."
          },
          "page": {
            "type": "integer",
            "format": "uint32",
            "description": "Page number for pagination (default: 1)."
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "description": "Number of results per page."
          }
        },
        "required": [],
        "description": "Filter/search/pagination request structure for user notifications as found in discussion_board_notification Prisma entity. Enables advanced delivery filtering, audit workflows, and UI targeting."
      },
      "IPageIDiscussionBoardNotification": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Pagination information for the returned set of notifications.\n\nContains details such as the current page number, page size, total records, and total page count, as per standard IPage container."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardNotification"
            },
            "description": "The data array containing the list of user notification records per the page request.\n\nEach item is a notification object representing a delivery record for a specific notification event to a user."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A paginated result set of notification records, as used in list/search endpoints for user notifications.\n\nThis container wraps both the notification list and all pagination metadata needed for navigation and client state."
      },
      "IDiscussionBoardNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the notification record, as defined in discussion_board_notification.id.\n\nThis is a UUID conforming to standard identifier format for tracking notification delivery."
          },
          "discussion_board_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Reference to the user who received this notification.\n\nImplements the link between the notification and its recipient, as in discussion_board_notification.discussion_board_user_id. Must correspond to an existing user ID."
          },
          "type": {
            "type": "string",
            "description": "Classification for the notification event: e.g., 'reply', 'mention', 'moderation', etc.\n\nThis field describes the business event or trigger for the notification and is essential for routing and presentation."
          },
          "title": {
            "type": "string",
            "description": "Short summary for the notification, used as the pop-up header or in the notification list.\n\nExtracted from discussion_board_notification.title, always a concise human-readable message."
          },
          "body": {
            "type": "string",
            "description": "Full message body of the notification, providing user-readable details."
          },
          "is_read": {
            "type": "boolean",
            "description": "Read/unread status of the notification (as per discussion_board_notification.is_read).\n\nIndicates whether the recipient has already viewed this notification."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp (ISO8601) when the notification was created and sent.\n\nDirectly from discussion_board_notification.created_at, used for notification ordering and audit trail."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Soft-deletion timestamp for the notification, or null if still active.\n\nIf set, indicates the notification is soft deleted and should not be shown to the user except in audit contexts."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Soft-deletion timestamp for the notification, or null if still active.\n\nIf set, indicates the notification is soft deleted and should not be shown to the user except in audit contexts."
              }
            ],
            "description": "Soft-deletion timestamp for the notification, or null if still active.\n\nIf set, indicates the notification is soft deleted and should not be shown to the user except in audit contexts."
          }
        },
        "required": [
          "id",
          "discussion_board_user_id",
          "type",
          "title",
          "body",
          "is_read",
          "created_at"
        ],
        "description": "A complete notification delivery record as stored in discussion_board_notification.\n\nContains identifiers, delivery details, message, read status, and audit timestamps. Essential for notification UIs and user panels."
      },
      "IDiscussionBoardNotification.ICreate": {
        "type": "object",
        "properties": {
          "discussion_board_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who will receive this notification. Must match a registered user in discussion_board_user.\n\nRequired for proper delivery and audit."
          },
          "type": {
            "type": "string",
            "description": "Business classification for this notification (e.g., 'reply', 'mention', 'moderation', etc).\n\nUsed for routing and display."
          },
          "title": {
            "type": "string",
            "description": "Title/subject of the notification for in-app and UI alerts."
          },
          "body": {
            "type": "string",
            "description": "Main message content for the notification body."
          },
          "is_read": {
            "type": "boolean",
            "description": "Initial read status for the notification. Typically false on creation unless backfilled."
          }
        },
        "required": [
          "discussion_board_user_id",
          "type",
          "title",
          "body",
          "is_read"
        ],
        "description": "The payload required to create a new notification record for a user.\n\nThis closely matches the discussion_board_notification fields as described in the DB schema—uniquely identifying the recipient, notification class, subject, and content body, along with an initial read state."
      },
      "IDiscussionBoardNotification.IUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Optional new title for the notification."
          },
          "body": {
            "type": "string",
            "description": "Optional new content for the notification message body."
          },
          "is_read": {
            "type": "boolean",
            "description": "Boolean indicating if the notification has been read. Setting this field to true marks as read."
          }
        },
        "required": [],
        "description": "Payload for updating mutable fields of a notification—supports changing the title, body, or read/unread state for a user.\n\nNo identifier is needed here, as the update is scoped by endpoint parameters."
      },
      "IDiscussionBoardUserSetting.IRequest": {
        "type": "object",
        "properties": {
          "discussion_board_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Reference to the user for whom settings are requested.\n\nAtomic foreign key to discussion_board_user, for filtering by user in searches."
          },
          "notification_email_enabled": {
            "type": "boolean",
            "description": "Filter for email notification opt-in/out state.\n\nIf specified, results will be limited to users with this flag set to the given value."
          },
          "notification_in_app_enabled": {
            "type": "boolean",
            "description": "Filter for in-app notification opt-in/out state.\n\nUsed to narrow search results by user engagement settings."
          },
          "theme_preference": {
            "type": "string",
            "description": "Optional filter for user theme selection (e.g., 'light', 'dark').\n\nApplies UI preference filter in searches."
          },
          "language_preference": {
            "type": "string",
            "description": "Optional filter for interface language preference (e.g., 'en', 'ko').\n\nRestricts search results to a given language."
          },
          "page": {
            "type": "integer",
            "description": "Request page number for paginated results.\n\nZero-based or one-based index per API spec."
          },
          "limit": {
            "type": "integer",
            "description": "Requested page size (maximum records per page).\n\nUsed for pagination, often defaults to 100."
          }
        },
        "description": "Request/query structure for paginated user settings list/search endpoint.\n\nAllows filtering by user id, notification preference flags, UI theme, language, and standard pagination fields.",
        "required": []
      },
      "IPageIDiscussionBoardUserSetting": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Paging metadata for the result set of user settings records."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardUserSetting"
            },
            "description": "Array of user setting objects as returned by the page request."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Container for paged result sets of user settings (discussion_board_user_setting).\n\nIncludes both metadata for the results page and the data array for user preferences records."
      },
      "IDiscussionBoardUserSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique UUID identifier for the user setting record."
          },
          "discussion_board_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key reference to the user whose settings are stored here."
          },
          "notification_email_enabled": {
            "type": "boolean",
            "description": "Flag: true if email notifications are enabled for this user."
          },
          "notification_in_app_enabled": {
            "type": "boolean",
            "description": "Flag: true if in-app notifications are enabled for this user."
          },
          "theme_preference": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional string indicating user-chosen UI theme (e.g., 'dark', 'light')."
              },
              {
                "type": "null",
                "description": "Optional string indicating user-chosen UI theme (e.g., 'dark', 'light')."
              }
            ],
            "description": "Optional string indicating user-chosen UI theme (e.g., 'dark', 'light')."
          },
          "language_preference": {
            "oneOf": [
              {
                "type": "string",
                "description": "Optional user interface language/locale selection, e.g., 'en', 'ko', as a string."
              },
              {
                "type": "null",
                "description": "Optional user interface language/locale selection, e.g., 'en', 'ko', as a string."
              }
            ],
            "description": "Optional user interface language/locale selection, e.g., 'en', 'ko', as a string."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last modification to this settings record."
          }
        },
        "required": [
          "id",
          "discussion_board_user_id",
          "notification_email_enabled",
          "notification_in_app_enabled",
          "created_at",
          "updated_at"
        ],
        "description": "The full persistent record for user notification and preference settings in discussion_board_user_setting.\n\nIncludes all notification flags, theme info, and timestamps. Essential for profile/personalization UIs and user audit."
      },
      "IDiscussionBoardUserSetting.ICreate": {
        "type": "object",
        "properties": {
          "discussion_board_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user for whom settings are being created."
          },
          "notification_email_enabled": {
            "type": "boolean",
            "description": "Opt-in/out for email notifications upon creation."
          },
          "notification_in_app_enabled": {
            "type": "boolean",
            "description": "Opt-in/out for in-app notifications upon creation."
          },
          "theme_preference": {
            "oneOf": [
              {
                "type": "string",
                "description": "Initial UI theme selection for the user, such as 'light', 'dark', or null."
              },
              {
                "type": "null",
                "description": "Initial UI theme selection for the user, such as 'light', 'dark', or null."
              }
            ],
            "description": "Initial UI theme selection for the user, such as 'light', 'dark', or null."
          },
          "language_preference": {
            "oneOf": [
              {
                "type": "string",
                "description": "Initial UI language/locale preference, such as 'en', 'ko', or null."
              },
              {
                "type": "null",
                "description": "Initial UI language/locale preference, such as 'en', 'ko', or null."
              }
            ],
            "description": "Initial UI language/locale preference, such as 'en', 'ko', or null."
          }
        },
        "required": [
          "discussion_board_user_id",
          "notification_email_enabled",
          "notification_in_app_enabled"
        ],
        "description": "Payload for creating a new user settings record. Must include user FK and notification flags; theme/language are optional."
      },
      "IDiscussionBoardUserSetting.IUpdate": {
        "type": "object",
        "properties": {
          "notification_email_enabled": {
            "type": "boolean",
            "description": "Update flag for notification via email."
          },
          "notification_in_app_enabled": {
            "type": "boolean",
            "description": "Update flag for use of in-app notifications."
          },
          "theme_preference": {
            "oneOf": [
              {
                "type": "string",
                "description": "Updated UI theme ('dark', 'light', or null)."
              },
              {
                "type": "null",
                "description": "Updated UI theme ('dark', 'light', or null)."
              }
            ],
            "description": "Updated UI theme ('dark', 'light', or null)."
          },
          "language_preference": {
            "oneOf": [
              {
                "type": "string",
                "description": "Updated language/locale for UI, or null for default."
              },
              {
                "type": "null",
                "description": "Updated language/locale for UI, or null for default."
              }
            ],
            "description": "Updated language/locale for UI, or null for default."
          }
        },
        "required": [],
        "description": "Update payload for user settings record—allows modifications of notification/email flags, theme, and language preference."
      },
      "IDiscussionBoardAttachment.IRequest": {
        "type": "object",
        "properties": {
          "uploaded_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Optional filter for searching attachments by uploading user's UUID."
          },
          "file_name": {
            "type": "string",
            "description": "Optional filter for file name search in attachments.\n\nSupports substring or exact name matching."
          },
          "mime_type": {
            "type": "string",
            "description": "Optional MIME type filter to list/filter attachments of a given file content type."
          },
          "created_at_from": {
            "type": "string",
            "format": "date-time",
            "description": "Filter: limit results to attachments uploaded at or after this timestamp."
          },
          "created_at_to": {
            "type": "string",
            "format": "date-time",
            "description": "Filter: limit results to attachments uploaded at or before this timestamp."
          },
          "page": {
            "type": "integer",
            "description": "Page number for paginated results."
          },
          "limit": {
            "type": "integer",
            "description": "Number of records to be returned per page."
          }
        },
        "description": "Request structure for paginated, filtered, or searched attachment listings from discussion_board_attachment.\n\nAllows searching by uploader, file name/type, and paging info.",
        "required": []
      },
      "IPageIDiscussionBoardAttachment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "Pagination metadata for attachment list responses."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardAttachment"
            },
            "description": "Array of attachment records for this result page."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "Paged and filtered results for attachment metadata objects.\n\nAllows UIs to display files with navigation data for lists of attachments."
      },
      "IDiscussionBoardAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique UUID for this attachment metadata record."
          },
          "uploaded_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user who uploaded the file."
          },
          "file_url": {
            "type": "string",
            "description": "Full URI or URL to the file in storage (e.g., CDN, S3 link).\n\nMust be unique per schema."
          },
          "file_name": {
            "type": "string",
            "description": "Human-readable uploaded file name."
          },
          "mime_type": {
            "type": "string",
            "description": "MIME type for the file—describes content for client rendering."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Upload timestamp for the attachment."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp if attachment was soft-deleted, else null (attachment is active)."
              },
              {
                "type": "null",
                "format": "date-time",
                "description": "Timestamp if attachment was soft-deleted, else null (attachment is active)."
              }
            ],
            "description": "Timestamp if attachment was soft-deleted, else null (attachment is active)."
          }
        },
        "required": [
          "id",
          "uploaded_by_user_id",
          "file_url",
          "file_name",
          "mime_type",
          "created_at"
        ],
        "description": "Metadata record for an uploaded attachment (discussion_board_attachment).\n\nIncludes file/info required for display or download, plus audit and deletion status."
      },
      "IDiscussionBoardAttachment.ICreate": {
        "type": "object",
        "properties": {
          "uploaded_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "유저가 업로드한 첨부파일의 업로더 UUID입니다.\n\nPrisma schema 컬럼 'uploaded_by_user_id'를 기반으로 하며, 첨부파일 메타데이터가 반드시 어떤 사용자에게 속해야 함을 의미합니다. 예시: 'dde0c1b6-adde-40f6-b624-f61d438d1951'\n\n이 필드는 중복 첨부파일 검증 및 소유권 로직에 활용됩니다."
          },
          "file_url": {
            "type": "string",
            "maxLength": 80000,
            "description": "업로드된 파일의 절대 URI 또는 접근 가능한 URL입니다.\n\nPrisma schema의 'file_url'에 해당하며, 시스템에서 첨부파일을 식별하고 접근하기 위한 기본 식별자 역할을 합니다.\n\n예: 'https://cdn.example.com/uploads/example.png'"
          },
          "file_name": {
            "type": "string",
            "description": "업로드할 때 사용자가 지정한 원본 파일명입니다.\n\nPrisma schema 컬럼 'file_name'으로, 사용자에게 표시되는 파일명이나 다운로드시의 기본명으로 사용합니다.\n\n예: '2025_discussion_stats.xlsx'"
          },
          "mime_type": {
            "type": "string",
            "description": "파일의 Content-Type(MIME)입니다.\n\nPrisma 컬럼의 'mime_type'에서 따옴. 서버/클라이언트 모두에서 렌더링 및 미리보기 지원을 위해 필요합니다.\n\n예: 'image/png', 'application/pdf'"
          }
        },
        "required": [
          "uploaded_by_user_id",
          "file_url",
          "file_name",
          "mime_type"
        ],
        "description": "첨부파일 새 메타데이터 레코드 생성에 사용되는 타입입니다.\n\nPrisma discussion_board_attachment 테이블의 atomic 필드만 포함하며, 업로더 구분, 파일 접근 URI, 파일명 및 포멧을 구체적으로 기술해야 합니다.\n\n이 타입은 클라이언트에서 파일 업로드 후 서버에 파일 정보를 등록할 때 사용합니다.\n\n모든 필드는 Prisma 스키마에 기재된 제약조건을 따라야 하며, file_url은 유일해야 합니다. 업로더 UUID, 파일 path, 파일명, MIME타입 작성이 필수입니다."
      },
      "IDiscussionBoardAttachment.IUpdate": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "새 파일명으로 수정 시 지정할 수 있는 값입니다.\n\n예: 이전 값이 '예산표.pdf'에서 '2025_예산_공약.pdf'로 변경"
          },
          "mime_type": {
            "type": "string",
            "description": "파일의 Content-Type(MIME)으로, 수정시 지정할 수 있는 값입니다.\n\n예: 'image/jpeg', 'application/pdf'"
          }
        },
        "description": "첨부파일 메타데이터의 일부(파일명, 포맷 등)를 수정할 때 사용하는 타입입니다.\n\nPrisma 스키마의 discussion_board_attachment에 준하며, 파일 URL과 업로더는 절대 변경되지 않습니다. 파일명 및 MIME타입만 변경 가능합니다.",
        "required": []
      },
      "IDiscussionBoardPostAttachmentLink.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "format": "uint32",
                "description": "조회할 페이지 번호입니다. (1부터 시작하는 자연수)\n\n미지정시는 첫 페이지(보통 1)가 선택됩니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "조회할 페이지 번호입니다. (1부터 시작하는 자연수)\n\n미지정시는 첫 페이지(보통 1)가 선택됩니다."
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "format": "uint32",
                "description": "페이지 당 최대 결과 개수입니다.\n\n디폴트는 100이며, 시스템에 따라 상한이 있을 수 있습니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "페이지 당 최대 결과 개수입니다.\n\n디폴트는 100이며, 시스템에 따라 상한이 있을 수 있습니다."
          },
          "post_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "어떤 게시글(post)에 연결된 첨부파일 링크를 조회할지 지정하는 UUID입니다.\n\ndiscussion_board_post_attachment_link의 post_id로, 게시글 별 첨부파일 리스트를 구분합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "어떤 게시글(post)에 연결된 첨부파일 링크를 조회할지 지정하는 UUID입니다.\n\ndiscussion_board_post_attachment_link의 post_id로, 게시글 별 첨부파일 리스트를 구분합니다."
          },
          "attachment_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "특정 첨부파일(attachment)이 어떤 게시글/post에 연결돼 있는지 조회할 때 사용합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "특정 첨부파일(attachment)이 어떤 게시글/post에 연결돼 있는지 조회할 때 사용합니다."
          },
          "disabled": {
            "oneOf": [
              {
                "type": "boolean",
                "description": "첨부파일 링크가 논리적으로 비활성 처리된 경우만 필터링합니다.\n\n비활성(숨김) 여부를 조건으로 검색 가능하도록 합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "첨부파일 링크가 논리적으로 비활성 처리된 경우만 필터링합니다.\n\n비활성(숨김) 여부를 조건으로 검색 가능하도록 합니다."
          }
        },
        "description": "게시글-첨부파일 링크의 목록을 페이징/검색/필터링하여 요청하기 위한 타입입니다.\n\ndiscussion_board_post_attachment_link의 다양한 속성 값(post/attachment 연계, 비활성 여부 등)으로 리스트를 필터링하고, pagination도 동시에 지정 가능합니다.\n\n모든 필드는 선택사항이며, 값이 null 또는 생략될 경우 필터로 적용되지 않습니다.",
        "required": []
      },
      "IPageIDiscussionBoardPostAttachmentLink": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보입니다.\n\n현재 페이지, 총 페이지 수, 전체 데이터량, limit 등의 정보를 담은 표준 구조체입니다."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDiscussionBoardPostAttachmentLink"
            },
            "description": "실제 페이징된 게시글-첨부파일 링크들의 리스트입니다.\n\n각 항목은 IDiscussionBoardPostAttachmentLink 타입으로 표현됩니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "게시글-첨부파일 링크의 페이징 결과 컨테이너 타입입니다.\n\n게시글별 첨부파일의 링크 데이터를 논리적으로 쿼리 및 노출할 때 사용합니다.\n\nIPage 표준구조를 사용하여 pagination 정보를 함께 제공합니다."
      },
      "IDiscussionBoardPostAttachmentLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "게시글-첨부파일 링크의 고유 식별자 값입니다.\n\nPrisma 테이블 discussion_board_post_attachment_link의 PK에 해당합니다. 예: '594b9c7c-2b91-4b5b-89f4-8277e7b58232'"
          },
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "게시글 ID(외부키)로, 해당 링크가 어떤 post에 속하는지를 지정합니다.\n\ndiscussion_board_post의 id를 참조합니다."
          },
          "attachment_id": {
            "type": "string",
            "format": "uuid",
            "description": "첨부파일 ID(외부키), discussion_board_attachment의 id를 참조합니다.\n\n실제 연결된 첨부파일의 식별값입니다."
          },
          "attachment_order": {
            "type": "integer",
            "description": "동일 게시글 내 첨부파일들의 노출 순서를 지정하는 값입니다.\n\n자연수(1,2,3 등)로써 첨부파일 열람시 순서 보장 목적. 고유(unique)해야 합니다."
          },
          "disabled": {
            "type": "boolean",
            "description": "해당 첨부파일 링크가 논리적으로 비활성(숨김) 상태인지 여부입니다.\n\n숨김/삭제 처리된 경우 true, 평상시 false입니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "첨부파일 링크가 생성된 시각(ISO 8601)입니다.\n\nPrisma discussion_board_post_attachment_link의 created_at을 따름."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "첨부파일 링크의 논리적 삭제(soft delete) 시각입니다.\n\n삭제 전(null), 삭제된 경우 '2025-07-11T14:00:00'과 같은 시각 값."
              },
              {
                "type": "null"
              }
            ],
            "description": "첨부파일 링크의 논리적 삭제(soft delete) 시각입니다.\n\n삭제 전(null), 삭제된 경우 '2025-07-11T14:00:00'과 같은 시각 값."
          }
        },
        "required": [
          "id",
          "post_id",
          "attachment_id",
          "attachment_order",
          "disabled",
          "created_at"
        ],
        "description": "게시글-첨부파일의 실제 링크 구조를 나타내는 대표 엔티티 타입입니다.\n\ndiscussion_board_post와 attachment간의 연결(m:n)을 담당하며, 파일 첨부/노출시 반드시 참조합니다. 모든 필드는 Prisma 스키마의 atomic 필드에 대응합니다."
      },
      "IDiscussionBoardPostAttachmentLink.ICreate": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "string",
            "format": "uuid",
            "description": "첨부파일을 붙일 게시글(UUID) ID입니다.\n\nPrisma discussion_board_post_attachment_link.post_id를 통해 전달됩니다."
          },
          "attachment_id": {
            "type": "string",
            "format": "uuid",
            "description": "첨부파일 UUID입니다.\n\nPrisma discussion_board_post_attachment_link.attachment_id로, 실제 연결할 파일 ID를 지정합니다."
          },
          "attachment_order": {
            "type": "integer",
            "description": "게시글 내 첨부파일들 사이의 노출 순서(1-base)입니다.\n\n동일 post 내에서 유일(unique)해야 하며, 일반적으로 1부터 시작해 추가되며 정렬에 활용됩니다."
          },
          "disabled": {
            "type": "boolean",
            "description": "첨부파일 링크의 비활성화 상태를 지정합니다.\n\n초기 생성시 일반적으로 false(사용)지만, preview 파일 붙이기 등에서는 true 여야 할 수 있습니다."
          }
        },
        "required": [
          "post_id",
          "attachment_id",
          "attachment_order",
          "disabled"
        ],
        "description": "게시글-첨부파일 링크 신규 생성에 사용되는 타입입니다.\n\nPrisma의 discussion_board_post_attachment_link 테이블의 필수/유일 제약에 맞춰 값을 작성해야 합니다.\n\n특히 post_id, attachment_id, attachment_order는 고유 조합이어야 하며, disabled는 초기 값도 꼭 명시해야 합니다."
      },
      "IDiscussionBoardPostAttachmentLink.IUpdate": {
        "type": "object",
        "properties": {
          "attachment_order": {
            "type": "integer",
            "description": "첨부파일 노출 순서(1-base 혹은 현재 post 내에서의 새로운 인덱스).\n\n순서 변경이 필요할 경우에 지정, 유일해야 함."
          },
          "disabled": {
            "type": "boolean",
            "description": "첨부파일 링크 활성/비활성화 여부.\n\n삭제/숨김 처리 시 true, 복구/노출시 false로 갱신."
          }
        },
        "description": "게시글-첨부파일 링크 정보(순서/상태)를 갱신하는데 사용되는 타입입니다.\n\nattachment_order와 disabled만 수정 가능합니다. 실제 파일/게시글 연계는 바꿀 수 없습니다.",
        "required": []
      },
      "IDiscussionBoardPostAttachmentLink.IDeleteResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제된(비활성화된) 게시글-첨부파일 링크의 고유 식별 값입니다.\n\n삭제 확인이나 클라이언트 UI 갱신 시 활용 가능합니다."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "삭제(soft delete) 완료 시각(UTC ISO 8601) 값. '2025-07-11T14:00:00'과 같이 관리됨."
          }
        },
        "required": [
          "id",
          "deleted_at"
        ],
        "description": "게시글-첨부파일 링크의 삭제(비활성화) 결과 정보입니다.\n\n삭제가 성공적으로 이뤄졌음을 확인하기 위해 반환하며, 실제 레코드 논리삭제 시각과 PK를 함께 제공합니다."
      }
    }
  }
}
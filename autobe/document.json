{"operations":[{"specification":"Implements retrieval of a paginated and searchable list of discussion board configuration key-value pairs. This API is essential for administrators and moderators to audit, filter, or search for current platform settings, feature flags, or configurable limits without directly accessing the database. It supports searching by key, description, or value, as enforced by the normalized design in the discussion_board_configurations Prisma model. Fulfills requirements for tunable system-wide settings (see admin features and section 5 in requirements).","description":"This endpoint returns a filtered list of configuration key-value pairs when provided with search/filter parameters such as key, value, or description. It is only accessible to administrators, enforcing role-based access as described in the specification. The configurations table supports audit trail requirements by including created_at and updated_at metadata, allowing system operators to track changes and review the existing configuration state without modification rights. Pagination parameters serve non-functional requirements for UI responsiveness and compliance with privacy principles by avoiding data overload in large deployments. Related endpoints include GET for detail retrieval and POST/PUT/DELETE for modification operations.","summary":"Retrieve a list of discussion_board_configurations records for platform settings management audit/tracking.","parameters":[],"requestBody":{"description":"Request parameters for configuration listing/searching (pagination, filters, etc.).","typeName":"IDiscussionBoardConfiguration.IRequest"},"responseBody":{"description":"Paginated list of configuration records matching search/filter parameters.","typeName":"IPageIDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations","method":"patch"},{"specification":"Enables retrieval of a single configuration setting record by its UUID, as stored in the discussion_board_configurations table. Designed for admin panels or moderator review interfaces that require a details view of individual system settings before making updates or displaying configuration histories. Fulfills audit, traceability, and detailed inspection requirements without exposing full raw data dumps.","description":"This endpoint returns the complete key, value, description, and audit metadata for a specified configuration row, identified by its UUID in the path parameter. It enforces role-based access (administrator only). The configuration value is returned as stored (could be JSON or string), along with audit trail dates to support change tracking and compliance review. This endpoint is typically accessed when an admin clicks a configuration item in a management UI for review or editing.","summary":"Get a specific discussion_board_configuration record by UUID (admin-only detail view).","parameters":[{"name":"id","description":"Configuration record UUID (primary key to discussion_board_configurations.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete configuration record, including key, value, description, and audit fields.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"get"},{"specification":"Create a new configuration key-value pair in the discussion_board_configurations table. This operation is only accessible to administrators, in accordance with system requirements for strict modification control of global settings and feature flags. Ensures system-wide behavior can be safely tuned via the API/editor interface while maintaining 3NF atomicity of settings, as required by the Prisma model commentaries.","description":"This endpoint receives a configuration creation request consisting of a unique key, value, and optional descriptive text. On success, it will persist the record and return the created entity with audit data (created_at/updated_at). Enforced business logic includes checking for duplicate keys and only permitting valid key/value pairs as specified by system safeguard rules. Fulfills requirements for dynamic, runtime configuration tuning without code deployments, as needed in administrative operations and feature toggling workflows.","summary":"Create a new discussion_board_configuration (admin-only, global settings).","parameters":[],"requestBody":{"description":"Configuration key-value creation request body, including all required fields for a new configuration record.","typeName":"IDiscussionBoardConfiguration.ICreate"},"responseBody":{"description":"Created configuration record with audit information.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations","method":"post"},{"specification":"Update an existing configuration row (by UUID) within the discussion_board_configurations table. This endpoint is restricted to administrators, fulfilling requirements for audited modification of system-level settings, feature flags, or behavioral switches (see admin controls in requirements and Prisma commentary). Implements full update (not partial patch) as per REST and DB consistency standards.","description":"Receives a configuration update request for the specified record, allowing changes to the key, value, and description. On success, it updates the corresponding fields and audit timestamps (updated_at) and returns the modified configuration state. API enforces all business logic: only unique keys, proper value formats, and full audit trail retention. This operation directly supports administrative change management, rollback scenarios, and audit logging.","summary":"Update an existing discussion_board_configuration by UUID (admin-only).","parameters":[{"name":"id","description":"UUID of the configuration row to update (primary key to discussion_board_configurations.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full update data for the configuration row (key, value, description).","typeName":"IDiscussionBoardConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration record after changes applied.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"put"},{"specification":"Delete a given configuration setting by its UUID, implementing the soft-delete requirements codified in the Prisma schema's deleted_at convention and enforced by administrative access control. This operation is only available to administrators and is critical for compliance-driven reversibility, configuration lifecycle management, and audit logging.","description":"Marks the specified configuration row as deleted (soft delete by setting deleted_at timestamp) while preserving all audit data for future restoration or compliance review. Triggers required system audit mechanisms and records the deletion event for traceability. This endpoint is vital for system tuning, decommissioning features, or cleaning up old configuration keys according to IT governance rules.","summary":"Delete a discussion_board_configuration (admin-only, by UUID, soft delete).","parameters":[{"name":"id","description":"UUID of the configuration row to be deleted (primary key to discussion_board_configurations.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted configuration record as persisted after soft delete event.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"delete"},{"specification":"Implements list/retrieve with filtering and pagination for discussion board channels (top-level topic organizations, e.g. 'Politics', 'Economics'), as described in the requirements analysis and Prisma model docs. Supports UI admin tools (for listing, sorting, search) and public site browsing functionality for non-interactive user roles.","description":"Returns a paginated, searchable list of discussion_board_channels (each representing a top-level division under which sections/forums are organized). Serves both public and admin-facing interfaces for accessing channel metadata. Supports filtering by name, code, and description. For admins, enriches config management and topic partitioning; for public, allows navigation and discovery. Pagination parameters meet non-functional requirements for performance and usability.","summary":"Retrieve a paginated, filterable list of discussion_board_channels (channels/top-level boards).","parameters":[],"requestBody":{"description":"Pagination, search/filter parameters for retrieving channel list.","typeName":"IDiscussionBoardChannel.IRequest"},"responseBody":{"description":"Paginated list of discussion_board_channels, each with metadata and audit fields.","typeName":"IPageIDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels","method":"patch"},{"specification":"Get a specific discussion_board_channel entity (top-level division) by UUID. This endpoint supports single-resource retrieval for both admin and public operations, as per requirements for browsing, management, and external linking to channel detail pages.","description":"Returns all primary fields of a discussion_board_channel (code, name, description, created/updated/deleted_at). No write/moderation rights are required—access policy determined by board privacy policy. This endpoint is critical for UI deep links, admin management panels, and featured content sections where single channel info is needed.","summary":"Retrieve a specific discussion_board_channel (by id) with all metadata fields.","parameters":[{"name":"id","description":"UUID of the channel to retrieve (discussion_board_channels.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the requested channel.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"get"},{"specification":"Create a new top-level discussion channel (e.g., 'Politics', 'Economics') in the discussion_board_channels table. Enables admins to add new organizational units. Ties directly into requirements for feature configuration, dynamic forum expansion, and multi-channel site support, as emphasized in the requirements analysis and Prisma description.","description":"Receives channel creation data including unique code, name, and optional description. Must ensure channel code uniqueness per business logic, follow naming and audit requirements, and emit complete audit trail. Used by administrators when provisioning new major forum divisions or onboarding new topic areas. This operation strictly restricted to admin role.","summary":"Create a new discussion_board_channel (admin-only, add channel/division).","parameters":[],"requestBody":{"description":"Channel creation request with code/name/optional description.","typeName":"IDiscussionBoardChannel.ICreate"},"responseBody":{"description":"Created channel record with audit fields (id/code/name/etc.).","typeName":"IDiscussionBoardChannel"},"authorizationRoles":["administrator"],"path":"/discussionBoard/channels","method":"post"},{"specification":"Update an existing discussion_board_channel (by UUID). Full update only—per normalization and compliance rules (no partial patch), as established by the Prisma schema. This is for administrators to rename, re-describe, or otherwise reorganize topic channels on the platform, meeting requirements for platform expansion, branding, and curation.","description":"Receives new values for code, name, and description; applies to the specified channel by id. On success, returns the updated row including all audit fields. Business logic ensures only unique codes, valid descriptions, and audit-compliant metadata are accepted. Operation triggers audit logs for platform management. Admin access only.","summary":"Update the specified channel's information by UUID (admin-only, full update).","parameters":[{"name":"id","description":"UUID for the channel row to update (discussion_board_channels.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full channel update request (code, name, description).","typeName":"IDiscussionBoardChannel.IUpdate"},"responseBody":{"description":"Updated channel entity with metadata after changes.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":["administrator"],"path":"/discussionBoard/channels/{id}","method":"put"},{"specification":"Delete (soft delete) an existing discussion_board_channel by UUID—used for reversible topic organization, compliance support, and moderation-driven reorganization of top-level board partitions. This supports requirements for content reversibility and compliance audit. Restricted to administrator roles per RBAC policy.","description":"Marks the specified channel as deleted (deleted_at timestamp populated), preserving all historical and audit data for compliance. Operation is auditable and can be undone via admin interface. For use in deprecating or archiving major forum divisions.","summary":"Soft-delete a discussion_board_channel by id (admin-only, reversible removal).","parameters":[{"name":"id","description":"UUID of the channel row to soft-delete (discussion_board_channels.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted channel as persisted after deletion event (soft delete).","typeName":"IDiscussionBoardChannel"},"authorizationRoles":["administrator"],"path":"/discussionBoard/channels/{id}","method":"delete"},{"specification":"Support paginated, filterable retrieval of section/forum (subdivision within a given channel) records for the discussion board platform, as described in requirements (see system navigation, 3NF model, and admin needs). Serves both public browsers (guest/member) and admin UIs needing to display lists, filter, or manage categories of forums.","description":"Returns a list of discussion_board_sections, each including section code, name, description, and audit fields. This endpoint supports filtering on name, code, parent channel, and description. Pagination options implement non-functional requirements on performance and usability. Used in admin dashboards, user discoverability flows, and for performance-optimized search. Supports both admin role (full info) and public/member modes (limited info).","summary":"List and filter discussion_board_sections (forum/category listing, paginated).","parameters":[],"requestBody":{"description":"List/filter/search parameters for retrieving discussion_board_sections.","typeName":"IDiscussionBoardSection.IRequest"},"responseBody":{"description":"Paginated section listing result.","typeName":"IPageIDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections","method":"patch"},{"specification":"Retrieve section/forum details for a single discussion_board_section row (by UUID), enabling detailed navigation, admin management panels, and linking directly to a specific section in the discussion board. Supports detailed info display, admin audits, and public discoverability (with RBAC fallback).","description":"Returns all metadata and audit fields for the specified section (id, code, name, parent channel, description, timestamps, soft-delete). Used for admin detail view, forum page linking, and UI analytics. May be public or restricted depending on forum's privacy settings (default: accessible to all users except soft-deleted sections).","summary":"Get a specific discussion_board_section (forum or section) by UUID, with detail fields.","parameters":[{"name":"id","description":"UUID for the section/forum row to retrieve (discussion_board_sections.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Requested section/forum detail including parent channel info.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"get"},{"specification":"Create Discussion Board Section. This endpoint creates a new section within an existing channel in the discussion board system. The operation is associated with the 'discussion_board_sections' table. It enables administrators or authorized users to add new sections for organizing threads under a chosen channel. Requires atomic data: channel ID, code (unique per channel), name, description (optional). Validates parent channel existence and section code uniqueness.","description":"Creates a new section within an existing discussion board channel. This operation enables the logical organization of threads and posts by establishing a new category/subdivision under a parent channel (e.g., 'Legislation' under 'Politics'). The API validates that the specified parent channel exists, that the code is unique within the channel, and that the name and metadata follow board conventions. Only authorized roles with section creation privileges (such as admins) can invoke this. The endpoint refers to the strict 3NF-compliant schema with only atomic fields for the section entity. On success, it returns the created section's complete data, including audit timestamps. Validation errors (such as code duplication or missing fields) are handled with informative error responses.","summary":"Create a new section (discussion_board_sections).","parameters":[],"requestBody":{"description":"Section creation payload (discussion_board_sections).","typeName":"IDiscussionBoardSection.ICreate"},"responseBody":{"description":"Full detail of the created section.","typeName":"IDiscussionBoardSection"},"authorizationRoles":["administrator"],"path":"/discussionBoard/sections","method":"post"},{"specification":"Update Discussion Board Section. This endpoint updates the specified section within an existing channel. It is associated with the 'discussion_board_sections' table. Supports updating section metadata: name, description, code (if allowed), and audit timestamps. Enforces uniqueness and referential integrity constraints, requires section existence check. Only roles with section management authorization can invoke.","description":"Updates an existing section in the discussion board, allowing administrators to modify the name, description, or code (if permitted by business logic) of a section under a parent channel. The operation performs validation on uniqueness (section code within channel) and parent channel integrity. It logs update events via audit timestamps, and can optionally support partial updates if the schema is designed. This operation references the 3NF discussion_board_sections entity. Only authorized roles (administrators) can perform updates, and the operation validates access rights prior to modification.","summary":"Update a section by ID (discussion_board_sections).","parameters":[{"name":"id","description":"UUID of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Section update payload (discussion_board_sections).","typeName":"IDiscussionBoardSection.IUpdate"},"responseBody":{"description":"Detail of the updated section.","typeName":"IDiscussionBoardSection"},"authorizationRoles":["administrator"],"path":"/discussionBoard/sections/{id}","method":"put"},{"specification":"Delete Discussion Board Section. This endpoint soft-deletes the specified section, marking it as deleted for audit, auditability, and undo purposes. Linked to the 'discussion_board_sections' table. Marks the deleted_at timestamp, prevents further usage/assignment, and ensures compliance with data reversibility requirements.","description":"Soft deletes a section from the discussion board by setting its deleted_at timestamp. This supports moderation/admin workflows for reversible content management, rather than hard-deleting rows. The API checks for section existence and may verify that no threads remain assigned to this section, as per business logic. Only users with the administrator role may invoke this operation. The endpoint ensures audit trail integrity with corresponding timestamp updates and can be extended for restore/undelete operations.","summary":"Soft delete a section by ID (discussion_board_sections).","parameters":[{"name":"id","description":"UUID of the section to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Soft-deleted section entity (now unavailable for use).","typeName":"IDiscussionBoardSection"},"authorizationRoles":["administrator"],"path":"/discussionBoard/sections/{id}","method":"delete"},{"specification":"List Discussion Board Guests. This endpoint retrieves guest entities for the platform, allowing advanced search, filtering, and pagination as required for moderation, analytics, and abuse prevention. Associated with 'discussion_board_guests' table, supporting read-only access for authorized users (e.g., moderators, administrators).","description":"Returns a list of guest sessions, possibly filtered and paginated. This API is critical for moderation audit, security, and backend analytics (e.g., for rate limiting or identifying abusive patterns). The listing endpoint supports search queries on guest attributes (IP, user agent, session time) to facilitate admin workflows. No guest authentication context is required, and only authorized staff may retrieve guest data. Results adhere to privacy guidelines and include all atomic fields defined in the discussion_board_guests schema. Error handling occurs for request validation purposes. Results use a paginated data structure, suitable for large datasets.","summary":"List guest accounts with search/pagination (discussion_board_guests).","parameters":[],"requestBody":{"description":"Request parameters for guest list filtering/pagination.","typeName":"IDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated list of guests.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/guests","method":"patch"},{"specification":"Get Guest Details by ID. This endpoint fetches detailed information about a specific guest session/account using its UUID primary key. Tied to the 'discussion_board_guests' table. Used for moderation audits or technical support, not for business-user consumption.","description":"Retrieves a complete representation of the specified guest session entity, using its UUID. This operation supports system administration, content audit, and data analytics requirements. Only system roles with audit/abuse management permissions (moderator/administrator) may invoke the endpoint. The returned entity contains all atomic columns from the discussion_board_guests schema with privacy-compliant exposure.","summary":"Get guest details by ID (discussion_board_guests).","parameters":[{"name":"id","description":"UUID of the guest session/account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete data for the target guest entity.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/guests/{id}","method":"get"},{"specification":"Create Discussion Board Guest. This endpoint creates a new guest session record, enabling view-limited session tracking for unauthenticated users. Associated with the 'discussion_board_guests' table. Used for initial guest session establishment and compliance tracking.","description":"Creates a guest entity representing an unauthenticated user session. This API is primarily used for internal session management and initial session handoff. It captures guest attributes (IP, session token, user agent) and returns the guest session record. This endpoint does not create business identities or authenticate the user. Only backend services or validated flows should invoke this, not directly exposed to end-users.","summary":"Create a new guest account/session (discussion_board_guests).","parameters":[],"requestBody":{"description":"Guest session creation payload (discussion_board_guests).","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"Created guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests","method":"post"},{"specification":"Update Discussion Board Guest. This endpoint updates guest session entity attributes (e.g., session expiration, IP, user agent) for tracking session or abuse monitoring. Linked to the 'discussion_board_guests' table. Restricted to technical, not business, use.","description":"Updates a guest session/account by its UUID. Used by technical teams or automated moderation engines to extend session expiration, save updated user agent, or correct session fields. All updates require complete entity integrity due to audit constraints. The endpoint validates guest existence and returns the updated entity data. Only privileged system administrators or moderation bots may invoke.","summary":"Update a guest session/account (discussion_board_guests).","parameters":[{"name":"id","description":"UUID of the guest session/account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Guest session update data (discussion_board_guests).","typeName":"IDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"Updated guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"put"},{"specification":"Delete Discussion Board Guest session/account. This endpoint removes a guest session record by marking it deleted or by direct remove. Associated with 'discussion_board_guests' entity for audit/abuse management.","description":"Deletes a guest session record via soft/hard delete (per business requirement) using its UUID. Intended for compliance removal, session expiry, or technical abuse-mitigation. Only authorized administrators may invoke. The result is the guest entity as it existed before deletion (or a confirmation object). The operation fulfills audit and privacy compliance, ensuring no further actions are logged for the guest after deletion.","summary":"Delete guest session/account by ID (discussion_board_guests).","parameters":[{"name":"id","description":"UUID of the guest to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted guest record or confirmation object.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"delete"},{"specification":"List Members of Discussion Board. This endpoint provides advanced search, filter, and paginated retrieval of registered member accounts. Uses the 'discussion_board_members' entity. Enables staff to oversee membership, engagement, and behavior patterns.","description":"Returns a list of registered member accounts, filtered and paginated according to admin/mod/search criteria. Fields returned match atomic properties in the normalized discussion_board_members schema. Supports query on username, display name, email, activation state, registration date, and more. Only staff with member management rights can access this endpoint. Privacy and data protection rules apply. Designed for use in admin dashboards, moderation panels, and analytics tools.","summary":"List members with search/pagination (discussion_board_members).","parameters":[],"requestBody":{"description":"Member search/filter parameters for paginated list.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of member entities.","typeName":"IPageIDiscussionBoardMember"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/members","method":"patch"},{"specification":"Get Member Details by ID. This endpoint fetches a member's full entity data using its UUID (primary key). Associated with the 'discussion_board_members' table. Used for moderation, support, and administrative actions requiring account detail lookups.","description":"Retrieves the property set for an identified member by their account UUID. This is used by admins, moderators, or service agents to view user profile, email, roles, active state, and history in the system. Only privileged staff or the member themselves (if viewing own account) may invoke. Audit trail and privacy protection apply; sensitive data is excluded according to role context. Pulls strictly from the atomic 3NF schema.","summary":"Get member details by ID (discussion_board_members).","parameters":[{"name":"id","description":"UUID of the member entity/account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete member entity data.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/members/{id}","method":"get"},{"specification":"Create Discussion Board Member account. This endpoint registers a new authenticated user as a member; linked to the 'discussion_board_members' table. Accounts have access to full posting/interacting privileges. Used by end-user registration flow and by administrators for manual account creation.","description":"Creates a new user/member account entity, capturing username, email, password hash, display name, optional profile image, and activation state. The operation validates username/email uniqueness, password policy, and possibly sends notification on register. The endpoint enforces privacy compliance, and only exposes non-sensitive fields to non-admins. On creation, it returns the member entity and relevant audit data. Supports onboarding, staff/manual registration, or migration flows.","summary":"Register a new member account (discussion_board_members).","parameters":[],"requestBody":{"description":"Registration data for a new member (discussion_board_members).","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"Created member entity record.","typeName":"IDiscussionBoardMember"},"authorizationRoles":null,"path":"/discussionBoard/members","method":"post"},{"specification":"Update Discussion Board Member by ID. This endpoint allows modification of member profile attributes, including display name, profile image, password, or activation state (subject to business rules). Associated with 'discussion_board_members' table for atomic update and audit compliance.","description":"Updates the entity properties of a member (identified by UUID). Admins and (for self-profile) members may invoke the API, provided validation, password policy, and uniqueness rules are enforced. Changes audit timestamps and, as business logic permits, restricts updates to allowed fields per role. The operation references the 3NF schema for members and checks data integrity prior to write. Also ensures role privilege checks if updating roles/activation.","summary":"Update member profile/account by ID (discussion_board_members).","parameters":[{"name":"id","description":"UUID of the member/account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Member profile update payload.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"Updated member entity record.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/members/{id}","method":"put"},{"specification":"Delete a specific member from the discussion board by their unique ID. This operation works on the discussion_board_members table. It is intended for use by administrators as part of user management and moderation. Deleting a member applies a soft-delete to maintain auditability, as per security and compliance requirements. The deletion is reversible. Related operations include member creation, retrieval, and update, as well as escalation to moderator or administrator roles. Validation rules enforce that only users with administrator permissions may perform this operation. If the specified ID does not exist, an appropriate 404 will be returned. After deletion, foreign key references in posts/comments remain for historical integrity.","description":"This API endpoint allows administrators to soft-delete a member, marking their profile as deleted without removing posts, votes, or other associated records. The endpoint enforces RBAC: only administrators are authorized. When a delete request arrives, the system checks if the target member exists and is not already deleted. The member's deleted_at field is set to the current timestamp, and their account is deactivated (is_active becomes false for audit/traceability). Attempting to delete an already-deleted or non-existent member returns a suitable error. In case a member is involved in ongoing moderation actions, the soft-delete ensures compliance logs are preserved. Deletion triggers a background notification (eventual consistency) to purge session data and prevent future logins. If the member had moderator/admin privileges, related records in those tables are also soft-deleted.","summary":"Soft-delete a discussion board member (discussion_board_members).","parameters":[{"name":"id","description":"Target member's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"delete"},{"specification":"List or search all moderators on the discussion board. This operation interacts with the discussion_board_moderators table and is used for management and audit purposes. Supports advanced querying with filters such as assigned_at dates, revoked status, or associated member attributes (joined via relation). Returns a paginated list of moderator assignments, each including moderator ID, member info, assignment/revocation timestamps, and related member metadata for administrative panels. Only administrators may use this endpoint. Related operations allow for moderator creation, updating, and deletion.","description":"Retrieve a paginated and optionally filtered list of all moderator assignments on the discussion board. This endpoint can filter by active/revoked moderators, assignment window, or search by member attributes (e.g., username/display name). It supports pagination with limit and offset or page/size. Sensitive actions like viewing mod assignments are restricted to administrators for transparency, accountability, and management reporting. The results are returned as a page object with data on each moderator, including links to their member profiles and information on when/if their moderation privileges were revoked. If no moderators match the filter, an empty array is returned. Use this endpoint for admin dashboards, audit panels, and role management UIs.","summary":"List/search all moderators (discussion_board_moderators) with filtering and pagination.","parameters":[],"requestBody":{"description":"Filter/search and pagination options for moderator listing.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"Paginated results containing moderator assignments and related member info.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators","method":"patch"},{"specification":"Retrieve details of a specific moderator assignment by ID. This operation accesses the discussion_board_moderators table. The returned object includes moderator metadata and the associated member's full profile (from discussion_board_members). Used for viewing current or historic moderator assignment for audit, UI display, or administrative purposes. This endpoint is read-only and restricted to administrators and moderators. Returns 404 if the ID does not exist or has been fully revoked/deleted.","description":"Admins and moderators may use this endpoint to fetch all information about a specific moderator – including their assignment status, related member attributes (username, email, display name, dates assigned/revoked), as well as counts of reports or logs linked to that moderator if needed. The endpoint checks for existence and access permissions. If the moderator was revoked or deleted, the record will show as inactive but is still returned for audit trail. This is essential for history panels and management of role escalation. Security policy ensures that only authorized roles may call this endpoint. Error handling includes 404 for non-existent moderators or inappropriate access.","summary":"Get moderator assignment/details (discussion_board_moderators) by ID.","parameters":[{"name":"id","description":"Target moderator assignment ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment (with member details and assignment info).","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/moderators/{id}","method":"get"},{"specification":"Assign moderator role to a registered member. This operation creates a new record in the discussion_board_moderators table, escalating the specified member to moderator status. Used by administrators only. The new assignment includes the member's ID, assigned_at timestamp, and all compliance/audit fields, with references to the related member entry. Validates that the member exists and is not already a moderator or administrator.","description":"Administrators can call this endpoint to assign moderator privileges to an existing member. The request body must include the member ID and optional notes/context. Duplicate assignments (member is already a moderator) are rejected with error. After assignment, the system sets assigned_at to the current timestamp and links the moderator to the member. The endpoint generates logs for audit/role tracking, and may trigger an email or notification to the member. The response includes full moderator assignment info (ID, member, assignment timestamp, status). If the member is already an admin, escalation is blocked and guidance is provided. The endpoint logs all actions for compliance.","summary":"Assign moderator role to member (create discussion_board_moderators).","parameters":[],"requestBody":{"description":"Moderator assignment information (including target member ID).","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Moderator assignment object after creation (with member info).","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators","method":"post"},{"specification":"Update an existing moderator assignment by ID. This allows changes to assignment status, notes, or revocation in the discussion_board_moderators table. Used exclusively by administrators for compliance or role management (e.g., revoking moderator privileges, updating notes). Validates existence, ensures new state is not redundant, and manages 'revoked_at' for soft-termination of moderation authority. Related endpoints: assignment, retrieval, delete. Revocations log audit events and notify affected members.","description":"This endpoint lets an administrator adjust a specific moderator assignment by ID. Use it to revoke or reassign privileges (by setting revoked_at) or update other mutable fields as business rules allow (notes, admin context). If the moderator is already revoked or non-existent, a suitable error is returned. Full audit trail is maintained for all changes. Security enforcement restricts the operation to administrators. All changes should be clearly reflected in UI dashboards, audit logs, and member notifications. On successful update, returns the updated moderator assignment object with all relevant fields (assignment status, member info, timestamps).","summary":"Update/revoke moderator assignment (discussion_board_moderators).","parameters":[{"name":"id","description":"Target moderator assignment ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator assignment update data (fields allowed by business rules).","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment object, post-change.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"put"},{"specification":"Delete (revoke and remove) moderator assignment by ID. Directly affects discussion_board_moderators table. Used for removing moderation privileges, either for audit, compliance, or role management. Applies soft-delete logic for reversibility; sets revoked_at or deleted_at fields rather than full database removal. Only administrators may call this endpoint. Related endpoints: moderator assignment creation, update, search, get by ID.","description":"When invoked, this endpoint revokes and soft-deletes a moderator assignment for the specified ID. It marks the moderator as no longer active, updates revoked_at and/or deleted_at timestamps, and persists the change in audit trails. The moderator is then removed from all role-based enforcement in the system. The member record itself is not affected unless separately deleted. Security rules restrict usage to administrators for compliance. Operations return 204 No Content on success or 404 if non-existent. Downstream actions (e.g., notifications, audit log entries) may be triggered asynchronously.","summary":"Delete (revoke/remove) moderator assignment (discussion_board_moderators).","parameters":[{"name":"id","description":"Target moderator assignment ID (UUID) to delete/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"delete"},{"specification":"List or search all administrators on the discussion board. Works on discussion_board_administrators table. Used for system role management, audits, and compliance oversight. Supports paginated search with filters (assignment dates, revoked status, related member attributes like username/email). Only accessible by administrators; no sensitive info shown to others. Pagination required for large deployments. Related endpoints: admin assignment, update, deletion. Returns detailed admin/membership relationship records.","description":"Retrieve a paginated, filtered list of all administrator assignments. Filters may include status (active/revoked), time-window, or member-related fields for audit and UI display. Administrators can use the listing for role management, board oversight, and compliance tracking. Full member linkage is included for each returned administrator, allowing resolution to the constituent user account and all relevant assignment fields. Pagination supported with default/supplied page size and offset. If no results, returns an empty array. Only accessible by administrator role. Input validation applies for filters/pagination parameters. Used for admin dashboards, audit logs, and compliance overviews.","summary":"List/search all administrator assignments (discussion_board_administrators) with filtering/pagination.","parameters":[],"requestBody":{"description":"Filters, search, and pagination data for administrator list.","typeName":"IDiscussionBoardAdministrator.IRequest"},"responseBody":{"description":"Paginated results containing administrator assignments with member info.","typeName":"IPageIDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators","method":"patch"},{"specification":"Retrieve details of a specific administrator assignment by ID. Accesses discussion_board_administrators table. Returns an object linking the admin assignment to member info, assignment/revocation dates, and role escalation status. Used for audit, management, UI, and compliance purposes. Read-only; restricts access to current administrators. Returns 404 on missing/invalid ID. Assignment record may indicate status/history even if inactive.","description":"Administrators use this endpoint to fetch details of an administrator assignment, including the associated member's account data. Useful for internal audit, compliance, or management panels. The endpoint cross-references membership status, assignment, and revocation history. The result object includes the admin record, member profile, timestamps. If the admin record is deactivated, this is reflected in the status. The operation is strictly RBAC-protected to prevent unauthorized discovery. Attempts to access non-existent IDs return 404 errors, with all access/actions logged for audit compliance.","summary":"Get administrator assignment/details (discussion_board_administrators) by ID.","parameters":[{"name":"id","description":"Target administrator assignment ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment object (with full member and assignment fields).","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"get"},{"specification":"Assign administrator role to a registered member. Creates a new record in discussion_board_administrators, escalating a member to administrator status. Used exclusively by system administrators. Validations ensure the target is a member and not already an admin/moderator. All assignments are fully auditable and trigger compliance logging and notifications as required. The new assignment links to the user, includes assignment timestamp, and all member profile info.","description":"This endpoint lets system administrators assign the administrator role to a member, granting managerial privileges. Request body must include member ID, rationale/context (optional). Duplicates (user is already admin) yield an error. Successful assignments link the admin record to the member, fill assigned_at, and may dispatch onboarding notifications. Assignment is reflected in all audit trails and UI dashboards. The full admin-member relationship object is returned, including history and reversible status. Use for RBAC management, role escalation, and compliance workflows. All attempts and assignments are logged per audit policy.","summary":"Assign administrator role to member (create discussion_board_administrators).","parameters":[],"requestBody":{"description":"Administrator assignment information (member ID, rationale/context).","typeName":"IDiscussionBoardAdministrator.ICreate"},"responseBody":{"description":"Administrator assignment object after creation (with full member info).","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators","method":"post"},{"specification":"Update administrator role assignment by ID. Modifies discussion_board_administrators table, allowing admin status updates (e.g., revoked, rationale change). Used by system administrators only. Enforces business rules: prevents re-assigning an already-admin, manages revocation through revoked_at, guarantees audit trail. Input must specify allowed fields to update. All updates logged for compliance. Returns updated admin assignment object.","description":"This endpoint enables system administrators to update an administrator role assignment—such as revoking privileges, updating administrative notes/context, or reactivating an admin after a cooldown. The operation also manages transitions between statuses (active/revoked). If revoking, the revoked_at field is set, and the assignment becomes non-active in RBAC. The response shows the full admin assignment, member, and updated state. Attempts to update a non-existent, already revoked/deleted, or unauthorized assignment return errors. Operations are restricted to administrator role and must be fully logged.","summary":"Update/revoke administrator assignment (discussion_board_administrators) by ID.","parameters":[{"name":"id","description":"Target administrator assignment ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Administrator assignment update data (fields allowed by business rules).","typeName":"IDiscussionBoardAdministrator.IUpdate"},"responseBody":{"description":"Updated administrator assignment (with member info, assignment fields).","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"put"},{"specification":"Delete (revoke/remove) administrator assignment by ID. Removes administrator rights but preserves audit trail. Modifies discussion_board_administrators table; applies soft-delete, updating revoked_at or deleted_at for compliance. Only accessible by system administrators. Related endpoints: admin assignment, update, retrieve, list. No access to member table unless corresponding delete is also performed via separate endpoints.","description":"When called, this endpoint revokes and soft-deletes the specified administrator assignment. Sets appropriate fields (revoked_at, deleted_at) and disables admin role in RBAC. Audit/history are fully preserved in the database. The action is only RBAC-available to current administrators. No direct effect on the linked member, unless deleted separately. Attempts against non-existent allocations or double-deletes yield errors. The endpoint supports audit dashboards and management workflows, returning 204 on successful soft-delete, or a suitable error otherwise. Action triggers event logs and notifications as part of compliance sourc","summary":"Delete (revoke/remove) administrator assignment (discussion_board_administrators) by ID.","parameters":[{"name":"id","description":"Target administrator assignment ID (UUID) to revoke/delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"delete"},{"specification":"List/search all threads with filtering, sorting, and pagination. This endpoint allows complex search, filtering (by member, category, status, pinned, created_at, etc.), and sorting on discussion_board_threads. It returns a paginated response suitable for feed browsers, admin/moderator UIs, and user dashboards. Searches must permit full-text keyword query as well as advanced filter combinations. This endpoint is generally accessible to all roles, but certain filters or results may be RBAC-limited (e.g., seeing deleted threads, accessing moderator-only status, etc.).","description":"Fetches a list of threads based on filter/search parameters. The request body allows supplying filters like title keyword, category, creator ID, pinned or closed status, as well as sorting and pagination controls. The endpoint must support guest/member/moderator/admin access, with more advanced filter/result access at higher roles (e.g., viewing deleted threads). Pagination is required; returns total matching records and current page. Useful for the main discussion feed, admin review, and moderation dashboards. Security policy ensures that search results respect role and visibility rules. Errors returned if parameters are invalid or access is not allowed. If no threads match, returns an empty array/page.","summary":"List/search all threads (discussion_board_threads) with filtering, pagination, RBAC-sensitive results.","parameters":[],"requestBody":{"description":"Thread search and filter parameters (keyword, creator ID, status, pagination).","typeName":"IDiscussionBoardThread.IRequest"},"responseBody":{"description":"Paginated threads results with all data for UI, audit, moderation.","typeName":"IPageIDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads","method":"patch"},{"specification":"Retrieve a specific discussion thread by its unique ID. This operation targets the 'discussion_board_threads' table, which stores all metadata and content details of discussion threads. It returns the complete thread entity, including title, body, status flags, and reference fields. The endpoint is used by both authenticated and unauthenticated users for viewing thread content, in compliance with board read-access requirements. Auditing information (created_at, updated_at) and soft deletion status are included for moderation and compliance purposes.","description":"This API operation retrieves all details for a single discussion thread specified by its unique identifier. The 'discussion_board_threads' table is the authoritative source for top-level discussion units (threads), and this operation exposes fields such as title, body (opening post), creator reference, category linkage, pinned/closed flags, and full timestamps for creation, update, and deletion (soft-delete for moderation). This aligns with F01 (view threads), supports search/browse UX scenarios, and allows audit/compliance features by exposing relevant metadata. Permissions around access must be enforced at the middleware layer to ensure guests and members only see threads allowed by business rules (e.g., not deleted or closed, as per visibility policies).","summary":"Get a specific thread from 'discussion_board_threads' table by ID.","parameters":[{"name":"id","description":"Unique ID of the thread to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete discussion thread entity with metadata, content, and status fields.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"get"},{"specification":"Create a new discussion thread in the system. Operates on the 'discussion_board_threads' table and requires all business-critical fields (title, body, category, creator) to be provided in the request body. On success, returns the thread entity with generated ID and timestamps. Only authenticated members can create threads (enforced by middleware, see F02).","description":"This operation receives all required data needed to create a new thread, including title, body, category reference, and creator (inferred from authentication context). Data validation confirms required fields, length and content rules (per admin configuration policy). Thread is initially open and not pinned by default; any additional moderation or posting restrictions are inherited from board configuration. The thread is saved to 'discussion_board_threads', and the full thread object is returned, including audit fields reflecting creation metadata. Errors include validation failures or permission issues. Complies with F02.","summary":"Create a new thread in 'discussion_board_threads'.","parameters":[],"requestBody":{"description":"Information for creating a new thread.","typeName":"IDiscussionBoardThread.ICreate"},"responseBody":{"description":"Complete thread entity as created.","typeName":"IDiscussionBoardThread"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/threads","method":"post"},{"specification":"Update an existing discussion thread specified by ID. Works on 'discussion_board_threads', supporting edits to thread metadata and content (title, body, status flags) as per moderation or author permissions. Returns the updated thread entity; only accessible by thread owner or moderators/administrators. Fulfills functional requirements F02, F04.","description":"This operation modifies an existing thread using data provided in the request body. The thread is located by ID; if found, allowed properties are updated after field-level validation (per admin configuration policies on editable fields). Edits include changes to title/body and flag updates (e.g., marking thread as closed or pinned, subject to permissions). The database record is updated and full state returned. Supports moderation workflows (soft deletion, pin/unpin, edit justification). Enforces ownership or moderator/admin role for edit rights. Errors include missing thread, validation failures, or insufficient permissions.","summary":"Update a thread in 'discussion_board_threads' by ID.","parameters":[{"name":"id","description":"Unique ID of the thread to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update an existing thread.","typeName":"IDiscussionBoardThread.IUpdate"},"responseBody":{"description":"Updated thread entity reflecting all changes.","typeName":"IDiscussionBoardThread"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/threads/{id}","method":"put"},{"specification":"Delete (soft-delete) a discussion thread by ID. Targets the 'discussion_board_threads' table. This API marks the thread as deleted with a timestamp, preserving audit trails and reversibility, per compliance requirements. Only accessible to thread owner or authorized moderator/administrator.","description":"This operation performs a soft delete on a selected thread. The thread is found by its unique ID and, if permitted, is marked deleted by updating the 'deleted_at' field (rather than removing the record). Soft-deletion aligns with moderation and audit requirements, ensuring reversibility and compliance with platform and regulatory needs. Permissions are restricted to authors, moderators, or admins per board rules (F04). All deletions are logged for traceability. Errors include not found, not permitted, or already deleted threads.","summary":"Soft-delete a thread from 'discussion_board_threads' by ID.","parameters":[{"name":"id","description":"Unique ID of the thread to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted (soft) thread entity with updated deleted_at field.","typeName":"IDiscussionBoardThread"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/threads/{id}","method":"delete"},{"specification":"Search, filter, and paginate discussion posts. Operates on the 'discussion_board_posts' table, allowing complex queries by thread, author, text, dates, etc. Returns paginated post results. Used for advanced exploration of board activity and deep navigation features (F06).","description":"This endpoint accepts a request body with search, filter, and pagination parameters, enabling clients to retrieve lists of posts based on criteria like thread ID, creator, posted date range, keyword match, or others per application needs. Implements F06 (search/filter) and supports functional requirements for browsing, moderation dashboards, or analytics. Returns paginated data, including metadata for total count and current page cursor. Input validation includes allowed filters, sort directions, and page size limits as per configuration policies. Permissions are enforced to ensure that only permitted posts are returned. Errors include invalid search parameters, permissions, or system errors.","summary":"List/search posts from 'discussion_board_posts' with query.","parameters":[],"requestBody":{"description":"Search, filter, and pagination info for post list query.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated post search results.","typeName":"IPageIDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts","method":"patch"},{"specification":"Get details of a specific post in the discussion board by its ID. Targets the 'discussion_board_posts' table and returns all metadata for the specified post, including author, content, timestamps, and moderation status for audit purposes. Used by both members and moderation staff for reviewing individual posts (F02, F04).","description":"Retrieves an individual post entity with all system-metadata, including body content, author, parent thread, timestamps, and edit/deletion status. Implements requirements for isolated post viewing (F02) and supports moderation UI for post review (F04). Middleware must enforce proper access, including moderation and deleted content visibility rules. Errors include not found, access denied, or deleted posts.","summary":"Get a post from 'discussion_board_posts' by ID.","parameters":[{"name":"id","description":"Unique ID of the post to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single post entity with all metadata fields.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"get"},{"specification":"Create a new post inside an existing thread. Operates on the 'discussion_board_posts' table, requiring thread reference, author, and body. Posts can be root or reply; only authenticated users permitted (see requirements F02, F03).","description":"Receives new post submission data, including reference to thread, author (inferred from auth context), and post body. Validates required fields against admin configuration for length and content. Posts are always attributed to their thread and author. The post record is inserted into 'discussion_board_posts' and complete state is returned. Fails if permissions denied or validation fails. Complies with board requirements for authenticated posting and ensures content is only accepted from active accounts. Errors reported include validation, thread closed, or suspension blocks.","summary":"Create a post in 'discussion_board_posts'.","parameters":[],"requestBody":{"description":"Post creation info including thread reference and content.","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"Created post entity with metadata/timestamps.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/posts","method":"post"},{"specification":"Update an existing post in the discussion board by ID. Operates on 'discussion_board_posts'. Permits author or moderators to edit post body, status flags, or perform moderated changes (see requirements F03, F04). Returns the updated post record on success. Enforces edit history through timestamps and status fields. Applies to root or reply posts within threads.","description":"Upon receiving updated data, this endpoint locates and alters an existing post by ID. Permitted changes include updating post content (body), edit flag, or certain metadata. Enforcement of update policies, including permissible fields or edit timing, relies on middleware and admin configuration. Only post owners, moderators, or administrators may perform edits. Result includes full post state with updated fields and timestamps. Errors include permission failure, invalid input, or not found/soft-deleted post.","summary":"Update a post by ID in 'discussion_board_posts'.","parameters":[{"name":"id","description":"ID of post to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the post content or metadata.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated post entity with new state.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/posts/{id}","method":"put"},{"specification":"Soft-delete a post in the discussion board by ID. Operates on 'discussion_board_posts' and marks the target record as deleted (not removed), compliant with moderation system requirements (F04). Accessible by author, moderator, or admin. Audit trails must be preserved for reversible deletion and compliance.","description":"This endpoint marks a chosen post as deleted (soft deletion), by populating the deleted_at field in its record. Keeps history for moderation, audit, and regulatory traceability. Only accessible by authors, moderators, or admins with correct permissions per platform configuration. Fails if post not found, already deleted, or not authorized. All deletion attempts are logged for audit compliance. Supports requirements for reversibility, legal retention, and moderation workflows.","summary":"Soft-delete a post from 'discussion_board_posts' by ID.","parameters":[{"name":"id","description":"ID of post to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Soft-deleted post with updated deleted_at field.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/posts/{id}","method":"delete"},{"specification":"Search, filter, and paginate comments on discussion board posts. Operates on 'discussion_board_comments' table to allow clients to explore, moderate, or review comments based on thread/post, author, timestamps, and text query. Returns paginated result set for UI/navigation.","description":"This endpoint implements flexible querying for comments, with request body accepting filter fields (by post/thread, author/member, text search, date range, etc.) and pagination/sorting. Returns list of comments adhering to search and filter parameters per admin/policy. Output is paginated and includes full comment record and navigation metadata. Permissions are enforced to ensure that comments returned adhere to viewer's access rights (e.g., visibility of deleted, hidden, or mod-only comments). Errors include invalid inputs or system errors.","summary":"List/search comments from 'discussion_board_comments' with query.","parameters":[],"requestBody":{"description":"Parameters for comment search, filter, and pagination.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated comment results as per filter criteria.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments","method":"patch"},{"specification":"Get a single comment by its unique ID. Operates on the 'discussion_board_comments' table and exposes complete comment data including content, author, parent, and metadata fields. Used by comments UI, moderation toolkits, and audit workflows (complies with requirements F03, F04).","description":"Given a comment's unique identifier, this endpoint retrieves the comment with all business and moderation fields (body, creator, parent reference, post linkage, timestamps, and edit/deletion metadata). Used for rendering comment detail views and facilitating mod review. Middleware must ensure access is only permitted for eligible users (guests, members, mod, admin) and complies with board visibility policies. Error responses arise from not found, insufficient permissions, or accessing deleted content.","summary":"Get a comment from 'discussion_board_comments' by ID.","parameters":[{"name":"id","description":"ID of comment to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment entity with all metadata fields.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"get"},{"specification":"Create a new comment on a discussion post. Operates on 'discussion_board_comments' table. Accepts parent post ID, parent comment ID (for threading), member ID (creator, from auth), and comment content. Responds with record created. Only authenticated users can comment, per requirements F03, comment moderation rules enforced by roles and middleware.","description":"Accepts all client-supplied fields for new comment: post reference, (optional) parent comment for nesting/threading, content, and creator. Validation rules depend on text length, parent existence, and status of post/thread. On success, creates comment and returns with full metadata. Fails if not permitted (guest, banned), target unreachable, or validation failed (F03/F04 compliance). Middleware ensures proper authentication and business rule enforcement. Any moderation, reporting, or notification workflows are triggered asynchronously.","summary":"Create a comment in 'discussion_board_comments'.","parameters":[],"requestBody":{"description":"Info for new comment, including post reference, content, and optional parent comment.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment with all fields/timestamps.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/comments","method":"post"},{"specification":"Update an existing comment identified by its unique ID. This operation is for editing a comment's content, supporting the platform's requirements for user content management (edits after posting), audit logging (is_edited flag), and moderator interventions. The operation touches the discussion_board_comments table, referencing schema's columns like body, is_edited, and the updated_at timestamp. Validation must ensure that only the author or authorized moderator/admin can update content. The operation supports both member- and moderator-initiated updates, including possible edit-notes or content change tracking. Proper error handling for not-found and permission denied must be included. Related operations include creation, retrieval, and deletion of comments.","description":"This API operation allows an authenticated member, moderator, or administrator to update an existing comment. Reference is made to the discussion_board_comments table, which includes attributes for edited status and last modification timestamp. The comment to update is specified by its unique UUID in the path. The request body must contain the new comment content (body) and may optionally include updated edit flags. Only authorized users (the comment's author, moderators, admins) may perform this operation. This endpoint triggers an update to the is_edited column, records updated_at, and supports audit compliance. If the comment is not found, or the actor lacks permission, appropriate error responses are generated. This endpoint is often used with comment retrieval and moderation APIs for complete lifecycle management.","summary":"Update a comment by its UUID (discussion_board_comments table).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new content and edited status of the comment to be updated.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object after editing.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"put"},{"specification":"Delete (soft-delete) a comment identified by its unique ID. This operation marks a comment as deleted (sets deleted_at timestamp), rather than hard-removing it, ensuring reversibility for moderation compliance and audit history. Covers specification in discussion_board_comments schema remarks and moderation requirements. The operation is permissible to the original comment author, moderator, or administrator. References columns: id, deleted_at, and actor's authorization context. Handles cascading audit effects and error states for not-found, already-deleted, or unauthorized access. Associated with comment retrieval, creation, and moderation management operations.","description":"Allows authorized users (comment owner, moderator, or administrator) to perform a soft deletion of a comment, marking it as deleted in the system (by setting deleted_at). Key references in the discussion_board_comments table include the id, deleted_at column, and possibly actor/audit logging. This operation is essential for reversible moderation, content removal, and user control over their contribution. If the comment is already deleted, a not-modified or conflict error is returned; if unauthorized, a forbidden error is triggered.","summary":"Soft-delete a comment by UUID (discussion_board_comments table).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"delete"},{"specification":"List and search for attachments (files) uploaded to posts and comments. Supports filtering, pagination, and advanced querying as required by discovery, moderation, and content management features. Directly mapped to discussion_board_attachments entity, with search over file metadata (file_name, content_type, creator, created_at, deleted_at). Allows authenticated users (members, moderators, admins) to discover and review file uploads, including mod actions (suspected spam, abuse, etc).","description":"Returns a paginated list of attachment metadata stored in the discussion_board_attachments table. Supports advanced searching and filtering over fields like file_name, content_type, uploader member, upload time, and deletion status. This endpoint is crucial for both end-users browsing attached content and moderators reviewing for policy compliance or abuse. The PATCH method provides flexibility for complex search parameters in the request body. Endpoint supports role-based access filtering and secured content delivery URI (file_uri, not direct file blob).","summary":"List/search discussion board attachments (discussion_board_attachments).","parameters":[],"requestBody":{"description":"Search and filter criteria for attachment listing (file_name, date, uploader, status, etc).","typeName":"IDiscussionBoardAttachment.IRequest"},"responseBody":{"description":"Paginated list of attachments matching the criteria.","typeName":"IPageIDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments","method":"patch"},{"specification":"Get detailed information about a single attachment by its unique identifier. Used for attachment inspection, metadata retrieval, and audit. Mapped to discussion_board_attachments table, employing strict access control if the attachment is restricted/deleted. Typical use-cases include moderator review, UI attachment preview, or download link resolution. Error states cover not-found or insufficient permission cases.","description":"Retrieves a single attachment's full metadata by attachment UUID, as stored in the discussion_board_attachments table. Data returned includes file name, URI, content type, associated post/comment, uploader, timestamps, and deletion status. Access is governed by attachment ownership or moderation/admin privileges. If an attachment is soft-deleted or restricted, the result may be filtered or access-denied.","summary":"Retrieve a single attachment by UUID (discussion_board_attachments).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The attachment object and all available metadata.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"get"},{"specification":"Upload a new attachment (file metadata) for a post or comment. Supports feature F02 (posts), F03 (comments) and business requirement for uploading reference/supporting files. The request body should provide enough details to link the uploaded file to its parent post/comment, file name, URI, MIME type, and any additional metadata. Updates the discussion_board_attachments table. Created_at is set, and deduplication is enforced by content_hash.","description":"Allows authenticated members to upload (register) a new attachment, specifying either a parent post or comment, the file name, URI, content type, content hash, and uploader information. Records metadata to the discussion_board_attachments table to support attachment management, display, and audit. Returns the created attachment object. Deduplication and file validation business logic must be enforced on upload (e.g., unique content_hash).","summary":"Upload new file attachment for discussion board (discussion_board_attachments).","parameters":[],"requestBody":{"description":"Attachment metadata including parent (post/comment), file description, and content hash.","typeName":"IDiscussionBoardAttachment.ICreate"},"responseBody":{"description":"Full attachment record after creation.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments","method":"post"},{"specification":"Update details of an existing attachment, such as metadata (file name, uri, content type), or logical links to posts/comments. Supports file auditing, metadata correction, or mod/admin review scenarios. Operation targets a single record in the discussion_board_attachments table, identified by UUID. Only permitted to uploder owner or authorized moderator/admin, and restricted for soft-deleted records.","description":"Updates key attributes of an existing attachment entry by UUID. Attributes updated may include file name, content type, uri, and/or logical parent (post/comment). Appropriate for members adjusting file descriptions, or mods/admins resolving content issues. Modifies only metadata (never file data), and enforces access control, deduplication, and audit updates (updated_at).","summary":"Edit/update attachment metadata (discussion_board_attachments).","parameters":[{"name":"id","description":"UUID of the attachment record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated attachment metadata fields.","typeName":"IDiscussionBoardAttachment.IUpdate"},"responseBody":{"description":"The updated attachment metadata object.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"put"},{"specification":"Delete (soft-delete) an attachment by UUID. Updates deleted_at, enabling reversible and auditable file removal. Supports user/member removal and moderation flows. Cannot be undone by standard member (only admins/mods). Tied to discussion_board_attachments schema requirements for reversibility, deduplication, and file integrity. Handles not-found or not-authorized error states.","description":"Marks an existing attachment record as deleted (soft delete) using its UUID. Sets deleted_at without physically removing data, per audit/integrity requirements. Action allowed for file owners, moderators, and admins with proper permission checks. Moderation/abuse cases may require separate review flows. Deleted files are not served for download unless restored. Already-deleted records yield conflict response.","summary":"Soft-delete an attachment by UUID (discussion_board_attachments).","parameters":[{"name":"id","description":"UUID for the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"delete"},{"specification":"List and search all reports submitted for moderation review. Implements requirements for triage, status examination, search by reporter/mod/content/creation date. Returns paginated results with advanced querying (filters) as part of moderation workflow. Connected to discussion_board_reports table, including status, reason, and workflow state columns. Permitted to moderators, admins, reporters (own reports).","description":"Returns a paginated result-set of report entries matching the provided search/filter criteria, mapped to the discussion_board_reports entity. Search fields include reporter, moderator, thread/post/comment link, status, dates, and reason. Supports moderator dash, admin audit, and reporter self-review. Security controls must restrict visibility to authorized user roles (mods/admins/reporters).","summary":"Search/list moderation reports (discussion_board_reports).","parameters":[],"requestBody":{"description":"Search filter and pagination for moderation reports listing.","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated, filtered report results.","typeName":"IPageIDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports","method":"patch"},{"specification":"Retrieve single report details by UUID. Implements the requirement for viewing report workflow status and rationale. Used by moderators, admins, and the reporting user. Returns all atomic fields (reporter, target, status, reason, resolution notes). Linked to moderation/audit trails. Record is found in discussion_board_reports table. Access errors for not-found/unauthorized are handled per spec.","description":"Fetches complete details of a moderation report by its unique UUID. Includes reporter details, target content references (thread/post/comment), status, and moderation workflow progress (notes, timestamps, etc). Controls access so only moderators, admins, or the original reporter may access full report data. Relates to further actions like resolving/dismissing a report. Response is a full report object.","summary":"Retrieve a single moderation report by UUID (discussion_board_reports).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full report object with all details.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"get"},{"specification":"Submit a new content report (flag) for moderation. Implements flagging/abuse reporting (requirement F08) by letting members flag posts, comments, or threads for review. Operation creates a new row in discussion_board_reports, referencing actor (reporter), target (thread/post/comment), reason string, and sets an initial state (e.g., 'pending'). Complete validation of reporter's membership, content reference, and field requirements is mandatory. Soft-delete only on explicit removal. Supports abuse prevention, moderation, and audit workflows.","description":"Allows authenticated members to submit a new content report for a thread, post, or comment, providing the reason and target. This populates the discussion_board_reports table for follow-up by moderation personnel. On submission, workflow state (status field) is set to pending, timestamps are captured, and notifications may be triggered for moderators. Reporting system enforces prevention of duplicate/report-spam or harassment by validation logic. Appropriate error handling must be included for failed references or duplicate reports.","summary":"Create new moderation report (flag content for review) (discussion_board_reports).","parameters":[],"requestBody":{"description":"The report submission data including reporter ID, content reference, and reason.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"The created report object and workflow status after initial submission.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports","method":"post"},{"specification":"Update (resolve/change/review) details of an existing moderation report, such as status, resolution notes, or moderator assignment. Supports moderation workflows, audit/update management, and role-based update controls. Updates attributes in discussion_board_reports identified by UUID. Only permitted for moderators/admins or original reporter (for withdrawal/correction, as policy allows). Handles error states for not-found, already-resolved, or lacking permission. Related to moderation log operations.","description":"Updates the details of an existing moderation report by its unique UUID, which may include status transitions, moderator assignment, resolution notes, etc. Attribute updates must follow moderation workflow policy (e.g., only moderators can resolve reports, only reporters can withdraw their own). On change, updated fields are recorded, and appropriate audit/compliance events are triggered. Endpoint references the discussion_board_reports table for source of truth. Used in moderator dashboards as well as appeal flows for reporters.","summary":"Edit/update moderation report (discussion_board_reports).","parameters":[{"name":"id","description":"The UUID of the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to be updated for the report, such as status or resolution notes.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"Updated report object with new details.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"put"},{"specification":"Delete (soft-delete) a moderation report by UUID. Used for correcting error submissions or moderation mistakes. Operation marks the report as deleted by setting deleted_at, rather than physical removal. Supports reversibility and audit. Only permissible to report owner (reporter), assigned moderator, or admin. Referenced in discussion_board_reports schema and audit requirements. Handles not-found or lack of authorization with explicit error responses.","description":"Marks a moderation report as deleted (soft deletion) using its unique UUID. Sets deleted_at timestamp, hiding the report from standard listings while preserving it for audit/compliance retrieval. This is allowed for report owner, responsible moderator, or administration as per policy. Records action for audit trails and, if applicable, notifies relevant users of removal. Already-deleted records yield conflict or not-modified responses.","summary":"Soft-delete a moderation report by UUID (discussion_board_reports).","parameters":[{"name":"id","description":"UUID of the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"delete"},{"specification":"Implements listing of moderation logs for the discussion board. Associated with the discussion_board_moderation_logs Prisma DB table. Supports search, filtering, and pagination for retrieving records such as moderation actions taken by moderators on content (threads, posts, comments).","description":"This endpoint retrieves a paginated list of moderation log entries for the discussion board. Designed for use by moderators or administrators, it enables efficient review of moderation actions based on filters such as moderator, action type, or target content (thread, post, comment).\n\nThe endpoint references the discussion_board_moderation_logs table as outlined in the Prisma DB schema. It supports audit and compliance requirements by exposing a detailed history of moderator actions (e.g., hide, delete, warn) with ability to search by timestamp, action type, or target identifier.\n\nSecurity: Authorization is required—only users with moderator or administrator privileges can access this endpoint. Sensitive moderation details are only visible to authorized roles, and all access is logged per non-functional requirements.\n\nValidation: All search, filter, and pagination parameters are validated for type and range. The response includes data, total count, and relevant paging information.\n\nBusiness logic: Used for compliance, transparency, and support of audit workflows. This endpoint is typically accompanied by detail, creation, and update endpoints for moderation logs.","summary":"Retrieve a paginated list of discussion board moderation logs (discussion_board_moderation_logs table).","parameters":[],"requestBody":{"description":"Search and pagination/filter options for querying moderation logs.","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"A paginated result set containing moderation log records.","typeName":"IPageIDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs","method":"patch"},{"specification":"Retrieves a specific moderation log entry by its unique identifier. Associated with the discussion_board_moderation_logs Prisma DB table. Supports audit, compliance, and investigation workflows.","description":"This endpoint fetches detailed information for a single moderation log entry identified by its unique UUID. It allows authorized users—moderators and administrators—to view full context of a specific moderation action, including which moderator initiated the action, the type of action taken, target resource (thread, post, comment), and timestamp.\n\nThe endpoint is mapped to the discussion_board_moderation_logs schema. Audit and transparency are ensured by exposing all immutable record fields. Sensitive content is only shown to users with elevated permissions.\n\nAccess control: Restricted to moderator and administrator roles. All access is logged for traceability. If the specified log does not exist or is not accessible due to permissions, an appropriate error is returned.","summary":"Get detailed information for a specific moderation log entry (discussion_board_moderation_logs table).","parameters":[{"name":"id","description":"Unique identifier of the moderation log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation log record details.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"get"},{"specification":"Creates a new moderation log entry. Associated with the discussion_board_moderation_logs Prisma DB table. Supports recording of moderation actions taken on content.","description":"This endpoint allows authorized moderators and administrators to record a new moderation action, such as hiding, deleting, or warning on threads, posts, or comments. It must reference an existing moderator, specify action type, associated resource, and timestamp.\n\nImplements audit and compliance requirements by creating an immutable record in discussion_board_moderation_logs. Input validation ensures foreign keys (moderator_id, thread_id, post_id, comment_id) reference valid and accessible entities.\n\nAccess is restricted to moderators and admins. All attempts to create log entries are themselves logged for compliance.","summary":"Create a new moderation log entry (discussion_board_moderation_logs table).","parameters":[],"requestBody":{"description":"Details for the new moderation log entry to be created.","typeName":"IDiscussionBoardModerationLog.ICreate"},"responseBody":{"description":"Details of the created moderation log entry.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs","method":"post"},{"specification":"Updates an existing moderation log entry by its unique identifier. Associated with the discussion_board_moderation_logs Prisma DB table. Used for correcting or annotating moderation actions.","description":"Allows moderators and administrators to update an existing moderation log entry, such as adding missing context, correcting an action reason, or amending the action details. Full auditing is enforced for changes. The update operation is restricted to authorized roles and requires the entry's UUID.\n\nAll updates are validated and tracked for compliance, supporting mandatory audit logging and transparency. Update attempts are permission checked and logged for traceability.","summary":"Update a moderation log entry by ID (discussion_board_moderation_logs table).","parameters":[{"name":"id","description":"Unique identifier of the moderation log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the moderation log entry.","typeName":"IDiscussionBoardModerationLog.IUpdate"},"responseBody":{"description":"Updated moderation log entry details.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"put"},{"specification":"Deletes a moderation log entry by its unique identifier. Associated with the discussion_board_moderation_logs Prisma DB table. Supports compliance deletion where permitted.","description":"Enables moderators and administrators to delete a moderation log entry, typically for GDPR compliance or error correction in audit trails. Requires UUID of the target entry. Deletions are soft by default to satisfy audit and regulatory requirements—actual erasure is not typically performed without elevated clearance.\n\nEnforced role authorization, all access and deletion events are logged. Attempting to delete entries without appropriate privileges or for entries that do not exist results in a meaningful error.","summary":"Delete a moderation log entry by ID (discussion_board_moderation_logs table).","parameters":[{"name":"id","description":"Unique identifier of the moderation log entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion or resulting status message.","typeName":"IDiscussionBoardModerationLog.IDeleteResult"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"delete"},{"specification":"Lists warnings issued on the discussion board with search and pagination. Associated with the discussion_board_warnings Prisma table. Used for management of user warnings, moderation review, and audit.","description":"Retrieves a searchable and paged list of user warnings issued by moderators. Allows filtering by member, moderator, type, timeframe, or expiration. Primarily used by moderators and administrators for escalation, trend analysis, and policy compliance.\n\nLinked to the discussion_board_warnings schema in Prisma. Enforces search and filtering criteria, returning only authorized details and respecting soft deletion and expiry states.\n\nAuthorization required for access, with all actions logged.","summary":"Retrieve a paginated list of user warnings (discussion_board_warnings table).","parameters":[],"requestBody":{"description":"Filtering and pagination settings for warning entries.","typeName":"IDiscussionBoardWarning.IRequest"},"responseBody":{"description":"Paged result of warning records.","typeName":"IPageIDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings","method":"patch"},{"specification":"Retrieves a specific user warning by ID. Associated with the discussion_board_warnings Prisma table. Used for moderation and escalation workflows.","description":"Fetches details for a single user warning record, including moderator, member, warning type, message, timestamps, and expiration. Used by moderators and administrators to review warning status and take action.\n\nReferences the discussion_board_warnings entity per Prisma schema. Access is restricted and all accesses are logged per security policy.","summary":"Get a specific user warning by ID (discussion_board_warnings table).","parameters":[{"name":"id","description":"Unique identifier of the warning entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User warning record details.","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"get"},{"specification":"Creates a new user warning record. Associated with the discussion_board_warnings Prisma table. Used for issuing new formal warnings to members, typically by moderators.","description":"Enables a moderator or administrator to create a new warning for a member, specifying moderator, warning type, message, and expiration. Entry is persisted as immutable record for escalation purposes.\n\nCreation is audited and only possible by authorized roles as enforced by middleware and application logic. All relationships and status are validated during creation.","summary":"Create a new user warning (discussion_board_warnings table).","parameters":[],"requestBody":{"description":"Details of the warning to create.","typeName":"IDiscussionBoardWarning.ICreate"},"responseBody":{"description":"Record of the created warning entry.","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings","method":"post"},{"specification":"Updates a user warning record by ID. Associated with the discussion_board_warnings table. Allows correcting existing warnings or appending information for record keeping and audit.","description":"Permits a moderator or administrator to update any non-protected field of a warning record, such as message or expiration time. Use case: expiring a warning early or clarifying warning rationale. Requires record UUID for identification and applies full audit rules as per non-functional requirements.\n\nUpdate event is itself logged for compliance. Access and actions are permission-checked and controlled based on the operator's role.","summary":"Update a user warning by ID (discussion_board_warnings table).","parameters":[{"name":"id","description":"Unique identifier of the warning entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the warning entry.","typeName":"IDiscussionBoardWarning.IUpdate"},"responseBody":{"description":"Updated warning record.","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"put"},{"specification":"Deletes a warning record by ID. Associated with the discussion_board_warnings Prisma table. Supports moderation compliance and user management policies for removing or archiving warnings after expiration or error.","description":"Allows a moderator or administrator to soft-delete a user warning entry, supporting audit and compliance requirements (records remain for historical reference unless erased). Requires record UUID; deletion is logged and access checked.\n\nMistakenly deleted or expired warnings can be recovered administratively. Attempts to delete without permission or for non-existent entries will result in an error response.","summary":"Delete a user warning by ID (discussion_board_warnings table).","parameters":[{"name":"id","description":"Unique identifier of the warning entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Acknowledgment of deletion or resulting status.","typeName":"IDiscussionBoardWarning.IDeleteResult"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"delete"},{"specification":"Lists bans issued on the discussion board with search and pagination. Associated with the discussion_board_bans table. Used for compliance, audit, moderator escalation, and automation.","description":"Returns a paginated, filterable list of ban records for board members. Supports filtering by member, moderator, permanence, timeframes, expiration, and reason. Used for enforcement audits, reviewing policy adherence, and moderation reporting.\n\nBans are soft-deleted for audit purposes until permanently removed. Full access restricted to authorized users; all actions logged for compliance.","summary":"Retrieve a paginated list of user bans (discussion_board_bans table).","parameters":[],"requestBody":{"description":"Filtering and pagination settings for user bans.","typeName":"IDiscussionBoardBan.IRequest"},"responseBody":{"description":"Paged result of ban records.","typeName":"IPageIDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans","method":"patch"},{"specification":"Retrieves a specific user ban by ID. Associated with the discussion_board_bans table. Used for moderator review, status checks, and compliance verification.","description":"Fetches details for an individual ban entry, including moderator, member, reason, permanence, and timeline. Used for compliance checks, reviewing policy enforcement, or automating re-instatement workflows. Access is strictly controlled and logged for security.","summary":"Get a specific user ban by ID (discussion_board_bans table).","parameters":[{"name":"id","description":"Unique identifier of the ban entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Ban record details.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"get"},{"specification":"This operation creates a new user ban record in the discussion board system. It is associated with the 'discussion_board_bans' table in Prisma. Administrators or moderators may use this endpoint to impose a ban on a member for disciplinary reasons (e.g., policy violations or repeated warnings). The request body provides details such as the target member, the moderator imposing the ban, ban reason, permanence, and (optionally) expiration date. The response confirms the new ban creation and returns detailed ban information. All business logic for ban validation, escalation, and notification must be consistent with the rules in the requirements analysis and schema comments.","description":"This endpoint allows an administrator or moderator to create a new ban for a specific member.\n\nAccording to the discussion_board_bans table, each ban record requires the member_id (target member's uuid), moderator_id (moderator/admin uuid), ban_reason, permanent flag, created_at timestamp, and may optionally include expires_at (for temp bans) and deleted_at (for undo/audit). This operation must enforce permission checks so that only authorized actors can perform bans. On ban creation, affected members may be notified, and audit logs should record the action.\n\nValidation rules:\n- The member being banned must exist and not already have an active permanent ban.\n- If the ban is not permanent, expires_at must be a future date.\n- The moderator_id must reference a user with active moderator or admin role.\n\nRelated APIs:\n- Use DELETE /discussionBoard/bans/{id} to lift/remove a ban.\n- Use PUT /discussionBoard/bans/{id} to update ban details (e.g., change expiry).\n- Use PATCH /discussionBoard/members to search for eligible members to ban/verify membership.\n\nAll user-role permission checks, reason codes, and auditing must comply with moderation and security sections of the requirements analysis and table comments.","summary":"Create a new ban record (discussion_board_bans table) for a member.","parameters":[],"requestBody":{"description":"Payload to create a new ban. Contains member_id, moderator_id, ban_reason, permanent flag, created_at, and optional expires_at.","typeName":"IDiscussionBoardBan.ICreate"},"responseBody":{"description":"Returns the newly created ban record with all details.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans","method":"post"},{"specification":"This operation updates an existing ban record in the discussion_board_bans table by ban ID. It is used by authorized moderators or administrators when changing ban details (e.g., expiring a ban early, changing reason, or adjusting from temp to permanent). The request must include the ban ID path parameter, and the request body provides fields that may be updated. All changes are subject to moderation and audit logging requirements. Only active bans can be updated with this endpoint.","description":"Update ban details such as reason, expiration, or permanence for an existing ban record.\n\nThe endpoint strictly enforces that only users with moderator or admin role can update bans. Parameters include the ban's UUID in the path, and the body defines updateable fields: ban_reason, permanent, expires_at, and deleted_at (for retraction purposes), following field validation rules in the Prisma schema. All changes should be logged, and related member records should be referenced for ban state consistency per requirements.\n\nValidation rules:\n- Only active bans can be updated (not soft-deleted/lifted).\n- changed expires_at for temp bans must be after current time.\n- Permanent status may only be toggled if the ban is not expired or deleted.\n- Only authorized users may use this endpoint.\n\nRelated endpoints:\n- POST /discussionBoard/bans for ban creation\n- DELETE /discussionBoard/bans/{id} for lifting bans\n\nAll updates must comply with audit and moderation traceability requirements as described in the table and requirements analysis.","summary":"Update an existing ban (discussion_board_bans table) for a member.","parameters":[{"name":"id","description":"Ban's unique ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on an existing ban. Only ban_reason, permanent, expires_at, deleted_at allowed.","typeName":"IDiscussionBoardBan.IUpdate"},"responseBody":{"description":"Returns updated ban details.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"put"},{"specification":"This operation lifts or soft-deletes a ban by ID in the discussion_board_bans table. Used by authorized moderators or administrators to restore a banned member's access. Sets deleted_at timestamp for audit reversibility, complying with GDPR and requirements for audit/undo. Only active (non-deleted) bans can be lifted. The response includes ban state after deletion and is logged for moderation audit trail.","description":"Lifts or soft-deletes a ban (removes active effect, marks deleted_at) for a specific ban ID.\n\nAuthors (moderator/admin) must be authorized per requirements. Only bans that are active (not already deleted) may be removed. Operation must comply with audit, traceability, and reversibility rules as outlined in the moderation/business rules.\n\nDependencies:\n- Ban must exist and be active to be lifted\n- Audit logging of the action is mandatory\n- Related endpoints for ban creation and updating are POST and PUT\n\nSecurity notes: All actions are subject to trace, audit, and must be logged for compliance with the platform's moderation security policies.","summary":"Lift/remove (soft-delete) an existing ban (discussion_board_bans table) by ID.","parameters":[{"name":"id","description":"Ban's unique ID (UUID) to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the ban object reflecting soft-deletion (with deleted_at set).","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"delete"},{"specification":"This operation retrieves a paginated, filterable list of notifications for the authenticated user (member). Associated with the Prisma table discussion_board_notifications. Supports advanced searching, sorting, unread/read state filtering, and chronological ordering, matching the requirements for notification UX and user roles. Returns notifications that belong to the requesting user only, with authorization and privacy guarantees.","description":"List and search all notification events for the currently logged-in user.\n\nThe endpoint supports pagination and filtering, including by read/unread status, notification type, time range, and text search on content_preview. Returns a paginated, sorted list of notifications (unread first, then by most recent as default). This complies with F07 (user notification UX) and privacy requirements so that users can only access their own notifications.\n\nSupports advanced sorting and filtering as described in the schema, including delivered_at and created_at. If a notification is deleted (soft-delete), it will not show in standard results unless explicitly filtered.\n\nRelated API:\n- GET /discussionBoard/notifications/{id} for notification details\n- POST /discussionBoard/notifications for manual notification triggers (e.g., admin scanning)\n- PUT /discussionBoard/notifications/{id} for marking as read\n- DELETE /discussionBoard/notifications/{id} for deleting a notification\n\nRole: All authenticated members; administrators/moderators may have additional filters/privilege.","summary":"Search and paginate notifications (discussion_board_notifications) for the logged-in user.","parameters":[],"requestBody":{"description":"Search and pagination parameters for notification list.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated notification results for the authenticated user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications","method":"patch"},{"specification":"This endpoint fetches the details of a single notification by its ID, for the currently authenticated member. It is associated with the discussion_board_notifications table and allows users to view the full notification details, including content, type, state, and associated resource link. Ensures strong authorization so users can only read their own notifications. Used in notification detail views and mark-as-read workflows.","description":"Retrieve detailed information about a single notification for the requesting user by notification ID.\n\nThe endpoint validates that the authenticated user is the notification's recipient and enforces privacy and role-based access per requirements. Returns the notification if accessible.\n\nDependencies:\n- Only return notification if not deleted (deleted_at null) and the user is the recipient.\n\nRelated APIs:\n- PATCH /discussionBoard/notifications for lists\n- PUT /discussionBoard/notifications/{id} to mark/read/update\n- DELETE /discussionBoard/notifications/{id} for removal","summary":"Get a single notification (discussion_board_notifications) by ID for the logged-in user.","parameters":[{"name":"id","description":"Unique notification ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification details for the user.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"get"},{"specification":"This operation manually triggers a new notification event (discussion_board_notifications table), either by backend logic (admin action) or externally (e.g., for systemwide alerts, testing, or manual moderation-driven notifications). Body specifies the notification details (recipient, trigger, type, etc). Typically used by administrators for special or system notifications, not user-to-user.\n\nRequires strong input validation and role check (only admin can send arbitrary notifications). Notification will be delivered to the specified recipient. On success, returns the notification object.","description":"Create a manual/system notification event sent directly to a user.\n\nThis endpoint is reserved primarily for administrative/system use cases such as broadcasts, moderator/civil warnings, or test notifications. Only privileged roles can trigger arbitrary notifications. Not used for ordinary comment/reply notifications, which are handled automatically in business logic. Body must specify recipient, type, preview, URL, etc, as per the Prisma comments.\n\nValidation rules:\n- recipient_member_id and type (category) are required\n- Manual trigger_actor_id is optional (may be null/system)\n- Follows all audit and security logging rules.\n\nRelated endpoints:\n- PATCH /discussionBoard/notifications (list)\n- GET /discussionBoard/notifications/{id}\n- PUT /discussionBoard/notifications/{id} to update read state\n- DELETE /discussionBoard/notifications/{id} to remove/delete notification\n\nAll input must be validated for user existence and permission.","summary":"Trigger/create a new (manual/system) notification (discussion_board_notifications table).","parameters":[],"requestBody":{"description":"Notification creation payload.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification event object.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["administrator"],"path":"/discussionBoard/notifications","method":"post"},{"specification":"This endpoint updates a notification in the discussion_board_notifications table by ID (such as marking read, updating delivery state, or updating preview in special moderation workflows). Supports update of only allowed fields, including 'read' flag. Used in UX flows such as marking a notification as read or updating moderation message after review/action. Authorization ensures only recipient (or privileged user) can modify. Audit logs required for moderation/admin force updates.","description":"Update mutable fields of notification for the user, by notification ID.\n\nOnly allowed fields (e.g., 'read', delivered_at, content_preview) can be changed; other fields are fixed after creation. Used mostly for marking notifications as read or updating admin/moderation previews after action taken. Path parameter is the notification's UUID. Must enforce role/ownership/authorization. Audit logging for admin/mod actions, especially if they change notification for another user.\n\nRelated APIs:\n- PATCH /discussionBoard/notifications (list)\n- GET /discussionBoard/notifications/{id}\n- DELETE /discussionBoard/notifications/{id}\n\nRequires strong security and role/ownership checks. Deleted notifications (with deleted_at set) are not modifiable.","summary":"Update (e.g., mark as read) a notification (discussion_board_notifications) by ID.","parameters":[{"name":"id","description":"Notification unique ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update payload (fields allowed: read, delivered_at, preview).","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"Updated notification object.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"put"},{"specification":"This operation soft-deletes (removes) a notification from the discussion_board_notifications table for the current user by notification ID. This is a soft delete (sets deleted_at, does not physically remove). Used for notification UX where users may clean old notifications; also used by admin/moderator for compliance. Only the recipient (or an authorized administrator) can remove their own notifications. Operation requires audit logging for moderation/security. Deleted notifications cannot be restored by UX.","description":"Soft-delete (remove) a notification by ID for the user.\n\nOnly the notification's recipient (member), or an authorized admin/moderator (role check required), can use this endpoint. Marks the notification's deleted_at field for audit/compliance. Deleted notifications may not be returned in normal queries or be marked as read. Clients must not physically erase records as per requirements (audit/compliance).\n\nDependencies:\n- Notification must exist and be active (deleted_at is null)\n- Audit/compliance log required on delete action\n- Permanently removes from user UI, but not database\n\nAssociated endpoints: PATCH for listing, GET for retrieve, PUT for update/read.","summary":"Soft-delete a notification (discussion_board_notifications) by ID for the user.","parameters":[{"name":"id","description":"Notification unique ID (UUID) to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification object after soft-deletion (deleted_at set).","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"delete"},{"specification":"This operation lists and lets users search their active content subscriptions, using the discussion_board_subscriptions table. Pagination, sorting, and filtering by target type/id supported, with advanced querying features enabled (e.g., following threads, sections, tags). Only the authenticated user can access their own subscriptions (privacy). Returns paginated, filterable list matching 'IPageIDiscussionBoardSubscription'.","description":"Fetch paginated and filterable list of all current subscriptions for the authenticated user.\n\nPagination, sorting, and searching match the requirements: able to filter by followed content types, time, or specific entity IDs. Only current user's subscriptions are returned (not deleted/malformed). User roles: member, moderator, administrator.\n\nAssociated endpoints:\n- GET /discussionBoard/subscriptions/{id} for detail\n- POST /discussionBoard/subscriptions for subscribing to new content\n- PUT /discussionBoard/subscriptions/{id} to modify\n- DELETE (not listed) for unsubscribing (may be in extendable set)\n\nSecurity/permissions: User must be authenticated and can only search their own items.","summary":"List/search user subscriptions (discussion_board_subscriptions) for authenticated user.","parameters":[],"requestBody":{"description":"Request/search/pagination parameters for user subscriptions.","typeName":"IDiscussionBoardSubscription.IRequest"},"responseBody":{"description":"Paginated result set of subscriptions.","typeName":"IPageIDiscussionBoardSubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions","method":"patch"},{"specification":"This endpoint fetches a single subscription record by its ID (discussion_board_subscriptions table) for the current authenticated user. Enforces ownership—user may only access their own subscription. Used for item detail views, update/delete operations.","description":"Get the details of a particular subscription for the authenticated user by subscription ID.\n\nID must be a valid UUID and must belong to the current user. Returns the subscription object if authorized. Not found/error returned otherwise.\n\nAssociated endpoints:\n- PATCH for list\n- POST for create\n- PUT for update\n\nSecurity/authorization: Only item owner (user) or admins can use. All access subject to audit/logging.","summary":"Get a single subscription (discussion_board_subscriptions) by ID for the user.","parameters":[{"name":"id","description":"Subscription unique ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns full subscription object if authorized.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions/{id}","method":"get"},{"specification":"This operation creates a new content subscription for the authenticated user (discussion_board_subscriptions table). Allows subscribing to threads, sections, tags, and other followable content. Body specifies target_type/target_id and validates membership. Returns created subscription. Only permitted for logged-in members/moderators/admins. Subscription uniqueness (member, type, id) enforced per schema.","description":"Creates a new subscription for a user to follow a content item (thread, section, tag).\n\nRequest body requires the target_type (which must match accepted values), target_id (UUID of the content to follow), and infers user id from authentication context. On success, returns the created subscription.\n\nRelated endpoints:\n- PATCH for searching/listing user subscriptions\n- GET for detail\n- PUT for update\n\nSecurity/permission: Authenticated users only; duplicate subscriptions disallowed; permissions validated against content ownership if necessary.\n\nUniqueness: Combination of member_id, target_type, target_id must be unique per schema.","summary":"Create a new subscription (discussion_board_subscriptions), following specified content.","parameters":[],"requestBody":{"description":"Payload for new subscription: target_type, target_id, and (implicitly) member_id.","typeName":"IDiscussionBoardSubscription.ICreate"},"responseBody":{"description":"Created subscription object.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions","method":"post"},{"specification":"This endpoint updates an existing content subscription by ID in the discussion_board_subscriptions table. Allows the user to adjust settings for their subscription (e.g., follow type, notification options). Only fields permitted in the update/patch interface may be modified per security and privacy rules. Authorization ensures only the subscription's owner or an administrator can update it. All changes audited. If deletion/unsubscribing is required, a DELETE endpoint extension should be provided, but not included here.","description":"Update settings or attributes for a specific subscription by ID for the authenticated user.\n\nThe request must include the subscription ID in the path and an update body containing only fields that are allowed to change (may be limited, e.g., notification preferences). Fully enforces that only owner or admin can change. All actions audited for compliance.\n\nAssociated endpoints:\n- GET for detail\n- PATCH for search/list\n- POST for creation\n- DELETE (for unsubscribing, may be out of scope)\n\nSecurity: Ownership validated. Audit logs produced. Unsubscribed/deleted items not returned in list/search endpoints.","summary":"Update a subscription (discussion_board_subscriptions) by ID for the authenticated user.","parameters":[{"name":"id","description":"Subscription unique ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Subscription update payload (allowed fields per business rules for update).","typeName":"IDiscussionBoardSubscription.IUpdate"},"responseBody":{"description":"Updated subscription record.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions/{id}","method":"put"},{"specification":"Implements DELETE for discussion_board_subscriptions. This operation allows a user to unsubscribe from a content subscription (thread, section, or tag) by its unique ID. Proper authorization ensures only the owner can delete. Fulfills requirement for user-driven notification management and privacy.","description":"This endpoint enables a user (must be authenticated and the subscription owner) to delete an existing subscription by its UUID. Operation checks role-based authorization: only the subscription owner may perform the delete. Underlying logic checks if the subscription exists, then performs a soft delete or permanent removal as per business rules. Returns success or relevant error (not found, forbidden, or gone). If subscription relates to notifications or personalized feeds, removal is immediate; any queued notifications are not delivered. Attempts to delete others' subscriptions result in forbidden error, aiding compliance with privacy and security standards. In audit log, this operation is recorded by user and time. Errors handled: 404 for non-existent subscription, 403 for out-of-scope deletion, 500 on internal error.","summary":"Delete a subscription by ID (discussion_board_subscriptions table).","parameters":[{"name":"id","description":"The subscription UUID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"path":"/discussionBoard/subscriptions/{id}","method":"delete"},{"specification":"Implements list/search for discussion_board_mentions. Supports advanced search and pagination for mentions using complex search criteria. Members can filter mentions by actor, content, or time range. Admin/Moderator can use this for moderation review.","description":"This endpoint provides a paginated, filterable list of member mention records. Users supply complex query/search criteria in the request body, such as filtering mentions they received, sent, or by content type/id. Pagination supports limit/offset or cursor-based pattern for scalable queries in large datasets. Only authenticated users can search their own mentions, while admin/moderators can search for any user for moderation/audit. Results are sorted by recency by default, but may allow sort overrides. Underlying logic ensures only allowed records are revealed: members see only their mentions; moderators/admins see all for compliance investigation. Validation is performed on filters and pagination params. Any search criteria not met (invalid user, out-of-range) are rejected. Errors handled include 400 for bad requests and 403 for unauthorized access. Fulfills advanced query requirements for notification/mentions UX.","summary":"List/search mentions (discussion_board_mentions table) with advanced criteria.","parameters":[],"requestBody":{"description":"Filtering, sort, and pagination criteria for searching mentions.","typeName":"IDiscussionBoardMention.IRequest"},"responseBody":{"description":"Paginated list of mentions and mention details.","typeName":"IPageIDiscussionBoardMention"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/mentions","method":"patch"},{"specification":"Implements details retrieval for a single mention in discussion_board_mentions. Used to view the context of a specific mention event (such as for notification context or audit by mod/admin).","description":"This endpoint retrieves a single mention's details using its unique ID. Members can only view their own mention events; moderators/admins can get any record for audit. Operation includes all relevant details: mentioned member, actor, content type/id, and timestamps. If the requestor is not privileged or not involved in the mention, returns 403 forbidden. Underlying business logic checks for data existence, permissions, and audit logging. Errors handled: 404 for missing, 403 unauthorized, 500 for server errors. Supports all business rules for mention access per privacy and compliance requirements.","summary":"Get mention details by ID (discussion_board_mentions table).","parameters":[{"name":"id","description":"The mention event's UUID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Mention details object.","typeName":"IDiscussionBoardMention"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/mentions/{id}","method":"get"},{"specification":"Implements creation of a new mention record in discussion_board_mentions. Creates a record when a member mentions another user, triggering notifications and updating mention UI/context.","description":"This endpoint allows a member to create a mention record (e.g. '@someone' in a post/comment). Requires specifying both the actor (who mentions) and the mentioned member, plus content type/id. On creation, triggers notification flow if enabled. Business logic validates mentioned party eligibility (e.g., not mentioning banned users), existence of content, and actor permissions. On success, returns the new mention object. Action is logged for notification/audit. Handles errors (400 for bad input, 403 for unauthorized mention, 404 for non-existent content/member). Designed for in-thread/post commenting/conversation features needing mention tracking and notification orchestration.","summary":"Create a mention event (discussion_board_mentions table).","parameters":[],"requestBody":{"description":"Mention creation details (mentioned user, actor, content type/id).","typeName":"IDiscussionBoardMention.ICreate"},"responseBody":{"description":"Created mention object.","typeName":"IDiscussionBoardMention"},"authorizationRoles":["member"],"path":"/discussionBoard/mentions","method":"post"},{"specification":"Implements update for an existing mention in discussion_board_mentions. Allows modification/rectification of mention details (rare, but needed for admin/moderator corrections or as per business rules).","description":"This endpoint updates an existing mention record by ID. Only moderators or admins may use this for correcting or administrative purposes—members cannot edit a mention after creation. Typical use case: moderation correcting a mention link or reversing an erroneous notification. Requires mention ID and new mention info. Logic ensures only eligible roles can perform the update. All actions are audit-logged. Handles errors: 404 (missing), 403 (unauthorized), and 400 (bad input).","summary":"Update a mention by ID (discussion_board_mentions table).","parameters":[{"name":"id","description":"The mention's UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New mention data to update (same structure as creation body).","typeName":"IDiscussionBoardMention.IUpdate"},"responseBody":{"description":"Updated mention object.","typeName":"IDiscussionBoardMention"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/mentions/{id}","method":"put"},{"specification":"Implements deletion of an existing mention from discussion_board_mentions. Used for moderation, violation redaction, or as per privacy requests (e.g., GDPR delete).","description":"This endpoint deletes a mention record by its ID. Only moderators/admins can delete—members cannot remove a mention once created. On execution, does a soft-delete for audit and reversibility. The operation is audit-logged (who, when, reason if given). Business logic: checks existence, permissions, and linkage (e.g., not deleting references in use). Errors: 404 (missing), 403 (unauthorized), 409 (conflict if linked), and 500 (server).","summary":"Delete a mention by ID (discussion_board_mentions table).","parameters":[{"name":"id","description":"Mention ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/mentions/{id}","method":"delete"},{"specification":"Implements advanced search/list for discussion_board_vote_types. Allows querying all vote types (e.g., upvote/downvote/like) with filters, search, and pagination for admin/mod tools.","description":"This endpoint lists or searches available vote types using paginated, filterable queries. Used for system UI configuration, analytics, or extending vote features. Supports sorting, filtering by code/name, and result limits. Only admin or moderator users can view all vote type config. General members can use for hinting but may be limited. Validation ensures only allowed fields are queried. Sorting defaults to creation date, but allows overrides. Useful for dynamic voting system UI, or reviewing supported vote types for moderation. Error handling: 400 for bad queries, 403 for unauthorized access.","summary":"List/search vote types (discussion_board_vote_types table).","parameters":[],"requestBody":{"description":"Query and pagination for searching vote types.","typeName":"IDiscussionBoardVoteType.IRequest"},"responseBody":{"description":"Paged list of vote type objects.","typeName":"IPageIDiscussionBoardVoteType"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/voteTypes","method":"patch"},{"specification":"Implements retrieval of details for a specific vote type in discussion_board_vote_types. Used for system config, settings UI, or moderation analytics/audit.","description":"This endpoint returns the details of a single vote type by its UUID. Moderators and admins can retrieve any; members may only see specific types if their role allows. Returns all information: code, name, description, and timestamps. Errors: 404 (not found), 403 (unauthorized for member if restricted), 500 (system error). Used in admin interfaces and analytics tools to show or manage voting options. Action is logged for compliance and audit trail.","summary":"Get vote type details by ID (discussion_board_vote_types table).","parameters":[{"name":"id","description":"Vote type UUID to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Vote type object.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/voteTypes/{id}","method":"get"},{"specification":"Implements creation of a new vote type in discussion_board_vote_types. Allows admin to add vote types (e.g., new reaction types like \"like\", \"disagree\").","description":"This endpoint creates a new vote type record, specifying code, name, and optional description. Only privileged admin role can access; validates unique code and suitable content per business rules. Used to expand or configure system voting features. On create, returns new vote type object. Operation is logged for system change traceability, used in analytics and voting UI. Errors: 400 (bad input), 409 (code conflict), 403 (unauthorized).","summary":"Create a new vote type (discussion_board_vote_types table).","parameters":[],"requestBody":{"description":"New vote type data (code, name, description).","typeName":"IDiscussionBoardVoteType.ICreate"},"responseBody":{"description":"Created vote type object.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":["administrator"],"path":"/discussionBoard/voteTypes","method":"post"},{"specification":"Implements update of an existing vote type in discussion_board_vote_types. Used for admin to update reaction types (e.g., rename, change description).","description":"This endpoint updates a vote type record by UUID, with new code, name or description. Admins only (members cannot update vote types). Logic includes code conflict/uniqueness check. The update operation is logged for audit/compliance. Useful for modifying, rebranding, or correcting vote type definitions as requirements evolve. Handles errors: 404 (not found), 409 (code in use), 403 (unauthorized), 400 (invalid input).","summary":"Update vote type by ID (discussion_board_vote_types table).","parameters":[{"name":"id","description":"Vote type UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote type data to update (code/name/description).","typeName":"IDiscussionBoardVoteType.IUpdate"},"responseBody":{"description":"Updated vote type object.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":["administrator"],"path":"/discussionBoard/voteTypes/{id}","method":"put"},{"specification":"Implements deletion of a vote type in discussion_board_vote_types. Allows admin to remove obsolete or deprecated reaction types; forbidden if in use by existing votes (enforced by business logic).","description":"This endpoint deletes a vote type by its UUID. Only admin can delete vote types; operation is denied if votes currently refer to this type (referential integrity). On success, vote type is soft-deleted for auditability and reversible if required by compliance teams. The action is audit-logged with user, time, and justification. Handles errors: 409 (in use), 404 (not found), 403 (unauthorized), 500 (internal error).","summary":"Delete vote type by ID (discussion_board_vote_types table).","parameters":[{"name":"id","description":"Vote type UUID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/voteTypes/{id}","method":"delete"},{"specification":"Implements advanced search/list for discussion_board_votes. Allows querying all votes with filter criteria and pagination for analytics, mod tools, or vote history UI.","description":"This endpoint returns a filtered, paginated list of votes, supporting complex queries on voter, target (thread/post/comment), vote type, and date ranges. Only available to mods/admins for compliance, user request tracebacks, or audit. Members may access their own history via specialized endpoints (not this one). Supports multi-field filters and cursor/offset pagination. Validation checks for valid query parameters, permissions. On success, returns paginated vote records with linked objects. Errors: 403 (unauthorized), 400 (bad query), 500 (internal/server). Used in system analytics and vote traceability/business intelligence use cases.","summary":"List/search votes (discussion_board_votes table) with filters.","parameters":[],"requestBody":{"description":"Query criteria and pagination info for searching votes.","typeName":"IDiscussionBoardVote.IRequest"},"responseBody":{"description":"Paginated list of votes and expanded references.","typeName":"IPageIDiscussionBoardVote"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/votes","method":"patch"},{"specification":"Retrieve details of a single vote from the discussion_board_votes table. This operation gives full details about a user's vote, including the voter, vote type (upvote, downvote etc.), target item (thread, post, or comment), and timestamps for auditing. Used for moderation or displaying precise voting history. Follows strict field-level security and audit-compliance; only authorized roles may view other users' votes, but users may view their own vote records. Handles not-found and forbidden errors with clear semantics.","description":"This endpoint fetches all information for a specific vote entity, which represents a user's vote (of a certain type, e.g., upvote/downvote) on a thread, post, or comment, as described in Prisma discussion_board_votes. It is used to retrieve comprehensive details for auditing, analytics, and vote display purposes, including references to the voter, content type, and vote type. Permission checks ensure that only authorized users (the voter, admins, and, in some cases, moderators) can access detailed voting records, fulfilling privacy and security requirements noted in the requirements analysis. Not-found errors occur if the vote record is deleted or does not exist. This is a read-only operation linked to audit and analytics workflows, and it forms part of voting system transparency and compliance.","summary":"Get a detailed vote record from discussion_board_votes.","parameters":[{"name":"id","description":"The ID of the vote to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the vote.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"get"},{"specification":"Create a new vote record in the discussion_board_votes table. This operation supports casting an upvote/downvote or other system-defined vote on a thread, post, or comment. Enforces business rules: voter may only vote once per item/type, must specify valid vote type and target, and cannot vote on deleted or closed items. Permission checks ensure only active, authenticated members can vote. Auditing and analytic tracking in place for rate-limiting, abuse prevention, and community transparency.","description":"Creates a new vote entry, representing a member's vote (of a valid type such as upvote or downvote) on a thread, post, or comment. The request body must specify the vote type, the target resource (thread, post, or comment), and the identity of the voter (inferred from session but also recorded in the database for audit). Restricts duplicate votes per type and item, validates target objects' status, and records accurate timestamps for compliance and analytics. If a duplicate vote exists, an error describing the uniqueness constraint will be returned. This endpoint helps drive engagement, content ranking, and community moderation via voting.","summary":"Create a new vote in discussion_board_votes.","parameters":[],"requestBody":{"description":"New vote details (vote type, target, voter).","typeName":"IDiscussionBoardVote.ICreate"},"responseBody":{"description":"Created vote information.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes","method":"post"},{"specification":"Update an existing vote in the discussion_board_votes table. This operation allows modifying the vote type (e.g., switching from upvote to downvote) or correcting vote details for a specific content item. Users may only update their own votes; admins can override for compliance. Checks for valid transitions (e.g., cannot change target item), integrity, and abuse prevention. Complete audit compliance: logs all updates to support traceability.","description":"Updates an existing vote (e.g., user changing their vote from upvote to downvote) for a specific resource (thread/post/comment). Only the voter or an administrator may update, and transitions are validated to ensure compliance with one-vote-per-type-per-item rules. Maintains strict audit trail per security requirements. On success, returns the updated vote record. Business rules prevent changing the vote target — only the vote type and derived properties can change. Used for transparent and fair voting procedures.","summary":"Update a vote in discussion_board_votes.","parameters":[{"name":"id","description":"The ID of the vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the vote.","typeName":"IDiscussionBoardVote.IUpdate"},"responseBody":{"description":"The updated vote information.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"put"},{"specification":"Delete a vote from the discussion_board_votes table. This operation enables users (or admins) to remove their vote on a thread, post, or comment, supporting moderation or user preferences. Enforces business rule: only the vote owner or administrators may delete a vote, with all actions recorded in audit logs for compliance.","description":"Deletes a given vote, representing a user's retraction of their previous upvote/downvote or vote on a content item. Only permitted for the voter or administrators. Ensures comprehensive audit (soft deletion with timestamp), and returns a success status or error if the vote cannot be found or is not permitted to be deleted. Fulfills reversibility and transparency requirements as described in the business and non-functional requirements, contributing to fair voting mechanisms.","summary":"Remove a vote from discussion_board_votes.","parameters":[{"name":"id","description":"ID of the vote to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion or resulting state.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"delete"},{"specification":"List or search tags from the discussion_board_tags table. Supports powerful filter, search, sort, and pagination options for displaying tag metadata to users, moderators, or administrators. Matches business rules for discoverability, content categorization, and tag management. Used for tag selection in thread/post creation forms, search filters, and tag admin panels. Audit logging and access rules apply for administrative actions, but basic listing is public.","description":"Retrieves and searches a paginated, filterable list of tag entities for the discussion board, supporting full-text keyword search and filtering on tag attributes such as name or creation/update dates. Results may be sorted and paginated. Used in tag browsing UIs, thread/post filters, and for analytics. Satisfies discoverability and admin requirements from the business analysis; audit tracks filter usage for analytics and anti-abuse. Returns tag summaries by default, with metadata ideal for listings or select dropdowns.","summary":"List/search tags in discussion_board_tags.","parameters":[],"requestBody":{"description":"Tag search, filter, pagination criteria.","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated tag results.","typeName":"IPageIDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags","method":"patch"},{"specification":"Retrieve detailed information for a single tag from the discussion_board_tags table. Essential for tag management, moderation, editing, or for displaying contextual information about tags in the UI. Only metadata is returned, not content associations.","description":"Fetches all metadata (name, description, audit timestamps) for a specific tag, as needed for tag detail or edit screens, tag explanations, or admin workflows. Used by regular users for context about content tags, and by admins/moderators for tag management or audit. Not-found errors returned on missing or deleted tags. Read-only operation, necessary for managing the board's tag taxonomy as described in business requirements.","summary":"Get details for a tag in discussion_board_tags.","parameters":[{"name":"id","description":"ID of the tag to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details for the tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"get"},{"specification":"Create a new tag in the discussion_board_tags table. Administrators or moderators (or in certain configurations, regular users) can introduce a new tag to help organize and categorize discussion content. Validations ensure unique tag names and prevent ambiguity or misuse. Returns the newly created tag's details.","description":"Adds a new tag (a label for categorization or filtering) to the system, with required metadata such as name and (optionally) description. The request body must provide a unique name for the tag, conforming to uniqueness and content rules. Used to expand the board's taxonomy and support richer content discovery. Administrative privilege required for creation by default; may be extended to advanced users if policy allows. Enforces business rules, and audit logs track creation.","summary":"Create a tag in discussion_board_tags.","parameters":[],"requestBody":{"description":"Information for tag creation (name, description).","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"Details of the created tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags","method":"post"},{"specification":"Update an existing tag in discussion_board_tags. Admins and moderators can modify tag names, descriptions, or metadata while preserving audit compliance. Enforces uniqueness and prevents breaking content associations. Use for managing the forum tag taxonomy.","description":"Updates tag information (such as name or description) for taxonomy management or editorial adjustments. Authorization restricted to admins or moderators. Operation validates updates do not introduce duplicates or break existing constraints/content references. Applies audit logging for compliance, preserving original data for traceability. Returns the updated tag details. Handles not-found and conflict errors with explicit feedback.","summary":"Update a tag in discussion_board_tags.","parameters":[{"name":"id","description":"ID of tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information (name/description) for tag.","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Updated details of the tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"put"},{"specification":"Delete a tag from discussion_board_tags. Typically restricted to admins or moderators. Operation supports soft deletion for audit trail and reversibility, never erasing historical record. Prevents deletion if tag is referenced by active threads/posts, enforcing referential integrity.","description":"Removes a tag from the forum's taxonomy. Requested tag is soft-deleted for compliance and audit reasons, and returned object confirms operation result. Returns appropriate errors for not-found or constraint violation (if in use by content). Deletion permission typically restricted to moderators/admins, with all actions logged for transparency.","summary":"Delete a tag from discussion_board_tags.","parameters":[{"name":"id","description":"ID of tag to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of tag deletion or resulting state.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"delete"},{"specification":"List/search categories from the discussion_board_categories table. This endpoint supports powerful filter, pagination, sort, and search features, helping users, moderators, or admins navigate category taxonomy and find topics of interest. Fulfills requirements for content discovery as laid out in the requirements analysis.","description":"Obtains a paginated, filterable list of categories (top-level content classifications) to display in menus, advanced search, and content creation workflows. Supports full-text search, creation/update range filters, and intended for both public and admin users, with permissions enforced for sensitive fields/actions. Returns summaries suitable for listings or selectors, satisfying search/discoverability and admin taxonomy requirements.","summary":"List/search categories in discussion_board_categories.","parameters":[],"requestBody":{"description":"Search/filter conditions and pagination for categories.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated category results.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories","method":"patch"},{"specification":"Retrieve detailed information of a single category from discussion_board_categories. This endpoint enables UI category detail displays, admin/editor management views, and contextual navigation information for content creation/search forms. Useful for verifying taxonomy, populating selectors, or pre-edit screens. No write/modification permitted.","description":"Retrieves all available metadata for a specific category entity, such as name, description, timestamps, and status. Used for admin interfaces, category detail popups in end-user UX, or automated validation tools. Not-found errors result when the category does not exist or is marked deleted. Audit logging supports traceability; operation is read-only and unrestricted in typical implementations.","summary":"Get details for a category in discussion_board_categories.","parameters":[{"name":"id","description":"ID of category to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested category.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories/{id}","method":"get"},{"specification":"Create a new category record in discussion_board_categories. This operation allows administrators (or in some policies, moderators) to add a new high-level topic area to the forum taxonomy. Enforces strict uniqueness and content rules to avoid ambiguity and misclassification. Returns new category details on creation.","description":"Adds a new category for organizational or navigation purposes, supporting top-level content classification for threads and posts as described in business requirements. Request includes new category data — required name plus optional description. Ownership, audit trail, and business constraints/uniqueness enforced. Successful creation returns category details. Error handling includes duplicate name and validation errors. Creation typically restricted by policy to administrators or moderators, with audit logging for compliance and management.","summary":"Create a category in discussion_board_categories.","parameters":[],"requestBody":{"description":"Category creation information (name, description).","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"Details of the created category.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories","method":"post"},{"specification":"This endpoint updates a specific discussion board category identified by its unique ID. The operation allows for modifying properties such as category name, description, and related metadata. This endpoint relates to the `discussion_board_categories` table in the Prisma schema, which is responsible for organizing discussion threads and posts into broad categories for easier navigation and search. Only authorized users (administrators or moderators) can perform this update. The operation must validate the category's existence and ensure no duplicate names are introduced. Auditing information, like update timestamps, is maintained. On successful update, the modified category object is returned.","description":"This API operation enables the update of a single discussion board category identified by its unique ID. The endpoint relies on the `discussion_board_categories` table, which stores the site's organizational taxonomy, supporting forum browsing, search filtering, and topic grouping.\n\nUpdates allowed include the category name, description, and possibly soft-delete restoration. The request body follows the `.IUpdate` pattern and may be restricted to administrators or moderators for security reasons. Validation rules enforce name uniqueness (within site context), and update time is automatically stamped. If the specified category does not exist or a naming conflict arises, appropriate error handling is triggered.\n\nThis endpoint fits into a typical CRUD suite for categories. It should be used after category creation (`POST /discussionBoard/categories`) or retrieval (`GET /discussionBoard/categories/{id}`) in an administrative interface.","summary":"Update a specific discussion board category (discussion_board_categories).","parameters":[{"name":"id","description":"Unique identifier of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Category update payload following .IUpdate pattern.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated discussion board category object.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/categories/{id}","method":"put"},{"specification":"This endpoint deletes a specific discussion board category identified by its UUID. Instead of physically deleting the category, this operation typically performs a soft-delete by timestamping the `deleted_at` column in the `discussion_board_categories` table. Only users with high-level privileges (administrators or moderators) are permitted to delete categories to avoid accidental or malicious removal of core navigation taxonomy. Associated threads and posts are not deleted but may be hidden or re-categorized according to board rules. The endpoint ensures auditable and reversible deletion in alignment with non-functional requirements for data recoverability and compliance.","description":"This API operation facilitates the deletion (soft-delete) of an existing discussion board category. The endpoint interacts directly with the `discussion_board_categories` table, enabling system administrators or moderators to mark a category as deleted by setting the `deleted_at` timestamp.\n\nThis soft-delete pattern preserves historical data, allowing the operation to be reversible by system administrators. It ensures that user-generated content under this category is not removed but referenced as belonging to a deleted category, which may affect user navigation and administrative tasks. System logs and audit trails are updated as required by compliance.\n\nIf a category does not exist or is already deleted, appropriate error messaging is enforced. This endpoint is used alongside category creation and update operations for comprehensive lifecycle management.","summary":"Delete (soft-delete) a specific discussion board category (discussion_board_categories).","parameters":[{"name":"id","description":"UUID of the category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of the deletion operation or the soft-deleted category object.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["administrator","moderator"],"path":"/discussionBoard/categories/{id}","method":"delete"},{"specification":"Returns a paginated and filtered list of discussion board search histories, including advanced filtering based on user ID, date range, search keywords, and context. This endpoint leverages the `discussion_board_search_histories` table and is used for analytics, audit, and user experience enhancement. Especially useful for administrators or moderation staff to analyze trends, investigate abuse patterns, or provide personalization features such as recent search suggestions. It follows a PATCH convention due to the complexity of filter and pagination parameters, which are provided in the request body. A paginated result with search history items and metadata is returned.","description":"This API operation enables retrieval of search history records from the `discussion_board_search_histories` table. It supports sophisticated filtering, sorting, and pagination to help administrators and moderators analyze search patterns, review auditing data, or enhance UX features such as showing recent searches.\n\nRequest parameters may include actor ID (user performing search), date/time ranges, search keywords, and context metadata. The results include search queries, any applied filters, timestamps, and possible user identifiers. Only roles with appropriate permissions (admin, mod; regular member for their own data) can retrieve histories.\n\nErrors are handled for invalid filters, unauthorized access, or database issues. This is a read-only operation and does not alter records.","summary":"List and filter discussion board search histories (discussion_board_search_histories).","parameters":[],"requestBody":{"description":"Advanced search history filter, pagination, and sort parameters.","typeName":"IDiscussionBoardSearchHistory.IRequest"},"responseBody":{"description":"Paginated list of search history records and metadata.","typeName":"IPageIDiscussionBoardSearchHistory"},"authorizationRoles":null,"path":"/discussionBoard/searchHistories","method":"patch"},{"specification":"Retrieves details of a single discussion board search history entry from the `discussion_board_search_histories` table, identified by its unique ID. This is typically used for audit, troubleshooting, or displaying a user's recent search activity. Both regular users (for their own data) and administrators (for audit purposes) may have access. Permission checks are enforced to ensure only owners or authorized staff can access sensitive query logs. The full record is returned, including search keywords, filters, actor information, and timestamp.","description":"This API operation fetches a single search history record from the `discussion_board_search_histories` table by unique ID. The returned object contains all input details submitted by the user, such as search keywords, applied filters, the actor (user/guest), context, and time performed.\n\nUsed for compliance, audit, or UX personalization flows (\"view my search history\"). Fine-grained permissions ensure only the actor or authorized administrators can view sensitive search logs. The endpoint is useful as part of moderation dashboards or user-facing activity history.","summary":"Get details for a specific search history record (discussion_board_search_histories).","parameters":[{"name":"id","description":"Unique identifier of the search history record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed search history record object.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":null,"path":"/discussionBoard/searchHistories/{id}","method":"get"},{"specification":"Creates a new search history record in the `discussion_board_search_histories` table. This enables tracking of user or guest searches performed on the discussion board, which can be used for analytics, recommendations, and auditing. Users (members) or guests may create history records depending on access policies. The request body must contain all required properties, including actor ID (user/guest), search keywords, filters, and context. Successful creation returns the full record, including assigned ID and timestamps.","description":"This API operation allows the creation of a new search history item in the `discussion_board_search_histories` table. It logs the execution of a search (by guest or member), storing key information such as the search keyword(s), any applied filters (tags/categories/dates), the search context, and the actor ID.\n\nUsed for constructing personalized user experiences or audit trails. The actor ID must be validated and tied to an active guest or member. Input validation ensures proper query format and integrity. On success, the created history record (with its UUID and timestamps) is returned.\n\nRole-based access may restrict this operation to only authorized users or system processes performing searches on behalf of users/guests.","summary":"Create a new discussion board search history entry (discussion_board_search_histories).","parameters":[],"requestBody":{"description":"Search history creation payload.","typeName":"IDiscussionBoardSearchHistory.ICreate"},"responseBody":{"description":"The newly created search history entry.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":null,"path":"/discussionBoard/searchHistories","method":"post"},{"specification":"Updates a specific search history record identified by its UUID in the `discussion_board_search_histories` table. This is rarely used except for fixing audit mistakes, correcting search metadata, or administrative compliance. Users should only be able to update their own records, and administrators may adjust records for compliance. The request body follows the `.IUpdate` pattern, and strong validation ensures only non-destructive, auditable changes are allowed. Operation returns the updated record on success.","description":"This API operation enables the update of an existing search history item in the `discussion_board_search_histories` table. Typical use cases include correcting erroneous metadata, amending search filter records for compliance, or administrative adjustments for audit trails. The operation supports fields such as keyword, filters, and search context (but not actor ID, which is immutable).\n\nAuthorization checks ensure only the search-owning actor or an administrator can perform updates. Audit trails are maintained for transparency, and appropriate error handling is enforced for non-existent, immutable, or unauthorized changes.\n\nSuccessful operation returns the amended history record, maintaining all required traceability fields.","summary":"Update a specific search history record (discussion_board_search_histories).","parameters":[{"name":"id","description":"Unique identifier of the search history record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search history update payload following .IUpdate pattern.","typeName":"IDiscussionBoardSearchHistory.IUpdate"},"responseBody":{"description":"The updated search history record object.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":null,"path":"/discussionBoard/searchHistories/{id}","method":"put"},{"specification":"Deletes a specific search history entry from the `discussion_board_search_histories` table. This enables users (members or guests) to remove items from their own history or allows administrators to clear records for compliance or privacy enforcement. The operation is typically a true delete, removing the history row completely. Strict authorization ensures only the owner or an administrator can perform this operation. On success, a confirmation or the deleted record may be returned.","description":"This API operation deletes an individual search history record from the `discussion_board_search_histories` table. It is typically used by users to clear their search history for privacy reasons, or by administrators to enforce data retention/compliance policies. The record identified by the UUID in the path is removed from the database.\n\nBefore removal, the endpoint verifies that the requesting user is authorized to delete the record (either as owner or admin). On success, a confirmation response or the deleted record (for audit) is returned. Appropriate error handling is enforced for non-existent records or failed authorization checks.","summary":"Delete a specific search history entry (discussion_board_search_histories).","parameters":[{"name":"id","description":"Identifier of the search history entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of the deletion or the deleted search history record.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":null,"path":"/discussionBoard/searchHistories/{id}","method":"delete"}],"components":{"schemas":{"IDiscussionBoardConfiguration.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination.\n\nOptional. If provided, must be a positive integer. Default handled by backend (often 1)."},{"type":"null","description":"Page number for pagination.\n\nOptional. If provided, must be a positive integer. Default handled by backend (often 1)."}],"description":"Page number for pagination.\n\nOptional. If provided, must be a positive integer. Default handled by backend (often 1)."},"limit":{"oneOf":[{"type":"integer","description":"Number of records per page (pagination limit).\n\nIf provided, must be a positive integer. Typical defaults come from system config (e.g., 20 or 100)."},{"type":"null","description":"Number of records per page (pagination limit).\n\nIf provided, must be a positive integer. Typical defaults come from system config (e.g., 20 or 100)."}],"description":"Number of records per page (pagination limit).\n\nIf provided, must be a positive integer. Typical defaults come from system config (e.g., 20 or 100)."},"key":{"oneOf":[{"type":"string","description":"Search filter for configuration key (exact or partial).\n\nIf set, restricts results to configuration rows matching the provided key or pattern."},{"type":"null","description":"Search filter for configuration key (exact or partial).\n\nIf set, restricts results to configuration rows matching the provided key or pattern."}],"description":"Search filter for configuration key (exact or partial).\n\nIf set, restricts results to configuration rows matching the provided key or pattern."},"value":{"oneOf":[{"type":"string","description":"Optional filter for configuration value (by match/substring).\n\nIf provided, narrows search to configurations by current value content."},{"type":"null","description":"Optional filter for configuration value (by match/substring).\n\nIf provided, narrows search to configurations by current value content."}],"description":"Optional filter for configuration value (by match/substring).\n\nIf provided, narrows search to configurations by current value content."},"description":{"oneOf":[{"type":"string","description":"Optional search filter for configuration row's description field.\n\nUsed in admin UIs or audit dashboards for filtering by explanatory text."},{"type":"null","description":"Optional search filter for configuration row's description field.\n\nUsed in admin UIs or audit dashboards for filtering by explanatory text."}],"description":"Optional search filter for configuration row's description field.\n\nUsed in admin UIs or audit dashboards for filtering by explanatory text."}},"description":"Request payload for searching, filtering, or paginating configuration key-value records in the discussion_board_configurations table. All fields are optional; used by admin panels and audit dashboards to retrieve specific system settings or search for keys/values. The design aligns with 3NF by only referencing atomic search criteria. Pagination enabled for performance and usability.","required":[]},"IPageIDiscussionBoardConfiguration":{"description":"A paginated result set of discussion board configuration records.\n\nProvides both the page information (such as current page, total results, etc.) and the list of configuration object data as documented in the requirements. Follows generic IPage<T> pattern for OpenAPI.\n\nEntity type: IDiscussionBoardConfiguration.","type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information and metadata, including current, limit, records, pages."},"data":{"type":"array","description":"Array of configuration records for the current page results.","items":{"$ref":"#/components/schemas/IDiscussionBoardConfiguration"}}},"required":["pagination","data"]},"IDiscussionBoardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the configuration record.\n\nReferences the primary key in discussion_board_configurations. Required for all entity operations; used for audit and traceability."},"key":{"type":"string","description":"Configuration key (unique name for the configuration value).\n\nRepresents the identity of the system setting, feature flag, or runtime parameter. Example: 'allow_guest_posting', 'max_post_length'. Key must be unique and atomic as explained in the Prisma model comments."},"value":{"type":"string","description":"Actual value for the configuration key.\n\nMay be a literal string or a JSON-serialized structure. Stores the current operational, feature, or system setting, as required by administrator UI and audit compliance."},"description":{"oneOf":[{"type":"string","description":"Human-readable description or annotation of the configuration row.\n\nDescribes what the value controls or any special operational context for the setting. Used in admin panels. Optional."},{"type":"null","description":"Human-readable description or annotation of the configuration row.\n\nDescribes what the value controls or any special operational context for the setting. Used in admin panels. Optional."}],"description":"Human-readable description or annotation of the configuration row.\n\nDescribes what the value controls or any special operational context for the setting. Used in admin panels. Optional."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the configuration record was created.\n\nProvides audit trail support, required for compliance. Always UTC format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the configuration was last updated.\n\nTracks changes for rollback/compliance. Always UTC."}},"required":["id","key","value","created_at","updated_at"],"description":"System configuration key-value pair for the discussion board platform (discussion_board_configurations table).\n\nEach record stores a unique runtime, operational, or feature flag setting for the board. All fields are atomic (never derived). The model is used in admin dashboards, configuration management panels, and audit logs. All operations on configuration are role-restricted to administrators."},"IDiscussionBoardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Configuration key (unique within system).\n\nExamples: 'max_post_length', 'enable_dark_mode'. Enforced unique. Used in code and admin UIs."},"value":{"type":"string","description":"Configuration value for the key. Must be valid for the referenced system feature or logic.\n\nExamples: '1000', 'true', '{\"flag\": true}'."},"description":{"oneOf":[{"type":"string","description":"Optional human-readable description for admin/audit dashboards and operational clarity.\n\nIf specified, helps future admins understand the role and implications of this config key."},{"type":"null","description":"Optional human-readable description for admin/audit dashboards and operational clarity.\n\nIf specified, helps future admins understand the role and implications of this config key."}],"description":"Optional human-readable description for admin/audit dashboards and operational clarity.\n\nIf specified, helps future admins understand the role and implications of this config key."}},"required":["key","value"],"description":"Request body for creating a new configuration record.\n\nMaps to the discussion_board_configurations table. The business logic and application backend enforce uniqueness and content validation rules. Description is optional but recommended for audit and usability."},"IDiscussionBoardConfiguration.IUpdate":{"type":"object","properties":{"key":{"type":"string","description":"Update of configuration key (must remain unique across all records).\n\nChanging the key is optional and subject to uniqueness constraints. Typically only updated in error correction scenarios."},"value":{"type":"string","description":"New configuration value to apply. Must conform to the feature's requirements or expected type (e.g., numeric limit, boolean flag, or serialized JSON)."},"description":{"oneOf":[{"type":"string","description":"Optional update to description for clarity, audit, or usability."},{"type":"null","description":"Optional update to description for clarity, audit, or usability."}],"description":"Optional update to description for clarity, audit, or usability."}},"required":["key","value"],"description":"Request payload to update a configuration row in the system.\n\nUsed by administrators to update runtime or operational parameters. Changing the key is allowed only if uniqueness can be preserved. Description update is optional."},"IDiscussionBoardChannel.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination. Optional; if set, must be ≥ 1."},{"type":"null","description":"Page number for pagination. Optional; if set, must be ≥ 1."}],"description":"Page number for pagination. Optional; if set, must be ≥ 1."},"limit":{"oneOf":[{"type":"integer","description":"Records per page (pagination upper limit). Must be a positive integer or handled by backend/systems default if omitted."},{"type":"null","description":"Records per page (pagination upper limit). Must be a positive integer or handled by backend/systems default if omitted."}],"description":"Records per page (pagination upper limit). Must be a positive integer or handled by backend/systems default if omitted."},"code":{"oneOf":[{"type":"string","description":"Optional forum channel code filter (exact or pattern match). Used for searching across code field (e.g., \"eco\", \"pol\"). Allows precise or broad filtering per UI need."},{"type":"null","description":"Optional forum channel code filter (exact or pattern match). Used for searching across code field (e.g., \"eco\", \"pol\"). Allows precise or broad filtering per UI need."}],"description":"Optional forum channel code filter (exact or pattern match). Used for searching across code field (e.g., \"eco\", \"pol\"). Allows precise or broad filtering per UI need."},"name":{"oneOf":[{"type":"string","description":"Optional display name filter for channels. UI or API can use this for full text or partial name matches."},{"type":"null","description":"Optional display name filter for channels. UI or API can use this for full text or partial name matches."}],"description":"Optional display name filter for channels. UI or API can use this for full text or partial name matches."},"description":{"oneOf":[{"type":"string","description":"Optional channel description text filter. Used in advanced admin search or catalog UIs."},{"type":"null","description":"Optional channel description text filter. Used in advanced admin search or catalog UIs."}],"description":"Optional channel description text filter. Used in advanced admin search or catalog UIs."}},"description":"Request body for filter/search of top-level forum channels (discussion_board_channels). Optional pagination, name/code search, and admin mode filtering.","required":[]},"IPageIDiscussionBoardChannel":{"description":"Paginated list/result object for board channel admin or public UI.\n\nIncludes pagination metadata and list of channel entities, following IPage<T> OpenAPI convention. Used in admin panels and in main site channel browsing.\n\nEntity type: IDiscussionBoardChannel.","type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information and metadata, including current, limit, records, pages."},"data":{"type":"array","description":"Array of channel records in the current result window.","items":{"$ref":"#/components/schemas/IDiscussionBoardChannel"}}},"required":["pagination","data"]},"IDiscussionBoardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID for channel row (primary key to discussion_board_channels.id).\n\nRequired for all channel-level data retrieval, linking, and audit compliance."},"code":{"type":"string","description":"Forum channel code, enforced unique site-wide.\n\nMulti-purpose: used for admin routing, public URLs, topic partitioning. Examples: 'eco', 'pol', 'news'. Required for channel operations."},"name":{"type":"string","description":"Display label for the channel (used in admin/panel and user interfaces).\n\nExample: 'Economics', 'Politics'. Must be unique and user-facing. Used in search, admin UIs, and display listings."},"description":{"oneOf":[{"type":"string","description":"Human-readable channel description (optional).\n\nExplains board's scope. Used in admin, onboarding, and section creation workflows."},{"type":"null","description":"Human-readable channel description (optional).\n\nExplains board's scope. Used in admin, onboarding, and section creation workflows."}],"description":"Human-readable channel description (optional).\n\nExplains board's scope. Used in admin, onboarding, and section creation workflows."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the channel was first created (audit, admin UI, compliance).\n\nExample: '2024-07-22T20:32:00Z'. Required for all audit, rollback, or governance logic."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 date/time of last update (for audit, compliance, UIs that display recently changed channels).\n\nRequired for all management and moderation workflows."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when channel was soft-deleted (null = active).\n\nRequired for audit trail and support for reversible deletion. Excluded from most public APIs if null."},{"type":"null","format":"date-time","description":"Timestamp when channel was soft-deleted (null = active).\n\nRequired for audit trail and support for reversible deletion. Excluded from most public APIs if null."}],"description":"Timestamp when channel was soft-deleted (null = active).\n\nRequired for audit trail and support for reversible deletion. Excluded from most public APIs if null."}},"required":["id","code","name","created_at","updated_at"],"description":"Discussion board channel object, representing a top-level partition (e.g., Politics, Economics) from discussion_board_channels.\n\nAtomic info only: id, code, name, created/updated timestamps, and audit fields. Used in forum navigation/admin. Channel-level deletion is always soft for audit purposes."},"IDiscussionBoardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique, URL-safe identifier for the new channel.\n\nExamples: 'eco', 'law'. Enforced unique; cannot clash with existing channel code. ASCII only."},"name":{"type":"string","description":"Display label for admin and navigation UIs; required, must be unique.\n\nExamples: 'Economics', 'Legislation'."},"description":{"oneOf":[{"type":"string","description":"Optional administrative description for scope/context of the channel.\n\nRecommended for moderator onboarding and UI tooltip support."},{"type":"null","description":"Optional administrative description for scope/context of the channel.\n\nRecommended for moderator onboarding and UI tooltip support."}],"description":"Optional administrative description for scope/context of the channel.\n\nRecommended for moderator onboarding and UI tooltip support."}},"required":["code","name"],"description":"Request body for creating a new forum channel (discussion_board_channels). Used by admins and system designers when organizing board content structure. All fields must be validated for uniqueness and atomicity as per 3NF."},"IDiscussionBoardChannel.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"(Optional) New channel code (ASCII/URL-safe). Changed rarely/only for admin-level correction if needed. Must stay unique site-wide."},"name":{"type":"string","description":"(Optional) Update for the display name. Must remain unique."},"description":{"oneOf":[{"type":"string","description":"(Optional) Update or clarify channel's role/scope. Used for onboarding, admin panels, and system mapping."},{"type":"null","description":"(Optional) Update or clarify channel's role/scope. Used for onboarding, admin panels, and system mapping."}],"description":"(Optional) Update or clarify channel's role/scope. Used for onboarding, admin panels, and system mapping."}},"required":["code","name"],"description":"Request body for updating an existing channel (discussion_board_channels). Typical updates involve label, optional code (rare), and/or adjusting channel description for clarity."},"IDiscussionBoardSection.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination. Optional; positive integer if set."},{"type":"null","description":"Page number for pagination. Optional; positive integer if set."}],"description":"Page number for pagination. Optional; positive integer if set."},"limit":{"oneOf":[{"type":"integer","description":"Number of results to return per page. Optional; handled by backend defaults if omitted."},{"type":"null","description":"Number of results to return per page. Optional; handled by backend defaults if omitted."}],"description":"Number of results to return per page. Optional; handled by backend defaults if omitted."},"channel_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter: show only sections belonging to a particular channel (references discussion_board_channels.id).\n\nUsed for displaying all sections in a channel for UI navigation or admin tooling."},{"type":"null","format":"uuid","description":"Optional filter: show only sections belonging to a particular channel (references discussion_board_channels.id).\n\nUsed for displaying all sections in a channel for UI navigation or admin tooling."}],"description":"Optional filter: show only sections belonging to a particular channel (references discussion_board_channels.id).\n\nUsed for displaying all sections in a channel for UI navigation or admin tooling."},"code":{"oneOf":[{"type":"string","description":"Optional section code filter (e.g., 'legis', 'markets'). Used for searching by section code in admin/public tools."},{"type":"null","description":"Optional section code filter (e.g., 'legis', 'markets'). Used for searching by section code in admin/public tools."}],"description":"Optional section code filter (e.g., 'legis', 'markets'). Used for searching by section code in admin/public tools."},"name":{"oneOf":[{"type":"string","description":"Optional full/partial section name filter for listing or searching."},{"type":"null","description":"Optional full/partial section name filter for listing or searching."}],"description":"Optional full/partial section name filter for listing or searching."},"description":{"oneOf":[{"type":"string","description":"Optional section description filter (display-admin or search/audit use)."},{"type":"null","description":"Optional section description filter (display-admin or search/audit use)."}],"description":"Optional section description filter (display-admin or search/audit use)."}},"description":"Request body type for retrieving/filtering section/forum list (discussion_board_sections). Used for advanced admin UIs or for user search. Optional fields allow per-channel/subforum retrieval and search.","required":[]},"IPageIDiscussionBoardSection":{"description":"Paginated list/result object for board section (subforum) UI/admin tools.\n\nIncludes pagination and full set of section objects for the result window.\n\nEntity type: IDiscussionBoardSection.","type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information and metadata, including current, limit, records, pages."},"data":{"type":"array","description":"Array of section/forum result records on this page window.","items":{"$ref":"#/components/schemas/IDiscussionBoardSection"}}},"required":["pagination","data"]},"IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information and metadata, including current, limit, records, pages."},"data":{"type":"array","items":{"type":"object","properties":{},"required":[]},"description":"Paginated result set for the current call/endpoint; entity list for the API."}},"required":["pagination","data"],"description":"Paginated list container object for list/search endpoints.\n\nEncapsulates paging controls and API result data array. Used for standard responses to paginated search/filter queries (see IPage<T> in requirements)."},"IPage.IPagination":{"type":"object","description":"Page information.\n\nContains pagination metadata for results pages throughout the API. Referenced by IPage<T> responses.","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Number of records per page. Default is 100 if not specified."},"records":{"type":"integer","description":"Total records in the database or result set."},"pages":{"type":"integer","description":"Total number of pages, computed as records/limit and rounded up."}},"required":["current","limit","records","pages"]},"IDiscussionBoardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique section identifier (UUID). Used as the reference for all section-level operations and relations.\n\nThis value links the section to thread/post entities and supports audit, navigation, and management workflows. Ensures entity-level uniqueness and is referenced throughout the system for reliable access, as stated in the Prisma schema and ERD."},"discussion_board_channel_id":{"type":"string","format":"uuid","description":"Foreign key referencing the parent Channel's id from discussion_board_channels. Associates this section with a parent channel, enforcing a 1:N relationship at the schema/database level.\n\nUsed to organize sections within higher-level channels (e.g., 'Legislation' under 'Politics'). This is required and non-null; the platform logic demands that every section is attached to a valid channel, as described in system navigation and business rules."},"code":{"type":"string","description":"Unique section code within a channel. Used for admin and routing scenarios (e.g., 'legis', 'markets'). Must be unique per channel, helping to enable clean URLs and business logic lookups.\n\nEnforces section uniqueness at the code level, avoiding ambiguity and making programmatic access smoother across the site. See admin and system design requirements."},"name":{"type":"string","description":"Section name. User-facing, atomic label for forum organization (e.g., 'Legislation'). This value is shown to users in the UI and enables filtering/search functionalities.\n\nEnsures an accessible, normalized display layer and supports both user and admin workflows."},"description":{"oneOf":[{"type":"string","description":"Section description, human-readable text providing context and detail for users. Nullable – can be omitted for terse forums, or completed for improved UX/discoverability.\n\nUsed in listings, search, and admin interfaces to guide users and support richer content navigation, as called for in the requirements analysis."},{"type":"null","description":"Section description, human-readable text providing context and detail for users. Nullable – can be omitted for terse forums, or completed for improved UX/discoverability.\n\nUsed in listings, search, and admin interfaces to guide users and support richer content navigation, as called for in the requirements analysis."}],"description":"Section description, human-readable text providing context and detail for users. Nullable – can be omitted for terse forums, or completed for improved UX/discoverability.\n\nUsed in listings, search, and admin interfaces to guide users and support richer content navigation, as called for in the requirements analysis."},"created_at":{"type":"string","format":"date-time","description":"Section creation timestamp. Used for auditing, sorting, and admin review. Records atomic event for compliance and platform metrics.\n\nReferenced in system logs and analytics panels as required by audit, traceability, and reporting features."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last modification to the section. Used for system logging and compliance, enabling sorting by update recency and reflective display of the latest site status.\n\nSupports audit trails and UI freshness signals."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp for the section. Null if the section is active; otherwise, set when deleted. Used for audit and regulatory compliance.\n\nAllows reversible moderation actions and aligns with audit trail requirements per the business logic."},{"type":"null","format":"date-time","description":"Soft delete timestamp for the section. Null if the section is active; otherwise, set when deleted. Used for audit and regulatory compliance.\n\nAllows reversible moderation actions and aligns with audit trail requirements per the business logic."}],"description":"Soft delete timestamp for the section. Null if the section is active; otherwise, set when deleted. Used for audit and regulatory compliance.\n\nAllows reversible moderation actions and aligns with audit trail requirements per the business logic."}},"required":["id","discussion_board_channel_id","code","name","created_at","updated_at"],"description":"Discussion board section entity. Each section organizes a set of threads under a parent channel (see ERD/Prisma). This type aligns with forum subdivision design and supports both user and admin-side browsing, filtering, and management.\n\nFully normalized with all atomic fields, descriptive guidance, and audit fields, as required. All properties reflect strict DB normalization, RBAC access, and compliance needs as documented in the specs."},"IDiscussionBoardSection.ICreate":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"Foreign key for channel. Required to indicate under which channel the new section will be created. Must match an active channel's id.\n\nKey for organizing the forum's hierarchy and ensuring valid parentage."},"code":{"type":"string","description":"Section code (unique within channel). Used by system for identify/routing purposes. Must not duplicate existing section codes in the same channel.\n\nEnforces atomic and clean site organization per admin/business needs."},"name":{"type":"string","description":"New section name, user-facing label (e.g., 'Debate', 'Economics'). Required for navigation and UX context."},"description":{"oneOf":[{"type":"string","description":"Optional. Human-facing section description to clarify the type of discussions belonging to this section. Supports advanced search, listing, and discoverability. May be omitted if brevity preferred."},{"type":"null","description":"Optional. Human-facing section description to clarify the type of discussions belonging to this section. Supports advanced search, listing, and discoverability. May be omitted if brevity preferred."}],"description":"Optional. Human-facing section description to clarify the type of discussions belonging to this section. Supports advanced search, listing, and discoverability. May be omitted if brevity preferred."}},"required":["discussion_board_channel_id","code","name"],"description":"Create-request type for adding a new section/forum to the board. All fields, defaults, and validation requirements are inherited from the ERD and requirements analysis.\n\nUse for admin-side creation, enforcing channel linkage, uniqueness, and normalization requirements. Allows optional descriptive field per business/UX needs."},"IDiscussionBoardSection.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Update code (must remain unique within parent channel). Renaming may be restricted depending on business logic. Used in system routing and admin interfaces.\n\nSupports admin-side edit/management workflows and auditability."},"name":{"type":"string","description":"Section name update to reflect re-organization, rebranding, or clarity for end-users. Required for display/UI accuracy and audit accumulations."},"description":{"oneOf":[{"type":"string","description":"Update to section description for improved context, search utility, and UX support. Optional; omit or null to clear description."},{"type":"null","description":"Update to section description for improved context, search utility, and UX support. Optional; omit or null to clear description."}],"description":"Update to section description for improved context, search utility, and UX support. Optional; omit or null to clear description."}},"required":["code","name"],"description":"Update-request type for patching a section/forum record. Supports admin UI and batch-modification logic for forum curation, taxonomic changes, or compliance-driven edits.\n\nEnsures only atomic, updatable properties are exposed. Follows strict DB normalization and audit patterns as per platform design."},"IDiscussionBoardGuest.IRequest":{"type":"object","properties":{"session_token":{"oneOf":[{"type":"string","description":"Filter guests by session token. Optional search feature for admin dashboards and abuse analysis. Enables ID-based guest session lookups.\n\nAllows advanced system-level querying per requirements analysis."},{"type":"null","description":"Filter guests by session token. Optional search feature for admin dashboards and abuse analysis. Enables ID-based guest session lookups.\n\nAllows advanced system-level querying per requirements analysis."}],"description":"Filter guests by session token. Optional search feature for admin dashboards and abuse analysis. Enables ID-based guest session lookups.\n\nAllows advanced system-level querying per requirements analysis."},"ip_address":{"oneOf":[{"type":"string","description":"Search/filter guests by IP address. May be anonymized or hashed for privacy reasons. Useful for localization, abuse tracing, and moderation."},{"type":"null","description":"Search/filter guests by IP address. May be anonymized or hashed for privacy reasons. Useful for localization, abuse tracing, and moderation."}],"description":"Search/filter guests by IP address. May be anonymized or hashed for privacy reasons. Useful for localization, abuse tracing, and moderation."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of creation date range for filtering guest sessions. Used in time-windowed analytics and abuse/malware investigation flows."},{"type":"null","format":"date-time","description":"Start of creation date range for filtering guest sessions. Used in time-windowed analytics and abuse/malware investigation flows."}],"description":"Start of creation date range for filtering guest sessions. Used in time-windowed analytics and abuse/malware investigation flows."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of creation date range for filtering guest sessions. Often paired with created_from to bound guest search by event lifetime."},{"type":"null","format":"date-time","description":"End of creation date range for filtering guest sessions. Often paired with created_from to bound guest search by event lifetime."}],"description":"End of creation date range for filtering guest sessions. Often paired with created_from to bound guest search by event lifetime."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination - which page to retrieve. Must be >= 1. Default 1.\n\nStandard for UI navigation and performance. Optional; null defaults to first page."},{"type":"null","minimum":1,"description":"Pagination - which page to retrieve. Must be >= 1. Default 1.\n\nStandard for UI navigation and performance. Optional; null defaults to first page."}],"description":"Pagination - which page to retrieve. Must be >= 1. Default 1.\n\nStandard for UI navigation and performance. Optional; null defaults to first page."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100,"description":"Pagination limit - max records per page. Default 20, maximum 100. Used to prevent overload and enable smooth navigation in moderation/analytics UIs."},{"type":"null","minimum":1,"maximum":100,"description":"Pagination limit - max records per page. Default 20, maximum 100. Used to prevent overload and enable smooth navigation in moderation/analytics UIs."}],"description":"Pagination limit - max records per page. Default 20, maximum 100. Used to prevent overload and enable smooth navigation in moderation/analytics UIs."}},"description":"Request type for searching, filtering, and paginating guest sessions. Designed for admin, analytics, and system audit interfaces. Fully reflects requirements around discoverability, privacy, and RBAC compliance.","required":[]},"IPageIDiscussionBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata describing the current page, total record count, and UI navigation fields as per ERD and requirements."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardGuest"},"description":"Array of guest session results. Each entry is a full session record per audit/analytic needs."}},"required":["pagination","data"],"description":"Paginated result wrapper for guest session listings, per advanced search/filter requirements and admin analytics tools. Strictly adheres to the platform's page-container interface conventions."},"IDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique session identifier (UUID). Required. Atomic - enables unambiguous session reference for analytics, trace, or moderation, as described in the ERD and business logic."},"session_token":{"type":"string","description":"Session token (string). Immutable per session. Primary session authentication for guests. Indexed for moderation/abuse tracing."},"ip_address":{"type":"string","description":"IP address associated with the guest session. Used for abuse investigation, rate limit tracking, and security analytics. May be anonymized per compliance rules."},"user_agent":{"oneOf":[{"type":"string","description":"HTTP user agent string from guest's browser. Null if not sent. Supports device analytics and UI auditing, as described in ERD."},{"type":"null","description":"HTTP user agent string from guest's browser. Null if not sent. Supports device analytics and UI auditing, as described in ERD."}],"description":"HTTP user agent string from guest's browser. Null if not sent. Supports device analytics and UI auditing, as described in ERD."},"created_at":{"type":"string","format":"date-time","description":"Session start timestamp. Required for audit, analytics, and abuse tracking per specifications."},"expires_at":{"type":"string","format":"date-time","description":"Expiration time for the session. Used to control session lifetime, restrict abusive re-entry, or meet privacy compliance requirements."}},"required":["id","session_token","ip_address","created_at","expires_at"],"description":"Guest session entity type, per ERD design and requirements (F01, F06, security audit). All properties are atomic and directly reflect session-tracing columns per strict normalization, audit, and analytics requirements."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"Unique session token for the guest. Must not collide with any active guest tokens. Required at creation, per DB and system security rules."},"ip_address":{"type":"string","description":"IP address under which the guest session is registered. Used for tracing and abuse prevention, as required for compliance and moderation."},"user_agent":{"oneOf":[{"type":"string","description":"Optional HTTP user agent string for the guest session. Used for analytics and device-tracking (can be null if unavailable).\n\nMay be truncated or anonymized for privacy compliance."},{"type":"null","description":"Optional HTTP user agent string for the guest session. Used for analytics and device-tracking (can be null if unavailable).\n\nMay be truncated or anonymized for privacy compliance."}],"description":"Optional HTTP user agent string for the guest session. Used for analytics and device-tracking (can be null if unavailable).\n\nMay be truncated or anonymized for privacy compliance."},"expires_at":{"type":"string","format":"date-time","description":"Session expiration timestamp. Used to define session validity window for security, abuse, or analytics. Required at creation.\n\nSession lifetime must satisfy enforcement policies as described in system requirements."}},"required":["session_token","ip_address","expires_at"],"description":"Type for creating a new guest session/account. Captures registration details, compliance-traceable metadata, and window of validity as per system/business needs (see F01, security/audit, analytics/enforcement design requirements)."},"IDiscussionBoardGuest.IUpdate":{"type":"object","properties":{"user_agent":{"oneOf":[{"type":"string","description":"Updated (or corrected) HTTP user agent for guest session. Nullable, per privacy rules and actual availability. Optional on update."},{"type":"null","description":"Updated (or corrected) HTTP user agent for guest session. Nullable, per privacy rules and actual availability. Optional on update."}],"description":"Updated (or corrected) HTTP user agent for guest session. Nullable, per privacy rules and actual availability. Optional on update."},"expires_at":{"type":"string","format":"date-time","description":"Update to expiration timestamp for session. Must reflect security business rules (cannot extend maliciously; complies with analytics/audit policy)."}},"description":"Type used for updating guest session entity attributes—audited for abuse controls, session extension, or business logic fixes. All properties are optional and validated by business logic.","required":[]},"IDiscussionBoardMember.IRequest":{"type":"object","properties":{"username":{"oneOf":[{"type":"string","description":"Username filter. String, optional. Supports searching for members by their unique identifier as displayed on profile, post attribution, etc. Designed per ERD and search feature set."},{"type":"null","description":"Username filter. String, optional. Supports searching for members by their unique identifier as displayed on profile, post attribution, etc. Designed per ERD and search feature set."}],"description":"Username filter. String, optional. Supports searching for members by their unique identifier as displayed on profile, post attribution, etc. Designed per ERD and search feature set."},"email":{"oneOf":[{"type":"string","format":"email","description":"Email address filter for advanced search/audit. Supports member management UI, analytics, and compliance checks. May be restricted based on admin/moderator role. String, must match RFC 5322/email format if present."},{"type":"null","format":"email","description":"Email address filter for advanced search/audit. Supports member management UI, analytics, and compliance checks. May be restricted based on admin/moderator role. String, must match RFC 5322/email format if present."}],"description":"Email address filter for advanced search/audit. Supports member management UI, analytics, and compliance checks. May be restricted based on admin/moderator role. String, must match RFC 5322/email format if present."},"display_name":{"oneOf":[{"type":"string","description":"Member display name search. Nullable, string. Serves member listing navigation, social search, and admin analytics purposes. As referenced in callouts, post lists, and account UI sections."},{"type":"null","description":"Member display name search. Nullable, string. Serves member listing navigation, social search, and admin analytics purposes. As referenced in callouts, post lists, and account UI sections."}],"description":"Member display name search. Nullable, string. Serves member listing navigation, social search, and admin analytics purposes. As referenced in callouts, post lists, and account UI sections."},"is_active":{"oneOf":[{"type":"boolean","description":"Boolean filter. Allows filtering members based on active/inactive (banned/deactivated) status, per moderation and suspension/audit requirements."},{"type":"null","description":"Boolean filter. Allows filtering members based on active/inactive (banned/deactivated) status, per moderation and suspension/audit requirements."}],"description":"Boolean filter. Allows filtering members based on active/inactive (banned/deactivated) status, per moderation and suspension/audit requirements."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of creation window for member search. Optional, helps in finding users registered during a particular range for system analytics or audit workflows."},{"type":"null","format":"date-time","description":"Start of creation window for member search. Optional, helps in finding users registered during a particular range for system analytics or audit workflows."}],"description":"Start of creation window for member search. Optional, helps in finding users registered during a particular range for system analytics or audit workflows."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of creation window for filtering member entities. Optional. Supports admin-side member management analytics and reporting."},{"type":"null","format":"date-time","description":"End of creation window for filtering member entities. Optional. Supports admin-side member management analytics and reporting."}],"description":"End of creation window for filtering member entities. Optional. Supports admin-side member management analytics and reporting."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: which page/listing index to load. Optional; must be >0 if set. Defaults controlled by UI or system config."},{"type":"null","minimum":1,"description":"Pagination: which page/listing index to load. Optional; must be >0 if set. Defaults controlled by UI or system config."}],"description":"Pagination: which page/listing index to load. Optional; must be >0 if set. Defaults controlled by UI or system config."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: record count per page. Optional; upper-bounded for performance. Defaults controlled by UI requirements or admin-side controls."},{"type":"null","minimum":1,"maximum":100,"description":"Pagination: record count per page. Optional; upper-bounded for performance. Defaults controlled by UI requirements or admin-side controls."}],"description":"Pagination: record count per page. Optional; upper-bounded for performance. Defaults controlled by UI requirements or admin-side controls."}},"description":"Request schema for member listing and advanced search. Admin and moderator panels use it for flexible/targeted recruitment, management, analytics, and audit flows—directly mapping to ERD/requirements for high-performance role-based listing.","required":[]},"IPageIDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata for member search results (current page, record count, navigation fields). Strictly aligns with ERD and UX platform requirements."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember"},"description":"Array of member entity results matching the search criteria, strictly typed per the member schema."}},"required":["pagination","data"],"description":"Paginated result wrapper for member search/list API, matching advanced listing, analytics, and admin UI requirements for flexible exploration as per platform conventions."},"IDiscussionBoardMember":{"type":"object","description":"Represents a registered, authenticated user of the discussion board. Derived directly from the discussion_board_members Prisma table.\n\nIncludes all core identity, profile, and activation fields, including those used for member profile editing, authentication, role assignment, and violation management. All descriptions reference the original Prisma column comments and requirements analysis.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member account."},"username":{"type":"string","description":"Unique public identifier for display and search."},"email":{"type":"string","format":"email","description":"Email address used for system notifications and logins."},"display_name":{"type":"string","description":"User's display name as shown on posts, comments, and profile."},"profile_image_url":{"type":"string","format":"uri","description":"URI to member's profile image."},"is_active":{"type":"boolean","description":"Member account active/inactive status."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member registered."},"updated_at":{"type":"string","format":"date-time","description":"Last time the member data was changed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion (null if not deleted)."},{"type":"null"}],"description":"Timestamp for soft deletion (null if not deleted)."}},"required":["id","username","email","display_name","is_active","created_at","updated_at"]},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"Username to be registered. Must be unique within all member entities (see constraints). Required for new account creation."},"email":{"type":"string","format":"email","description":"Member's email for account registration, notification, and recovery workflows. Required and unique per account. Must pass format validation."},"hashed_password":{"type":"string","description":"Hashed password (never raw); required for credential management, login enforcement, and security compliance. System must never store/return raw passwords (see ERD comments)."},"display_name":{"type":"string","description":"Member's display name for UI friendliness, required at registration; may be shown publicly in some contexts per privacy policy."},"profile_image_url":{"oneOf":[{"type":"string","description":"Optional profile photo URI at account creation (may be updated later). Supports richer onboarding and profile UX."},{"type":"null","description":"Optional profile photo URI at account creation (may be updated later). Supports richer onboarding and profile UX."}],"description":"Optional profile photo URI at account creation (may be updated later). Supports richer onboarding and profile UX."}},"required":["username","email","hashed_password","display_name"],"description":"Request payload for registering a discussion board member. Enforces constraints, privacy expectations, and onboarding UX/business rules as per system requirements and ERD. Optional profile image; all other properties required at creation. Hashing is pre-enforced externally for password fields."},"IDiscussionBoardMember.IUpdate":{"type":"object","description":"The structure used to update fields held by a discussion board member in the members table. This aligns with business rules for member update: email, display name, password (hashed), profile image URI, active state. Optionality is enforced based on atomic update capability, and strong audit/traceability is maintained. Used for member self-profile edits or moderator/admin-privileged updates.\n\nThis schema ensures all updatable member fields are clearly annotated for client/server validation. It references the original Prisma schema for each member attribute and is intended for usage in REST update payloads or admin update flows. All field descriptions are derived from the member table Prisma comments, grouped per business function for UI clarity.","properties":{"username":{"type":"string","description":"The member's unique public username. Used as a display identity, must remain globally unique. From Prisma: 'Member's unique public username... Ensures normalization as user identity is atomic and required.'"},"email":{"type":"string","format":"email","description":"The member's email address for notifications, recovery, and authentication. Unique, must be valid, compliant with notification delivery and regulatory (GDPR) requirements. From Prisma: 'Email address for system notifications, password recovery, and authentication purposes... unique per member.'"},"hashed_password":{"type":"string","description":"Only set if changing password. This is the secure password hash (never the plain password), according to best practices for credential security. Must meet strict complexity and hash algorithm (argon2id, bcrypt, etc) requirement."},"display_name":{"type":"string","description":"Visible name on the board, friends list, etc. Enables user-facing flexibility. Must be non-empty if provided."},"profile_image_url":{"type":"string","format":"uri","description":"URI to a profile image (e.g., CDN address). Optional, used for display in member lists, profile page, comments, post attributions. Must follow valid URI standards. From Prisma: 'Optional URI to member's profile image... example: https://cdn.site.com/profiles/member-42.jpg'"},"is_active":{"type":"boolean","description":"Flag whether the account is active/enabled. Used for mod/admin suspension and onboarding. From Prisma: 'Whether the member account is active (able to log in/interact)... false for banned or deactivated members.'"}},"required":["username","email","hashed_password","display_name","is_active"]},"IDiscussionBoardModerator.IRequest":{"type":"object","description":"Object for filtering and paginating moderator records. Used for admin search panels or advanced audit dashboards for role management.\n\nThis type supports advanced filtering/search: by status (active/revoked), time window, related member info, etc.","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Default 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page (default 20, max 100)."},"active_only":{"type":"boolean","description":"If true, only returns active (not revoked) moderators."},"assigned_after":{"type":"string","format":"date-time","description":"Return moderators assigned after this timestamp."},"assigned_before":{"type":"string","format":"date-time","description":"Return moderators assigned before this timestamp."},"username":{"type":"string","description":"Filter moderators whose linked member username matches this pattern (partial match)."}},"required":[]},"IPageIDiscussionBoardModerator":{"type":"object","description":"A paginated result set for moderator assignments, including metadata for pagination and total record counts. Each item is a single moderator assignment and its related member details.\n\nThis type is based on the standard IPage structure, tailored for moderator entity summaries.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerator"},"description":"Moderator assignments for this page."}},"required":["pagination","data"]},"IDiscussionBoardModerator":{"type":"object","description":"Represents a single moderator assignment. Connects a member with moderator privileges, including metadata about assignment and revocation.\n\nThis schema aggregates the columns from the discussion_board_moderators table and populates related member data as needed for admin and audit views. All field descriptions reference the Prisma schema and requirements analysis.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator assignment (discussion_board_moderators.id)"},"member_id":{"type":"string","format":"uuid","description":"Foreign key linking to discussion_board_members.id (target member with moderation privileges)."},"assigned_at":{"type":"string","format":"date-time","description":"When this member was assigned moderator role."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator role was revoked (null if currently active)."},{"type":"null"}],"description":"Timestamp when moderator role was revoked (null if currently active)."},"member":{"$ref":"#/components/schemas/IDiscussionBoardMember","description":"Expanded detail for the member holding this moderator assignment. Populated for management/admin views."}},"required":["id","member_id","assigned_at"]},"IDiscussionBoardModerator.ICreate":{"type":"object","description":"Request body for creating a new moderator role assignment. Used by admin interface when escalating a member to moderator status. Only requires member_id; other fields set on creation.","properties":{"member_id":{"type":"string","format":"uuid","description":"The ID (UUID) of the member to assign as moderator."}},"required":["member_id"]},"IDiscussionBoardModerator.IUpdate":{"type":"object","description":"Request body for updating moderator assignment. Used for soft-revocation, appending admin notes, or context fields if workflow is extended.\n\nBy default, only 'revoked_at' may be set for revocation.","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp to set when revoking the moderator role. Set to the current date-time when removing privileges."},{"type":"null"}],"description":"Timestamp to set when revoking the moderator role. Set to the current date-time when removing privileges."}},"required":["revoked_at"]},"IDiscussionBoardAdministrator.IRequest":{"type":"object","description":"Object for filtering/searching administrator assignments. Used for admin dashboards.\n\nSupports: time window, member username/email, and revoked status queries.","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Default 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page (default 20, max 100)."},"active_only":{"type":"boolean","description":"If true, only show currently active (not revoked) administrators."},"assigned_after":{"type":"string","format":"date-time","description":"Return admins assigned after this timestamp."},"assigned_before":{"type":"string","format":"date-time","description":"Return admins assigned before this timestamp."},"username":{"type":"string","description":"Filter administrators whose member username matches this term (partial match)."}},"required":[]},"IPageIDiscussionBoardAdministrator":{"type":"object","description":"A page of administrator assignments, with pagination metadata and array of administrator assignment objects.\n\nEach record links an admin assignment to a member entity.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdministrator"},"description":"List of administrator assignments on this page."}},"required":["pagination","data"]},"IDiscussionBoardAdministrator":{"type":"object","description":"An administrator assignment entity. Connects a discussion board member with system-wide admin privileges.\n\nFollows discussion_board_administrators schema, including assignment, revocation, and related member linkage for UIs.","properties":{"id":{"type":"string","format":"uuid","description":"Administrator assignment ID."},"member_id":{"type":"string","format":"uuid","description":"FK to discussion_board_members.id (the member assigned as admin)."},"assigned_at":{"type":"string","format":"date-time","description":"When administrative privileges were assigned."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"When administrator privileges revoked; null if still active."},{"type":"null"}],"description":"When administrator privileges revoked; null if still active."},"member":{"$ref":"#/components/schemas/IDiscussionBoardMember","description":"Expanded member details (ID, username, profile, etc) for management panels, referencing discussion_board_members."}},"required":["id","member_id","assigned_at"]},"IDiscussionBoardAdministrator.ICreate":{"type":"object","description":"Request body for assigning administrator privileges to a member. Used in role escalation flows. Only requires member_id.","properties":{"member_id":{"type":"string","format":"uuid","description":"The member's UUID to be assigned as administrator."}},"required":["member_id"]},"IDiscussionBoardAdministrator.IUpdate":{"type":"object","description":"Request body for administrative privilege update. Typically used only to set revoked_at timestamp for removal of privileges. Future extensions may allow admin notes/context.","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for revoking admin privileges. Set to now on revocation."},{"type":"null"}],"description":"Timestamp for revoking admin privileges. Set to now on revocation."}},"required":["revoked_at"]},"IDiscussionBoardThread.IRequest":{"type":"object","description":"Advanced filter/search and pagination object for querying threads. Used for all main thread list/search UIs (public, member, admin, mod). Fields align with 3NF thread entity and business filters described in requirements.\n\nAllows queries like search by keywords, category, creator, status, pinned/closed, created_at (date) window. Pagination controls are standardized.","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Default 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Results per page (default 20, max 100)."},"title":{"type":"string","description":"Filter for threads whose title contains this substring (e.g., keyword search)."},"category_id":{"type":"string","format":"uuid","description":"Filter by category of thread (foreign key to discussion_board_categories)."},"member_id":{"type":"string","format":"uuid","description":"Filter by creator/author of the thread (member uuid)."},"is_pinned":{"type":"boolean","description":"If present, filter thread results by their 'pinned' status."},"is_closed":{"type":"boolean","description":"If present, filter by 'closed' status."},"created_after":{"type":"string","format":"date-time","description":"Return threads created or updated after this timestamp."},"created_before":{"type":"string","format":"date-time","description":"Return threads created or updated before this timestamp."}},"required":[]},"IPageIDiscussionBoardThread":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information.\n\nDescribes the state and boundaries of this page of thread records, including the current page number, limit per page, total records matching query, and total page count (ceiling division). Corresponds to paging controls on UI and supports efficient client-side navigation. See business rules for maximum/minimum limits."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardThread"},"description":"Array of thread summary/record objects for this page. Each record follows the complete or summary specification for a 'discussion_board_thread' as derived from the OpenAPI operation and Prisma schema."}},"required":["pagination","data"],"description":"Paginated result container for discussion board thread listings.\n\nImplements the IPage<T> generic form for paginated endpoints as described in OpenAPI and discussed in the requirements and standard pagination practices. This type always includes page metadata and array of thread records as payload."},"IDiscussionBoardThread":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for a thread in the discussion board. Referenced in all thread-related operations, relationships, and displays. Sourced from the Prisma DB schema."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"ID of the member who created the thread. Foreign key to 'discussion_board_members.id'. Used for association and filtering in the UI and API."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"ID of the category to which this thread belongs. Foreign key to 'discussion_board_categories.id'. Used for content taxonomy, filtering, and category-specific features."},"title":{"type":"string","description":"Title of the thread, as posted by the user. Must be non-null and respects the business logic for required length and content validation. Keywords here support full-text search and access via OpenAPI."},"body":{"type":"string","description":"Initial content or body of the thread (opening post). Provides the starting context for the thread's discussion. Not null, may support markdown or rich text per supporting configuration."},"is_pinned":{"type":"boolean","description":"Flag indicating whether this thread is currently pinned by a moderator/admin. Pinned threads are sorted/featured for visibility as outlined in requirements (moderation tools)."},"is_closed":{"type":"boolean","description":"Flag indicating if the thread has been closed (no further posts or comments allowed, moderation-only edits permitted). Implements moderation feature as supported in business requirements."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of thread creation, in ISO 8601 format. Used for audit, display, and sorting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of latest update to this thread's metadata/content. Used for UI freshness indicators and moderation logs."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp (ISO 8601), as required by moderation/business requirements. Null if the thread is active."},{"type":"null"}],"description":"Soft-delete timestamp (ISO 8601), as required by moderation/business requirements. Null if the thread is active."}},"required":["id","discussion_board_member_id","discussion_board_category_id","title","body","is_pinned","is_closed","created_at","updated_at"],"description":"Represents a discussion thread (the highest level posting unit) in the discussion board system. Directly maps to the 'discussion_board_threads' Prisma table and the OpenAPI operation for thread entities.\n\nIncludes all required metadata for auditing, display, navigation, filtering, and compliance with moderation requirements. Relationships: author/member, category, attached posts/comments; supports moderation status, pinning, and closure."},"IDiscussionBoardThread.ICreate":{"type":"object","properties":{"discussion_board_member_id":{"type":"string","format":"uuid","description":"ID of the member creating the thread. MUST be a valid, active member. Tied to the authenticated user's account context in the business logic."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"ID of the category under which the thread is being created. Must reference an existing and active category."},"title":{"type":"string","description":"Thread title, required. Must be unique within the category per business rule, within length and content limits."},"body":{"type":"string","description":"Content/body of the thread. Rich text (may support markdown) per configuration. Required."}},"required":["discussion_board_member_id","discussion_board_category_id","title","body"],"description":"Request payload type for creating a new thread in the discussion board system. Corresponds to the POST operation for thread creation per OpenAPI, and includes all mandatory fields for instantiating a 'discussion_board_threads' record.\n\nReferences member and category as foreign keys. Enforces business logic via OpenAPI validation and backend rules."},"IDiscussionBoardThread.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Thread title (for edits/updates). Must comply with business validation on length/content/uniqueness in category, if updated."},"body":{"type":"string","description":"Body/content of the thread (can be edited by owner/moderator). Supports content policies."},"is_pinned":{"type":"boolean","description":"Set true to pin the thread (admin/moderator only)."},"is_closed":{"type":"boolean","description":"Set true to close (lock) further posting/comments (admin/moderator or owner on their own threads as permitted)."}},"required":[],"description":"Request body for updating a discussion thread (partial update semantics).\n\nAny supplied field will be updated; omitted fields remain unchanged. Enforces business rules for editability (who can pin/close/edit, etc). No required fields—supports PATCH semantics for updates as per OpenAPI."},"IDiscussionBoardPost.IRequest":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"Filter posts by their parent thread's UUID (discussion_board_posts.discussion_board_thread_id)."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Filter posts by the creator member's UUID (discussion_board_posts.discussion_board_member_id)."},"keyword":{"type":"string","description":"Full-text search keyword filter for post body text (for advanced search, moderation or analytics)."},"created_after":{"type":"string","format":"date-time","description":"Filter posts where created_at is after this timestamp."},"created_before":{"type":"string","format":"date-time","description":"Filter posts where created_at is before this timestamp."},"page":{"type":"integer","minimum":1,"description":"Requested page number (1-based indexing)."},"limit":{"type":"integer","minimum":1,"description":"Maximum number of results per page. Enforced business maximum typically set in admin config."}},"required":[],"description":"Search, filter, and pagination request for querying discussion board posts.\n\nAllows complex filtering by thread, creator, full-text, creation date, or paging controls. Designed as input body for PATCH /discussionBoard/posts as per OpenAPI operation and aligns with IPage pagination conventions."},"IPageIDiscussionBoardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Describes the page bounds (current page, size, total, lastPageNum) for this post results page. Used for navigation and user experience."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPost"},"description":"Page content: array of post objects for this query/slice, following the complete fields for IDiscussionBoardPost according to the OpenAPI model."}},"required":["pagination","data"],"description":"Paginated result set for post listings (IPage<Post> pattern). Implements standard OpenAPI paging for IDiscussionBoardPost objects as described in endpoint documentation."},"IDiscussionBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this post (discussion_board_posts record UUID)."},"discussion_board_thread_id":{"type":"string","format":"uuid","description":"ID of the thread to which this post belongs (discussion_board_threads.id). Used for relationship navigation."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"ID of the member (author) creating this post. Required, references a valid 'discussion_board_members.id'."},"body":{"type":"string","description":"Contenido del post: texto completo, permitido en markdown o texto plano según la configuración del foro. Obligatorio y sujeto a normas de contenido del sistema."},"is_edited":{"type":"boolean","description":"Indica si el contenido ha sido editado después de su creación. Utilizado en interfaces de usuario para mostrar la etiqueta 'editado'."},"created_at":{"type":"string","format":"date-time","description":"Marca temporal de creación del post. Utilizada para ordenación, auditoría y navegación."},"updated_at":{"type":"string","format":"date-time","description":"Marca temporal de última actualización de la publicación. Permite seguimiento del historial de ediciones y cumplimiento de requisitos legales."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Marca temporal de borrado suave (soft-delete) para cumplimiento y moderación. Nulo si el post está activo."},{"type":"null"}],"description":"Marca temporal de borrado suave (soft-delete) para cumplimiento y moderación. Nulo si el post está activo."}},"required":["id","discussion_board_thread_id","discussion_board_member_id","body","is_edited","created_at","updated_at"],"description":"Represents a post entity under a thread in the discussion board system. Maps to a 'discussion_board_posts' table row, with all required fields for audit, display, and moderation.\n\nKey relationships: parent thread (thread_id), author (member_id). Includes all audit and compliance timestamps and a soft-delete field for reversibility."},"IDiscussionBoardPost.ICreate":{"type":"object","properties":{"discussion_board_thread_id":{"type":"string","format":"uuid","description":"Thread UUID for the post's parent thread. Must exist and be open; validated via business logic."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Author's member UUID; must reference an active, valid member."},"body":{"type":"string","description":"Required body content for the post. Length and rules enforced by configuration, may allow markdown/RTE."}},"required":["discussion_board_thread_id","discussion_board_member_id","body"],"description":"Request payload for creating a post within a discussion thread. Used as POST body in post creation API, matching OpenAPI and Prisma rules. Requires thread, author, and non-null body content."},"IDiscussionBoardPost.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updated body/content of the post. Rules and length enforced by business logic/config."},"is_edited":{"type":"boolean","description":"True if post is being edited. Automatically handled by backend, may be supplied by client for audit compliance."}},"required":[],"description":"Request body for updating a post (PATCH/PUT semantics). All fields optional; non-supplied keys remain unchanged. Used in admin/moderator/member editing flows as per requirements."},"IDiscussionBoardComment.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Filter comments by parent post (discussion_board_post_id)."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Filter comments by member (creator)."},"parent_id":{"type":"string","format":"uuid","description":"Filter for comments with a specific parent_id (supports threaded/nested comment structures or replies to a comment)."},"keyword":{"type":"string","description":"Full-text search or keyword match against comment body for advanced/analytics queries."},"created_after":{"type":"string","format":"date-time","description":"Filter comments where created_at > supplied timestamp."},"created_before":{"type":"string","format":"date-time","description":"Filter comments where created_at < supplied timestamp."},"page":{"type":"integer","minimum":1,"description":"Requested page number (for pagination, 1-based index)."},"limit":{"type":"integer","minimum":1,"description":"Number of results per page (pagination limit; enforces admin-set max value)."}},"required":[],"description":"Search, filter, and pagination request body for querying comment entities in the discussion board system.\n\nSupports flexible filtering for post, author, parent comment, keyword, creation date range, and traditional pagination controls. Used for PATCH /discussionBoard/comments endpoint."},"IPageIDiscussionBoardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page details for current result window: page number, page size, total count, and max page."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment"},"description":"Comment records for the current result window/pagination slice."}},"required":["pagination","data"],"description":"Paginated comments result page as used in patch/list operations. Follows IPage<T> pattern for comment records."},"IDiscussionBoardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) identifying the comment record."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID of the parent post associated with this comment. References discussion_board_posts.id."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the parent comment (supports threaded/nested structure). Null if this is a top-level comment."},{"type":"null"}],"description":"UUID of the parent comment (supports threaded/nested structure). Null if this is a top-level comment."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"ID of the member (author) creating the comment. References discussion_board_members.id."},"body":{"type":"string","description":"Comment content/body. Required, subject to forum/business/content rules; may support rich text/markdown per configuration."},"is_edited":{"type":"boolean","description":"True if the comment has been edited after creation. Used by UI for history/audit cues."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of comment creation (ISO 8601 format). Used for sorting, audit, and temporal analytics."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this comment (ISO 8601). Used for moderation/compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp for this comment. Null if active, set if deleted for audit/moderation compliance."},{"type":"null"}],"description":"Soft-delete timestamp for this comment. Null if active, set if deleted for audit/moderation compliance."}},"required":["id","discussion_board_post_id","discussion_board_member_id","body","is_edited","created_at","updated_at"],"description":"Represents a comment entity within the discussion board. Each comment links to a post, an author, and may be threaded via parent_id (nested comment structure).\n\nMaps 1:1 to 'discussion_board_comments' table row, including all audit fields, parent linkage, and soft-delete for moderation compliance."},"IDiscussionBoardComment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"The UUID of the parent post this comment belongs to. Refers to `discussion_board_posts.id`. Required for creating a comment and aligning it to a specific post. Provided per comment creation business rule.\n\nFulfills audit, thread, and nesting requirements as designed in the Prisma schema."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the parent comment (supports comment threading/nesting). If null, the comment is at the root of the post. Maps to `discussion_board_comments.parent_id` in the schema.\n\nSupports complex discourse with multi-level replies."},{"type":"null","format":"uuid","description":"The UUID of the parent comment (supports comment threading/nesting). If null, the comment is at the root of the post. Maps to `discussion_board_comments.parent_id` in the schema.\n\nSupports complex discourse with multi-level replies."}],"description":"The UUID of the parent comment (supports comment threading/nesting). If null, the comment is at the root of the post. Maps to `discussion_board_comments.parent_id` in the schema.\n\nSupports complex discourse with multi-level replies."},"body":{"type":"string","description":"The main content of the comment (required). Implements the atomic comment content as specified in the Prisma schema.\n\nUsed for threaded conversation, moderation, audit, and user engagement."}},"required":["discussion_board_post_id","body"],"description":"Defines the request schema for creating a new comment within a discussion board post. All fields reference the `discussion_board_comments` Prisma model and follow its atomic, 3NF-compliant structure. Used by users, mods, or admins to add threaded/nested replies to posts."},"IDiscussionBoardComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updated content of the comment. Required for content changes; must be a string representing the new (edited) text for the comment.\n\nThis business field allows explanation or correction after initial comment creation. Fulfills comment-editing and auditing requirements from the Prisma schema."},"is_edited":{"type":"boolean","description":"Tracks whether the comment has been edited after initial creation. Used to fulfill audit, user trust, and moderation transparency requirements.\n\nMaps to the `is_edited` column in the `discussion_board_comments` schema."}},"required":["body"],"description":"Defines the payload for updating (editing) a comment in the discussion board. Based on the `discussion_board_comments` Prisma schema, supporting business requirements for user content modification and audit. At minimum, a new comment body is required. The `is_edited` flag is set to reflect that an update has occurred."},"IDiscussionBoardAttachment.IRequest":{"type":"object","properties":{"file_name":{"type":"string","description":"Filter/search criterion: Name of the file attachment, used for full-text querying and matching against attachment records. Maps to `file_name` from attachments schema."},"content_type":{"type":"string","description":"Filter by MIME type of the attachment (e.g., 'application/pdf', 'image/png'). Maps to `content_type` in the attachments schema."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"Filter by the UUID of the related post to which the attachment belongs. Corresponds to `discussion_board_post_id` in the attachments table."},"discussion_board_comment_id":{"type":"string","format":"uuid","description":"Filter by the UUID of the related comment (if attached to a comment). Corresponds to `discussion_board_comment_id` in the attachments table."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Filter by the UUID of the member who uploaded the attachment. Links to `discussion_board_members.id`."},"created_at_from":{"type":"string","format":"date-time","description":"Start of date-time range for created_at. Used for filtering attachments by when they were uploaded (inclusive)."},"created_at_to":{"type":"string","format":"date-time","description":"End of date-time range for created_at. Used for filtering attachments by before/after time window."},"deleted":{"type":"boolean","description":"If true, include only soft-deleted attachments; if false, only non-deleted. Supports compliance, audit, or moderation search."},"page":{"type":"integer","description":"Pagination: Page number for paginated queries. Optional; 1-based. Default is 1."},"limit":{"type":"integer","description":"Pagination: Maximum records per page. Default subject to configuration."}},"description":"Request schema for searching, filtering, and paginating discussion board attachments (files). Provides filtering by metadata fields (filename, uploader, date range, parent post/comment), with full support for advanced search in admin/moderator tools and user-facing attachment explorers. Corresponds to business rules defined in the requirements documentation and Prisma schema.","required":[]},"IPageIDiscussionBoardAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAttachment"},"description":"The data array representing the list of attachment records returned in the page."}},"required":["pagination","data"],"description":"Container schema for paginated results of discussion board attachments. Follows the platform-wide IPage<T> type contract where T is IDiscussionBoardAttachment. Carries both the array of attachment records and page metadata."},"IDiscussionBoardAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the attachment. Primary key in the attachments table."},"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If present, the attachment is linked to the specified post. Optional (nullable) if attached to a comment instead. Corresponds to `discussion_board_post_id` from the Prisma schema."},{"type":"null","format":"uuid","description":"If present, the attachment is linked to the specified post. Optional (nullable) if attached to a comment instead. Corresponds to `discussion_board_post_id` from the Prisma schema."}],"description":"If present, the attachment is linked to the specified post. Optional (nullable) if attached to a comment instead. Corresponds to `discussion_board_post_id` from the Prisma schema."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If present, the attachment is linked to the specified comment. Optional (nullable); mutually exclusive with post_id. Refers to `discussion_board_comment_id` from the Prisma schema."},{"type":"null","format":"uuid","description":"If present, the attachment is linked to the specified comment. Optional (nullable); mutually exclusive with post_id. Refers to `discussion_board_comment_id` from the Prisma schema."}],"description":"If present, the attachment is linked to the specified comment. Optional (nullable); mutually exclusive with post_id. Refers to `discussion_board_comment_id` from the Prisma schema."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"The UUID of the member who uploaded the file. Foreign key to the members table. Enforces ownership, displaying attribution and supporting audit."},"file_name":{"type":"string","description":"Original filename of the uploaded attachment. String as provided by the uploading user."},"file_uri":{"type":"string","description":"Location URI (relative or full) for retrieving/downloading the file (e.g., S3/CDN path). Defined in the `file_uri` column in the Prisma schema."},"content_type":{"type":"string","description":"MIME type of the file, e.g., 'application/pdf', 'image/png'. Stored atomic type for compliance and content serving."},"content_hash":{"type":"string","description":"Unique hash fingerprint of the attachment's binary content (e.g., SHA-256). Ensures integrity, used for deduplication and audit."},"created_at":{"type":"string","format":"date-time","description":"Upload timestamp of the attachment, in ISO-8601/RFC3339 format. Used for chronological queries, history, and moderation."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the attachment is considered soft-deleted and not shown in standard queries. Adds reversibility for moderation, compliance, and undo workflows."},{"type":"null","format":"date-time","description":"If set, the attachment is considered soft-deleted and not shown in standard queries. Adds reversibility for moderation, compliance, and undo workflows."}],"description":"If set, the attachment is considered soft-deleted and not shown in standard queries. Adds reversibility for moderation, compliance, and undo workflows."}},"required":["id","discussion_board_member_id","file_name","file_uri","content_type","content_hash","created_at"],"description":"Schema for an attachment entity in the discussion board. All fields correspond to atomic, non-derived properties as described in the Prisma schema. Attachment can be linked to either a post or comment but not both. Also includes audit fields for compliance and moderation."},"IDiscussionBoardAttachment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post being attached to. Optional, mutually exclusive with comment_id. Ensures attachment is only ever linked to a single object (post or comment) per 3NF normalization."},{"type":"null","format":"uuid","description":"UUID of the post being attached to. Optional, mutually exclusive with comment_id. Ensures attachment is only ever linked to a single object (post or comment) per 3NF normalization."}],"description":"UUID of the post being attached to. Optional, mutually exclusive with comment_id. Ensures attachment is only ever linked to a single object (post or comment) per 3NF normalization."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being attached to. Optional, mutually exclusive with post_id. Used for supporting attachment uploads within comment threads."},{"type":"null","format":"uuid","description":"UUID of the comment being attached to. Optional, mutually exclusive with post_id. Used for supporting attachment uploads within comment threads."}],"description":"UUID of the comment being attached to. Optional, mutually exclusive with post_id. Used for supporting attachment uploads within comment threads."},"file_name":{"type":"string","description":"Original file name for the uploaded attachment (max length enforced at 80,000 per Prisma type). Required."},"file_uri":{"type":"string","description":"Location or path to the uploaded file. Must be a valid URI where the uploaded file can be accessed (e.g., S3, CDN). Required for every attachment record."},"content_type":{"type":"string","description":"MIME type of the attachment for file-handling logic (e.g., 'application/pdf', 'image/png'). Required for allowing proper content display and file validation."},"content_hash":{"type":"string","description":"Hash/fingerprint for file deduplication (e.g., SHA-256). Required at upload to prevent redundant files and ensure auditability."}},"required":["file_name","file_uri","content_type","content_hash"],"description":"Request schema for uploading a new file attachment for a post or comment on the discussion board. At least one of `discussion_board_post_id` or `discussion_board_comment_id` must be present and non-null. Additional required fields follow the Prisma definition of atomic storage and file traceability."},"IDiscussionBoardAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"Updated (or corrected) file name for the attachment. For metadata maintenance, file discovery, or clarity in UI."},"file_uri":{"type":"string","description":"Optionally provide a new URI to the file resource. Useful for file moves, updates, or storage repairs."},"content_type":{"type":"string","description":"Optionally provide a new or corrected MIME type."}},"description":"Defines the update payload schema for modifying metadata of an existing attachment record. Only file metadata is modifiable; file content or content hash remains immutable by design for integrity. All fields are passed to update only those properties allowed by business rules and platform policy.","required":[]},"IDiscussionBoardReport.IRequest":{"type":"object","properties":{"reporter_member_id":{"type":"string","format":"uuid","description":"Filter results based on the member who submitted the report (UUID). Enables searching moderator dashboards or member's report history."},"moderator_id":{"type":"string","format":"uuid","description":"Filter by the assigned or resolving moderator's UUID. Useful for tracking moderation actions, workloads, and compliance reporting."},"thread_id":{"type":"string","format":"uuid","description":"Filter by the thread (if the report was filed against a thread). Nullable, as reports may target other content types. Used in advanced moderation UX or for resolving status on a particular discussion."},"post_id":{"type":"string","format":"uuid","description":"Filter based on post reports. Nullable, per report content targeting flexibility of platform (may be unpopulated for thread/comment reports)."},"comment_id":{"type":"string","format":"uuid","description":"Filter for comment-specific reports. Nullable, supporting multi-entity moderation."},"reason":{"type":"string","description":"Filter or search for reports by string-matching on the reported reason (e.g., 'spam', 'offensive language'). Used for workload or compliance analytics."},"status":{"type":"string","description":"Filter based on report status (e.g., 'pending','resolved','dismissed'). Supports moderation status-driven workflows and audit trails."},"created_at_from":{"type":"string","format":"date-time","description":"Start datetime for reports included in the query (audit filter, used for dashboards, trend analysis, or reporting UIs)."},"created_at_to":{"type":"string","format":"date-time","description":"End datetime for reports included (audit/compliance range selection in dashboards, UX etc.)."},"page":{"type":"integer","description":"Pagination: The page of results to return (1-based, default 1). Used for managing large report result sets."},"limit":{"type":"integer","description":"Pagination: How many records per page (default subject to config/policy)."}},"description":"Supports searching, filtering, and pagination of reports submitted for moderation on the discussion board. All fields correspond to the Prisma schema for `discussion_board_reports`, enabling advanced querying by any report metadata for compliance, workflow, or UX. Used in admin and moderation panels for efficient triage and review.","required":[]},"IPageIDiscussionBoardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport"},"description":"Data array listing individual report records for this page of the result."}},"required":["pagination","data"],"description":"Paginated result schema for moderation reports in the discussion board. Follows IPage<T> pattern, where T is the report entity defined by `IDiscussionBoardReport`. Provides audit, workflow, and detail views in dashboards or compliance UIs."},"IDiscussionBoardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the report record. Unique identifier for moderation, audit, or workflow references."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member UUID who submitted the report (required for audit, notification, and compliance). Enforces traceability as per requirements."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The moderator assigned to review or resolve this report (if any). May be null until assignment/action occurs. Enables escalation workflows."},{"type":"null","format":"uuid","description":"The moderator assigned to review or resolve this report (if any). May be null until assignment/action occurs. Enables escalation workflows."}],"description":"The moderator assigned to review or resolve this report (if any). May be null until assignment/action occurs. Enables escalation workflows."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"If report refers to a thread, this is the thread UUID (nullable for other report types)."},{"type":"null","format":"uuid","description":"If report refers to a thread, this is the thread UUID (nullable for other report types)."}],"description":"If report refers to a thread, this is the thread UUID (nullable for other report types)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report's related post UUID if type is post."},{"type":"null","format":"uuid","description":"Report's related post UUID if type is post."}],"description":"Report's related post UUID if type is post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report's related comment UUID if type is comment."},{"type":"null","format":"uuid","description":"Report's related comment UUID if type is comment."}],"description":"Report's related comment UUID if type is comment."},"reason":{"type":"string","description":"Textual explanation or code for why the item was reported (e.g., 'spam', 'harassment'). Required, not null."},"status":{"type":"string","description":"Workflow status string for this report (e.g., 'pending','under_review','resolved','dismissed'). Used for dashboard status, compliance, and audit reporting."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was filed/submitted. Required. Used for compliance, workload, and history UI."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, the timestamp the report was resolved/closed (may be null for pending/open reports). Used for workflow analytics and audit."},{"type":"null","format":"date-time","description":"If present, the timestamp the report was resolved/closed (may be null for pending/open reports). Used for workflow analytics and audit."}],"description":"If present, the timestamp the report was resolved/closed (may be null for pending/open reports). Used for workflow analytics and audit."},"resolution_notes":{"oneOf":[{"type":"string","description":"Optional free-text provided by a moderator upon resolving the report, giving additional context or final decisions."},{"type":"null","description":"Optional free-text provided by a moderator upon resolving the report, giving additional context or final decisions."}],"description":"Optional free-text provided by a moderator upon resolving the report, giving additional context or final decisions."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the report is considered soft-deleted (hidden from default views but available for compliance audits)."},{"type":"null","format":"date-time","description":"If set, the report is considered soft-deleted (hidden from default views but available for compliance audits)."}],"description":"If set, the report is considered soft-deleted (hidden from default views but available for compliance audits)."}},"required":["id","reporter_member_id","reason","status","created_at"],"description":"Entity schema for a moderation report submitted on the discussion board, representing a user-flagged thread, post, or comment. Contains all atomic audit and workflow fields from the 3NF Prisma schema. Used for dashboard review panels, compliance history, and audit trails."},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reporter_member_id":{"type":"string","format":"uuid","description":"UUID of the member filing the report. Required for tracking and compliance. Refers to `discussion_board_members.id` in the database."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the thread being reported (if the subject is a thread). Nullable for post/comment reports."},{"type":"null","format":"uuid","description":"The UUID of the thread being reported (if the subject is a thread). Nullable for post/comment reports."}],"description":"The UUID of the thread being reported (if the subject is a thread). Nullable for post/comment reports."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post being reported (when applicable). Nullable for thread/comment reports."},{"type":"null","format":"uuid","description":"UUID of the post being reported (when applicable). Nullable for thread/comment reports."}],"description":"UUID of the post being reported (when applicable). Nullable for thread/comment reports."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being reported (if applicable). Nullable for thread/post reports."},{"type":"null","format":"uuid","description":"UUID of the comment being reported (if applicable). Nullable for thread/post reports."}],"description":"UUID of the comment being reported (if applicable). Nullable for thread/post reports."},"reason":{"type":"string","description":"Required string explaining or justifying why the item is being reported (e.g., 'harassment'). Fulfills business and audit compliance requirements from the schema."}},"required":["reporter_member_id","reason"],"description":"Defines the required/request payload for submitting a new content report for moderator review in the discussion board. Accepts a reference to thread, post, or comment (nullable for only one per report) plus reporter and textual reason. All fields inspired by and mapped to the `discussion_board_reports` Prisma schema ensuring auditability and workflow."},"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator assigned or acting on this report. Used for audit, role escalation, and workflow management."},"status":{"type":"string","description":"Status of the report after update (e.g., 'under_review', 'resolved', 'dismissed'). Required for status transitions and audit."},"resolution_notes":{"type":"string","description":"Optional notes clarifying the moderator's decision, required for compliance and notification. Populates `resolution_notes` in the database."}},"required":["moderator_id","status"],"description":"Payload for updating status, assigning moderator, or leaving resolution notes on a report record. Based on the workflow and audit requirements established in requirements analysis and Prisma schema. Makes audit trace and state-machine transitions explicit in the report history."},"IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"유효한 모더레이터의 UUID입니다. 이 필드는 요청이 특정 모더레이터의 행동 로그 조회에 사용됩니다.\n\n모데레이션 로그를 소유한 담당자 기준으로 필터링하는데 활용됩니다."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 스레드의 UUID로, 해당 스레드에서 발생한 모데레이션 로그만 필터링할 때 사용합니다.\n\n게시글(스레드) 단위의 모더레이션 추적에 쓰입니다."},{"type":"null"}],"description":"대상 스레드의 UUID로, 해당 스레드에서 발생한 모데레이션 로그만 필터링할 때 사용합니다.\n\n게시글(스레드) 단위의 모더레이션 추적에 쓰입니다."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 포스트(글)의 UUID입니다. 이 값이 있으면 특정 글에 대한 모더레이션 액션만을 조회합니다.\n\n포스트 단위의 모데레이션 역사 검색에 사용됩니다."},{"type":"null"}],"description":"대상 포스트(글)의 UUID입니다. 이 값이 있으면 특정 글에 대한 모더레이션 액션만을 조회합니다.\n\n포스트 단위의 모데레이션 역사 검색에 사용됩니다."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 댓글의 UUID입니다. 이 값이 있으면 특정 댓글에 관련된 모더레이션 로그만 조회합니다.\n\n댓글 관련 조치 내역만 추출할 때 사용됩니다."},{"type":"null"}],"description":"대상 댓글의 UUID입니다. 이 값이 있으면 특정 댓글에 관련된 모더레이션 로그만 조회합니다.\n\n댓글 관련 조치 내역만 추출할 때 사용됩니다."},"action":{"type":"string","description":"모데레이션 액션의 타입(예: 'hide', 'delete', 'warn', 'edit' 등)입니다. 특정 액션만 필터링하고 싶을 때 사용합니다.\n\n모더레이터가 수행한 구체적인 조치 유형을 기준으로 로그 조회가 가능하게 합니다."},"created_from":{"type":"string","format":"date-time","description":"필터 검색 시작 시점(포함)입니다(ISO8601 시각 값).\n\n이 시각 이후의 모더레이션 로그만 반환합니다."},"created_to":{"type":"string","format":"date-time","description":"필터 검색 종료 시점(포함)입니다(ISO8601 시각 값).\n\n이 시각 이전의 모더레이션 로그만 반환합니다."},"page":{"type":"integer","format":"uint32","description":"검색할 페이지 번호입니다. 기본값은 1입니다.\n\n검색 결과 페이징 시 어디서부터 시작할지 지정합니다."},"limit":{"type":"integer","format":"uint32","description":"한 페이지에 반환할 최대 결과 수입니다. 기본값은 100입니다.\n\n대량 결과에 대한 페이징 제어에 이용됩니다."}},"required":[],"description":"모더레이션 로그(조치 이력) 검색을 위한 요청 DTO입니다.\n\n특정 조건(모더레이터, 대상 스레드/포스트/댓글, 액션타입, 기간 등)으로 검색 및 페이징할 때 사용합니다. 본 DTO는 Prisma schema의 discussion_board_moderation_logs 테이블 코멘트와 운영 보안 로그 요구사항을 충실히 반영하여 설계되었습니다."},"IPageIDiscussionBoardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationLog"},"description":"해당 페이지의 모더레이션 로그 목록입니다."}},"required":["pagination","data"],"description":"discussion_board_moderation_logs 엔티티의 페이지네이션 결과 컨테이너입니다.\n\n이 타입은 Prisma discussion_board_moderation_logs 테이블과 표준 IPage 구조를 따라 페이지 정보와 레코드 리스트를 함께 제공합니다."},"IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"모더레이션 로그의 고유 식별자(UUID). discussion_board_moderation_logs의 PK로 사용됩니다."},"moderator_id":{"type":"string","format":"uuid","description":"조치 대상 모더레이터 식별자. 모더레이션 행위를 담당한 모더레이터의 UUID입니다."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 스레드(게시글)의 UUID. 이 로그가 특정 스레드에서 발생했을 때만 값이 존재합니다."},{"type":"null"}],"description":"대상 스레드(게시글)의 UUID. 이 로그가 특정 스레드에서 발생했을 때만 값이 존재합니다."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 포스트(글)의 UUID(있을 때만). 특정 포스트 조치 로그의 경우에만 값이 채워집니다."},{"type":"null"}],"description":"대상 포스트(글)의 UUID(있을 때만). 특정 포스트 조치 로그의 경우에만 값이 채워집니다."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 댓글의 UUID(있을 때만)."},{"type":"null"}],"description":"대상 댓글의 UUID(있을 때만)."},"action":{"type":"string","description":"단일 모더레이션 액션 코드(예: 'hide', 'delete', 'warn', 'edit').\n\n이 조치가 어떤 유형의 행위였는지를 나타냅니다."},"action_reason":{"oneOf":[{"type":"string","description":"조치 이유·상세 설명. 자유 텍스트로, 모더레이션 경위 설명에 사용합니다."},{"type":"null"}],"description":"조치 이유·상세 설명. 자유 텍스트로, 모더레이션 경위 설명에 사용합니다."},"created_at":{"type":"string","format":"date-time","description":"조치 로그가 발생한 시각(ISO8601). discussion_board_moderation_logs.created_at에서 관리됩니다."}},"required":["id","moderator_id","action","created_at"],"description":"모더레이션 로그 단일 엔티티 타입입니다.\n\nPrisma schema의 discussion_board_moderation_logs를 근거로, 각 조치 이벤트에 대한 상세 정보를 기록합니다. 시스템 내 모든 모더레이터·관리자 조치의 내역이 단일 레코드로 남습니다. 각 필드는 원 DB 스키마의 컬럼별 주석·설계 목적을 충실히 반영합니다."},"IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"조치 담당 모더레이터의 UUID입니다. 반드시 유효한 모더레이터 계정을 사용해야 합니다."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"조치 대상이 되는 스레드(게시글)의 UUID. 전체 조치가 스레드 단위일 때 사용합니다."},{"type":"null"}],"description":"조치 대상이 되는 스레드(게시글)의 UUID. 전체 조치가 스레드 단위일 때 사용합니다."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 포스트(UUID). 포스트에 대한 조치(삭제, 경고 등)일 때 사용합니다."},{"type":"null"}],"description":"대상 포스트(UUID). 포스트에 대한 조치(삭제, 경고 등)일 때 사용합니다."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 댓글(UUID). 댓글 특정 조치(삭제, 경고 등)에 해당하는 경우만 기록합니다."},{"type":"null"}],"description":"대상 댓글(UUID). 댓글 특정 조치(삭제, 경고 등)에 해당하는 경우만 기록합니다."},"action":{"type":"string","description":"수행한 단일 액션의 코드(예: 'hide','delete','warn','edit'). 필수 입력값입니다."},"action_reason":{"oneOf":[{"type":"string","description":"사유에 대한 설명(필요할 때만 사용). 자유 텍스트입니다."},{"type":"null"}],"description":"사유에 대한 설명(필요할 때만 사용). 자유 텍스트입니다."}},"required":["moderator_id","action"],"description":"discussion_board_moderation_logs 레코드 생성 요청 DTO입니다.\n\nPrisma discussion_board_moderation_logs 테이블 생성 조건을 따르며, 조치를 취한 모더레이터와 액션 유형이 필수로 요구됩니다. 대상(thread/post/comment) 별로 필요시 UUID를 지정하며, 설명은 선택적으로 포함할 수 있습니다."},"IDiscussionBoardModerationLog.IUpdate":{"type":"object","properties":{"action_reason":{"oneOf":[{"type":"string","description":"조치 이유 및 부연 설명(변경이 필요한 경우에만 사용)."},{"type":"null"}],"description":"조치 이유 및 부연 설명(변경이 필요한 경우에만 사용)."},"action":{"type":"string","description":"업데이트할 액션 코드('hide', 'warn' 등). 수정이 필요한 경우에 입력합니다."}},"required":[],"description":"discussion_board_moderation_logs 엔티티의 수정용 DTO입니다.\n\n지원 정책에 따라 허용된 값(action_reason, action)을 제한적으로 수정할 때 사용합니다. Prisma 스키마의 업데이트 가능 컬럼 주석을 반영했습니다."},"IDiscussionBoardModerationLog.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"삭제(soft-delete)가 성공했는지 여부.\n\n출력 결과로 성공시 true, 실패시 false를 반환합니다."},"message":{"type":"string","description":"상세 결과 메시지(성공/실패 사유 등)."},"deleted_log_id":{"oneOf":[{"type":"string","format":"uuid","description":"실제 삭제된 모더레이션 로그 UUID(성공 시에만 포함, 실패면 null)."},{"type":"null"}],"description":"실제 삭제된 모더레이션 로그 UUID(성공 시에만 포함, 실패면 null)."}},"required":["success","message"],"description":"discussion_board_moderation_logs 레코드 삭제(soft-delete) 결과 반환 DTO입니다.\n\n삭제 성공 여부, 메시지, 삭제된 로그의 식별자를 제공합니다. Prisma 스키마의 데이터 무결성·정책과 일치하는 설계입니다."},"IDiscussionBoardWarning.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"경고를 받은 대상 멤버의 UUID입니다. 특정 사용자의 경고만 조회할 때 filter로 사용됩니다."},"moderator_id":{"type":"string","format":"uuid","description":"경고를 부여한 모더레이터(담당자) UUID. 담당자 기준으로 추출하고 싶을 때 입력합니다."},"warning_type":{"type":"string","description":"경고 카테고리(예: 'spam', 'harassment' 등). 유형별로 필터하고 싶은 경우에 이용됩니다."},"created_from":{"type":"string","format":"date-time","description":"검색 기간(시작, 포함). 이 시각 이후 발급된 경고만 조회합니다."},"created_to":{"type":"string","format":"date-time","description":"검색 기간(끝, 포함). 이 시각 이전 발급된 경고만 조회합니다."},"expired":{"type":"boolean","description":"만료 여부로 필터링(만료된 경고만 추출/표시 등)."}},"required":[],"description":"유저 경고(disussion_board_warnings) 검색/조회 요청 DTO입니다.\n\nPrisma 스키마의 경고 엔티티 필드 및 검색 수요(대상/담당/타입/기간/만료 등)를 충실히 반영하여 유형별, 기간별, 만료여부 등 다각적 검색을 지원합니다."},"IPageIDiscussionBoardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardWarning"},"description":"해당 페이지의 경고(Warnings) 레코드 리스트."}},"required":["pagination","data"],"description":"discussion_board_warnings(경고 기록) 페이지네이션 결과 컨테이너 타입입니다.\n\nPrisma discussion_board_warnings 스키마와 표준 IPage 명세를 결합, 페이징 정보와 레코드 배열을 함께 제공합니다."},"IDiscussionBoardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 경고 식별자(UUID, discussion_board_warnings.id)."},"member_id":{"type":"string","format":"uuid","description":"경고를 받은 멤버의 UUID. 대상자 식별입니다."},"moderator_id":{"type":"string","format":"uuid","description":"경고를 부여한 모더레이터(UUID). 조치 담당자를 명확히 나타냄."},"warning_type":{"type":"string","description":"경고 유형(예: 'spam', 'harassment'). 플랫폼 정책에서 정의된 카테고리 씀."},"message":{"type":"string","description":"실제 경고 메시지(자유 텍스트). 경고 사유를 명확히 기술합니다."},"created_at":{"type":"string","format":"date-time","description":"경고 발행 시각(ISO8601, db기준 저장)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료 시각(있을 때만). 영구 경고(false), 임시 경고(true) 분류에 사용됨."},{"type":"null"}],"description":"만료 시각(있을 때만). 영구 경고(false), 임시 경고(true) 분류에 사용됨."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"소프트 삭제 시각. 관리상 삭제된 경우에만 입력."},{"type":"null"}],"description":"소프트 삭제 시각. 관리상 삭제된 경우에만 입력."}},"required":["id","member_id","moderator_id","warning_type","message","created_at"],"description":"유저 경고 레코드 단일 상세 엔티티 타입입니다.\n\nPrisma schema discussion_board_warnings의 모든 주요 컬럼을 포함하며, 경고 이력 관리·정책 집행·감사 용도로 활용될 수 있도록 설계되었습니다. 필드별 상세한 주석을 포함하여 운영/감사/관리 요구사항을 충실히 반영합니다."},"IDiscussionBoardWarning.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"경고를 받을 멤버의 UUID입니다. 타겟 멤버 식별자로 사용됩니다."},"moderator_id":{"type":"string","format":"uuid","description":"경고 발급 담당 모더레이터의 UUID. 반드시 활성 모더레이터 또는 관리자이어야 합니다."},"warning_type":{"type":"string","description":"경고 유형(예: 'spam', 'harassment' 등 정책별 분류 코드)."},"message":{"type":"string","description":"경고 사유 및 사용자에 전달될 공지 메시지(필수). 자유 설명."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"경고 만료 시각(있을 때 한정). null이면 영구 경고, 날짜값이면 임시 경고임을 나타냅니다."},{"type":"null"}],"description":"경고 만료 시각(있을 때 한정). null이면 영구 경고, 날짜값이면 임시 경고임을 나타냅니다."}},"required":["member_id","moderator_id","warning_type","message"],"description":"경고 발급(creation) 요청 DTO입니다.\n\nPrisma discussion_board_warnings 생성 규칙을 준수하여 대상자, 담당자, 경고 유형, 메시지는 필수이고, 만료 일시는 옵션입니다. 정책상 필요에 따라 추가 설명 포함도 가능합니다."},"IDiscussionBoardWarning.IUpdate":{"type":"object","properties":{"message":{"type":"string","description":"경고 메시지(수정용). 사유 변경이나 설명 추가 등이 가능한 필드입니다."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료 시각 변경이 필요한 경우 지정. null이면 영구 경고로 유지됩니다."},{"type":"null"}],"description":"만료 시각 변경이 필요한 경우 지정. null이면 영구 경고로 유지됩니다."}},"required":[],"description":"경고 엔티티 수정용 DTO(IUpdate 타입).\n\ndiscussion_board_warnings의 메시지, 만료 일자 등을 제한적으로 수정할 때 사용하는 데이터 구조입니다."},"IDiscussionBoardWarning.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"삭제(soft-delete) 성공 여부.\n\n성공 시 true, 실패 시 false를 반환합니다."},"message":{"type":"string","description":"상세 메시지(성공/실패 사유)."}},"required":["success","message"],"description":"discussion_board_warnings(경고) 삭제 결과 반환용 DTO입니다.\n\n삭제 처리 결과와 상세 메시지만 포함하며, Prisma 경고 정책에 따라 설계되었습니다."},"IDiscussionBoardBan.IRequest":{"type":"object","properties":{"filter":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"필터 조건. 해당 회원의 제재(밴) 기록을 조회할 때 사용되는 UUID입니다."},"moderator_id":{"type":"string","format":"uuid","description":"필터 조건. 해당 모더레이터가 발급한 제재(밴) 기록을 조회할 때 사용되는 UUID입니다."},"permanent":{"type":"boolean","description":"제재가 영구인지(참) 일시적인지(거짓)를 필터링할 때 사용합니다."},"ban_reason":{"type":"string","description":"밴 사유로 필터링할 때 사용합니다."},"created_from":{"type":"string","format":"date-time","description":"해당 일시 이후로 생성된 제재 기록만 조회."},"created_to":{"type":"string","format":"date-time","description":"해당 일시 이전에 생성된 제재 기록만 조회."}},"description":"제재 기록 필터 조건. Prisma의 discussion_board_bans 테이블의 컬럼 별 필터링을 지원합니다.","required":[]},"page":{"type":"integer","description":"조회할 페이지 번호입니다. 1부터 시작."},"limit":{"type":"integer","description":"한 페이지당 가져올 개수입니다. 기본값 20, 최대값 제한이 있을 수 있습니다."},"sort":{"type":"string","description":"정렬 조건. 예: 최신순(created_at desc), 오래된순(created_at asc) 등."}},"description":"discussion_board_bans(제재) 엔티티에 대해 검색/필터/페이지네이션을 위한 요청 타입입니다. 관리/감사/통계/정책 위반 모니터링 목적 등 다양한 행정 시나리오에서 활용되며, 필터링, 정렬, 페이징 등 다양한 옵션을 지원합니다.","required":[]},"IPageIDiscussionBoardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보. 현재 페이지, 제한, 전체 레코드 수 등 포함."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardBan"},"description":"실제 제재 기록(밴 객체)들의 배열입니다."}},"required":["pagination","data"],"description":"discussion_board_bans 테이블의 제재(밴) 엔티티 컬렉션을 페이지 단위로 반환합니다. 페이지네이션 구조(IPage)에 따라 획득 가능한 레코드 집합과 페이징 메타데이터가 포함되어 있으며, 관리자가 이전/다음 페이지로 손쉽게 이동할 수 있습니다. 각 항목에는 ban 객체 전체 상세가 포함됩니다."},"IDiscussionBoardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자. 제재(밴) 레코드의 PK. Prisma discussion_board_bans.id에 해당."},"member_id":{"type":"string","format":"uuid","description":"제재 대상 회원의 UUID. discussion_board_members.id 참조."},"moderator_id":{"type":"string","format":"uuid","description":"제재를 부과한 모더레이터(또는 관리자) UUID. discussion_board_moderators.id 참조."},"ban_reason":{"type":"string","description":"제재(밴) 사유. 예: '다수 TOS 위반', '도배/스팸'. Prisma의 ban_reason 컬럼."},"permanent":{"type":"boolean","description":"영구 제재 여부. 참이면 계속 유지, 거짓이면 expires_at에 따라 만료됨."},"created_at":{"type":"string","format":"date-time","description":"제재가 부과된 일시(ISO8601)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"제재 만료 일시. 영구제재가 아닌 경우 채워지며, 만료 후 제재가 해제됨. null이면 영구제재를 의미."},{"type":"null"}],"description":"제재 만료 일시. 영구제재가 아닌 경우 채워지며, 만료 후 제재가 해제됨. null이면 영구제재를 의미."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"소프트 삭제(복구/감사 목적) 타임스탬프. null이면 활성 ban, 날짜가 있으면 제거/해제된 ban. Prisma discussion_board_bans.deleted_at 컬럼."},{"type":"null"}],"description":"소프트 삭제(복구/감사 목적) 타임스탬프. null이면 활성 ban, 날짜가 있으면 제거/해제된 ban. Prisma discussion_board_bans.deleted_at 컬럼."}},"required":["id","member_id","moderator_id","ban_reason","permanent","created_at"],"description":"discussion_board_bans 엔티티(제재/밴 기록)를 완전히 표현하는 타입입니다. Prisma schema의 모든 컬럼이 대응되며, 각 프로퍼티는 감사 및 정책 위반 처리, 영구/임시 제재 관리, 소프트 삭제 복원/리포팅 등 용도에 사용됩니다."},"IDiscussionBoardBan.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"대상 회원 UUID. discussion_board_members.id 참조. 필수 입력."},"moderator_id":{"type":"string","format":"uuid","description":"제재 부과자(모더레이터/관리자) UUID. discussion_board_moderators.id 참조. 필수 입력."},"ban_reason":{"type":"string","description":"제재 부여 이유. 예: '다중 경고 후' 등. Prisma ban_reason 컬럼과 연동."},"permanent":{"type":"boolean","description":"영구 제재 여부. true 시 expires_at 생략, false 시 expires_at 필수."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"임시 제재일 때 만료 시각(ISO8601 변환). 영구 제재인 경우 null입니다."},{"type":"null"}],"description":"임시 제재일 때 만료 시각(ISO8601 변환). 영구 제재인 경우 null입니다."}},"required":["member_id","moderator_id","ban_reason","permanent"],"description":"새로운 제재(밴) 레코드를 생성할 때 사용하는 타입입니다. 필수 필드는 대상 대상 회원, 부과자, 사유, 영구 여부이며, 영구가 아닌 경우 expires_at 지정이 필수입니다."},"IDiscussionBoardBan.IUpdate":{"type":"object","properties":{"ban_reason":{"type":"string","description":"변경/업데이트할 제재(밴) 사유. 기존 사유에서 수정이 필요한 경우 사용."},"permanent":{"type":"boolean","description":"영구 제재 여부의 변경. false→true 또는 true→false로 업데이트가 필요한 경우."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"임시 제재일 경우 만료 시각 업데이트. ISO8601, 영구로 변경 시 null 처리."},{"type":"null"}],"description":"임시 제재일 경우 만료 시각 업데이트. ISO8601, 영구로 변경 시 null 처리."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"제재 해제/소프트 삭제 시점."},{"type":"null"}],"description":"제재 해제/소프트 삭제 시점."}},"description":"기존 제재(밴) 레코드의 특정 필드들(사유, 영구 여부, 만료일자, 삭제일시 등)을 수정하는 요청에 사용됩니다. Prisma discussion_board_bans 테이블 구조와 동기화됩니다.","required":[]},"IDiscussionBoardNotification.IRequest":{"type":"object","properties":{"filter":{"type":"object","properties":{"recipient_member_id":{"type":"string","format":"uuid","description":"필터링하려는 알림 수신자(회원) UUID입니다."},"type":{"type":"string","description":"알림 유형(댓글, 멘션, 구독 등)별로 필터링에 사용."},"read":{"type":"boolean","description":"읽음/안읽음 상태별로 필터합니다."},"delivered_from":{"type":"string","format":"date-time","description":"해당 일시 이후 배달된 알림만 조회."},"delivered_to":{"type":"string","format":"date-time","description":"해당 일시 이전에 배달된 알림만 조회."}},"description":"discussion_board_notifications 컬럼별 알림 엔터티 필터링 조건","required":[]},"page":{"type":"integer","description":"페이지 번호(1부터 시작)."},"limit":{"type":"integer","description":"한 페이지당 데이터 개수."},"sort":{"type":"string","description":"정렬 옵션. 예: 최신순 순서/읽음순 등."}},"description":"discussion_board_notifications(알림) 리스트, 필터, 페이지네이션용 요청 객체 입니다. 관리/알림 UX/알림센터 등 다양한 시나리오에서 활용됩니다.","required":[]},"IPageIDiscussionBoardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지 정보. 총 개수, 현재 페이지, 최대 페이지 등 포함."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotification"},"description":"실제 알림(Notification) 배열"}},"required":["pagination","data"],"description":"discussion_board_notifications(알림) 엔티티를 페이지 단위로 반환하는 컨테이너입니다. 목록UX, 알림센터, 관리자패널 등에서 활용. IPage 구조 표준과 호환됩니다."},"IDiscussionBoardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"알림 고유 ID (discussion_board_notifications.id)"},"recipient_member_id":{"type":"string","format":"uuid","description":"알림 수신자(회원) UUID. discussion_board_members.id 참조"},"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림을 유발한 행위 주체(댓글/멘션/관리자 등) UUID, 시스템/자동 발송 등은 null."},{"type":"null"}],"description":"알림을 유발한 행위 주체(댓글/멘션/관리자 등) UUID, 시스템/자동 발송 등은 null."},"type":{"type":"string","description":"알림 유형. 예: 'reply', 'mention', 'moderation', 'subscription'..."},"content_preview":{"oneOf":[{"type":"string","description":"이벤트 요약/미리보기 텍스트. Prisma content_preview. 예: 댓글/게시물 요약."},{"type":"null"}],"description":"이벤트 요약/미리보기 텍스트. Prisma content_preview. 예: 댓글/게시물 요약."},"url":{"type":"string","description":"알림 대상 리소스/콘텐츠 URI."},"read":{"type":"boolean","description":"알림이 읽힘 상태인지 여부."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"알림이 수신/배포된 일시(ISO8601)."},{"type":"null"}],"description":"알림이 수신/배포된 일시(ISO8601)."},"created_at":{"type":"string","format":"date-time","description":"알림 생성시각(ISO8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"알림 삭제(소프트 삭제) 일시. null이면 정상, 값 있으면 삭제됨."},{"type":"null"}],"description":"알림 삭제(소프트 삭제) 일시. null이면 정상, 값 있으면 삭제됨."}},"required":["id","recipient_member_id","type","url","read","created_at"],"description":"discussion_board_notifications(알림) 테이블의 전체 필드와 Prisma 주석/요구사항을 망라하는 알림 도메인 오브젝트. 알림 센터, 알림 상세, 정책 알림 등 다양한 UX/비즈니스에 쓰임."},"IDiscussionBoardNotification.ICreate":{"type":"object","properties":{"recipient_member_id":{"type":"string","format":"uuid","description":"알림 대상 회원 UUID. Must match discussion_board_members.id."},"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림 원인 주체(주로 회원). system 알림시 null 허용."},{"type":"null"}],"description":"알림 원인 주체(주로 회원). system 알림시 null 허용."},"type":{"type":"string","description":"알림 종류(예: reply, mention, moderation, subscription 등). 비즈니스 정책에 따라 분류."},"content_preview":{"oneOf":[{"type":"string","description":"요약(간단 메시지), 예: 댓글 미리보기."},{"type":"null"}],"description":"요약(간단 메시지), 예: 댓글 미리보기."},"url":{"type":"string","description":"알림 관련 리소스 주소(스레드, 댓글, 관리패널 등)."}},"required":["recipient_member_id","type","url"],"description":"discussion_board_notifications 테이블 알림 생성 요청용 객체. 수신 대상 회원, 알림 유형, 대상 URI 등을 필수로 명시하며, 트리거 주체, 미리보기(요약)는 옵션입니다."},"IDiscussionBoardNotification.IUpdate":{"type":"object","properties":{"read":{"type":"boolean","description":"읽음 처리 플래그. (read/unread UX, 포함해야 함)"},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"알림 배포(실제 수신) 시간."},{"type":"null"}],"description":"알림 배포(실제 수신) 시간."},"content_preview":{"oneOf":[{"type":"string","description":"알림 미리보기(요약) 내용 변경."},{"type":"null"}],"description":"알림 미리보기(요약) 내용 변경."}},"description":"알림의 상태(읽음 처리, 배포여부, 미리보기 컨텐츠 등)를 수정할 때 사용. Prisma notification 모델 주석 및 업무 시나리오와 동기화.","required":[]},"IDiscussionBoardSubscription.IRequest":{"type":"object","properties":{"filter":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"구독 엔트리의 주체/회원 UUID."},"target_type":{"type":"string","description":"구독 대상 타입(예: thread, section, tag 등)."},"target_id":{"type":"string","format":"uuid","description":"구독 리소스의 고유 식별자(UUID)."},"created_from":{"type":"string","format":"date-time","description":"해당 일시 이후 생성된 구독만 조회."},"created_to":{"type":"string","format":"date-time","description":"해당 일시 이전에 생성된 구독만 조회."}},"description":"구독 컬럼별 필터. Prisma discussion_board_subscriptions 컬럼별.","required":[]},"page":{"type":"integer","description":"페이지 번호(1부터 시작)."},"limit":{"type":"integer","description":"한 페이지당 데이터 개수."},"sort":{"type":"string","description":"정렬 옵션(최신순, 타입, 리소스 등)."}},"description":"discussion_board_subscriptions(구독) 엔티티 검색/필터/페이지네이션용 요청입니다. 구독센터, 관리페이지 등에서 사용.","required":[]},"IPageIDiscussionBoardSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSubscription"},"description":"구독 객체의 배열."}},"required":["pagination","data"],"description":"discussion_board_subscriptions(구독) 엔티티의 page 컨테이너입니다. 페이징 메타와 구독 데이터 배열을 함께 반환. UX/검색 및 관리자패널에 사용."},"IDiscussionBoardSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자입니다. Prisma discussion_board_subscriptions.id 컬럼 주석을 참조하십시오.\n\n각 구독 관계는 시스템 내에서 고유하게 식별되어야 하며, 이 필드는 그런 고유성을 보장합니다. 예시: '3eab8f08-c591-4ed5-ae2e-ac513b1234ef'. 관리자 및 사용자 인터페이스에서 참조됩니다."},"member_id":{"type":"string","format":"uuid","description":"구독자의 ID입니다(Prisma discussion_board_members.id 참조).\n\n이 필드는 구독 소유자를 기준으로 하여 어떤 사용자가 어떤 대상을 팔로우하고 있는지 추적합니다. 예: 'c715e749-f471-421b-ad29-ed43ffadc3e3'. 기본적으로 인증된 사용자 본인의 구독만 검색 및 조작할 수 있습니다."},"target_type":{"type":"string","description":"구독 대상(타입). Prisma discussion_board_subscriptions.target_type 컬럼의 요구사항을 따릅니다.\n\n예: 'thread', 'section', 'tag' 등의 구분형 문자열입니다. 시스템은 이후 새로운 타입 확장도 지원합니다. 필수값입니다."},"target_id":{"type":"string","format":"uuid","description":"구독 대상의 고유 식별자입니다. (예: 특정 스레드/섹션/태그 등)\n\n타입에 따라 연결된 테이블이 달라질 수 있습니다. 예: '74f8ce2c-089e-4923-b7a6-3283e18c4dee'."},"created_at":{"type":"string","format":"date-time","description":"구독 생성 시각. Prisma discussion_board_subscriptions.created_at 컬럼 참조.\n\n사용자, 관리자 인터페이스에서 최근 신규 구독을 정렬 시 활용합니다. ISO8601 형식, 예시: '2024-07-22T15:12:45.123Z'."}},"required":["id","member_id","target_type","target_id","created_at"],"description":"구독 엔티티. 사용자가 스레드, 섹션, 태그 등의 콘텐츠를 팔로우할 때 생성되는 관계 모델입니다.\n\nPrisma discussion_board_subscriptions 테이블 구조 및 주석을 참고하십시오. 이 엔티티는 단순히 멤버-대상 간 구독 정보를 원자적으로 저장하며, 중복(동일 사용자-타입-대상)에 대해 유니크 제약 조건을 가집니다. 예: 한 사용자는 동일한 스레드를 두 번 이상 구독할 수 없습니다.\n\n모든 구독은 생성 시점, 팔로우 동작 주체 ID, 타겟 타입/ID를 반드시 명시해야 하며, 생성된 구독 객체는 관리/사용자 포털에 노출되거나 알림 정책에 활용됩니다."},"IDiscussionBoardSubscription.ICreate":{"type":"object","properties":{"target_type":{"type":"string","description":"구독 대상 타입. 예: 'thread', 'section', 'tag' 등으로 제한될 수 있습니다. Prisma discussion_board_subscriptions.target_type 컬럼 주석과 일치.\n\n이 값은 서비스 정책에 따라 확장 가능하며, 클라이언트 UI에서 내부 값이 동적으로 결정될 수 있습니다."},"target_id":{"type":"string","format":"uuid","description":"구독하고자 하는 대상의 고유 식별자 값. Prisma discussion_board_subscriptions.target_id 컬럼 주석을 참고하십시오.\n\n해당 타입의 실제 리소스(스레드/섹션/태그 등)가 존재해야 하며, 대상의 활성화 상태/소유권 등은 비즈니스 규칙에 따라 검증 후 등록됩니다."}},"required":["target_type","target_id"],"description":"구독 생성 요청 스키마. 사용자가 새로운 리소스(스레드/섹션/태그 등)를 팔로우(구독)할 때 전달하는 정보 구조입니다.\n\nPrisma discussion_board_subscriptions 테이블의 제약 및 주석을 참고하십시오. 본 요청은 인증된 사용자의 본인 기준으로 유효합니다. 'member_id'는 세션에서 추론됩니다.\n\n최소한 구독 대상 타입과 해당 대상의 식별자를 필수로 포함해야 하며, 해당 대상이 실제로 존재해야 합니다."},"IDiscussionBoardSubscription.IUpdate":{"type":"object","properties":{"target_type":{"type":"string","description":"갱신 대상의 타입 값. 다양한 알림 정책 등 변화가 있는 경우에만 변경함. (구독 타입 변경 자체는 실무상 거의 쓰이지 않음)"}},"required":[],"description":"구독 레코드 갱신용 스키마입니다. 대부분 알림 정책 등의 프리미티브 옵션이 확장될 때 제한적 갱신에 사용되며, 실제로는 주로 삭제(구독 해제) 시 이용됩니다.\n\nPrisma discussion_board_subscriptions 테이블 컬럼 주석과 실무적 제약을 참고하세요. 현재 구조상 바뀔 파라미터는 극히 제한적입니다."},"IDiscussionBoardMention.IRequest":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"언급된 대상 사용자 ID. Prisma discussion_board_mentions.mentioned_member_id 컬럼 주석을 참고.\n\n특정 사용자를 기준으로 본인이 언급된 이력만 조회하는 경우 필터로 사용합니다."},"actor_member_id":{"type":"string","format":"uuid","description":"언급을 수행한 사용자(행위자)의 ID (Prisma discussion_board_mentions.actor_member_id 참조).\n\n내가 남에게 언급을 많이 했는지, 혹은 특정 사람의 언급만 필터링할 때 활용됩니다."},"content_type":{"type":"string","description":"언급이 발생한 컨텍스트 또는 리소스 유형. (예시: 'post', 'comment', 'thread' 등의 지원 값이 있을 수 있음)\n\nPrisma discussion_board_mentions.content_type 컬럼 주석 참고. 상세 비즈니스 룰에 따라 값이 확장 가능합니다."},"content_id":{"type":"string","format":"uuid","description":"언급이 실제로 발생한 개별 리소스(게시물, 댓글, 스레드 등)의 식별자입니다.\n\n특정 글/thread/post/comment 등에서 발생한 Mentions를 역추적하거나 UI에서 맵핑시 사용됩니다."},"created_from":{"type":"string","format":"date-time","description":"시작 날짜(검색 범위, 시작점 기준)로서 이 시간 이후의 언급만 조회됩니다. ISO 8601 표준. (선택, 미지정 시 전체)"},"created_to":{"type":"string","format":"date-time","description":"종료 날짜(검색 범위, 끝 시점 기준)로서 이 시간 이전의 언급만 조회합니다. ISO 8601 표준. (선택, 미지정 시 전체)"},"page":{"type":"integer","description":"페이지 번호. 0 기반 인덱스가 아니면, 1 기반을 사용한다고 UI에 명시 필요. 기본(옵션) 값 미지정시 1 또는 0. Pagination의 일부분입니다."},"limit":{"type":"integer","description":"페이지 단위 레코드 개수 제한. 기본값 UI 정책에 따름. 미지정시 20~100 권장. Pagination UX 제어에 사용됩니다."}},"required":[],"description":"Mention(사용자 언급) 검색/조회용 파라미터 스키마입니다. 고급 검색/필터/페이지네이션 모두 지원합니다.\n\nPrisma discussion_board_mentions 테이블 주석과 비즈니스 활용 케이스에 따라, 언급을 받은 사람, 한 사람, 컨텐츠 종류, 시점, 목록 등 다양한 필터와 함께 사용 가능합니다.\n\n주요 활용 시나리오는 '내가 언급된 모든 이력', '내가 누구를 얼마나 자주 @멘션 했는지', '특정 게시물/댓글에서 언급된 사람 목록', '특정 기간에 발생한 Mentions' 등입니다.\n\n각 값은 optional이며 필요 시 자동으로 누락 패스가 가능합니다."},"IPageIDiscussionBoardMention":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMention"},"description":"해당 페이지에 포함된 Mention 레코드 목록. 각 아이템은 상세 Mention 엔티티로 아래 참조"}},"required":["pagination","data"],"description":"Mention(사용자 언급) 목록을 페이지 단위로 반환하는 패키지 컨테이너 스키마.\n\nIPage 구조에 맞추어 pagination(페이지정보), data(실제 레코드 목록)를 반환합니다. UI/백엔드 API에서 집계용, 무한 스크롤, 페이지 인덱서와 사용됩니다."},"IDiscussionBoardMention":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자. Prisma discussion_board_mentions.id 참조.\n\n각 언급 이벤트를 식별하는 UUID입니다."},"mentioned_member_id":{"type":"string","format":"uuid","description":"언급된 사용자 ID. Prisma discussion_board_mentions.mentioned_member_id 컬럼.\n\n알림, UX 하이라이트, 통계 분석에서 사용됩니다."},"actor_member_id":{"type":"string","format":"uuid","description":"언급(멘션)한 사용자(행위자)의 회원 ID. Prisma discussion_board_mentions.actor_member_id 주석 참고.\n\n알림 발신자 및 커뮤니티 활동 분석에 사용됩니다."},"content_type":{"type":"string","description":"언급이 발생한 컨텐츠 구분자. 예: 'post', 'comment', 'thread' 등. 혹은 향후 추가 확장된 값이 허용될 수 있습니다.\n\n실제 리소스 테이블명과 일치할 필요는 없습니다."},"content_id":{"type":"string","format":"uuid","description":"언급이 직접 발생한 대상 개별 리소스 식별자. 예: 'b44f4c19-2e46-487c-a870-8916b57e9d72'."},"created_at":{"type":"string","format":"date-time","description":"언급 발생 시각. ISO8601 포맷.\n\nUX 정렬, 알림 기한 판단 등에 활용합니다."}},"required":["id","mentioned_member_id","actor_member_id","content_type","content_id","created_at"],"description":"Mention(사용자 언급) 엔티티. 한 사용자가 게시물, 댓글, 스레드 등에서 다른 사용자를 '@유저명' 방식으로 언급했을 때 생성되는 이벤트 기록입니다.\n\nPrisma discussion_board_mentions 테이블 구조, 주석 참조. 멤버간 직접 언급, 타겟 구분, 컨텍스트 추적 및 알림 UX 연계가 가능합니다. 모든 언급은 발생자, 대상자, 발생 위치, 리소스 타입, 언제 발생했는지 원자적으로 기록됩니다. 중복방지 및 레코드 단일성을 유지합니다."},"IDiscussionBoardMention.ICreate":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"언급 타겟 회원 ID 값. Prisma discussion_board_mentions.mentioned_member_id 필드에 대응.\n\n특정인의 알림/멘션 UX 연결을 위함. 필수값."},"content_type":{"type":"string","description":"멘션이 발생한 위치의 구분자. 예: 'post', 'comment', 'thread' 등. Prisma discussion_board_mentions.content_type 필드.\n\n필수값. 클라이언트에서 유형별로 분기해야 함."},"content_id":{"type":"string","format":"uuid","description":"멘션 실제 발생 리소스의 고유 식별자. 해당 위치에 해당하는 UUID.\n\n예: 특정 게시글/댓글/스레드 등. 필수값."}},"required":["mentioned_member_id","content_type","content_id"],"description":"Mentions 생성 API에 사용되는 요청 본문 타입입니다. '@멘션' 등에서 사용자간 직접 언급시 호출되는 스키마로, 주로 언급 타겟, 컨텍스트, 위치 등만 명시하면 됩니다.\n\nPrisma 테이블 discussion_board_mentions의 주석 및 컬럼 상세 설명과 맞추어, 모든 생성 이벤트는 발생 위치, 대상, 소유주 등을 명확히 기록해야 합니다. 발생자(member_id)는 인증 정보에서 추론(백엔드) 처리됩니다."},"IDiscussionBoardMention.IUpdate":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"언급 대상자 ID. 관리/감사 목적으로만 변경 가능."},"content_type":{"type":"string","description":"멘션 발생 위치 변경. 실무상 거의 사용되지 않음."},"content_id":{"type":"string","format":"uuid","description":"멘션 적용 위치 UUID. 특수한 예외 시 감사 또는 관리자가 조작할 수 있음."}},"required":[],"description":"Mention Event에 대한 수정 요청 스키마입니다.\n\n주로 인증, 관리, 예외적 감사(예: 잘못된 멘션 복구) 등에서만 일부 필드 갱신이 가능합니다. 실무상 생성 후 수정은 매우 드물지만, 정책상 지원 구조는 보유합니다."},"IDiscussionBoardVoteType.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"투표 유형 기본 코드(예: 'upvote', 'downvote' 등. Prisma discussion_board_vote_types.code 컬럼).\n\n검색, 필터 시 이 값으로 투표 타입 종류를 한정할 때 사용합니다."},"name":{"type":"string","description":"투표 유형의 한글/영문 명칭(예: 'Upvote', 'Downvote' 등). 부분 일치 검색 시 활용.\n\nPrisma discussion_board_vote_types.name 컬럼 주석 참조."},"created_from":{"type":"string","format":"date-time","description":"생성 시점 필터: 해당 시각 이후 생성된 투표타입만 반환. ISO 8601."},"created_to":{"type":"string","format":"date-time","description":"생성 시점 필터: 해당 시각 이전 생성된 투표타입만 반환. ISO 8601."},"page":{"type":"integer","description":"페이지 번호(페이지네이션 적용 시 1기준 혹은 0기준 명시 필요)."},"limit":{"type":"integer","description":"페이지 당 데이터 개수(기본값 20~100)"}},"required":[],"description":"투표 유형 리스트/검색 API의 요청 파라미터 구조입니다.\n\nPrisma discussion_board_vote_types 테이블 구조 및 컬럼별 제약/작성 규칙을 따르고, 관리자/모더레이터 UI, 필터링, 통계/집계등에 활용할 수 있습니다. 각 필드는 선택(Option)이며, 생략 시 전체 리스트를 반환합니다."},"IPageIDiscussionBoardVoteType":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVoteType"},"description":"해당 페이지의 Vote Type(투표 유형) 목록. 투표 종류 확장, UI 드롭다운 및 관리화면에 사용."}},"required":["pagination","data"],"description":"투표 유형 리스트를 페이징하여 반환하는 기준 컨테이너 스키마입니다.\n\nIPage 인터페이스 구조를 준수하며, 결과의 실제 데이터(투표 유형 배열)와 페이지네이션 메타 정보를 포함합니다."},"IDiscussionBoardVoteType":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"투표 유형 고유 식별자. Prisma discussion_board_vote_types.id 컬럼 설명 참조."},"code":{"type":"string","description":"투표 유형 시스템 코드. (예: 'upvote', 'downvote', 'like' 등). Prisma discussion_board_vote_types.code 컬럼.\n\nAPI/클라이언트는 고정 코드값으로 투표 유형을 식별하며, 동일값이 중복될 수 없습니다."},"name":{"type":"string","description":"투표 유형의 사용자-facing 명칭. 예: 'Upvote', '좋아요'. Prisma discussion_board_vote_types.name 컬럼 설명 일치."},"description":{"oneOf":[{"type":"string","description":"해당 투표 유형의 추가 설명. 관리자/기획을 위한 문장 등. Prisma discussion_board_vote_types.description 컬럼 참조.\n\n생략 가능. 예: '긍정 투표임을 나타냄.'"},{"type":"null"}],"description":"해당 투표 유형의 추가 설명. 관리자/기획을 위한 문장 등. Prisma discussion_board_vote_types.description 컬럼 참조.\n\n생략 가능. 예: '긍정 투표임을 나타냄.'"},"created_at":{"type":"string","format":"date-time","description":"투표 유형 생성일시. ISO 8601 포맷. Prisma discussion_board_vote_types.created_at 주석/컬럼 활용.\n\n관리 도구, 정렬, 통계 등에 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"최근 업데이트 일시. Prisma discussion_board_vote_types.updated_at 컬럼 설명 참조.\n\n투표 유형 갱신, 정책 반영 변동 시 활용 및 감사로그에 첨부."}},"required":["id","code","name","created_at","updated_at"],"description":"투표 유형 개체 스키마. 시스템의 모든 가능한 투표(추천/비추천/공감 등) 유형을 정의하는 마스터 데이터 엔티티입니다.\n\nPrisma discussion_board_vote_types 테이블과 주석을 기반으로, 실제 투표 생성시 참조됩니다. 코드, 이름은 반드시 고유하며, 설명은 옵션입니다. 생성 및 갱신 정보는 감사, 정책 관리, UI 표시, 통계 분석 등에 활용됩니다."},"IDiscussionBoardVoteType.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신규 투표 유형 코드. 유니크. 예: 'upvote', 'dislike', 'neutral' 등. Prisma discussion_board_vote_types.code 컬럼과 일치.\n\n프로그래매틱 단축키 및 정책 전파시 사용."},"name":{"type":"string","description":"노출명(한글/영문 혼용 가능). 예: '공감', '비공감', 'Like', 'Dislike'. Prisma discussion_board_vote_types.name 컬럼 설명 일치."},"description":{"oneOf":[{"type":"string","description":"관리자 등 내부 정책 공유 목적의 투표 유형 설명. Prisma discussion_board_vote_types.description 컬럼 참조.\n\n필수 아님."},{"type":"null"}],"description":"관리자 등 내부 정책 공유 목적의 투표 유형 설명. Prisma discussion_board_vote_types.description 컬럼 참조.\n\n필수 아님."}},"required":["code","name"],"description":"투표 유형 신규 등록 요청 구조입니다. 투표 코드, 이름, 설명(옵션)을 명확히 지정해야 하며, 시스템은 코드/이름의 중복을 허용하지 않습니다.\n\n투표 타입의 추가/변경 이벤트는 관리자 화면, 정책 관리 등에 반영되며, 실제 생성시 audit trail 및 메타 정보를 남깁니다."},"IDiscussionBoardVoteType.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for the vote type.\n\nMaps to `discussion_board_vote_types.code` in Prisma schema. This code is used for programmatic reference (such as 'upvote' or 'downvote'), and must be unique within the system. Used as a foreign key in the votes table to distinguish different types of reactions. For example: 'upvote', 'downvote', 'like'."},"name":{"type":"string","description":"Display name for the vote type.\n\nCorresponds to `discussion_board_vote_types.name` in the database. This is the human-friendly label shown in the UI, in email notifications, or analytics dashboards. For example: 'Upvote', 'Downvote', 'Like'. This must also be unique and descriptive to prevent confusion among users."},"description":{"oneOf":[{"type":"string","description":"Description of this vote type.\n\nMaps to `discussion_board_vote_types.description` in Prisma schema. This is intended for admin and developer reference, and may be surfaced in configuration screens or API documentation. Helps clarify the meaning or intended use of the vote type. Example: 'Indicates a positive endorsement of the post by a member.' This field is optional and can be null."},{"type":"null","description":"Description of this vote type.\n\nMaps to `discussion_board_vote_types.description` in Prisma schema. This is intended for admin and developer reference, and may be surfaced in configuration screens or API documentation. Helps clarify the meaning or intended use of the vote type. Example: 'Indicates a positive endorsement of the post by a member.' This field is optional and can be null."}],"description":"Description of this vote type.\n\nMaps to `discussion_board_vote_types.description` in Prisma schema. This is intended for admin and developer reference, and may be surfaced in configuration screens or API documentation. Helps clarify the meaning or intended use of the vote type. Example: 'Indicates a positive endorsement of the post by a member.' This field is optional and can be null."}},"required":["code","name"],"description":"Update object for an existing vote type in the discussion board.\n\nMatches updatable fields from `discussion_board_vote_types` (code, name, description), supporting admin-side management of voting/reaction types. All updates are logged for audit, and uniqueness constraints apply.\n\nFor more, see requirements section on voting features and moderation controls."},"IDiscussionBoardVote.IRequest":{"type":"object","properties":{"voter_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the member (voter) whose votes are being queried.\n\nMaps to `discussion_board_votes.voter_id`. Used to filter for specific user's votes. Supports moderation auditing and displays user's vote history in profile views."},{"type":"null","format":"uuid","description":"The UUID of the member (voter) whose votes are being queried.\n\nMaps to `discussion_board_votes.voter_id`. Used to filter for specific user's votes. Supports moderation auditing and displays user's vote history in profile views."}],"description":"The UUID of the member (voter) whose votes are being queried.\n\nMaps to `discussion_board_votes.voter_id`. Used to filter for specific user's votes. Supports moderation auditing and displays user's vote history in profile views."},"vote_type_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the vote type for query filtering.\n\nMaps to `discussion_board_votes.vote_type_id`. Enables filtering votes by type (e.g., only 'upvote' or only 'downvote'). Used in analytics and moderation investigations."},{"type":"null","format":"uuid","description":"The UUID of the vote type for query filtering.\n\nMaps to `discussion_board_votes.vote_type_id`. Enables filtering votes by type (e.g., only 'upvote' or only 'downvote'). Used in analytics and moderation investigations."}],"description":"The UUID of the vote type for query filtering.\n\nMaps to `discussion_board_votes.vote_type_id`. Enables filtering votes by type (e.g., only 'upvote' or only 'downvote'). Used in analytics and moderation investigations."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The thread UUID to filter votes on a specific thread.\n\nMaps to `discussion_board_votes.thread_id`. Use this to search for votes attached to a particular thread, or aggregate counts for that discussion."},{"type":"null","format":"uuid","description":"The thread UUID to filter votes on a specific thread.\n\nMaps to `discussion_board_votes.thread_id`. Use this to search for votes attached to a particular thread, or aggregate counts for that discussion."}],"description":"The thread UUID to filter votes on a specific thread.\n\nMaps to `discussion_board_votes.thread_id`. Use this to search for votes attached to a particular thread, or aggregate counts for that discussion."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"The post UUID to filter votes attached to a specific post.\n\nMaps to `discussion_board_votes.post_id`."},{"type":"null","format":"uuid","description":"The post UUID to filter votes attached to a specific post.\n\nMaps to `discussion_board_votes.post_id`."}],"description":"The post UUID to filter votes attached to a specific post.\n\nMaps to `discussion_board_votes.post_id`."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"The comment UUID to filter votes related to a comment.\n\nMaps to `discussion_board_votes.comment_id`."},{"type":"null","format":"uuid","description":"The comment UUID to filter votes related to a comment.\n\nMaps to `discussion_board_votes.comment_id`."}],"description":"The comment UUID to filter votes related to a comment.\n\nMaps to `discussion_board_votes.comment_id`."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter votes created after this date-time.\n\nEnables time-window analytics and compliance review. ISO 8601-formatted."},{"type":"null","format":"date-time","description":"Filter votes created after this date-time.\n\nEnables time-window analytics and compliance review. ISO 8601-formatted."}],"description":"Filter votes created after this date-time.\n\nEnables time-window analytics and compliance review. ISO 8601-formatted."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter votes created before this date-time.\n\nISO 8601 format, supports time-based data retrieval and reporting."},{"type":"null","format":"date-time","description":"Filter votes created before this date-time.\n\nISO 8601 format, supports time-based data retrieval and reporting."}],"description":"Filter votes created before this date-time.\n\nISO 8601 format, supports time-based data retrieval and reporting."},"page":{"oneOf":[{"type":"integer","description":"Page number for paginated responses."},{"type":"null","description":"Page number for paginated responses."}],"description":"Page number for paginated responses."},"limit":{"oneOf":[{"type":"integer","description":"Page size for paginated responses. Defaults to admin or API-set values if null."},{"type":"null","description":"Page size for paginated responses. Defaults to admin or API-set values if null."}],"description":"Page size for paginated responses. Defaults to admin or API-set values if null."}},"required":[],"description":"Request object used to query votes with advanced filtering, pagination, and search.\n\nSupports querying by multiple identifiers, time-windows, and pagination controls to allow moderators/admins to efficiently search or report on votes. Fully supports the Prisma schema (`discussion_board_votes`) and aligns with audit and reporting requirements."},"IPageIDiscussionBoardVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVote"},"description":"Array of vote objects on this page."}},"required":["pagination","data"],"description":"Paginated result set of votes from the discussion_board_votes entity.\n\nCombines a pagination object and a list of votes, used in responses to vote list/search endpoints. Based on requirements for scalable, audit-compliant reporting. See IPage<T> standard pattern."},"IDiscussionBoardVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this vote record.\n\nPrimary key from `discussion_board_votes.id`. Used for all audit, update, and retrieval operations. Immutable after creation."},"voter_id":{"type":"string","format":"uuid","description":"UUID of the voting member.\n\nForeign key to Members (`discussion_board_votes.voter_id`). Indicates which member cast the vote, supports enforcement of business logic, analytics, and visibility policies."},"vote_type_id":{"type":"string","format":"uuid","description":"UUID representing the specific vote type.\n\nForeign key to Vote Types (`discussion_board_votes.vote_type_id`). Dictates whether the vote is an 'upvote', 'downvote', 'like', etc."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread being voted on (if applicable).\n\nPoints to `discussion_board_votes.thread_id`. Optional, as not all votes are about threads – some may be on posts or comments ("},{"type":"null","format":"uuid","description":"Thread being voted on (if applicable).\n\nPoints to `discussion_board_votes.thread_id`. Optional, as not all votes are about threads – some may be on posts or comments ("}],"description":"Thread being voted on (if applicable).\n\nPoints to `discussion_board_votes.thread_id`. Optional, as not all votes are about threads – some may be on posts or comments ("},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post being voted on (if applicable).\n\nReferences `discussion_board_votes.post_id`. Used where votes can be associated with posts directly (e.g., replies/answers)."},{"type":"null","format":"uuid","description":"Post being voted on (if applicable).\n\nReferences `discussion_board_votes.post_id`. Used where votes can be associated with posts directly (e.g., replies/answers)."}],"description":"Post being voted on (if applicable).\n\nReferences `discussion_board_votes.post_id`. Used where votes can be associated with posts directly (e.g., replies/answers)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment being voted on – optional.\n\nReferences `discussion_board_votes.comment_id`."},{"type":"null","format":"uuid","description":"Comment being voted on – optional.\n\nReferences `discussion_board_votes.comment_id`."}],"description":"Comment being voted on – optional.\n\nReferences `discussion_board_votes.comment_id`."},"created_at":{"type":"string","format":"date-time","description":"When vote was first created.\n\nChronological timestamp for audit trails and analytics. Required by security policy and to satisfy traceability needs."},"updated_at":{"type":"string","format":"date-time","description":"When the vote was last updated (such as in correcting a misvote).\n\nTracks edit events (rare), as required by audit policy."}},"required":["id","voter_id","vote_type_id","created_at","updated_at"],"description":"Represents a single vote within the discussion board.\n\nFollows the structure of `discussion_board_votes` and includes all atomic, audit-relevant fields. Each vote references a voter, a type, and may point to a thread, post, or comment. Timestamps support compliance and analytics."},"IDiscussionBoardVote.ICreate":{"type":"object","properties":{"vote_type_id":{"type":"string","format":"uuid","description":"Vote type (e.g., upvote/downvote/like).\n\nRequired, references `discussion_board_vote_types.id`."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread to vote on (optional).\n\nPoints to `discussion_board_threads.id`. Only one of thread_id, post_id, or comment_id should be specified per vote to avoid ambiguity."},{"type":"null","format":"uuid","description":"Thread to vote on (optional).\n\nPoints to `discussion_board_threads.id`. Only one of thread_id, post_id, or comment_id should be specified per vote to avoid ambiguity."}],"description":"Thread to vote on (optional).\n\nPoints to `discussion_board_threads.id`. Only one of thread_id, post_id, or comment_id should be specified per vote to avoid ambiguity."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post to vote on (optional).\n\nPoints to `discussion_board_posts.id`. Used for votes attached directly to a post (e.g., reply to an answer)."},{"type":"null","format":"uuid","description":"Post to vote on (optional).\n\nPoints to `discussion_board_posts.id`. Used for votes attached directly to a post (e.g., reply to an answer)."}],"description":"Post to vote on (optional).\n\nPoints to `discussion_board_posts.id`. Used for votes attached directly to a post (e.g., reply to an answer)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment to vote on (optional).\n\nPoints to `discussion_board_comments.id`. Used for supporting comment-level votes and moderation workflows."},{"type":"null","format":"uuid","description":"Comment to vote on (optional).\n\nPoints to `discussion_board_comments.id`. Used for supporting comment-level votes and moderation workflows."}],"description":"Comment to vote on (optional).\n\nPoints to `discussion_board_comments.id`. Used for supporting comment-level votes and moderation workflows."}},"required":["vote_type_id"],"description":"Request object to create a new vote (upvote/downvote/like/etc) for discussion board content.\n\nMust indicate a vote type and point to a valid content object (thread, post, or comment), as enforced by the business rules captured in the Prisma schema and requirements."},"IDiscussionBoardVote.IUpdate":{"type":"object","properties":{"vote_type_id":{"oneOf":[{"type":"string","format":"uuid","description":"Vote type (e.g., switch upvote to downvote).\n\nUUID from `discussion_board_vote_types.id`. Allows correction of reaction (change type but not content object)."},{"type":"null","format":"uuid","description":"Vote type (e.g., switch upvote to downvote).\n\nUUID from `discussion_board_vote_types.id`. Allows correction of reaction (change type but not content object)."}],"description":"Vote type (e.g., switch upvote to downvote).\n\nUUID from `discussion_board_vote_types.id`. Allows correction of reaction (change type but not content object)."}},"required":[],"description":"Allows user (or admin) to update an existing vote entry, such as correcting a misselected reaction type.\n\nUpdates must be logged for compliance purposes."},"IDiscussionBoardTag.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"Filter/search by tag name (supports search-as-you-type).\n\nEnables full-text or exact tag name matching; mapped to `discussion_board_tags.name` in the schema."},{"type":"null","description":"Filter/search by tag name (supports search-as-you-type).\n\nEnables full-text or exact tag name matching; mapped to `discussion_board_tags.name` in the schema."}],"description":"Filter/search by tag name (supports search-as-you-type).\n\nEnables full-text or exact tag name matching; mapped to `discussion_board_tags.name` in the schema."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter tags created after this timestamp.\n\nUsed in audit reporting and analytics dashboards."},{"type":"null","format":"date-time","description":"Filter tags created after this timestamp.\n\nUsed in audit reporting and analytics dashboards."}],"description":"Filter tags created after this timestamp.\n\nUsed in audit reporting and analytics dashboards."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter tags created before this timestamp.\n\nSupports reporting on tag creation activity in a given period."},{"type":"null","format":"date-time","description":"Filter tags created before this timestamp.\n\nSupports reporting on tag creation activity in a given period."}],"description":"Filter tags created before this timestamp.\n\nSupports reporting on tag creation activity in a given period."},"page":{"oneOf":[{"type":"integer","description":"Page number for paginated search results."},{"type":"null","description":"Page number for paginated search results."}],"description":"Page number for paginated search results."},"limit":{"oneOf":[{"type":"integer","description":"Number of results per page."},{"type":"null","description":"Number of results per page."}],"description":"Number of results per page."}},"required":[],"description":"Filter and search request object for retrieving a paginated list of tags from the discussion_board_tags table.\n\nIncludes search, range, and pagination fields for fine-grained control over listings. Used by both user- and admin-facing tag browsers."},"IPageIDiscussionBoardTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTag"},"description":"Array of tag objects returned on this page."}},"required":["pagination","data"],"description":"Paginated list structure for tag search/list results.\n\nFollows IPage<T> generic type usage, adapted for tags."},"IDiscussionBoardTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The primary key identifying the tag.\n\nMaps to `discussion_board_tags.id`. This value should be unique for every tag entity, and is used for linking/disambiguation by APIs and UI."},"name":{"type":"string","description":"The primary, unique name for this tag.\n\nCorrelates with `discussion_board_tags.name` (unique index). Used for searching, displaying, and associating content with tags. Example: 'inflation', 'macroeconomics', 'legislation'."},"description":{"oneOf":[{"type":"string","description":"Optional description detailing the tag's scope/purpose.\n\nMatches `discussion_board_tags.description` in Prisma schema. Gives users or admins more context about tag application or preferred usage."},{"type":"null","description":"Optional description detailing the tag's scope/purpose.\n\nMatches `discussion_board_tags.description` in Prisma schema. Gives users or admins more context about tag application or preferred usage."}],"description":"Optional description detailing the tag's scope/purpose.\n\nMatches `discussion_board_tags.description` in Prisma schema. Gives users or admins more context about tag application or preferred usage."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when tag was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last modification to this tag."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete time, or null if still active."},{"type":"null","format":"date-time","description":"Soft delete time, or null if still active."}],"description":"Soft delete time, or null if still active."}},"required":["id","name","created_at","updated_at"],"description":"Represents a tag used for categorizing or filtering threads/posts in the discussion board.\n\nSupports the core tag taxonomy as described in requirements, linking to content and discoverability features. Includes all atomic, auditable fields from Prisma's `discussion_board_tags`."},"IDiscussionBoardTag.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"The name of the tag to create. Must be unique.\n\nFulfills business logic and schema index on `discussion_board_tags.name`. Example: 'deflation', 'stimulus'."},"description":{"oneOf":[{"type":"string","description":"Optional description giving guidance on tag usage, business context, or preferred semantics.\n\nCorrelates to `discussion_board_tags.description`. May be leveraged by tag browsers and admin panels."},{"type":"null","description":"Optional description giving guidance on tag usage, business context, or preferred semantics.\n\nCorrelates to `discussion_board_tags.description`. May be leveraged by tag browsers and admin panels."}],"description":"Optional description giving guidance on tag usage, business context, or preferred semantics.\n\nCorrelates to `discussion_board_tags.description`. May be leveraged by tag browsers and admin panels."}},"required":["name"],"description":"Request payload for creating a new tag in the system.\n\nRequires a unique tag name, option for providing description/context. Matches creation constraints and audit policies in the system."},"IDiscussionBoardTag.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"The name for this tag after update. Must remain unique.\n\nCorresponds with `discussion_board_tags.name` (unique index constraint)."},{"type":"null","description":"The name for this tag after update. Must remain unique.\n\nCorresponds with `discussion_board_tags.name` (unique index constraint)."}],"description":"The name for this tag after update. Must remain unique.\n\nCorresponds with `discussion_board_tags.name` (unique index constraint)."},"description":{"oneOf":[{"type":"string","description":"The description for this tag after update. Optional for business-contextual annotation."},{"type":"null","description":"The description for this tag after update. Optional for business-contextual annotation."}],"description":"The description for this tag after update. Optional for business-contextual annotation."}},"required":[],"description":"Update object for modifying tag metadata (name/description) in the system.\n\nAllows admins or mods to edit tag taxonomy and maintain clarity on usage or topic coverage. Supports audit trail requirements."},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"Category name filter (exact or partial match search).\n\nMaps to `discussion_board_categories.name`. Used for advanced search/selector UIs and content authoring workflows."},{"type":"null","description":"Category name filter (exact or partial match search).\n\nMaps to `discussion_board_categories.name`. Used for advanced search/selector UIs and content authoring workflows."}],"description":"Category name filter (exact or partial match search).\n\nMaps to `discussion_board_categories.name`. Used for advanced search/selector UIs and content authoring workflows."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Limit results to categories created after this time.\n\nFor audit/compliance reporting."},{"type":"null","format":"date-time","description":"Limit results to categories created after this time.\n\nFor audit/compliance reporting."}],"description":"Limit results to categories created after this time.\n\nFor audit/compliance reporting."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Limit category search to those created before this date.\n\nAudit and admin reporting workflows leverage this for lifecycle management."},{"type":"null","format":"date-time","description":"Limit category search to those created before this date.\n\nAudit and admin reporting workflows leverage this for lifecycle management."}],"description":"Limit category search to those created before this date.\n\nAudit and admin reporting workflows leverage this for lifecycle management."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination, defaults to 1."},{"type":"null","description":"Page number for pagination, defaults to 1."}],"description":"Page number for pagination, defaults to 1."},"limit":{"oneOf":[{"type":"integer","description":"Number of records to return per page, subject to API constraints."},{"type":"null","description":"Number of records to return per page, subject to API constraints."}],"description":"Number of records to return per page, subject to API constraints."}},"required":[],"description":"Advanced filter/search criteria for listing or locating categories in the discussion board system.\n\nAll major fields support GET/search list requirements for admin and user pathways. Maps directly to Prisma's `discussion_board_categories` atomic columns."},"IPageIDiscussionBoardCategory":{"type":"object","description":"A paginated container for Discussion Board Categories. This follows the standard IPage<T> interface and is used to provide a collection of category entities along with metadata about pagination.\n\nThis schema is referenced in endpoints that return category listings for pagination, filtering, and navigation within the discussion board system. It aligns with collection response requirements outlined in both functional and non-functional requirements documents.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata, specifying the current page, record limit, total records, and total pages. This enables efficient navigation and user experience for large sets of categories."},"data":{"type":"array","description":"List of category entities returned for the given page/filter criteria. Each element is a full category object, referencing IDiscussionBoardCategory.","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory"}}},"required":["pagination","data"]},"IDiscussionBoardCategory":{"type":"object","description":"Represents a category for classifying threads and posts in the discussion board system. This schema implements the requirements for organizing discussions by topic areas (e.g., 'Politics', 'Economics').\n\nIt strictly follows 3NF design principles in the database and serves as a core navigation point within the UI and for supporting search/filter workflows. All fields are atomic and correspond directly to columns in the discussion_board_categories table as defined in the Prisma schema.","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key uniquely identifying this category record. Used as the global reference for category operations, joining with other tables/entities."},"name":{"type":"string","description":"Unique, human-readable category label (e.g., 'Economics'). This field is mandatory and must be unique within the site."},"description":{"oneOf":[{"type":"string","description":"Optional text that defines the purpose or scope of this category. Supports usability, accessibility, and richer UX. May be null if not set."},{"type":"null"}],"description":"Optional text that defines the purpose or scope of this category. Supports usability, accessibility, and richer UX. May be null if not set."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when this category was created. Used for audits, chronological sorting, and admin review."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this category record. Tracks recent changes for audit and UI context."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp. If set, this record is marked deleted and not shown in most lists. Required for reversibility and compliance."},{"type":"null"}],"description":"Soft delete timestamp. If set, this record is marked deleted and not shown in most lists. Required for reversibility and compliance."}},"required":["id","name","created_at","updated_at"]},"IDiscussionBoardCategory.ICreate":{"type":"object","description":"Request body for creating a new Discussion Board Category. Implements required and optional fields as needed by the board taxonomy expansion features and admin controls.\n\nThe schema validates uniqueness and existence of the category name, and allows descriptive text to accompany the new category. Used from admin backend or possibly in advanced moderator workflows.","properties":{"name":{"type":"string","description":"New category's unique name (must not conflict with existing categories). Required."},"description":{"oneOf":[{"type":"string","description":"Optional description helping distinguish what is included in this category. May be omitted or null."},{"type":"null"}],"description":"Optional description helping distinguish what is included in this category. May be omitted or null."}},"required":["name"]},"IDiscussionBoardCategory.IUpdate":{"type":"object","description":"Request body for updating an existing Discussion Board Category. Enables editors/admins to change category attributes (such as name, description) while observing uniqueness and audit constraints.\n\nSoft-delete is managed separately (not here). Update operation requires only name and/or description (no id change).","properties":{"name":{"type":"string","description":"New value for the category name (must remain unique). Optional—only supply if changing."},"description":{"oneOf":[{"type":"string","description":"New description for the category; supports explanation, editorial notes, or more detail. May be null to clear existing value."},{"type":"null"}],"description":"New description for the category; supports explanation, editorial notes, or more detail. May be null to clear existing value."}},"required":[]},"IDiscussionBoardSearchHistory.IRequest":{"type":"object","description":"Request query body for listing/filtering/paginating search histories. Supports advanced analytics, user search review, and UX enhancement.\n\nFields allow filtering by keyword, actor ID, context, or date range. Used primarily by admins/moderators for review or by users for their own history. This schema is referenced for endpoints that require complex filter/search/pagination for search history records.","properties":{"page":{"oneOf":[{"type":"integer","description":"Optional page number for pagination. If omitted or null, defaults to first page."},{"type":"null","description":"Optional page number for pagination. If omitted or null, defaults to first page."}],"description":"Optional page number for pagination. If omitted or null, defaults to first page."},"limit":{"oneOf":[{"type":"integer","description":"Optional page size for pagination. Defaults to 100 if not specified."},{"type":"null","description":"Optional page size for pagination. Defaults to 100 if not specified."}],"description":"Optional page size for pagination. Defaults to 100 if not specified."},"keyword":{"oneOf":[{"type":"string","description":"Filter history items by keywords entered in past searches. Supports partial and multi-keyword matching. Null for no filtering."},{"type":"null","description":"Filter history items by keywords entered in past searches. Supports partial and multi-keyword matching. Null for no filtering."}],"description":"Filter history items by keywords entered in past searches. Supports partial and multi-keyword matching. Null for no filtering."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by search actor (user or guest) UUID. Useful for reviewing/searching a particular user's or guest's history. Null for no filter."},{"type":"null","format":"uuid","description":"Filter by search actor (user or guest) UUID. Useful for reviewing/searching a particular user's or guest's history. Null for no filter."}],"description":"Filter by search actor (user or guest) UUID. Useful for reviewing/searching a particular user's or guest's history. Null for no filter."},"search_context":{"oneOf":[{"type":"string","description":"Context field for scoping search history, such as 'thread_list', 'homepage', etc. Useful in analytics and auditing."},{"type":"null","description":"Context field for scoping search history, such as 'thread_list', 'homepage', etc. Useful in analytics and auditing."}],"description":"Context field for scoping search history, such as 'thread_list', 'homepage', etc. Useful in analytics and auditing."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for search history created after this date (inclusive). ISO 8601 format. Null if not filtering by starting date."},{"type":"null","format":"date-time","description":"Filter for search history created after this date (inclusive). ISO 8601 format. Null if not filtering by starting date."}],"description":"Filter for search history created after this date (inclusive). ISO 8601 format. Null if not filtering by starting date."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for search history created before this date (inclusive). ISO 8601 format. Null if not filtering by end date."},{"type":"null","format":"date-time","description":"Filter for search history created before this date (inclusive). ISO 8601 format. Null if not filtering by end date."}],"description":"Filter for search history created before this date (inclusive). ISO 8601 format. Null if not filtering by end date."}},"required":[]},"IPageIDiscussionBoardSearchHistory":{"type":"object","description":"A paginated container for Discussion Board Search Histories, following the standard IPage<T> convention.\n\nUsed to provide efficient browsing, filtering, and analytics for user/guest search activity. This schema is referenced in endpoints that display lists of search logs to admins, moderators, or users in account history/analytics UIs.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata object providing details about the current result page, total records, and limits. Essential for UX consistency and analytics."},"data":{"type":"array","description":"List of search history record objects. Each represents a single search action and full search context.","items":{"$ref":"#/components/schemas/IDiscussionBoardSearchHistory"}}},"required":["pagination","data"]},"IDiscussionBoardSearchHistory":{"type":"object","description":"Represents an individual search history record in the discussion board platform. Aligns closely with the normalized structure in the discussion_board_search_histories table. Records the search event, actor, parameters, and timing.\n\nReferenced by analytics, account review, personalization, and moderation features.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this search history record. Used as the primary key and for joining/querying details."},"actor_id":{"type":"string","format":"uuid","description":"ID of the guest or member who performed the search. Enforces audit, analytics, and compliance requirements."},"keyword":{"type":"string","description":"The keyword(s) inputted for the search event. Reflects the search's main query string. Required, atomic, non-derived."},"filters":{"oneOf":[{"type":"string","description":"Serialized (JSON/string) filter object used for the search. Represents structured search filters (e.g., tag/category/date). Null if simple keyword only."},{"type":"null"}],"description":"Serialized (JSON/string) filter object used for the search. Represents structured search filters (e.g., tag/category/date). Null if simple keyword only."},"search_context":{"oneOf":[{"type":"string","description":"Optional string indicating the context of this search (e.g., which board UI or page originated the search). Null means unscoped context."},{"type":"null"}],"description":"Optional string indicating the context of this search (e.g., which board UI or page originated the search). Null means unscoped context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the search was performed. Supports analytics, audit, and sorting."}},"required":["id","actor_id","keyword","created_at"]},"IDiscussionBoardSearchHistory.ICreate":{"type":"object","description":"Request schema for creating a new Search History event. Used whenever a user or guest performs a board search. Validates required details, and captures all necessary metadata for downstream analytics and audit.\n\nAll fields map directly to the normalized table columns; only filters and context may be null.","properties":{"actor_id":{"type":"string","format":"uuid","description":"UUID of the guest or member performing the search. Required for linking search to the correct account/session."},"keyword":{"type":"string","description":"The main search term(s) used in the board query. Must be non-null and represent the query exactly as input by the user/guest."},"filters":{"oneOf":[{"type":"string","description":"Serialized structured search filter as used in advanced queries (e.g., tag, date, category). Null for basic search."},{"type":"null"}],"description":"Serialized structured search filter as used in advanced queries (e.g., tag, date, category). Null for basic search."},"search_context":{"oneOf":[{"type":"string","description":"Optional indicator of the context where the search was performed (page/ui context/etc). Null for standard/global context."},{"type":"null"}],"description":"Optional indicator of the context where the search was performed (page/ui context/etc). Null for standard/global context."}},"required":["actor_id","keyword"]},"IDiscussionBoardSearchHistory.IUpdate":{"type":"object","description":"Request body for updating an existing search history event. Used by admins or the original actor for correcting search metadata, filter rectification, or compliance adjustments.\n\nMay only update keyword, filters, or search_context; not id/actor_id/created_at. All updatable fields are optional—supply only those to be changed.","properties":{"keyword":{"type":"string","description":"Replacement string for the original search keyword(s). Optional—only provide if updating."},"filters":{"oneOf":[{"type":"string","description":"Replacement serialized filter object. Null clears the filter; optional when not updating."},{"type":"null"}],"description":"Replacement serialized filter object. Null clears the filter; optional when not updating."},"search_context":{"oneOf":[{"type":"string","description":"Replacement or update for search context metadata. Optional, null to clear."},{"type":"null"}],"description":"Replacement or update for search context metadata. Optional, null to clear."}},"required":[]}},"authorization":[{"name":"guest","description":"Unauthenticated user who can browse public discussion topics and view threads, but cannot post or interact."},{"name":"member","description":"Registered user who can participate in discussions, create posts, comment, and vote on content."},{"name":"moderator","description":"User with elevated privileges to manage content, oversee discussions, moderate posts and comments, and enforce community guidelines."},{"name":"administrator","description":"User with full system control, including user management, site settings, moderator oversight, and policy enforcement."}]}}
{"operations":[{"specification":"Fetches a paginated list of discussion board categories. Works with the discussion_board_categories table, returning all active and inactive categories with details such as name, description, parent category, and status. Enables clients to present available categories and their hierarchies to users. Supports scenario where all users (including guests) may browse category listings for the board's topic structure.","path":"/discussionBoard/categories","method":"get","description":"Retrieves a paginated list of all discussion board categories from the discussion_board_categories schema. The response includes the full list of categories, each with metadata such as name, description, parent category linkage, active status, and timestamps.\n\nThis endpoint is public and designed for both logged-in and guest users. It enables navigation of the discussion board structure and supports UIs that visualize topic hierarchies. Security is not enforced because category browsing is a non-sensitive operation, and no personal user data is exposed.\n\nBehaviorally, it reflects the latest active/inactive category statuses and parent-child relations. If categories are nested (using parent_id), responses should preserve hierarchical context, but always as a flat list. For bulk/batch operations or advanced filtering, use the corresponding PATCH endpoint.\n\nFailure scenarios include database connectivity errors or malformed pagination queries, which should produce user-friendly error responses.","summary":"List and paginate all discussion board categories from the database.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of all categories in the discussion board, each with hierarchy and active status.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Returns paginated, filtered, and sorted discussion board categories based on complex request criteria. Implements advanced search, filter, and sort logic over the discussion_board_categories table. Enables UIs to support search by category name, active status, creation/update time, or hierarchical relationships.","path":"/discussionBoard/categories","method":"patch","description":"Performs advanced filtering, searching, and sorting over the discussion_board_categories entries, supporting UI scenarios where users or admins require search, sort, or filter beyond simple listing.\n\nThe endpoint accepts structured request parameters for filtering category name (with partial matching), selection by active/inactive status, date range queries, and parent_id-based hierarchical filtering. Sorting options may include created_at, updated_at, or name. Pagination is enforced to prevent overwhelming responses.\n\nThis endpoint is critical for administration UIs, analytics tools, or advanced browsing for large category sets. Security is open, as categories are non-sensitive, but filtering may be more useful for admin roles. Misuse may be mitigated by rate limiting or authentication in future deployments.","summary":"Advanced search, filtering, and sorting of discussion board categories with pagination.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for querying categories.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Filtered and sorted paginated list of categories matching search criteria.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Retrieves a single discussion board category by its unique identifier. Pulls all category details from discussion_board_categories, including name, optional description, parent category, status, and timestamps. Used when accessing category details for view/edit interfaces or resolving parent-child context in navigation and settings.","path":"/discussionBoard/categories/{categoryId}","method":"get","description":"Fetches full details of a single category using its unique ID from the discussion_board_categories table. The returned object contains category name, description, parent_id, is_active, and all system metadata.\n\nUse this to power category detail dialogs, edit interfaces, and navigational breadcrumbs. Security: since category data contains no sensitive or user-specific information, this endpoint is public. Ownership or administrative privileges are not required for category lookup.\n\nHandles not-found or invalid ID errors gracefully, returning a 404 or informative error object. Categories with parent_id set point to other categories, enabling client-side construction of category trees.","summary":"Retrieve details for a single discussion board category by its ID.","parameters":[{"name":"categoryId","description":"Unique identifier for the target discussion board category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested category, including name, parent, and status.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new discussion board category in the discussion_board_categories table. Accepts required and optional fields such as name, description, parent_id (for hierarchy), and is_active flag. Used by admins to define new major topic areas in the board's structure. Enforces uniqueness on name and validates reference to parent category if provided.","path":"/discussionBoard/admin/categories","method":"post","description":"Allows an authorized administrator to create a new category in the discussion_board_categories schema. All required/non-null fields (name, is_active) must be provided, with optional fields for parent_id and description.\n\nThis endpoint supports UI scenarios where admins configure the topic/category structure. Only users with administrative roles should access this operation. Validation includes enforcing category name uniqueness and verifying that the optional parent_id, if used, refers to an existing category.\n\nUpon success, the endpoint returns the new category object. If a name collision or invalid parent_id is detected, an error is returned. All creation events are logged in the audit system for compliance and troubleshooting.","summary":"Create a new discussion board category (admin-only).","parameters":[],"requestBody":{"description":"Details for the new category, including name, status, and optional parent/description.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"The created category with all system metadata and references.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing discussion board category defined in discussion_board_categories, located by its unique ID. Allows changing fields such as name, description, parent_id, or is_active status. Enforces uniqueness constraint on name and validates parent category, if provided. Designed for admin role to modify board structure and update visibility or hierarchy of categories.","path":"/discussionBoard/admin/categories/{categoryId}","method":"put","description":"Enables administrative modification of an existing category identified by categoryId in the discussion_board_categories schema. Editable fields include all mutable properties: name, description, parent_id, and is_active. Name uniqueness and valid parent_id (must refer to another existing category or be null) are enforced.\n\nThis endpoint is restricted to admin users, as changes may affect the navigation, visibility, and permissions structure for the entire board. Every update is logged in the audit system, including old and new values. Errors are returned for name collisions or invalid parent references.\n\nSecurity: Only admins may update or reorganize categories. On success, the updated category object is returned, including all metadata. Edge cases include circular parent_id assignments, which must be rejected with clear error responses.","summary":"Update an existing discussion board category by ID (admin-only).","parameters":[{"name":"categoryId","description":"Unique identifier for the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the category: name, description, parent, or status.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated category object with all system metadata and references.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes an existing category from the discussion_board_categories table using its unique identifier. This is a hard delete: on success, the category row is permanently removed (no deleted_at or is_deleted field in schema). Admins should use with caution, as all relationships may be affected. Middleware/audit triggers must log the deletion, and the action should be forbidden if the category is referenced elsewhere (foreign-key error).","path":"/discussionBoard/admin/categories/{categoryId}","method":"delete","description":"Permanently deletes a discussion board category from the database using its categoryId. As the schema lacks a soft delete or logical removal indicator, this operation performs a hard delete, removing the record entirely and cascading as defined by the schema's referential integrity.\n\nUsage of this endpoint is restricted to admins. Deletion of a category may affect related category_moderators, audit_logs, system_notices, and topics due to cascading foreign key relationships. The operation must fail with a clear error if the category is referenced by dependent records that prevent deletion. All deletions should be fully audited for accountability.\n\nSecurity and compliance: Hard delete is irreversible, so clients should require confirmation. Any attempt to delete a non-existent or protected category results in a 404 or permission-denied error.","summary":"Permanently remove a discussion board category by ID (admin-only, hard delete).","parameters":[{"name":"categoryId","description":"Unique identifier of the category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Fetches all category moderator assignments for a given category, as per the discussion_board_category_moderators table. Supports list and pagination, reporting moderator assignments for administrative review or UI rendering. Used to display or audit category-level moderator coverage.","path":"/discussionBoard/admin/categories/{categoryId}/categoryModerators","method":"get","description":"Returns a paginated list of moderator assignments specific to a category (categoryId), as defined in the discussion_board_category_moderators schema. This operation is mostly for admin or board management UIs that review moderation coverage per category.\n\nEach moderator assignment object provides a cross-reference between a category and a moderator, including creation time for auditing. Security is moderate: public read-only for transparency is possible, but admin or moderator role may be required for sensitive audit data in production systems.\n\nEdge cases include missing/invalid categoryId or absence of assignments for a given category, which results in an empty list or a not-found error.","summary":"List all moderator assignments for a specific category.","parameters":[{"name":"categoryId","description":"Unique identifier of the category whose moderators are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Page of moderator assignments for the category, including assigned moderator IDs and creation times.","typeName":"IPageIDiscussionBoardCategoryModerator"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Performs an advanced, paginated search of moderator assignments within a specific category using the discussion_board_category_moderators table. Enables admins to filter assignments by assigned moderator, created_at, or other fields as reflected in the schema. Supports dashboard and compliance workflows for managing category-level moderation.","path":"/discussionBoard/admin/categories/{categoryId}/categoryModerators","method":"patch","description":"Provides a paginated, filtered, and sortable list of moderator assignments for a specified category (categoryId). Accepts filtering criteria including by moderator ID and date assigned, and supports pagination of results when large numbers of moderator assignments exist.\n\nDesigned for admin dashboards and audit tools, this endpoint ensures only authorized roles may perform such searches. Any found assignments include all fields from discussion_board_category_moderators, including moderator IDs and timestamps.\n\nSecurity is enforced for admins only. Edge cases include invalid categoryId, out-of-range pagination, or filtering for non-existent moderators, returning empty results or error objects.","summary":"Filtered, paginated search of moderator assignments for a category (admin only).","parameters":[{"name":"categoryId","description":"Unique identifier of the target category for moderator assignment search.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination info for finding moderators in a category.","typeName":"IDiscussionBoardCategoryModerator.IRequest"},"responseBody":{"description":"Filtered and paginated moderator assignment list for the category.","typeName":"IPageIDiscussionBoardCategoryModerator"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches full details for a single moderator assignment row from the discussion_board_category_moderators table, identified by {categoryId} and {categoryModeratorId}. Shows which moderator is assigned, when, and to which category. Powers edit, detail, and audit UIs for category-moderator relationships.","path":"/discussionBoard/admin/categories/{categoryId}/categoryModerators/{categoryModeratorId}","method":"get","description":"Retrieves the details of a single moderator assignment for a given category-moderator pair, from the discussion_board_category_moderators schema. The returned object gives assignment metadata, including links to the moderator and category, and the creation timestamp.\n\nPrimarily for admin UIs, audits, or for editors managing moderation assignments. Security is enforced: only admins may view individual moderator assignments, as membership in this table reflects permissions coverage at the category level.\n\nEdge cases include not-found errors when the assignment is missing or category-moderator IDs don't match an actual relationship.","summary":"Get details about a specific moderator assignment for a category (admin).","parameters":[{"name":"categoryId","description":"Unique identifier for the associated category.","schema":{"type":"string","format":"uuid"}},{"name":"categoryModeratorId","description":"Unique ID for this moderator assignment row.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single moderator assignment details, including moderator ID, category ID, and assignment metadata.","typeName":"IDiscussionBoardCategoryModerator"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new moderator assignment in the discussion_board_category_moderators table, connecting a moderator to a specific category. Used by admins to grant moderation rights at the category level. Requires validation that both category and moderator IDs exist and are valid.","path":"/discussionBoard/admin/categories/{categoryId}/categoryModerators","method":"post","description":"Enables an admin to create a new moderator assignment for a given category, as written to the discussion_board_category_moderators schema. The request must supply both the category ID (from path) and the target moderator ID (in body). Validation ensures the target moderator exists and this category-moderator pair is not already present (unique constraint).\n\nAudit logs must capture assignment events for compliance.\n\nSecurity: Only admin users may create such assignments, because this confers moderation rights and affects role coverage. Duplicate or invalid assignments return errors and no changes are made. On success, the full assignment object with timestamps is returned.","summary":"Assign a moderator to a category (admin-only).","parameters":[{"name":"categoryId","description":"ID of category to which the moderator will be assigned.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment details, including target moderator's ID (and any audit metadata if required).","typeName":"IDiscussionBoardCategoryModerator.ICreate"},"responseBody":{"description":"Newly created moderator assignment object.","typeName":"IDiscussionBoardCategoryModerator"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing moderator assignment in discussion_board_category_moderators table, identified by {categoryId} and {categoryModeratorId}. Admins may use this to change the associated moderator (e.g. in reassignment cases); in practice, preferred is to delete and recreate, but update is supported if business rules allow. Ensures referential and unique constraint compliance.","path":"/discussionBoard/admin/categories/{categoryId}/categoryModerators/{categoryModeratorId}","method":"put","description":"Allows updating of a moderator assignment in discussion_board_category_moderators for a specific category. The fields that may be updated include moderator_id (for reassignment); ensuring both category and moderator IDs exist, and unique constraints (no duplicate assignments) are preserved.\n\nPrimarily intended for admin dashboard workflows, role correction or reassignment events. The operation is audited. Attempting to reassign to a non-existent moderator, or to duplicate an extant assignment, will fail.\n\nOnly admins can update moderator assignments. On success, the updated assignment object is returned.","summary":"Update a moderator assignment for a category (admin-only).","parameters":[{"name":"categoryId","description":"ID of the category for the moderator assignment.","schema":{"type":"string","format":"uuid"}},{"name":"categoryModeratorId","description":"ID for the moderator assignment record being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating moderator assignment (mainly new moderator_id, if changed).","typeName":"IDiscussionBoardCategoryModerator.IUpdate"},"responseBody":{"description":"The updated moderator assignment details.","typeName":"IDiscussionBoardCategoryModerator"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Removes a moderator assignment from a category, performing a hard delete in discussion_board_category_moderators by unique ID. No 'deleted_at' or 'is_deleted' flag exists in schema; the row is forcibly removed. Used for admin role to revoke category-level moderator rights with cascading audit and permission effects.","path":"/discussionBoard/admin/categories/{categoryId}/categoryModerators/{categoryModeratorId}","method":"delete","description":"Deletes a moderator assignment from the specified category by categoryModeratorId and categoryId in discussion_board_category_moderators. Since the schema does not support soft delete, this operation removes the row entirely. Done by admin users to revoke moderation rights for a category.\n\nThis is used in admin UIs for permission management or in disciplinary workflows. Each delete event is audited for traceability. Deletion of non-existent or invalid assignments throws an error (404 or permission denied). Related permissions are updated in the underlying system.\n\nHard deletes are irreversible, so clients should require user confirmation. Audit records ensure that deleted assignments remain traceable for compliance.","summary":"Remove a moderator assignment from a category (admin-only, hard delete).","parameters":[{"name":"categoryId","description":"ID of the category from which the moderator assignment is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"categoryModeratorId","description":"ID of the moderator assignment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve all discussion_board_settings entries, supporting the display of board-level configuration options. This operation fetches all persisted settings from the discussion_board_settings table, enabling administration panels to view current configuration. Each setting has a unique key and a text-based value, and optional description metadata. The settings table ensures that only atomic, normalized fields are fetched—no derived or user-specific data. Sensitive data should be filtered based on the requesting user's role. The endpoint supports pagination and optional filtering and works in conjunction with the patch/search variant for more complex queries.","path":"/discussionBoard/admin/settings","method":"get","description":"Retrieve all configuration settings for the discussion board. This operation reads from the discussion_board_settings table, returning all setting entries ordered as appropriate (e.g., by created_at or key). Sensitive or advanced settings may be filtered based on the requesting user's authorization role.\n\nAuthorization is restricted to users with the 'admin' role. Audit logging records access to this endpoint. If no settings exist, returns an empty array.\n\nThis endpoint is paired with advanced search/patch, create, update, and delete operations for complete board configuration management.","summary":"Get all discussion board settings (discussion_board_settings table).","parameters":[],"requestBody":null,"responseBody":{"description":"A list of all discussion board settings records.","typeName":"IPageIDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Advanced search for discussion_board_settings entries using patch method, which allows complex filtering, sorting, and pagination. This endpoint supports querying based on the setting key, value, or creation/update timestamps. The settings table stores persistent board options such as feature toggles and registration controls. Only atomic fields defined in the schema are supported for filters. Primarily for administrative dashboards requiring fine-grained search beyond simple listing.","path":"/discussionBoard/admin/settings","method":"patch","description":"Enables advanced, paginated, and filtered retrieval of board settings via POST-like search semantics. Pulls from the discussion_board_settings table, leveraging indices on created_at for performance. Typical usage includes searching for settings by partial key, date range, or active state. Results are sorted and paged according to request criteria.\n\nAccessible only by users with 'admin' role. Audit logs are recorded. Error responses are triggered for invalid query syntax or excessive range requests.\n\nThis endpoint complements the get/list variant with flexible query construction for administrative tools.","summary":"Search discussion board settings (discussion_board_settings table) with filters, pagination, and sort.","parameters":[],"requestBody":{"description":"Patch search criteria and pagination for settings retrieval.","typeName":"IDiscussionBoardSetting.IRequest"},"responseBody":{"description":"Paginated and filtered results of discussion settings records matching criteria.","typeName":"IPageIDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a single discussion_board_settings entry by its primary key (setting id). Operates on the discussion_board_settings table. Allows administrators to view the details of a specific configuration setting, including key, value, description, and timestamps. Used when drilling into an individual board setting for review or edit, often in a settings UI. Only values that exist in the schema are returned; sensitive values should be restricted or masked based on admin policy.","path":"/discussionBoard/admin/settings/{settingId}","method":"get","description":"Fetch a specific discussion board setting by its UUID identifier from the discussion_board_settings table. Returns the key, value, and description fields, as well as creation and update timestamps, per the Prisma schema. Ensures referential integrity for administrative view or management workflows.\n\nRestricted to users with 'admin' role. Triggers audit log entries for access events. Responds with appropriate error messages if the ID does not correspond to an existing setting.\n\nThis endpoint is typically used along with update, delete, and create endpoints for settings management.","summary":"Get a specific discussion board setting by ID (discussion_board_settings table).","parameters":[{"name":"settingId","description":"The unique identifier (UUID) for the board setting entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current data for the requested board setting entry.","typeName":"IDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new setting row in the discussion_board_settings table. Accepts setting_key (unique), setting_value, optional description, and sets created_at/updated_at automatically. Used exclusively for administrative configuration—e.g., toggling registration, board-wide feature flags, or policy changes. Business logic ensures key uniqueness and value integrity (text-based for flexibility). Only admins may create or modify persistent settings. Operation triggers audit logs and may validate certain keys for reserved/critical settings.","path":"/discussionBoard/admin/settings","method":"post","description":"Create a new persistent configuration option for the board in the discussion_board_settings table. Accepts setting_key, value, and optional description in the request body. Uniqueness is enforced on the key, and creation/update timestamps are set by the system. If a reserved or critical key is used, additional validation may apply.\n\nRole-restricted to 'admin'. Upon creation, an audit log entry is recorded. Returns the full entry including assigned id and timestamps. Produces errors for key conflicts or schema violations.\n\nComplements update and list endpoints for settings lifecycle management.","summary":"Create a new discussion board setting (discussion_board_settings table).","parameters":[],"requestBody":{"description":"New board setting data, including key, value, and optional description.","typeName":"IDiscussionBoardSetting.ICreate"},"responseBody":{"description":"Created settings row including id, timestamps, and all fields.","typeName":"IDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update a specific discussion_board_settings row identified by its unique id. Allows admins to update the setting_key (if permissible), value, and description as needed. Supports auditing by recording update actions and timestamps. The PATCH method is not used for single-row edits, aligning with RESTful convention for PUT. All changes are limited to schema fields defined for discussion_board_settings. Triggers validation on key uniqueness and reserved keys where needed.","path":"/discussionBoard/admin/settings/{settingId}","method":"put","description":"Update an existing configuration entry in the discussion_board_settings table. Request body must conform to schema and may update key, value, and description. Only fields present in the schema may be updated. The endpoint is strictly for administrators and will validate permission, as well as uniqueness for any updated key field.\n\nAudit logging is enforced, and errors are returned for conflicts, invalid ids, or schema violations. Returns the full updated settings row for confirmation.\n\nComplements the create and delete endpoints for settings lifecycle management.","summary":"Update a specific discussion board setting (discussion_board_settings table) by ID.","parameters":[{"name":"settingId","description":"Unique identifier (UUID) for the board setting entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the settings row (fields per schema).","typeName":"IDiscussionBoardSetting.IUpdate"},"responseBody":{"description":"Updated settings row including all fields and timestamps.","typeName":"IDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete a discussion_board_settings row by its unique id. This is a hard delete operation—since no soft-delete fields are present in the Prisma schema, the setting is completely removed from the table. Used with caution to remove obsolete or erroneous configuration. Triggers audit logging for all deletion events. Only available to 'admin' role users. The API returns no content if deletion succeeds, or an error otherwise. All referenced data is removed; integrity is maintained by the unique constraint on id.","path":"/discussionBoard/admin/settings/{settingId}","method":"delete","description":"Permanently remove a discussion board setting from the settings table using its unique id. This hard delete (since deleted_at is not present in the schema) means the setting is fully removed from the system. Primarily used during administration or when board configuration requirements change.\n\nDeletion is restricted to users with the 'admin' role. All deletes are logged, and errors are returned if the row does not exist or deletion fails for integrity reasons.\n\nWorks in conjunction with the create, update, and get endpoints for lifecycle management.","summary":"Delete (hard delete) a discussion board setting by ID (discussion_board_settings table).","parameters":[{"name":"settingId","description":"Unique identifier (UUID) for the setting to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve all discussion_board_audit_logs records for administrative or compliance purposes. Provides an index of audit log entries capturing actions performed by admins, moderators, or the system, including configuration changes, moderator assignment, suspension actions, and more. All fields strictly match the audit log Prisma schema. Supports optional filtering by actor, target, action_type, or created_at. Highly sensitive; only available to admin users. Large volumes of logs should be paginated and delayed for performance. Complements PATCH for advanced query.","path":"/discussionBoard/admin/auditLogs","method":"get","description":"Fetch a complete list of all audit log records from the discussion_board_audit_logs table. Returns detailed data including actor, target, action_type, action_detail, and timestamp. Authorization is strictly enforced ('admin' only).\n\nAudit logs are essential for compliance, troubleshooting, and transparency. Any suspicious activity is traceable here. The endpoint should support secure access with error reporting for unauthorized or failed requests. Empty result if no logs exist.\n\nPairs with the patch/search endpoint for advanced log review.","summary":"Get all audit log records for the board (discussion_board_audit_logs table).","parameters":[],"requestBody":null,"responseBody":{"description":"List of all audit log records including detailed metadata.","typeName":"IPageIDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Advanced search and filtered retrieval of discussion_board_audit_logs using PATCH to support query by actor, target, action_type, or date range. This supports investigative workflows for administration, compliance review, or system auditing. Returns paginated audit log entries based strictly on the schema fields (id, actor, target, action_type, action_detail, created_at). Enables advanced UI filter and search features for logs. Security and rate limits are paramount.","path":"/discussionBoard/admin/auditLogs","method":"patch","description":"Search and filter audit logs for the board via PATCH body, supporting criteria like actor or action_type, date range, or free-text search on detail fields. Leverages indices on action_type and created_at for scalability. Returns paginated results for UI consumption.\n\nRestricted to 'admin' authorization. All accesses are logged, and audit trails are enforced for review or forensic needs. Errors are returned for invalid queries or excessive requests.\n\nThis pairs with the standard get/list for complete log management.","summary":"Search/filter audit log records for the board (discussion_board_audit_logs table) with advanced query.","parameters":[],"requestBody":{"description":"Search criteria for querying and pagination of audit logs.","typeName":"IDiscussionBoardAuditLog.IRequest"},"responseBody":{"description":"Paginated metadata/results for logs matching query/filter request.","typeName":"IPageIDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a single audit log by its unique UUID id for detailed review. Pulls one discussion_board_audit_logs entry, including all columns (actor, target, action_type, action_detail, created_at). Mostly used by administrator or compliance roles investigating specific events. Ensures all referenced data is current and accurate per Prisma schema. May be linked in the UI from a search or logs table. Authorization and logging are enforced.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"get","description":"Fetch a specific audit log record by its id (UUID), reading all core columns as described in the Prisma schema. Provides administrators with detailed insight into individual board event history—essential for compliance/audit investigations.\n\nStrictly requires 'admin' authorization. If the ID is not found, returns error. Responds with no additional calculation or related object data.\n\nThis operation is commonly paired with the log list/search and update endpoints for full log review and adjustment.","summary":"Get a specific audit log record by ID (discussion_board_audit_logs table).","parameters":[{"name":"auditLogId","description":"Unique UUID identifier for the desired audit log record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete data for the specific audit log record.","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Add a new audit log record to the discussion_board_audit_logs table. Supports compliance, change-tracking, and operational transparency by recording configuration or security-related actions. Accepts a complete or partial details according to the Prisma schema fields. Usually triggered during significant board changes (e.g., moderator assigned, role revoked, setting altered). Only administrators are permitted to create audit log entries directly. Automated audit logs are typically generated at the service level rather than manually entering values via this API outside of testing/development.","path":"/discussionBoard/admin/auditLogs","method":"post","description":"Insert a new event record to the audit logs table for the discussion board. The request body must match schema with valid actor/target/action_type/action_detail. Timestamps are assigned by the system. Use is generally restricted to administrative tools or service-layer hooks for audit record insertion. Error reporting includes validation and metadata requirements.\n\nAvailable only to 'admin' role. On success returns the new record, on error explains the violation.\n\nComplements log review/edit endpoints for compliance.","summary":"Create a new audit log entry (discussion_board_audit_logs table).","parameters":[],"requestBody":{"description":"Event metadata and details for new audit log record, matching schema exactly.","typeName":"IDiscussionBoardAuditLog.ICreate"},"responseBody":{"description":"Created audit log event, with system-assigned timestamps and ids.","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing audit log record by its unique id, modifying fields according to the audit log Prisma schema (action_type, action_detail, etc). Used for corrections or administrative annotation—e.g., appending additional detail to explain an event after-the-fact. Only allowed for 'admin' role, with update actions themselves being logged for traceability. Updates are rejected if schema validation fails. Responds with the complete updated record.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"put","description":"Edit the fields of a specific audit log event in the discussion_board_audit_logs table, identified by UUID. Accepts update data matching the schema (modifying action_type, detail, or actor/target links if needed). All changes are fully validated and historical changes should trigger additional audit events for traceability.\n\nEndpoint is restricted to administrators. Errors return for invalid update or conflict. Success returns the new full log object for confirmation.\n\nComplements listing, creation, and deletion for complete auditing.","summary":"Update a specific audit log record by ID (discussion_board_audit_logs table).","parameters":[{"name":"auditLogId","description":"Unique UUID identifier of the audit log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields/data for log update. Must match schema; partial or full field updates allowed per business rules.","typeName":"IDiscussionBoardAuditLog.IUpdate"},"responseBody":{"description":"The updated audit log record as stored.","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete an audit log record by its UUID id. The Prisma schema for audit logs does not have a soft-delete field, so this is a hard delete: the log entry is permanently removed from the table. Used rarely, typically for GDPR compliance, error correction, or cleanup scenarios. Deletion is strictly role-protected and triggers secondary audit logging for regulatory traceability. Related events are unaffected. Returns no content unless deletion fails, in which case an error is provided.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"delete","description":"Permanently remove an audit log entry from the audit log table by UUID id. Since deleted_at is not present, the log is removed completely and not recoverable. Use only for error correction or as required by compliance. Access is strictly for admins only.\n\nAll deletions are themselves logged. Return is empty on success; otherwise, error reported.\n\nUseful only with create, get, update, and search endpoints for log table management.","summary":"Delete (hard delete) an audit log record by ID (discussion_board_audit_logs table).","parameters":[{"name":"auditLogId","description":"UUID identifier of the audit log record to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated list of all discussion board system notices. Operates on the discussion_board_system_notices table in the Prisma schema, bringing together global and per-category notices. Supports filtering by notice status (active/inactive), scheduling (start_at, end_at), title/body search, and category linkage. Used for board banner management, system update broadcasts, and urgent alerts.","path":"/discussionBoard/admin/systemNotices","method":"get","description":"Fetches a paginated list of all system-wide and per-category notices present on the discussion board. Each system notice can be global (applies to all categories) or tied to a specific category, according to the schema. \n\nOnly active notices are displayed to end-users, but admins and moderators may list all notices, including inactive or scheduled future ones. Results may be filtered by the status (is_active), scheduled dates (start_at/end_at), category (by category_id), or by text search on title and body fields, using trgm index as described for those columns.\n\nThis endpoint integrates with the discussion_board_system_notices schema, presenting each notice's id, category linkage (if any), title, body, status, active periods, and timestamps. Supports pagination and basic search features through query parameters or default settings.\n\nIf the user is a guest, only public, currently active, scheduled notices are returned. If the user is admin or moderator, the full set is available.\n\nRelated endpoints: Creating (POST /systemNotices), updating (PUT /systemNotices/{systemNoticeId}), viewing (GET /systemNotices/{systemNoticeId}), and deleting notices (DELETE /systemNotices/{systemNoticeId}).","summary":"List system notices (discussion_board_system_notices) with filtering and search.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of system notices matching provided filters and visibility rules.","typeName":"IPageIDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Retrieve a paginated list of all discussion board system notices. Operates on the discussion_board_system_notices table in the Prisma schema, bringing together global and per-category notices. Supports filtering by notice status (active/inactive), scheduling (start_at, end_at), title/body search, and category linkage. Used for board banner management, system update broadcasts, and urgent alerts.","path":"/discussionBoard/moderator/systemNotices","method":"get","description":"Fetches a paginated list of all system-wide and per-category notices present on the discussion board. Each system notice can be global (applies to all categories) or tied to a specific category, according to the schema. \n\nOnly active notices are displayed to end-users, but admins and moderators may list all notices, including inactive or scheduled future ones. Results may be filtered by the status (is_active), scheduled dates (start_at/end_at), category (by category_id), or by text search on title and body fields, using trgm index as described for those columns.\n\nThis endpoint integrates with the discussion_board_system_notices schema, presenting each notice's id, category linkage (if any), title, body, status, active periods, and timestamps. Supports pagination and basic search features through query parameters or default settings.\n\nIf the user is a guest, only public, currently active, scheduled notices are returned. If the user is admin or moderator, the full set is available.\n\nRelated endpoints: Creating (POST /systemNotices), updating (PUT /systemNotices/{systemNoticeId}), viewing (GET /systemNotices/{systemNoticeId}), and deleting notices (DELETE /systemNotices/{systemNoticeId}).","summary":"List system notices (discussion_board_system_notices) with filtering and search.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of system notices matching provided filters and visibility rules.","typeName":"IPageIDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Retrieve a paginated, filterable list of system notices with advanced criteria, supporting search by title, body, scheduling, and activation status. Based on the discussion_board_system_notices table. Allows more complex queries than simple GET, with flexible filter combinations for admins/moderators managing banners and notices.","path":"/discussionBoard/admin/systemNotices","method":"patch","description":"Enables advanced searching and filtering of the board's system notices, as defined by the discussion_board_system_notices schema. Useful for admins and moderators who need to perform complex queries on notices, for instance, finding all expired, scheduled, or inactivated notices using combination filters.\n\nThe request body supports text search (trgm-based search on title and body fields), filtering by is_active status, scheduled start and end times, and category_id linkage. Results are paginated. This endpoint is intended for backend management and dashboard data sources, providing greater control over filtering than the standard GET.\n\nExtensive filtering is valuable for managing recurring banners, tracking announcement history, or auditing scheduled system messages. Sensitive notices (inactive, scheduled for future, or expired) are only listed for authorized roles.\n\nTypical uses: Admin wants to view only currently scheduled (future) notices or moderator reviews expired banners to plan reuse.\n\nRelated APIs: Creating new notices (POST), updating (PUT), individual fetching (GET by id).","summary":"Advanced search and filtering for system notices (discussion_board_system_notices).","parameters":[],"requestBody":{"description":"Filter/search criteria for querying system notices, including status, scheduled time, and text fields.","typeName":"IDiscussionBoardSystemNotice.IRequest"},"responseBody":{"description":"Paginated search result of system notices for complex admin/moderator queries.","typeName":"IPageIDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a paginated, filterable list of system notices with advanced criteria, supporting search by title, body, scheduling, and activation status. Based on the discussion_board_system_notices table. Allows more complex queries than simple GET, with flexible filter combinations for admins/moderators managing banners and notices.","path":"/discussionBoard/moderator/systemNotices","method":"patch","description":"Enables advanced searching and filtering of the board's system notices, as defined by the discussion_board_system_notices schema. Useful for admins and moderators who need to perform complex queries on notices, for instance, finding all expired, scheduled, or inactivated notices using combination filters.\n\nThe request body supports text search (trgm-based search on title and body fields), filtering by is_active status, scheduled start and end times, and category_id linkage. Results are paginated. This endpoint is intended for backend management and dashboard data sources, providing greater control over filtering than the standard GET.\n\nExtensive filtering is valuable for managing recurring banners, tracking announcement history, or auditing scheduled system messages. Sensitive notices (inactive, scheduled for future, or expired) are only listed for authorized roles.\n\nTypical uses: Admin wants to view only currently scheduled (future) notices or moderator reviews expired banners to plan reuse.\n\nRelated APIs: Creating new notices (POST), updating (PUT), individual fetching (GET by id).","summary":"Advanced search and filtering for system notices (discussion_board_system_notices).","parameters":[],"requestBody":{"description":"Filter/search criteria for querying system notices, including status, scheduled time, and text fields.","typeName":"IDiscussionBoardSystemNotice.IRequest"},"responseBody":{"description":"Paginated search result of system notices for complex admin/moderator queries.","typeName":"IPageIDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieves detailed information for a specific system-wide or category-bound notice using its unique identifier. Operates on the discussion_board_system_notices table, resolving linked category details as needed. Used for editing, display, or reviewing audit logs associated with the notice.","path":"/discussionBoard/admin/systemNotices/{systemNoticeId}","method":"get","description":"Provides full details for a single system notice on the discussion board, identified by its unique UUID systemNoticeId. Returns properties defined in the discussion_board_system_notices schema: id, category_id (or null for global), title, body, activation status, scheduling windows (start_at, end_at), and timestamps (created_at, updated_at).\n\nAccess control: All users can retrieve details for currently active and public notices; only admin and moderator users can retrieve information about inactive, expired, or scheduled future notices. Category association is included if the notice is not global.\n\nThis endpoint supports admin/moderator workflows, such as editing, auditing or previewing scheduled notices. System integrates with audit log (not shown here) for change traceability. Returns 404 if notice does not exist.\n\nRelated endpoints: Creation (POST), update (PUT), deletion (DELETE).","summary":"Fetch detail for a specific system notice (discussion_board_system_notices) by ID.","parameters":[{"name":"systemNoticeId","description":"UUID of the system notice to retrieve. Must exist in discussion_board_system_notices.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the system notice with matching ID.","typeName":"IDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieves detailed information for a specific system-wide or category-bound notice using its unique identifier. Operates on the discussion_board_system_notices table, resolving linked category details as needed. Used for editing, display, or reviewing audit logs associated with the notice.","path":"/discussionBoard/moderator/systemNotices/{systemNoticeId}","method":"get","description":"Provides full details for a single system notice on the discussion board, identified by its unique UUID systemNoticeId. Returns properties defined in the discussion_board_system_notices schema: id, category_id (or null for global), title, body, activation status, scheduling windows (start_at, end_at), and timestamps (created_at, updated_at).\n\nAccess control: All users can retrieve details for currently active and public notices; only admin and moderator users can retrieve information about inactive, expired, or scheduled future notices. Category association is included if the notice is not global.\n\nThis endpoint supports admin/moderator workflows, such as editing, auditing or previewing scheduled notices. System integrates with audit log (not shown here) for change traceability. Returns 404 if notice does not exist.\n\nRelated endpoints: Creation (POST), update (PUT), deletion (DELETE).","summary":"Fetch detail for a specific system notice (discussion_board_system_notices) by ID.","parameters":[{"name":"systemNoticeId","description":"UUID of the system notice to retrieve. Must exist in discussion_board_system_notices.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the system notice with matching ID.","typeName":"IDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieves detailed information for a specific system-wide or category-bound notice using its unique identifier. Operates on the discussion_board_system_notices table, resolving linked category details as needed. Used for editing, display, or reviewing audit logs associated with the notice.","path":"/discussionBoard/member/systemNotices/{systemNoticeId}","method":"get","description":"Provides full details for a single system notice on the discussion board, identified by its unique UUID systemNoticeId. Returns properties defined in the discussion_board_system_notices schema: id, category_id (or null for global), title, body, activation status, scheduling windows (start_at, end_at), and timestamps (created_at, updated_at).\n\nAccess control: All users can retrieve details for currently active and public notices; only admin and moderator users can retrieve information about inactive, expired, or scheduled future notices. Category association is included if the notice is not global.\n\nThis endpoint supports admin/moderator workflows, such as editing, auditing or previewing scheduled notices. System integrates with audit log (not shown here) for change traceability. Returns 404 if notice does not exist.\n\nRelated endpoints: Creation (POST), update (PUT), deletion (DELETE).","summary":"Fetch detail for a specific system notice (discussion_board_system_notices) by ID.","parameters":[{"name":"systemNoticeId","description":"UUID of the system notice to retrieve. Must exist in discussion_board_system_notices.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the system notice with matching ID.","typeName":"IDiscussionBoardSystemNotice"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"member"},{"specification":"Creates a new system notice, system-wide or category-bound, in the discussion_board_system_notices table. Admins can define title, body, active status, scheduling, and category linkage. Enables board-wide banners or specific category announcements, fulfilling business requirement for system alert flexibility.","path":"/discussionBoard/admin/systemNotices","method":"post","description":"Allows platform admins to create a new notice shown either globally or within a specific discussion category, as per discussion_board_system_notices schema. Input data includes title, body, activation status, scheduling window (start_at, end_at, both optional), category reference (optional), and timestamps are auto-set.\n\nOn creation, the notice becomes visible to users depending on is_active flag and scheduling (start_at/end_at). Category-limited notices target only users in relevant category; global notices (category_id null) appear on main board. Audit log updates are triggered (not shown here).\n\nOnly administrators can invoke this endpoint; other roles are forbidden. Required fields and uniqueness (e.g., title per category) are enforced in request validation.\n\nReturns the newly created notice entry, including generated UUID and resolved timestamps.","summary":"Create a new system notice/announcement (discussion_board_system_notices).","parameters":[],"requestBody":{"description":"Definition for new system notice—title, message body, scheduling, activation, and optional category.","typeName":"IDiscussionBoardSystemNotice.ICreate"},"responseBody":{"description":"Newly created system notice entity with all database fields populated.","typeName":"IDiscussionBoardSystemNotice"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing system notice in the discussion_board_system_notices table. Allows admins to modify title, body, category, active status, scheduling, or visibility according to business/ operational requirement for flexible message control.","path":"/discussionBoard/admin/systemNotices/{systemNoticeId}","method":"put","description":"Performs in-place update on an existing system notice entity, specified by systemNoticeId (UUID PK). All updatable fields in discussion_board_system_notices schema are supported: title, body, is_active, category_id, start_at, end_at. Timestamps are automatically updated.\n\nEnforces validation on schedule logic (start_at cannot be after end_at), and only admins are permitted. Supports conversion from category-specific to global and vice versa. Changes are traced in the system audit log (not shown here).\n\nReturns the updated entity as per the current persisted DB row. Returns 404 if the target notice ID is missing. Used by admin UI and API clients to maintain/upsert/patch board announcements.","summary":"Update an existing system notice (discussion_board_system_notices) by ID.","parameters":[{"name":"systemNoticeId","description":"UUID of the system notice to update. Must match discussion_board_system_notices.id in database.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Modified fields for the specified system notice (title, body, active status, etc).","typeName":"IDiscussionBoardSystemNotice.IUpdate"},"responseBody":{"description":"The system notice as persisted after update operation.","typeName":"IDiscussionBoardSystemNotice"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (permanently removes) the selected system notice as identified by systemNoticeId from the discussion_board_system_notices table. As the schema has no soft delete fields, this is a hard delete operation. Only administrators may delete system notices. Triggers system audit update.","path":"/discussionBoard/admin/systemNotices/{systemNoticeId}","method":"delete","description":"Executes the removal of a single system notice from the database, identified by UUID systemNoticeId. According to the Prisma schema (no soft deletion field), this endpoint deletes the entity permanently (hard delete). Only usable by admin users. \n\nDeletion is irreversible and triggers audit logging (not shown here). Used for removing outdated, obsolete, or erroneous announcements. Returns 204 No Content for success or 404 Not Found if the notice does not exist. \n\nCaution: If the notice is currently active and visible, deletion immediately removes it from all user views.","summary":"Delete (hard) a specific system notice (discussion_board_system_notices) by ID.","parameters":[{"name":"systemNoticeId","description":"UUID of the system notice to be deleted. Must exist in discussion_board_system_notices.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a complete paginated listing of all admins registered in the discussion_board_admins table. Provides PK, user_identifier, grant/revocation states, with optional filtering (active/inactive) by grant or revocation timestamp. For admin user management overview and audit trails.","path":"/discussionBoard/admin/admins","method":"get","description":"Fetches all admin records from the discussion_board_admins schema, providing a directory of platform administrators. Data output includes id (PK/UUID), user_identifier (identity handle or SSO/user email), grant timestamp, and possible revocation timestamp for tracking current and historical admin assignments.\n\nExposes active admins (revoked_at null) and optionally revoked past administrators. Designed for admin OWndership monitoring and dashboard reporting. Paginated for scalability.\n\nAccess: Admins only. For role assignment, use POST/PUT; to edit privileges, update methods are available. To fetch a single admin, use GET /admins/{adminId}.","summary":"List all registered admins (discussion_board_admins) with status and assignment details.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of admin records across all historical/current administrators.","typeName":"IPageIDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Enables advanced, paginated search for admin records in the discussion_board_admins table, with filters by user_identifier, grant and revoke times. Designed for administrative monitoring, privilege audits, or programmatic synchronization. Supports search over current and past admin assignments.","path":"/discussionBoard/admin/admins","method":"patch","description":"Returns a filtered, paginated result set of administrator entities from discussion_board_admins. The request body supports filtering by active state, search for user_identifier, grant/revoke date ranges, supporting business operations for privilege audits, admin activity monitoring, and automated reporting consumers.\n\nDesigned for backend/admin panel use, not general users. Advanced filtering is useful to identify privilege elevation/demotion patterns, and track assignment history per platform security requirements.\n\nUse in combination with individual GET, PUT, POST, or DELETE as needed for lifecycle management. Only accessible by system admin role; returns nothing for other users.","summary":"Advanced search/list admins by filters from discussion_board_admins table.","parameters":[],"requestBody":{"description":"Search criteria for filtering/admin lookup, including state or user_identifier.","typeName":"IDiscussionBoardAdmin.IRequest"},"responseBody":{"description":"Match page of filtered admin entities, as per advanced search.","typeName":"IPageIDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches all data for a single admin from discussion_board_admins by UUID (adminId PK), including user_identifier and role assignment/revocation times. Used for detail display, privilege management, or role audits.","path":"/discussionBoard/admin/admins/{adminId}","method":"get","description":"Returns full details for one administrator entity as defined in the discussion_board_admins schema. Exposes id, user_identifier, grant and optional revocation timestamp, supporting permission history, account status, and audit review.\n\nIntended for admin owners and compliance/operations staff, e.g. to review a specific admin’s tenure and status. Only available to admins; others denied. Returns 404 if not found.\n\nTo create, update, or delete admins see relevant endpoints. This is the canonical single-lookup operation.","summary":"Fetch a single admin’s detail record from discussion_board_admins by ID.","parameters":[{"name":"adminId","description":"UUID (PK) for the admin to retrieve. Must match discussion_board_admins.id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All data for specified admin, including assignment and revocation info.","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new administrator row in discussion_board_admins, making a user an admin. Assigns user_identifier and sets grant time. For platform role assignment and privilege elevation; used by higher-level administrators or in onboarding flows.","path":"/discussionBoard/admin/admins","method":"post","description":"Adds a new administrator to the system as per discussion_board_admins model. Input must include user_identifier (external ID or principal string). granted_at is set on creation. Optionally may provide a revoked_at time if the assignment is preemptively time-limited (otherwise null for active assignment).\n\nThis operation is restricted to other admins. Used in workflows that promote users to admin level, onboarding new platform managers, or for role handover during organization changes. Enforces unique constraint for user_identifier. Returns full record as persisted, including UUID for new admin.\n\nTo modify or demote, use PUT or DELETE. For listing, see GET or PATCH endpoints.","summary":"Create a new admin user in discussion_board_admins (role assignment).","parameters":[],"requestBody":{"description":"Admin creation details: user_identifier, grant time, optional revocation.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"Record of the new admin entity as created and stored in DB.","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an admin entity (by PK adminId) in discussion_board_admins. Allows updating user_identifier, grant or revocation time—e.g., for privilege handover, correction, or termination. Used to demote, transfer, or extend admin status. Triggers full audit log.","path":"/discussionBoard/admin/admins/{adminId}","method":"put","description":"Updates the admin entity by UUID primary key, as defined in the discussion_board_admins schema. Allows changing the user_identifier (e.g., after SSO change), updating the grant time, or setting/resetting the revoked time for privilege changes. Only available to active admin users.\n\nCritical for revoking admin rights, transferring admin role, or managing future-dated assignments. Audit log is updated for every modification.\n\nReturns the full admin entity as it stands post-update. Returns 404 if the target record does not exist.\n\nRelated endpoints for lifecycle: POST (create), DELETE (remove), GET (single); supports role management UI/data flows.","summary":"Update details for specific admin by ID in discussion_board_admins.","parameters":[{"name":"adminId","description":"UUID of admin entity to update (must exist in discussion_board_admins.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated assignment info: user_identifier, (un)assign timestamps as desired.","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"Full data for the specified admin as updated in DB.","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Permanently deletes the admin entity identified by adminId from the discussion_board_admins table. As there is no soft delete, this action cannot be reversed. Triggers audit logging for compliance. Used for privilege removal (e.g., after offboarding or breach).","path":"/discussionBoard/admin/admins/{adminId}","method":"delete","description":"Executes hard deletion of an admin record from the system by PK (adminId: UUID), according to the discussion_board_admins schema. Note: there is no soft deletion (no deleted_at column), so the record is fully removed. Restricted to admin users. Always updates system audit log (not included here).\n\nRemoves all admin privileges immediately from user_identifier. Should only be invoked with full compliance and privilege safety procedures in place.\n\nReturns 204 No Content on success; 404 Not Found for missing target. Lifecycle endpoints: POST (create), PUT (update).","summary":"Hard delete admin entity by ID from discussion_board_admins (privilege removal).","parameters":[{"name":"adminId","description":"UUID (PK) of the admin entity to delete, matching discussion_board_admins.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a list of all discussion board moderators, supporting basic listing for administrative control, moderator audits, and role management. It is directly associated with the 'discussion_board_moderators' table in the Prisma schema, allowing visibility into active and historical moderator assignments. The GET method is appropriate for efficient bulk read operations where simple filters (e.g., only active moderators) may be handled client-side or with further endpoint extension as needed.","path":"/discussionBoard/admin/moderators","method":"get","description":"Fetch a list of all discussion board moderators from the database. This operation corresponds to the 'discussion_board_moderators' table, which stores each moderator's role assignment, user identifier, grant and revoke timestamps.\n\nThe endpoint provides a simple, non-paginated list of all moderators, regardless of assignment status. Use cases include admin dashboards, role audits, or moderator management interfaces. Readers should be aware that only admins or users with elevated privileges should have access to the full list, as it may reveal role-grant history not meant for general users.\n\nFor compliance, the endpoint response includes only properties present in the underlying schema. No historical or computed values beyond what exists in the table are returned. This endpoint may be extended in future versions to support filters or pagination, especially as the moderator population grows.","summary":"List all discussion board moderators from the 'discussion_board_moderators' table.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of all discussion board moderator records.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation provides advanced search for discussion board moderators, enabling paginated, filterable, and sortable results. It operates on the 'discussion_board_moderators' table and supports complex administrative queries for effective role audits and history review. The PATCH method is selected because rich searching and filtering requirements are expected for large communities or compliance needs.","path":"/discussionBoard/admin/moderators","method":"patch","description":"Return a paginated and filterable list of moderator records based on advanced criteria defined in the request body. The underlying model is 'discussion_board_moderators', storing all role assignments with user identifiers, grant, and revoke timestamps.\n\nThis endpoint supports searching by user identifiers, active status, grant/revoke time windows, and more. Paging and sort options are included in the request structure for large-scale or compliance-critical installations. Only admins may invoke this due to the sensitivity of role data.\n\nIf errors occur, such as invalid filters or unauthorized access, standard error messages are returned following API error conventions. For field definitions and search semantics, the response structure mirrors the table schema and supplements with pagination metadata.","summary":"Search and paginate discussion board moderators with advanced filters.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for moderator index.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"Page of moderator records matching search parameters.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetch a single discussion board moderator record based on its unique moderatorId. This is a direct lookup in the 'discussion_board_moderators' table for detailed moderator info, such as role assignment, related user, grant and revoke timestamps. The GET method is used for specific record retrieval.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"get","description":"Get detailed information about a single moderator by primary key from the 'discussion_board_moderators' schema table. Use this to audit role history, manage moderator status, or resolve privilege-related questions.\n\nThe operation returns the moderator's user identifier, grant/revoke times, and all related properties as defined in the schema. Access is restricted to admin users due to sensitivity of moderator details and their audit importance.\n\nError handling includes standard not found (if the ID does not exist) and forbidden (if the caller lacks privilege). The parameter must match exactly the moderator record UUID type.","summary":"Fetch a specific discussion board moderator by ID.","parameters":[{"name":"moderatorId","description":"The UUID of the moderator to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator record corresponding to the specified ID.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new discussion board moderator record, granting moderation role to a user. This operation is associated with 'discussion_board_moderators' Prisma schema and follows the business requirement to allow admins to assign moderation rights. The POST method initiates new role assignments for designated users.","path":"/discussionBoard/admin/moderators","method":"post","description":"Add a new role assignment in 'discussion_board_moderators' to make a user a board moderator. The operation requires a valid user identifier to be supplied along with possible grant timestamp, in accordance with the schema's required properties.\n\nPermission to invoke this API is restricted to admins only, as only they may assign moderator privilege. Upon successful creation, the complete new moderator record is returned, showing the assigned privilege, user mapping, and audit timestamps.\n\nIf the user already has moderator status, this should result in a duplicate error per the unique constraint in the schema. Other possible errors include invalid input or unauthorized access. The operation does not modify downstream user data, only board-specific moderator mapping.","summary":"Create a new discussion board moderator record (assign moderation role).","parameters":[],"requestBody":{"description":"Moderator creation details including user_identifier and grant time.","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Moderator record newly assigned by this creation operation.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update details of a moderator record (such as revoke or re-assign privileges), by moderatorId. This operation is mapped to the 'discussion_board_moderators' table and is used for privilege changes, audit trail updates, or metadata correction. The PUT method applies as existing records are fully or partially replaced/modified.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"put","description":"Change an existing moderator assignment identified by moderatorId in 'discussion_board_moderators'. Typical uses include revoking privileges (setting revoked_at) or updating audit-related fields. All updates must adhere strictly to schema rules; only admins may use this endpoint.\n\nA valid UUID for the moderator ID and update fields in request body are required. On success, returns the updated moderator record; errors include non-existent ID, validation failure, or lack of permission. Proper audit logging for role changes should be expected downstream. Fields not present in the request remain unchanged unless schema dictates otherwise.","summary":"Update moderator details, such as revocation or field changes.","parameters":[{"name":"moderatorId","description":"The UUID of the moderator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the moderator record.","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Record of updated moderator data.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Remove a moderator record, disabling the user's moderator privileges. The operation is bound to 'discussion_board_moderators' and may hard delete the record, as the schema includes an explicit revoked_at timestamp but no soft delete flag for the row itself. The DELETE method is the canonical choice for role removal/deactivation.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"delete","description":"Permanently delete or remove a moderator assignment by moderatorId from 'discussion_board_moderators'. This function should be accessed only by administrators. Removing the record eliminates the user's ability to moderate and removes audit trail of assignment for that role; however, you may wish to consider soft disable by updating 'revoked_at' before erasure depending on business lifecycle practices.\n\nIf a referenced record is not found, a standard not-found error is returned. Successful operation does not return a body. Caution: this action cannot be undone and removes moderator mapping from the system entirely.","summary":"Remove moderator privilege by deleting assignment record.","parameters":[{"name":"moderatorId","description":"The UUID of the moderator to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"List all registered board members for management and reporting, in basic (non-paginated) form. This endpoint surfaces 'discussion_board_members' schema data, relevant for admin/member dashboards, system reporting, or management consoles. The GET method supports quick fetch for small-to-medium communities; for large installations, search/pagination is recommended.","path":"/discussionBoard/admin/members","method":"get","description":"Display a list of all board members from the 'discussion_board_members' table, including id, user_identifier, join time, and suspension (if any). No filtering or sorting; returns all members unconditionally—see the PATCH endpoint for advanced query options.\n\nOnly admins can invoke this to protect user identity data. Fields returned strictly mirror the schema. Additional columns, computed flags, or related info are NOT included. This read-only, bulk-access endpoint is best suited for system admin utilities with limited data volumes.","summary":"Retrieve all board member records from 'discussion_board_members'.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of all member records currently in system.","typeName":"IPageIDiscussionBoardMember"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Advanced search on the board members table, supporting filter, sort, paging and criteria-driven lookup for large communities or compliance use cases. Reflects requirements for member management by admins/moderators. PATCH is standard for search operations with POST body semantics.","path":"/discussionBoard/admin/members","method":"patch","description":"Perform filtered and paginated retrieval of member records from 'discussion_board_members'. Use this when needing specific subsets (e.g. only suspended users, by registration window, or search by user_identifier).\n\nSupports all logical search dimensions defined by the schema (id, user_identifier, join/suspension dates, etc), plus paging and ordering controls as in 'IPageIDiscussionBoardMember'. Results and error handling align with system standard. Only accessible to admins for user identity safety and audit alignment.","summary":"Advanced search with filtering/paging of board member records.","parameters":[],"requestBody":{"description":"Request criteria and paging fields for member search.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated results of members meeting request conditions.","typeName":"IPageIDiscussionBoardMember"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Get a specific board member's details by id for management, audit, or troubleshooting. Mapped directly to the 'discussion_board_members' schema. GET pattern is standard for this use case.","path":"/discussionBoard/admin/members/{memberId}","method":"get","description":"Return details of a single board member as found via primary id lookup in discussion_board_members. Used for administrative review, role mapping, or compliance reporting.\n\nAccess limited to admin users for privacy and audit reasons. Will error as not-found if the id does not exist, or forbidden for unauthorized callers. All output fields are direct from schema; no sensitive or computed data beyond defined fields is exposed.","summary":"Look up and display one board member by id.","parameters":[{"name":"memberId","description":"The UUID of the board member to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Member record for given id, including join, suspension, and user_identity fields.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Enroll a new system member via registration (or admin assignment), creating a new record in the 'discussion_board_members' schema. POST is standard for record creation events; creation includes all required member fields, per schema definition.","path":"/discussionBoard/admin/members","method":"post","description":"Add a new user as a full member of the board; typically done at registration. Input must contain at least user_identifier and join timestamp. Admin can use this for back office onboarding or migration from other user directories.\n\nUpon success, response is the created member record per schema (id, user_identifier, joined_at, etc). Duplicates will error out. Access is admin-only to control system membership integrity.","summary":"Create/register a new board member record.","parameters":[],"requestBody":{"description":"New member fields as required: user identifier, join date, etc.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"Record of the member just created with assigned id and timestamps.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update a board member's audit fields (e.g. suspend/reactivate, fix user_identifier) by id. Maps to direct update on the 'discussion_board_members' table, where admins can change join/suspend status, user mapping, or other metadata. PUT updates are atomic by convention.","path":"/discussionBoard/admin/members/{memberId}","method":"put","description":"Change a member's audit or registration data using their id. This includes suspending/reactivating the account (via suspended_at), amending join time, or user_identifier corrections, all fields as in schema.\n\nInput: memberId in path and field(s) to update as body. Return: updated member record or errors as appropriate. Only admins may update, respecting the system's privacy and audit requirements. Proper audit logging is expected for compliance.","summary":"Change audit fields (e.g. suspend/reactivate) for a board member by id.","parameters":[{"name":"memberId","description":"UUID of the member to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to be updated for the member record.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The member record after update committed.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete a member record by id. This hard-deletes the member assignment, in line with the schema, which does not include any soft-delete flag. The operation is appropriate for admin-triggered terminations, e.g. on GDPR erasure or admin workflow for member removal. DELETE method is used per REST convention.","path":"/discussionBoard/admin/members/{memberId}","method":"delete","description":"Remove a board member from the discussion_board_members table using their UUID. Since there is no soft-delete mechanism in the schema, this is a permanent, unrecoverable operation, intended only for admin use.\n\nIf the given id does not exist, standard not-found response is returned. On success, response is empty. Error handling aligns with system standard for data deletion, and only admins may delete to protect system integrity and audit trail.","summary":"Permanently delete a membership record by id.","parameters":[{"name":"memberId","description":"UUID of the member to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a list of guest users who have accessed the discussion board. It leverages the discussion_board_guests table in the Actors domain, which maintains records for all unauthenticated users (guests) identified by their session_identifier and activity timestamps. This endpoint is used to support analytics, monitor unique visitors, and provides basis for onboarding flows. It does not support complex filtering; for advanced queries use the PATCH method variant.","path":"/discussionBoard/admin/guests","method":"get","description":"Fetch a complete list of tracked guest users. The guests are unauthenticated users whose visit and session are recorded for basic analytics and onboarding logic. Each guest record includes a unique session_identifier, the first time they were seen, and the last activity timestamp. \n\nThis endpoint returns all guest sessions, providing insight into anonymous user behavior. Security-wise, since no personal or sensitive data is stored, access can be relatively open; however, avoid exposing guest-level analytics to public endpoints without proper aggregation or anonymization.\n\nData returned matches the discussion_board_guests model per the Actors schema, ensuring strict normalization and separation from registered members. The list can be used for platform reporting and system optimization tasks.","summary":"Retrieve entire list of discussion board guest sessions","parameters":[],"requestBody":null,"responseBody":{"description":"Array of guest session entities as stored in the guest tracking table.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation retrieves a paginated, filtered list of guest user sessions from the discussion_board_guests table. It supports advanced analytics and onboarding analysis by allowing complex queries—such as sessions within specific date ranges, by activity, or session identifiers. Clients typically use this endpoint to support backend dashboard UIs or report generation.","path":"/discussionBoard/admin/guests","method":"patch","description":"Search and filter guest user sessions using detailed criteria. This endpoint enables the querying of guest activity based on parameters such as session_identifier, first_seen/last_seen date ranges, and other analytics requirements. Pagination and sorting options allow for efficient analysis of large datasets.\n\nOnly administrators and system operators should be able to run detailed analytics on guest session information, as misuse could expose traffic patterns or system metrics considered sensitive. No personal identifiers are stored for guests, aligning with the privacy requirement.\n\nRefer to the discussion_board_guests table for all field definitions; all guest analytics or dashboard features must call this endpoint when presenting filtered or paginated results.","summary":"Search and filter guest sessions with advanced criteria","parameters":[],"requestBody":{"description":"Filter, pagination, and search parameters for analytical guest session retrieval.","typeName":"IDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated guest session entity results matching filter/search criteria.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves the detail of a specific guest session from the discussion_board_guests table, identified by its unique guestId (UUID). This operation is essential for auditing, diagnosing onboarding paths, or analyzing unique session behaviors in-depth.","path":"/discussionBoard/admin/guests/{guestId}","method":"get","description":"Fetch the full set of properties for a unique guest session, as captured by the system. This includes session_identifier, first and last seen timestamps, and other analytics attributes for that session.\n\nThis endpoint is typically used by admin tools or analytics dashboards for session tracing and diagnosis. Since guests are unauthenticated visitors, their tracked ID does not carry personal data but should be accessed securely to avoid exposing structural system information.\n\nReturns the guest record as defined in the Actors Prisma schema, useful for compliance analytics, audit, or troubleshooting individual onboarding journeys.","summary":"Retrieve full details of a specific guest session by its ID","parameters":[{"name":"guestId","description":"Unique identifier (UUID) of the target guest session.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed guest entity for the specified session.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new guest session entry in the discussion_board_guests table. This operation is generally invoked when a new unauthenticated visitor is detected on the discussion board—typically at the start of a browsing session before signing up. The session_identifier is used for analytics or for guiding unique-user onboarding flows.","path":"/discussionBoard/guests","method":"post","description":"Register a new guest session. This operation stores a new record for an anonymous user visit, typically when the system generates a new session identifier for tracking and analytics. Required details include the session_identifier, first and last seen timestamps (usually identical at creation), and the initial data as defined by the schema.\n\nThis call is generally made automatically by frontend or middleware code that wishes to track unique visits and analyze guest behavior. Although no personal information is stored, this route should be protected from abuse (e.g., bot traffic inflating analytics).\n\nField definitions are strictly those from the discussion_board_guests model in the Actors schema.","summary":"Create and track a new guest session entry","parameters":[],"requestBody":{"description":"Session information for the new guest.","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"Created guest entity with all persisted attributes.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":[],"name":"create","authorizationRole":null},{"specification":"Update an existing discussion board guest session's information in the discussion_board_guests table. Used to refresh or correct session tracking (such as updating last_seen_at during an active visit). The update is referenced by guestId.","path":"/discussionBoard/admin/guests/{guestId}","method":"put","description":"Modify the data for an existing guest user session. The most common update is changing the last_seen_at field to reflect an ongoing visit, but any non-PK attribute from the schema can be updated through this endpoint.\n\nThis endpoint enforces administrative privileges as guest records should not be arbitrarily modified by external callers; only system code or high-privilege users should update session activity. Returns the updated guest entity as described by the Actors schema.\n\nAll field changes are auditable, as required for analytics compliance.","summary":"Update a tracked guest's session info","parameters":[{"name":"guestId","description":"UUID of the guest session to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the guest session (usually last_seen_at).","typeName":"IDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"Updated guest session entity for the given ID.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete an existing guest session record from the discussion_board_guests table. This operation performs a hard delete, removing the guest tracking data entirely, since there is no 'deleted_at' or soft delete field in the table. Deletion is keyed by guestId (UUID).","path":"/discussionBoard/admin/guests/{guestId}","method":"delete","description":"Remove the specified guest session from the tracking system. This is a hard delete; once the record is removed, session analytics relating to this visitor may no longer be available. Use this only for data cleanup (e.g., to purge corrupted/old analytics data) or to comply with system retention rules.\n\nThis operation is strictly limited to admin usage, as guest session logs are important for platform security and analytics compliance. Deletion of guest info should be fully auditable.\n\nThere is no corresponding soft-delete field in the schema, so this is destructive and final.","summary":"Delete (hard) the specified guest tracking entity by ID","parameters":[{"name":"guestId","description":"UUID of the guest session to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"List all user sessions currently tracked in the discussion_board_user_sessions table. This table manages every active or historical login/session for admins, moderators, members, or guests. Use the GET method for full session listing; for complex queries, see PATCH variant. This operation supports admin-level monitoring of session integrity, activity, and token management.","path":"/discussionBoard/admin/userSessions","method":"get","description":"Retrieve a complete inventory of user session records, each associating an actor (admin, moderator, member, or guest) by actor_type and actor_identifier along with session_token, timestamps, and status flags such as terminated_at. This endpoint is essential for session management, monitoring concurrency, and supporting forced logout/audit workflows.\n\nData aligns precisely with the discussion_board_user_sessions table, ensuring strict normalization for actor/session linkage and time tracking. Access must be limited to system admins, due to the sensitive and security-centric nature of the session information contained herein.","summary":"List all user/guest session records captured in the system","parameters":[],"requestBody":null,"responseBody":{"description":"Array of user/guest session entities as stored in the session tracking table.","typeName":"IPageIDiscussionBoardUserSession"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Search and filter tracked user/guest sessions in the discussion_board_user_sessions table using complex parameters—such as actor_type, session_token, expiry, or status flags. PATCH is designed for pagination and advanced dashboard analytics or security/audit reports, not for public access.","path":"/discussionBoard/admin/userSessions","method":"patch","description":"Retrieve a filtered, paginated set of user or guest sessions based on advanced criteria: actor_type (admin/moderator/member/guest), session_token, session status, time windows, etc. Supports system dashboards, security analytics, and session monitoring tools, crucial for forced logout and anomaly detection workflows.\n\nThis endpoint must be restricted to admin usage. Returned data is directly matched to the normalized fields from the discussion_board_user_sessions schema; no computed session/actor attributes are provided.\n\nUse this API for large-scale session analysis and to support compliance monitoring.","summary":"Perform advanced search and filtering of user/guest sessions","parameters":[],"requestBody":{"description":"Complex filter, pagination, and sort parameters for user/guest sessions.","typeName":"IDiscussionBoardUserSession.IRequest"},"responseBody":{"description":"Paginated user/guest sessions result matching search criteria.","typeName":"IPageIDiscussionBoardUserSession"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches the details for a specific session record in the discussion_board_user_sessions table, identified by userSessionId. This session may belong to any actor type (admin, moderator, member, guest). This is used for monitoring or auditing individual session history.","path":"/discussionBoard/admin/userSessions/{userSessionId}","method":"get","description":"Return full attributes for a user or guest session as recorded by the session tracking table. Includes actor_type, actor_identifier, session token, timestamps, and termination status. \n\nAdmins may use this endpoint for token validation, forced logout diagnosis, or detailed audit analysis. Records are immutable except via session lifecycle events (e.g., logout, forced expire). \n\nThe entity structure exactly matches discussion_board_user_sessions from the Actors schema.","summary":"Fetch details of a specific user/guest session by ID","parameters":[{"name":"userSessionId","description":"UUID of session record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Session entity for the specified ID.","typeName":"IDiscussionBoardUserSession"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new tracked session for an actor (admin, moderator, member, or guest) in the discussion_board_user_sessions table. Usually invoked during login/session establishment to enforce per-actor authentication and persistent session tracking.","path":"/discussionBoard/userSessions","method":"post","description":"Upon new login or session tracking event, generate a new session record for the actor. Required fields include actor_type, actor_identifier, session_token, and time windows for creation/expiry. This operation ensures that each user or guest receives a unique session entry for authentication and audit purposes.\n\nProper usage mandates that only legitimate system or platform logic can create session records—either as part of the login flow or to establish session analytics. No personally identifiable information outside those fields defined in the schema is recorded here.","summary":"Register a new user or guest session in tracking system","parameters":[],"requestBody":{"description":"Session details for creation of the new user/guest session.","typeName":"IDiscussionBoardUserSession.ICreate"},"responseBody":{"description":"Created persistent session entity for the actor/session.","typeName":"IDiscussionBoardUserSession"},"authorizationRoles":[],"name":"create","authorizationRole":null},{"specification":"Update a tracked session in the discussion_board_user_sessions table. Typically used to refresh session expiry, forcibly terminate sessions, or update immutable fields due to system action (not for status logic via property fields). The userSessionId identifies the session to update.","path":"/discussionBoard/admin/userSessions/{userSessionId}","method":"put","description":"Modify tracked session attributes such as expiry, or set the termination timestamp following logout/forced expiration events. Updates must ensure immutability of core PK/actor identity, affecting only updateable attributes like expires_at, terminated_at, etc.\n\nOnly system code or admins with high privileges should invoke this endpoint, as improper usage could disrupt authentication flows. All updates are audit-logged as per compliance requirements.","summary":"Update details for a user or guest session by ID","parameters":[{"name":"userSessionId","description":"UUID of the tracked session to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Session property values to update (e.g., expiry, termination).","typeName":"IDiscussionBoardUserSession.IUpdate"},"responseBody":{"description":"Updated session entity after the applied changes.","typeName":"IDiscussionBoardUserSession"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete a user or guest session from the tracking table. This endpoint performs a hard delete, completely removing the session record for administrative data clean-up or to forcibly revoke tokens. This is a destructive operation and should only be performed by admins.","path":"/discussionBoard/admin/userSessions/{userSessionId}","method":"delete","description":"Destroy the specified session record in the user/guest session tracking table. This is used for remedial actions, such as removing expired or compromised sessions, or compliance with session retention/purge policies.\n\nDeletion is a hard delete by PK as the discussion_board_user_sessions table lacks a soft-delete field, and all removal events should be thoroughly audit-logged for compliance and security monitoring. Only admins are able to execute this operation.","summary":"Delete a tracked session entity by its record ID","parameters":[{"name":"userSessionId","description":"UUID of the session record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a list of all discussion board topics from the discussion_board_topics table. This operation is essential for users to browse the available topics at the top level of the board, supporting the feature where guests and members can explore open discussion areas. The operation references relationships with categories and topic creators. Results are typically presented in paginated form to support large boards. The response includes only basic topic information, suitable for listing multiple topics efficiently and supporting index-style exploration. Only topics not closed or deleted (see requirements/specs; soft delete indicated by absence of hard delete, so all topics listed).","path":"/discussionBoard/topics","method":"get","description":"Fetches a paginated list of active topics on the discussion board, including their related categories and creator member information. This operation is available to all users, including guests (read-only), as it enables open browsing of public discussion topics per the requirements analysis. \n\nEach item in the response summarizes a topic: its title, optional description, pinned/closed flags, creation/update timestamps, and the associated category. The underlying table is discussion_board_topics, joined with discussion_board_categories for hierarchical browsing, and discussion_board_members for audit trails. \n\nSecurity: As this endpoint is view-only and exposes public content, no authentication or special permissions are required. Only topics intended for participation (not deleted, not in restricted categories) are visible. Error handling returns a paginated empty set if no topics exist. Use in combination with /topics/{topicId} for full topic detail or to drill into threads under a specific topic. \n\nConcurrency and consistency are managed at the database level; paginated results may change as new topics are added or existing ones updated or closed.","summary":"List discussion board topics with basic info for browsing (discussion_board_topics).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of topic summaries for index-style topic browsing.","typeName":"IPageIDiscussionBoardTopics.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Provides advanced search, filtering, and pagination over the discussion_board_topics table. Enables users to locate topics by category, title keyword, status (pinned/closed), and creation/update times. This operation enables efficient UI filtering and is critical for large or high-traffic boards. The request references an IRequest DTO that includes all relevant filtering criteria, allowing for refined and targeted lookups—in line with requirements for scalable, responsive topic exploration. It references category and member relationships for filtering or enrichment.","path":"/discussionBoard/topics","method":"patch","description":"Searches and retrieves discussion topics on the board using complex filters such as category, pinned or closed status, date ranges, and text queries. This operation allows both guests and authenticated users to discover topics by more advanced criteria than simple listing.\n\nThe search functionality is based on the discussion_board_topics table, integrating joins to category and member tables for rich filtering and faceted experiences. Pagination and sorting are fully supported.\n\nSecurity: As with the basic listing, no specific authentication is required to search public topics. Sensitive or restricted categories remain excluded from the public result set. The request body specifies filter and sort criteria, and the paged result contains summary topic information. Used jointly with GET /topics for initial load and GET /topics/{topicId} for detail.\n\nReturns a paginated, filtered list, or an empty array if no results match the query.","summary":"Search and filter topics on the discussion board with advanced criteria (discussion_board_topics).","parameters":[],"requestBody":{"description":"Search and filter parameters for topic lookup (category, title, status, paging, etc).","typeName":"IDiscussionBoardTopics.IRequest"},"responseBody":{"description":"Paginated, filtered result set of topic summaries matching criteria.","typeName":"IPageIDiscussionBoardTopics.ISummary"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Retrieves a single, full-detail discussion board topic from the discussion_board_topics table using its unique identifier. This supports drilling into all properties of a specific topic for use cases such as reading topic description/guidelines, inspecting activity, etc. The operation joins category and creator_member relationships for full contextual information. Essential for integrating with thread retrieval and analytics subroutines connected by topic ID.","path":"/discussionBoard/topics/{topicId}","method":"get","description":"Fetches the complete details of a specified topic by its unique identifier. This is the entry point for accessing a topic's full content, metadata, and relationships—not just the summary provided in list or search operations.\n\nThe underlying table is discussion_board_topics, with joins to its category and creator member for full traceability. The response includes all key attributes: title, description, pinned/closed flags, timestamps, category ID, and creator ID. Used as the basis for loading child threads and posts, and for rendering detailed UIs.\n\nAccessible to guests/members for open topics, subject to general visibility rules. If the topic does not exist or access is restricted, an appropriate error or null response is returned. Use together with /topics and /topics/{topicId}/threads for full board navigation.","summary":"Retrieve detailed data for a specific discussion topic (discussion_board_topics).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed full topic information, including all fields and relationships.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new discussion topic by inserting a record into the discussion_board_topics table. This endpoint handles both member input (title, description, category, etc.) and enforcement of uniqueness within category/title constraints. The operation requires a valid member as creator and references the appropriate category. Validation ensures no duplicate topic titles within one category, and only active categories may be used. Results include the full new topic entity with all generated and related fields.","path":"/discussionBoard/member/topics","method":"post","description":"Allows an authenticated member to create a new discussion topic in the board. Input data includes title, optional description, category selection, and initial state for pinned and closed flags. Records the creator member as the author of the topic. \n\nAll required fields must be validated: category must exist and be active, title must be unique within the chosen category, and all inputs must pass general business validation. The discussion_board_topics table will be populated upon success, and the related category/member associations are updated accordingly.\n\nSecurity: Topic creation is only available to authenticated users with the member role or higher. Guests cannot create topics; admins/moderators may also use this endpoint per requirements. Error handling includes duplicate title, inactive category, or invalid references.\n\nUpon success, the created topic is returned in full. For UI/UX flows, this operation is followed by redirect or prompt to create threads within the topic.","summary":"Create a new discussion topic (discussion_board_topics).","parameters":[],"requestBody":{"description":"Full data to create a new topic; includes title, category, optional description, and flags.","typeName":"IDiscussionBoardTopics.ICreate"},"responseBody":{"description":"Full detailed topic information of the created topic.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member"},{"specification":"Creates a new discussion topic by inserting a record into the discussion_board_topics table. This endpoint handles both member input (title, description, category, etc.) and enforcement of uniqueness within category/title constraints. The operation requires a valid member as creator and references the appropriate category. Validation ensures no duplicate topic titles within one category, and only active categories may be used. Results include the full new topic entity with all generated and related fields.","path":"/discussionBoard/moderator/topics","method":"post","description":"Allows an authenticated member to create a new discussion topic in the board. Input data includes title, optional description, category selection, and initial state for pinned and closed flags. Records the creator member as the author of the topic. \n\nAll required fields must be validated: category must exist and be active, title must be unique within the chosen category, and all inputs must pass general business validation. The discussion_board_topics table will be populated upon success, and the related category/member associations are updated accordingly.\n\nSecurity: Topic creation is only available to authenticated users with the member role or higher. Guests cannot create topics; admins/moderators may also use this endpoint per requirements. Error handling includes duplicate title, inactive category, or invalid references.\n\nUpon success, the created topic is returned in full. For UI/UX flows, this operation is followed by redirect or prompt to create threads within the topic.","summary":"Create a new discussion topic (discussion_board_topics).","parameters":[],"requestBody":{"description":"Full data to create a new topic; includes title, category, optional description, and flags.","typeName":"IDiscussionBoardTopics.ICreate"},"responseBody":{"description":"Full detailed topic information of the created topic.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Creates a new discussion topic by inserting a record into the discussion_board_topics table. This endpoint handles both member input (title, description, category, etc.) and enforcement of uniqueness within category/title constraints. The operation requires a valid member as creator and references the appropriate category. Validation ensures no duplicate topic titles within one category, and only active categories may be used. Results include the full new topic entity with all generated and related fields.","path":"/discussionBoard/admin/topics","method":"post","description":"Allows an authenticated member to create a new discussion topic in the board. Input data includes title, optional description, category selection, and initial state for pinned and closed flags. Records the creator member as the author of the topic. \n\nAll required fields must be validated: category must exist and be active, title must be unique within the chosen category, and all inputs must pass general business validation. The discussion_board_topics table will be populated upon success, and the related category/member associations are updated accordingly.\n\nSecurity: Topic creation is only available to authenticated users with the member role or higher. Guests cannot create topics; admins/moderators may also use this endpoint per requirements. Error handling includes duplicate title, inactive category, or invalid references.\n\nUpon success, the created topic is returned in full. For UI/UX flows, this operation is followed by redirect or prompt to create threads within the topic.","summary":"Create a new discussion topic (discussion_board_topics).","parameters":[],"requestBody":{"description":"Full data to create a new topic; includes title, category, optional description, and flags.","typeName":"IDiscussionBoardTopics.ICreate"},"responseBody":{"description":"Full detailed topic information of the created topic.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing discussion board topic identified by ID, modifying allowed fields such as title, description, pinned/closed status, or category association. This operation acts on the discussion_board_topics table, with updates only permitted by the topic creator, moderators, or admins according to business rules. Uniqueness and referential constraints (category existence, title uniqueness) are validated upon update. Full topic is returned upon successful update.","path":"/discussionBoard/member/topics/{topicId}","method":"put","description":"Enables the update of a topic's core fields, including title, description, associated category, and state flags (pinned, closed) by its unique identifier. Only the original creator, moderators, or admins may perform updates. The operation fetches the existing topic and applies updates as per validated business logic.\n\nField-level validation enforces non-null, unique title within the category, category must exist/active, and changes are traceable to the updater for audit. Table updates occur in discussion_board_topics; audit and analytics may log the event for reporting. \n\nAuthorization: Updates are available to topic owner (creator), moderators, or admin roles. Error handling addresses invalid reference, duplicate titles, unauthorized updates, or category issues.\n\nThe operation returns the updated topic on success or an error otherwise.","summary":"Update an existing discussion topic by ID (discussion_board_topics).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the topic (title, description, category, pinned/closed).","typeName":"IDiscussionBoardTopics.IUpdate"},"responseBody":{"description":"Full detailed topic object after update.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"Updates an existing discussion board topic identified by ID, modifying allowed fields such as title, description, pinned/closed status, or category association. This operation acts on the discussion_board_topics table, with updates only permitted by the topic creator, moderators, or admins according to business rules. Uniqueness and referential constraints (category existence, title uniqueness) are validated upon update. Full topic is returned upon successful update.","path":"/discussionBoard/moderator/topics/{topicId}","method":"put","description":"Enables the update of a topic's core fields, including title, description, associated category, and state flags (pinned, closed) by its unique identifier. Only the original creator, moderators, or admins may perform updates. The operation fetches the existing topic and applies updates as per validated business logic.\n\nField-level validation enforces non-null, unique title within the category, category must exist/active, and changes are traceable to the updater for audit. Table updates occur in discussion_board_topics; audit and analytics may log the event for reporting. \n\nAuthorization: Updates are available to topic owner (creator), moderators, or admin roles. Error handling addresses invalid reference, duplicate titles, unauthorized updates, or category issues.\n\nThe operation returns the updated topic on success or an error otherwise.","summary":"Update an existing discussion topic by ID (discussion_board_topics).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the topic (title, description, category, pinned/closed).","typeName":"IDiscussionBoardTopics.IUpdate"},"responseBody":{"description":"Full detailed topic object after update.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing discussion board topic identified by ID, modifying allowed fields such as title, description, pinned/closed status, or category association. This operation acts on the discussion_board_topics table, with updates only permitted by the topic creator, moderators, or admins according to business rules. Uniqueness and referential constraints (category existence, title uniqueness) are validated upon update. Full topic is returned upon successful update.","path":"/discussionBoard/admin/topics/{topicId}","method":"put","description":"Enables the update of a topic's core fields, including title, description, associated category, and state flags (pinned, closed) by its unique identifier. Only the original creator, moderators, or admins may perform updates. The operation fetches the existing topic and applies updates as per validated business logic.\n\nField-level validation enforces non-null, unique title within the category, category must exist/active, and changes are traceable to the updater for audit. Table updates occur in discussion_board_topics; audit and analytics may log the event for reporting. \n\nAuthorization: Updates are available to topic owner (creator), moderators, or admin roles. Error handling addresses invalid reference, duplicate titles, unauthorized updates, or category issues.\n\nThe operation returns the updated topic on success or an error otherwise.","summary":"Update an existing discussion topic by ID (discussion_board_topics).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the topic (title, description, category, pinned/closed).","typeName":"IDiscussionBoardTopics.IUpdate"},"responseBody":{"description":"Full detailed topic object after update.","typeName":"IDiscussionBoardTopics"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (hard delete) a discussion board topic, identified by its ID, from the discussion_board_topics table. According to schema, there is no soft delete for topics; so this endpoint removes the record permanently. Authorization is restricted to admins and moderators; original creator may raise a delete request but not execute unless elevated. No response body by convention; success/failure is indicated via status code.","path":"/discussionBoard/moderator/topics/{topicId}","method":"delete","description":"Deletes a discussion topic from the system using its unique identifier. Based on the schema (no soft delete flag), this performs a hard delete, permanently removing the record from the database. The operation removes the topic from discussion_board_topics and all associated cascading relationships (threads, posts, etc.) per foreign key cascade.\n\nOnly admins and moderators are authorized to perform topic deletion—in line with moderation and audit requirements. Members may not delete topics they do not own. Deletion is audit-logged for compliance and accountability. If the topic does not exist or the user lacks sufficient privileges, the request fails with an appropriate error message.\n\nClients should expect no response body on success; only status code and standard confirmation of deletion. Subsequent attempts to access this topic will fail with not found.","summary":"Hard delete a discussion topic by ID (discussion_board_topics).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes (hard delete) a discussion board topic, identified by its ID, from the discussion_board_topics table. According to schema, there is no soft delete for topics; so this endpoint removes the record permanently. Authorization is restricted to admins and moderators; original creator may raise a delete request but not execute unless elevated. No response body by convention; success/failure is indicated via status code.","path":"/discussionBoard/admin/topics/{topicId}","method":"delete","description":"Deletes a discussion topic from the system using its unique identifier. Based on the schema (no soft delete flag), this performs a hard delete, permanently removing the record from the database. The operation removes the topic from discussion_board_topics and all associated cascading relationships (threads, posts, etc.) per foreign key cascade.\n\nOnly admins and moderators are authorized to perform topic deletion—in line with moderation and audit requirements. Members may not delete topics they do not own. Deletion is audit-logged for compliance and accountability. If the topic does not exist or the user lacks sufficient privileges, the request fails with an appropriate error message.\n\nClients should expect no response body on success; only status code and standard confirmation of deletion. Subsequent attempts to access this topic will fail with not found.","summary":"Hard delete a discussion topic by ID (discussion_board_topics).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the topic to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a list of threads directly under a specific topic, as stored in the discussion_board_threads table. Joins with the topic and member (creator) for context. This endpoint supports thread index pages for a given topic, returning paginated summaries. Use in conjunction with GET /topics/{topicId} to drill down into the board structure. No filtering or sorting beyond default ordering by creation time and topic association.","path":"/discussionBoard/topics/{topicId}/threads","method":"get","description":"Fetches all threads associated with a given topic. Results include all summary-level thread data: thread IDs, titles, creator members, and timestamps of creation/update. Presentation is paginated for scalability on active boards.\n\nUnderlying data is drawn from discussion_board_threads, joined by topic ID to filter the set. Only threads visible in the referenced topic (not deleted, per cascade) are returned. This operation enables guests and members to browse thread lists and serves as a base for further detail retrieval via /topics/{topicId}/threads/{threadId}.\n\nNo authentication is required for public thread navigation. Errors occur if topic ID is invalid, with an empty result or error message per handler logic. Useful for UI drill-down and thread activity displays.","summary":"List threads under a topic for browsing (discussion_board_threads).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) for the parent topic.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated summaries of all threads for the specified topic.","typeName":"IPageIDiscussionBoardThreads.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Provides advanced search, filtering, and pagination within the discussion_board_threads table scoped to a given topic. Enables UI filtering and discovery for busy topics. The request body allows specifying thread title keywords, creation/update dates, and other advanced filters per IRequest DTO. Joins with the topic and creator for rich searching. Pagination and sorting supported. Only results within the specified topic are eligible.","path":"/discussionBoard/topics/{topicId}/threads","method":"patch","description":"Search and filter threads within a particular topic using specific criteria such as title, creator, or creation/update range. Supports advanced filtering UI in thread listing contexts. Guests and authenticated users may use this operation for navigating or drilling down large topics.\n\nThe search draws from discussion_board_threads, constrained to those under the referenced topic, with all filter and pagination logic run server-side. Results are paginated as defined by the client request. No sensitive data is disclosed; only summary records are returned.\n\nNo special authorization is required. Used in UI when browsing or searching the threads of a topic. For thread creation or detail, see related endpoints.","summary":"Search and filter threads under a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"Unique identifier (UUID) of the parent topic.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for thread discovery within a topic.","typeName":"IDiscussionBoardThreads.IRequest"},"responseBody":{"description":"Paginated summaries of matched threads for the topic.","typeName":"IPageIDiscussionBoardThreads.ISummary"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Retrieves the full detail of a single thread under a topic, identified by their respective IDs in the discussion_board_threads table. Provides access to the thread's metadata, association with the topic and creator, allowing further discovery (listing posts, etc). Exists for UIs and client logic that require loading all attributes of a thread for display or further operations.","path":"/discussionBoard/topics/{topicId}/threads/{threadId}","method":"get","description":"Fetches the detailed data for a specific thread under a topic, using both topic and thread UUIDs. Returns complete information: title, creator, timestamps, and all top-level attributes. This is a drilldown endpoint meant for detailed thread pages in the UI. \n\nReferences discussion_board_threads, joined with topic and creator member. Response includes only the matching thread; errors are returned for not found or inconsistent parent/child IDs.\n\nAccessible by guests and all authenticated users for open topics. For child entities (posts/comments) use lower-level endpoints not described here. Returns a null or error response for invalid or unauthorized access.","summary":"Get full detail of a thread within a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"Unique UUID for parent topic.","schema":{"type":"string","format":"uuid"}},{"name":"threadId","description":"Unique UUID for the thread to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed object for the thread, including all relationships.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new thread under a given topic in the discussion_board_threads table. This operation validates topic existence, status (not closed), and enforces unique thread titles within topics. Authenticated members are the only eligible creators, consistent with the participation requirements, though admins/moderators may create for special purposes. On success, returns the fully-detailed new thread record.","path":"/discussionBoard/member/topics/{topicId}/threads","method":"post","description":"Allows an authenticated member or higher to start a new thread in an existing topic. Required input: thread title; optional: initial post body or metadata (if supported by client workflows). Topic must exist and not be closed to accept new threads.\n\nAll thread creation records the creator member's ID, timestamp, and relevant topic association in discussion_board_threads. Enforcement includes unique title per topic and active, unlocked parent topic. Input validation occurs on all updates.\n\nAuthorization: Only members, moderators, and admins may create threads. Errors returned for invalid parent or concurrency conflicts. Response contains the completed thread object as confirmation and for navigation.","summary":"Create a new thread under a specific topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the topic in which to create the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values for new thread: title (required), optional extended metadata if present.","typeName":"IDiscussionBoardThreads.ICreate"},"responseBody":{"description":"Full detail object for the newly created thread.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member"},{"specification":"Creates a new thread under a given topic in the discussion_board_threads table. This operation validates topic existence, status (not closed), and enforces unique thread titles within topics. Authenticated members are the only eligible creators, consistent with the participation requirements, though admins/moderators may create for special purposes. On success, returns the fully-detailed new thread record.","path":"/discussionBoard/moderator/topics/{topicId}/threads","method":"post","description":"Allows an authenticated member or higher to start a new thread in an existing topic. Required input: thread title; optional: initial post body or metadata (if supported by client workflows). Topic must exist and not be closed to accept new threads.\n\nAll thread creation records the creator member's ID, timestamp, and relevant topic association in discussion_board_threads. Enforcement includes unique title per topic and active, unlocked parent topic. Input validation occurs on all updates.\n\nAuthorization: Only members, moderators, and admins may create threads. Errors returned for invalid parent or concurrency conflicts. Response contains the completed thread object as confirmation and for navigation.","summary":"Create a new thread under a specific topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the topic in which to create the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values for new thread: title (required), optional extended metadata if present.","typeName":"IDiscussionBoardThreads.ICreate"},"responseBody":{"description":"Full detail object for the newly created thread.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Creates a new thread under a given topic in the discussion_board_threads table. This operation validates topic existence, status (not closed), and enforces unique thread titles within topics. Authenticated members are the only eligible creators, consistent with the participation requirements, though admins/moderators may create for special purposes. On success, returns the fully-detailed new thread record.","path":"/discussionBoard/admin/topics/{topicId}/threads","method":"post","description":"Allows an authenticated member or higher to start a new thread in an existing topic. Required input: thread title; optional: initial post body or metadata (if supported by client workflows). Topic must exist and not be closed to accept new threads.\n\nAll thread creation records the creator member's ID, timestamp, and relevant topic association in discussion_board_threads. Enforcement includes unique title per topic and active, unlocked parent topic. Input validation occurs on all updates.\n\nAuthorization: Only members, moderators, and admins may create threads. Errors returned for invalid parent or concurrency conflicts. Response contains the completed thread object as confirmation and for navigation.","summary":"Create a new thread under a specific topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the topic in which to create the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values for new thread: title (required), optional extended metadata if present.","typeName":"IDiscussionBoardThreads.ICreate"},"responseBody":{"description":"Full detail object for the newly created thread.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing thread under a topic using thread and topic IDs. Allows modification of allowed fields (title, for instance), ensuring referential consistency and enforcing all constraints (unique within topic, editable only by creator, moderator, admin). Upon valid update, returns updated full thread. Denormalized field updates and audit traceability enabled via analytics subroutines.","path":"/discussionBoard/member/topics/{topicId}/threads/{threadId}","method":"put","description":"Updates the fields of an existing thread under a specific topic, as identified by the UUIDs for topic and thread. Permitted edits include the thread title and any additional metadata supported by the DTO. Only creators, moderators, or admins with proper privileges may perform updates.\n\nField validation includes unique thread title per topic. The operation audits each change (as per requirements for traceability and rollback if needed). If invalid reference, forbidden update, or constraint violation occurs, a clear error is returned. \n\nAuthorizations: Updaters must own the thread or hold moderator/admin privileges over the topic. On success, updated thread object is returned.","summary":"Update a thread under a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the topic to which the thread belongs.","schema":{"type":"string","format":"uuid"}},{"name":"threadId","description":"UUID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values to update on the thread: title and/or allowed metadata fields.","typeName":"IDiscussionBoardThreads.IUpdate"},"responseBody":{"description":"Updated thread object after the requested changes.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"Updates an existing thread under a topic using thread and topic IDs. Allows modification of allowed fields (title, for instance), ensuring referential consistency and enforcing all constraints (unique within topic, editable only by creator, moderator, admin). Upon valid update, returns updated full thread. Denormalized field updates and audit traceability enabled via analytics subroutines.","path":"/discussionBoard/moderator/topics/{topicId}/threads/{threadId}","method":"put","description":"Updates the fields of an existing thread under a specific topic, as identified by the UUIDs for topic and thread. Permitted edits include the thread title and any additional metadata supported by the DTO. Only creators, moderators, or admins with proper privileges may perform updates.\n\nField validation includes unique thread title per topic. The operation audits each change (as per requirements for traceability and rollback if needed). If invalid reference, forbidden update, or constraint violation occurs, a clear error is returned. \n\nAuthorizations: Updaters must own the thread or hold moderator/admin privileges over the topic. On success, updated thread object is returned.","summary":"Update a thread under a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the topic to which the thread belongs.","schema":{"type":"string","format":"uuid"}},{"name":"threadId","description":"UUID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values to update on the thread: title and/or allowed metadata fields.","typeName":"IDiscussionBoardThreads.IUpdate"},"responseBody":{"description":"Updated thread object after the requested changes.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing thread under a topic using thread and topic IDs. Allows modification of allowed fields (title, for instance), ensuring referential consistency and enforcing all constraints (unique within topic, editable only by creator, moderator, admin). Upon valid update, returns updated full thread. Denormalized field updates and audit traceability enabled via analytics subroutines.","path":"/discussionBoard/admin/topics/{topicId}/threads/{threadId}","method":"put","description":"Updates the fields of an existing thread under a specific topic, as identified by the UUIDs for topic and thread. Permitted edits include the thread title and any additional metadata supported by the DTO. Only creators, moderators, or admins with proper privileges may perform updates.\n\nField validation includes unique thread title per topic. The operation audits each change (as per requirements for traceability and rollback if needed). If invalid reference, forbidden update, or constraint violation occurs, a clear error is returned. \n\nAuthorizations: Updaters must own the thread or hold moderator/admin privileges over the topic. On success, updated thread object is returned.","summary":"Update a thread under a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the topic to which the thread belongs.","schema":{"type":"string","format":"uuid"}},{"name":"threadId","description":"UUID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values to update on the thread: title and/or allowed metadata fields.","typeName":"IDiscussionBoardThreads.IUpdate"},"responseBody":{"description":"Updated thread object after the requested changes.","typeName":"IDiscussionBoardThreads"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (hard) a thread from a topic, using both topicId and threadId as keys. Because there is no soft delete in the schema for threads, this action is irreversible. Only moderators and admins may perform thread deletions, supporting compliance and moderation actions. Success is indicated by status code; no content in body. Cascading deletes by schema on posts under the thread are handled by the DB.","path":"/discussionBoard/moderator/topics/{topicId}/threads/{threadId}","method":"delete","description":"Removes a thread from a topic based on their UUIDs. This is a hard delete, meaning the thread and all associated posts are permanently removed. Only admins and moderators are allowed to delete threads, to preserve moderation integrity. Ordinary members cannot delete threads.\n\nAction is audit-logged and fully cascades to child entities (posts/comments) by default database behavior. Error messages indicate missing threads, insufficient rights, or integrity errors. \n\nNo content is returned; success is communicated via response status. Any future requests to the deleted thread will return not found.","summary":"Hard delete a thread under a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the parent topic of the thread to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"threadId","description":"UUID of the thread to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes (hard) a thread from a topic, using both topicId and threadId as keys. Because there is no soft delete in the schema for threads, this action is irreversible. Only moderators and admins may perform thread deletions, supporting compliance and moderation actions. Success is indicated by status code; no content in body. Cascading deletes by schema on posts under the thread are handled by the DB.","path":"/discussionBoard/admin/topics/{topicId}/threads/{threadId}","method":"delete","description":"Removes a thread from a topic based on their UUIDs. This is a hard delete, meaning the thread and all associated posts are permanently removed. Only admins and moderators are allowed to delete threads, to preserve moderation integrity. Ordinary members cannot delete threads.\n\nAction is audit-logged and fully cascades to child entities (posts/comments) by default database behavior. Error messages indicate missing threads, insufficient rights, or integrity errors. \n\nNo content is returned; success is communicated via response status. Any future requests to the deleted thread will return not found.","summary":"Hard delete a thread under a topic (discussion_board_threads).","parameters":[{"name":"topicId","description":"UUID of the parent topic of the thread to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"threadId","description":"UUID of the thread to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve all posts belonging to the specified thread from the discussion_board_posts table. This operation returns detailed post information, including fields such as id, discussion_board_thread_id, creator_member_id, body, is_edited, created_at, updated_at, and deleted_at (if soft deleted). Joins with related creator member info may be needed for audit/context as per business requirements. Pagination and sorting capabilities should be implemented to efficiently handle threads with large numbers of posts. Authorization: open to all authenticated users (member, moderator, admin), but guests can only view non-deleted, public posts per board setting.","path":"/discussionBoard/member/threads/{threadId}/posts","method":"get","description":"This API operation retrieves a list of all posts associated with a specified thread in the discussion board system. Posts are returned with their full details and current (non-deleted) status, as enforced by the discussion_board_posts schema. The operation validates user role—guests may browse public posts but cannot access restricted or deleted content. Pagination and sorting parameters are expected to handle large discussions efficiently. Security checks ensure only active (not soft-deleted) posts are presented to typical users, with additional permission validation allowing moderators or admins to review hidden/deleted posts as appropriate. Any error in thread ID format or access rights results in a clear error response. This API is typically consumed by thread viewers or topic participants.","summary":"Retrieve a list of posts for a specific thread from the discussion_board_posts table.","parameters":[{"name":"threadId","description":"Unique identifier of the parent discussion thread whose posts should be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of post details in the specified thread.","typeName":"IPageIDiscussionBoardPost"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"Search and retrieve a customizable, filtered, and paginated list of posts from the discussion_board_posts table within a specific thread. This endpoint supports advanced querying, including search keywords, timestamp ranges, creator filters, and post status (such as is_edited and deleted_at for soft deletion). The endpoint adheres to complex search/list requirements outlined in the requirements document, particularly for large or highly active discussion threads. Authorization is enforced: members, moderators, and admins may access advanced filters; guests can only access public, non-deleted posts.","path":"/discussionBoard/member/threads/{threadId}/posts","method":"patch","description":"This API allows clients to submit complex search and filter criteria for posts within a specified thread. It references the discussion_board_posts table and enables searching by content, author, edit status, creation/modification dates, and soft-deletion (deleted_at). The request body follows the IDiscussionBoardPost.IRequest contract for search parameters. The operation enforces role-based restrictions, ensuring advanced filters are only available to authenticated members or above. Security features include rate limiting and output filtering to respect user roles and board privacy settings. The response delivers paginated search results. Related endpoints may include simple list retrieval and single post detail fetch for deeper exploration. Errors from invalid threadId, search criteria, or authorization are reported in detail.","summary":"Search, filter, and paginate posts for a thread with advanced criteria.","parameters":[{"name":"threadId","description":"Unique identifier for the thread to search within.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, search, and pagination criteria for posts within the specified thread.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated results of posts matching the search criteria.","typeName":"IPageIDiscussionBoardPost"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"Retrieve full details for a single post identified by postId, restricted to those whose discussion_board_thread_id matches the provided threadId. This operation queries the discussion_board_posts table, returning all atomic fields and including soft deletion (deleted_at) if present. Enforces user access: guests/members only see non-deleted posts; moderators/admins can see or review deleted posts. Also provides context for auditing or subsequent threaded discussion display.","path":"/discussionBoard/member/threads/{threadId}/posts/{postId}","method":"get","description":"This endpoint returns the detailed information of a single post within a given thread based on both the unique threadId and postId. Underlying data comes from the discussion_board_posts table—a single row is selected and returned as an IDiscussionBoardPost response body. Security logic ensures proper authorization and role-based filtering: only visible, non-deleted posts are accessible to standard users, while moderation roles can retrieve soft-deleted or flagged posts. Input parameter validation, detailed error reporting, and consistency with related retrieval endpoints are guaranteed. This operation is closely related to post list/search endpoints and supports drill-down user flows.","summary":"Get detailed info on one post in a thread from the discussion_board_posts table.","parameters":[{"name":"threadId","description":"ID of the thread the post belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"ID of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of the specified post, or error if not found/authorized.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"Create a new post within the thread specified by threadId in the discussion_board_posts table. Incoming request must provide all required post attributes except for ID, created_at, and updated_at—these are assigned by the system. Soft deletion field (deleted_at) is not set on creation. This endpoint enforces: user must be a member or higher (cannot post as guest), thread must exist and be open, and any system-imposed posting rate limits. Security, validation, and proper permissions are covered as per requirements.","path":"/discussionBoard/member/threads/{threadId}/posts","method":"post","description":"This API endpoint allows a registered member to create a new post under a specified thread. Request body provides the required details aligned with IDiscussionBoardPost.ICreate and does not include system-generated fields like id, created_at, or deleted_at. The operation validates posting permissions: only authenticated members, moderators, and admins may create posts. Further, it checks the thread's status (cannot post in closed threads) and may enforce posting cooldown or duplicate prevention for spam mitigation. Related error handling addresses invalid input, unauthorized access, or attempts to post in closed/deleted threads.","summary":"Create a new post in a thread (insert into discussion_board_posts).","parameters":[{"name":"threadId","description":"ID of the thread to associate the new post with.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data needed to create a new post (body, creator_member_id, etc) under the thread.","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"Complete post details after successful creation.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Update an existing post's details in the discussion_board_posts table, constrained to the specified thread and post. All updatable fields are supplied per the schema—body, is_edited, and updated_at primary among them (deleted_at is not updated via this endpoint). The operation requires that the user be the original creator, or have moderator/admin privileges. Validation ensures thread and post exist, and title/description remain consistent with business logic (for posts, only body and edit flags are typically modifiable). Audit trails are supported for transparency and rollback.","path":"/discussionBoard/member/threads/{threadId}/posts/{postId}","method":"put","description":"This endpoint allows for the modification of a post under a particular thread. Based on IDiscussionBoardPost.IUpdate, it lets authorized users (creators, moderators, or admins) edit applicable properties—typically the body content and is_edited status. Write operations are checked for permissions, ensuring that a regular member can only update their own posts, while moderation roles may update any post as allowed by moderation policy. The request does not handle deletion or restoration; it only updates editable post fields. Full error handling for unauthorized, invalid input, or non-existent records is provided. An audit trail is updated for compliance.","summary":"Update a post's content in a thread (update discussion_board_posts record).","parameters":[{"name":"threadId","description":"ID of the parent thread containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable post fields (body, is_edited, etc).","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The post details after the update is complete.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member"},{"specification":"Soft delete a post identified by postId within a given thread (threadId) on the discussion_board_posts table. This sets deleted_at to the current timestamp but retains the record (not a hard delete). Only the creator, moderators, or admins may delete posts; members may only delete their own. This operation enforces audit logging and validates both parent thread and post existence as well as authorization. Deletion cannot be undone via this endpoint.","path":"/discussionBoard/member/threads/{threadId}/posts/{postId}","method":"delete","description":"This operation marks an existing post as deleted by setting the deleted_at field (soft delete) in the discussion_board_posts table. Authorization checks require the current user to be the post creator or a moderator/admin. Members cannot delete others' posts. Audit logging of the deletion is performed for traceability. The operation returns confirmation rather than post details, and related endpoints include post restoration (if available) or hard delete (per system policy).","summary":"Soft delete a post in a thread (update deleted_at for discussion_board_posts).","parameters":[{"name":"threadId","description":"Thread containing the post to delete.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"ID of the post to mark as deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member"},{"specification":"Retrieve all version snapshots for a specific post from the discussion_board_post_versions table. Returns all historical versions—each includes version number, edited content, timestamp, and editor ID. This endpoint enables version browsing for audit, rollback, or restoration workflows. Standard authorization applies: members may view versions of their own posts; moderation roles may view all as per policy. Data is sorted chronologically or by version number.","path":"/discussionBoard/member/posts/{postId}/versions","method":"get","description":"Fetch all stored versions for a particular post as per the discussion_board_post_versions schema. Returns an array of all chronological/ordered snapshots, each exposing body content, version number, created_at timestamp, and editor_member_id where available. Authorization guarantees only allowed users can see non-public history (e.g., members see their own post histories, moderators/admins can audit any). This endpoint underpins the view history/rollback UI or audit reporting.","summary":"List all version snapshots of a post from discussion_board_post_versions.","parameters":[{"name":"postId","description":"ID of the post to retrieve all version entries for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Ordered list of all available versions for the specified post.","typeName":"IPageIDiscussionBoardPostVersion"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"Search and filter all version snapshots for a specific post using complex criteria, as required for moderation or audit purposes. Filters may include version number ranges, editor_member_id, timestamp ranges, or text search on content. Executes on the discussion_board_post_versions table. Pagination and sorting options ensure scalable browsing for long version histories. Standard authorization applies (see GET for details).","path":"/discussionBoard/member/posts/{postId}/versions","method":"patch","description":"Performs advanced search and filtering for versions of a specific post. The request body follows IDiscussionBoardPostVersion.IRequest and enables searching by version number, editor, timestamp, or content. Used by admin/moderator UIs for audit, moderation, or detailed history examination. Results are paginated for efficient navigation. Security enforces viewing is only allowed to the original post's owner or privileged roles. Input validation errors or access refusals are clearly reported.","summary":"Search/filter version history for a post (discussion_board_post_versions table).","parameters":[{"name":"postId","description":"ID of the post for which version history search is performed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, search, and pagination parameters for post version search.","typeName":"IDiscussionBoardPostVersion.IRequest"},"responseBody":{"description":"Paginated versions matching the query parameters.","typeName":"IPageIDiscussionBoardPostVersion"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"Retrieve the full details of a specific version snapshot of a post (by versionId), using the discussion_board_post_versions table. Returns the revision content, its version number, creation date, and the editor's ID. Authorization rules require members to view their own versions; moderation/admin roles may audit any post's version history. This supports rollback, audit review, or editor displays.","path":"/discussionBoard/member/posts/{postId}/versions/{versionId}","method":"get","description":"Fetches the details of a particular version of a post as stored in discussion_board_post_versions. The response exposes only this version's body, editor_member_id, version number, and created_at timestamp. Respects role-based viewing policy: only post owners or authorized roles may access. Related endpoints include retrieving full version lists or posting new version snapshots (as with edits). Invalid parameters or unauthorized access returns precise error responses.","summary":"Fetch a single version snapshot for a post from discussion_board_post_versions.","parameters":[{"name":"postId","description":"ID of the post whose version is to be fetched.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"ID of the version snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested version snapshot details.","typeName":"IDiscussionBoardPostVersion"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"Create a new version snapshot record in discussion_board_post_versions for a given post. Used when a post is edited/updated (per requirements). Data such as post ID, editor_member_id, version number, and new body content are supplied in the request—system assigns ID and timestamps. This endpoint checks edit authorization (owner, moderator, admin) and enforces sequential version numbers. Supports editing/rollback workflows for auditability and compliance.","path":"/discussionBoard/member/posts/{postId}/versions","method":"post","description":"Enables the creation of a new version of a specific post when edits occur. Follows the IDiscussionBoardPostVersion.ICreate schema for body data—specifying which post, the new content, and the acting editor_member_id. System-generated fields (ID, created_at) are excluded from the request body. Validates that the editor is authorized and that version numbering remains sequential (incremented). The operation is essential for implementing robust edit history, rollback, and moderation procedures. Related endpoints allow viewing all versions or fetching an individual snapshot.","summary":"Create a revision snapshot for a post in discussion_board_post_versions.","parameters":[{"name":"postId","description":"The ID of the post for which the version is created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All required data for creating a new post version record.","typeName":"IDiscussionBoardPostVersion.ICreate"},"responseBody":{"description":"The version record after successful insertion.","typeName":"IDiscussionBoardPostVersion"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Update (amend/replace) the contents of a version record in the discussion_board_post_versions table, identified by versionId for a given postId. Most business flows don't allow changing historical revision records, but some admin/moderator flows may permit annotation or correction (e.g., attach moderator note, fix meta). Ensures field-by-field validation, proper authorization, and audit logging. Returned data is the new version content after update.","path":"/discussionBoard/admin/posts/{postId}/versions/{versionId}","method":"put","description":"Updates an existing version record with new content or metadata, as justified by board policy. Only permitted to admin or moderator roles (not regular members), as version records are normally append-only. The operation uses IDiscussionBoardPostVersion.IUpdate as the expected request body. Careful audit and validation ensure historical integrity, logging all modifications and enforcing field-level restrictions. Most UIs will not expose this, but it must be provided for compliance scenarios.","summary":"Change post version data in discussion_board_post_versions (admin/mod only).","parameters":[{"name":"postId","description":"ID of the post the version belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"ID of the version record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the given version record.","typeName":"IDiscussionBoardPostVersion.IUpdate"},"responseBody":{"description":"The version record after update.","typeName":"IDiscussionBoardPostVersion"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"Update (amend/replace) the contents of a version record in the discussion_board_post_versions table, identified by versionId for a given postId. Most business flows don't allow changing historical revision records, but some admin/moderator flows may permit annotation or correction (e.g., attach moderator note, fix meta). Ensures field-by-field validation, proper authorization, and audit logging. Returned data is the new version content after update.","path":"/discussionBoard/moderator/posts/{postId}/versions/{versionId}","method":"put","description":"Updates an existing version record with new content or metadata, as justified by board policy. Only permitted to admin or moderator roles (not regular members), as version records are normally append-only. The operation uses IDiscussionBoardPostVersion.IUpdate as the expected request body. Careful audit and validation ensure historical integrity, logging all modifications and enforcing field-level restrictions. Most UIs will not expose this, but it must be provided for compliance scenarios.","summary":"Change post version data in discussion_board_post_versions (admin/mod only).","parameters":[{"name":"postId","description":"ID of the post the version belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"ID of the version record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the given version record.","typeName":"IDiscussionBoardPostVersion.IUpdate"},"responseBody":{"description":"The version record after update.","typeName":"IDiscussionBoardPostVersion"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"Delete (permanently remove) a single post version snapshot from the discussion_board_post_versions table, referenced by versionId and postId. This operation is permitted only to admin or moderator actors, and is usually only performed for legal compliance, data subject requests, or correcting moderation errors. Proper audit logging is a must. This is a hard delete; once performed, the record cannot be recovered without backup. Permission is verified before deletion.","path":"/discussionBoard/admin/posts/{postId}/versions/{versionId}","method":"delete","description":"Permanently deletes a specific post version record for a post, by versionId. This operation is restricted to admin and moderator roles per compliance policies. Hard deletes remove the version record from persistent storage, making it unavailable in future audits or version views. Comprehensive audit trails must be updated to record the deletion action and the responsible actor. Related endpoints include version create, update, and retrieve. Attempting this as a regular member results in an authorization error.","summary":"Delete (hard) a post version snapshot (admin/mod only, irreversible).","parameters":[{"name":"postId","description":"ID of the post whose version is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"ID of the version snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"Delete (permanently remove) a single post version snapshot from the discussion_board_post_versions table, referenced by versionId and postId. This operation is permitted only to admin or moderator actors, and is usually only performed for legal compliance, data subject requests, or correcting moderation errors. Proper audit logging is a must. This is a hard delete; once performed, the record cannot be recovered without backup. Permission is verified before deletion.","path":"/discussionBoard/moderator/posts/{postId}/versions/{versionId}","method":"delete","description":"Permanently deletes a specific post version record for a post, by versionId. This operation is restricted to admin and moderator roles per compliance policies. Hard deletes remove the version record from persistent storage, making it unavailable in future audits or version views. Comprehensive audit trails must be updated to record the deletion action and the responsible actor. Related endpoints include version create, update, and retrieve. Attempting this as a regular member results in an authorization error.","summary":"Delete (hard) a post version snapshot (admin/mod only, irreversible).","parameters":[{"name":"postId","description":"ID of the post whose version is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"ID of the version snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"Retrieve all attachments associated with a specific post. Operates on the discussion_board_post_attachments table, which stores URI, file name, and metadata for each attachment. This operation is essential for post viewers to see all supplementary files or media linked to a particular post. It references the postId parameter to scope the results, and supports read-only access to attachments. Accessible to all roles, including guests, since attachments are part of public post content unless the board or category is private/restricted.","path":"/discussionBoard/posts/{postId}/attachments","method":"get","description":"Fetches a complete list of attachments related to a specific discussion board post. The discussion_board_post_attachments table captures every file uploaded alongside a post, ensuring every file is traceable by uploader, MIME type, and timestamp. All items returned pertain solely to the specified postId, preserving tight referential integrity as enforced by the Prisma schema.\n\nNo authentication is required but authorization controls at the application level should ensure that posts in restricted categories or topics are not exposed to unauthorized users. Guest users may view attachments so long as the post itself is public. Error handling ensures that invalid postId values or attempts to access non-existent posts result in a suitable error message and empty response.\n\nThis API operation is typically used with post detail views, download UI, or to power moderation dashboards for files.","summary":"List all attachments for a single post (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post whose attachments are being requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of attachments for the given post.","typeName":"IDiscussionBoardPostAttachment.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Perform a search or filter across all attachments related to a specific post. This uses the PATCH method to support more complex queries, such as searching by file type, uploader, date range, or partial filename. The operation works with the discussion_board_post_attachments table and provides paginated, filtered responses for enhanced usability. Advanced query parameters are sent in the request body, which must refer to fields that actually exist in the attachment schema.","path":"/discussionBoard/posts/{postId}/attachments","method":"patch","description":"Enables efficient searching, filtering, and sorting of attachment records for a designated post. Requesters can use rich filters—such as filtering by MIME type, file uploader, upload date range, or partial matches on filenames—permitted by the system's attributes on discussion_board_post_attachments.\n\nA comprehensive request body allows specification of pagination settings and desired sort order, making it suitable for large posts with many attachments. Authorization is similar to the simple GET: guests can search attachments for public posts, but resource-sensitive validation may restrict search capabilities depending on board or post privacy level. The operation responds with a paginated array of simplified attachment records, accompanied by pagination metadata.\n\nIntegrates naturally with advanced UI, moderation panels, or admin tools inspecting files uploaded to a given post.","summary":"Search/filter attachments on a post with advanced query/post filters (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post whose attachments are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria for filtering/sorting post attachments.","typeName":"IDiscussionBoardPostAttachment.IRequest"},"responseBody":{"description":"Paginated filtered set of post attachments for the specified post.","typeName":"IPageIDiscussionBoardPostAttachment.ISummary"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Retrieve an individual attachment's metadata and reference URI, given the post and the unique attachment ID. This operation precisely targets a record in the discussion_board_post_attachments table and returns all information fields relevant for the client to display download options, validate MIME type, and check uploader. Use this for attachment detail screens or download initiation flows. If the attachment does not exist, a suitable error or 404 is returned.","path":"/discussionBoard/posts/{postId}/attachments/{attachmentId}","method":"get","description":"Fetches detailed information about a single attachment file belonging to a particular post. Uses both the post and attachment IDs to guarantee exact record lookup, enforcing referential integrity as defined by the Prisma schema (postId → discussion_board_posts.id, attachmentId → discussion_board_post_attachments.id).\n\nReturns all metadata, including file URI, original name, mime type, uploader, and upload timestamp, enabling both download workflows and file preview logic in clients. Errors such as missing post, non-existent attachment, or orphaned references are handled gracefully with clear error codes.\n\nThe endpoint is accessed by any user with viewing rights to the post. For sensitive content, permission checks on the parent post or category should apply in middleware.","summary":"Get single attachment metadata and reference by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post that owns the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete metadata record of the post attachment.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Add a new attachment to an existing post, as identified by postId. Operates on the discussion_board_post_attachments table. Requires the uploader to be an authenticated member and authorized to add attachments to the referenced post. Attachment metadata (URI, name, MIME, etc.) is included in the request body. In case the post is locked/archived or does not exist, the upload is denied. Returns the record of the newly created attachment.","path":"/discussionBoard/member/posts/{postId}/attachments","method":"post","description":"Creates a new attachment associated with an existing post. This operation appends a record to discussion_board_post_attachments, capturing the file link, file name, MIME type, upload timestamp, and the member's identity.\n\nAuthentication is required for all uploading members; only the post owner or those with reply/upload permissions may add attachments. System checks ensure only active, unlocked posts allow new files, and that the post exists and is accessible to the acting user.\n\nResponds with the metadata for the attachment as stored, including the file download URI. Failed inserts (due to locked post, permission problems, or missing/invalid input) result in a detailed error message. This operation is crucial for supporting file/media uploads in post-creation or reply flows.","summary":"Create a new attachment on a post (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of post to attach the file to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New attachment details (file URI, name, type, uploader, etc.).","typeName":"IDiscussionBoardPostAttachment.ICreate"},"responseBody":{"description":"Created attachment record including storage information.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Update the metadata of a specific attachment (such as file name or description), given its parent post and attachment IDs. Operates on the discussion_board_post_attachments table. Only the uploader or a moderator/admin may update attachment metadata. Request body must match the allowed updatable fields in the schema.","path":"/discussionBoard/member/posts/{postId}/attachments/{attachmentId}","method":"put","description":"Updates the metadata—such as file name or possibly URI—of an existing post attachment. Relies on both the parent post identifier and the unique attachmentId to ensure only the intended record is modified. Update requires authenticated caller with appropriate permission, as enforced by role and ownership logic in the application.\n\nPermissible only for the original uploading member, moderators, or admins. Request body defines which properties are updatable, and the implementation respects strict adherence to fields in the discussion_board_post_attachments schema, denying updates to immutable fields (like uploaded timestamp). Errors are generated for attempts to update non-existent or orphaned attachments, for unauthorized access, and for immutable property updates.\n\nEnables correction of filenames, updates for replaced files, etc. A successful update returns the full updated metadata.","summary":"Update post attachment metadata by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post with the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated attachment metadata fields permissible for modification.","typeName":"IDiscussionBoardPostAttachment.IUpdate"},"responseBody":{"description":"Updated version of the attachment metadata.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"Update the metadata of a specific attachment (such as file name or description), given its parent post and attachment IDs. Operates on the discussion_board_post_attachments table. Only the uploader or a moderator/admin may update attachment metadata. Request body must match the allowed updatable fields in the schema.","path":"/discussionBoard/moderator/posts/{postId}/attachments/{attachmentId}","method":"put","description":"Updates the metadata—such as file name or possibly URI—of an existing post attachment. Relies on both the parent post identifier and the unique attachmentId to ensure only the intended record is modified. Update requires authenticated caller with appropriate permission, as enforced by role and ownership logic in the application.\n\nPermissible only for the original uploading member, moderators, or admins. Request body defines which properties are updatable, and the implementation respects strict adherence to fields in the discussion_board_post_attachments schema, denying updates to immutable fields (like uploaded timestamp). Errors are generated for attempts to update non-existent or orphaned attachments, for unauthorized access, and for immutable property updates.\n\nEnables correction of filenames, updates for replaced files, etc. A successful update returns the full updated metadata.","summary":"Update post attachment metadata by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post with the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated attachment metadata fields permissible for modification.","typeName":"IDiscussionBoardPostAttachment.IUpdate"},"responseBody":{"description":"Updated version of the attachment metadata.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Update the metadata of a specific attachment (such as file name or description), given its parent post and attachment IDs. Operates on the discussion_board_post_attachments table. Only the uploader or a moderator/admin may update attachment metadata. Request body must match the allowed updatable fields in the schema.","path":"/discussionBoard/admin/posts/{postId}/attachments/{attachmentId}","method":"put","description":"Updates the metadata—such as file name or possibly URI—of an existing post attachment. Relies on both the parent post identifier and the unique attachmentId to ensure only the intended record is modified. Update requires authenticated caller with appropriate permission, as enforced by role and ownership logic in the application.\n\nPermissible only for the original uploading member, moderators, or admins. Request body defines which properties are updatable, and the implementation respects strict adherence to fields in the discussion_board_post_attachments schema, denying updates to immutable fields (like uploaded timestamp). Errors are generated for attempts to update non-existent or orphaned attachments, for unauthorized access, and for immutable property updates.\n\nEnables correction of filenames, updates for replaced files, etc. A successful update returns the full updated metadata.","summary":"Update post attachment metadata by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post with the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated attachment metadata fields permissible for modification.","typeName":"IDiscussionBoardPostAttachment.IUpdate"},"responseBody":{"description":"Updated version of the attachment metadata.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete an attachment record from a post. Operates on discussion_board_post_attachments. Only the uploader, moderator, or admin may delete. If the post is locked or attachment is protected, the system forbids deletion. Deletion may trigger removal from external storage if applicable. This is a hard delete: the record is removed from the database unless soft delete fields exist, but the current schema does not have them for attachments.","path":"/discussionBoard/member/posts/{postId}/attachments/{attachmentId}","method":"delete","description":"Deletes a specific attachment from a post. The operation references both post and attachment identifiers to guarantee correct record targeting. Authorization checks ensure that only the original uploader, moderators, or admins can perform the operation.\n\nThe record is physically deleted from the database since the attachment model does not support soft deletion in the Prisma schema. Depending on implementation, removal of the physical file from external storage must be orchestrated here as well. Errors are returned if the attachment or post does not exist, access is denied, or if business rules (like locked posts) prevent deletion.\n\nDeletion audit logs and cascading deletes are handled at the persistence and logging layers as per compliance requirements.","summary":"Hard-delete a post attachment by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post with the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Delete an attachment record from a post. Operates on discussion_board_post_attachments. Only the uploader, moderator, or admin may delete. If the post is locked or attachment is protected, the system forbids deletion. Deletion may trigger removal from external storage if applicable. This is a hard delete: the record is removed from the database unless soft delete fields exist, but the current schema does not have them for attachments.","path":"/discussionBoard/moderator/posts/{postId}/attachments/{attachmentId}","method":"delete","description":"Deletes a specific attachment from a post. The operation references both post and attachment identifiers to guarantee correct record targeting. Authorization checks ensure that only the original uploader, moderators, or admins can perform the operation.\n\nThe record is physically deleted from the database since the attachment model does not support soft deletion in the Prisma schema. Depending on implementation, removal of the physical file from external storage must be orchestrated here as well. Errors are returned if the attachment or post does not exist, access is denied, or if business rules (like locked posts) prevent deletion.\n\nDeletion audit logs and cascading deletes are handled at the persistence and logging layers as per compliance requirements.","summary":"Hard-delete a post attachment by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post with the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Delete an attachment record from a post. Operates on discussion_board_post_attachments. Only the uploader, moderator, or admin may delete. If the post is locked or attachment is protected, the system forbids deletion. Deletion may trigger removal from external storage if applicable. This is a hard delete: the record is removed from the database unless soft delete fields exist, but the current schema does not have them for attachments.","path":"/discussionBoard/admin/posts/{postId}/attachments/{attachmentId}","method":"delete","description":"Deletes a specific attachment from a post. The operation references both post and attachment identifiers to guarantee correct record targeting. Authorization checks ensure that only the original uploader, moderators, or admins can perform the operation.\n\nThe record is physically deleted from the database since the attachment model does not support soft deletion in the Prisma schema. Depending on implementation, removal of the physical file from external storage must be orchestrated here as well. Errors are returned if the attachment or post does not exist, access is denied, or if business rules (like locked posts) prevent deletion.\n\nDeletion audit logs and cascading deletes are handled at the persistence and logging layers as per compliance requirements.","summary":"Hard-delete a post attachment by post and attachment IDs (discussion_board_post_attachments).","parameters":[{"name":"postId","description":"Unique identifier of the post with the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Get a list of all comments on the discussion board (global query, not scoped by post/thread). Operates on discussion_board_comments table. Returns an array or paginated set of comments, with each containing visible content, member reference, and timestamps. Primarily for administrative views or global search/browse features. Accessible to admins, moderators, and may be available to members with limits.","path":"/discussionBoard/admin/comments","method":"get","description":"Retrieves all comments on the board (optionally paginated), without post/thread scoping. Returns records from discussion_board_comments, each containing the core fields: content, is_deleted, created/updated timestamps, and references to member and parent post. For privacy and efficiency, global retrieval is usually limited to authorized roles.\n\nSupports admin tools, moderation overviews, or reporting workflows. Filtering for deleted/active comments, date ranges, or author can be introduced at higher API layers.","summary":"List all comments on the board (discussion_board_comments, global).","parameters":[],"requestBody":null,"responseBody":{"description":"An array or paginated list of all comments on the platform.","typeName":"IDiscussionBoardComment.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Get a list of all comments on the discussion board (global query, not scoped by post/thread). Operates on discussion_board_comments table. Returns an array or paginated set of comments, with each containing visible content, member reference, and timestamps. Primarily for administrative views or global search/browse features. Accessible to admins, moderators, and may be available to members with limits.","path":"/discussionBoard/moderator/comments","method":"get","description":"Retrieves all comments on the board (optionally paginated), without post/thread scoping. Returns records from discussion_board_comments, each containing the core fields: content, is_deleted, created/updated timestamps, and references to member and parent post. For privacy and efficiency, global retrieval is usually limited to authorized roles.\n\nSupports admin tools, moderation overviews, or reporting workflows. Filtering for deleted/active comments, date ranges, or author can be introduced at higher API layers.","summary":"List all comments on the board (discussion_board_comments, global).","parameters":[],"requestBody":null,"responseBody":{"description":"An array or paginated list of all comments on the platform.","typeName":"IDiscussionBoardComment.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Search/filter comments across the entire board with complex query support. Uses PATCH method with request body specifying filters (member, post, date, is_deleted, etc.). Operates on the discussion_board_comments table. Supports paginated results and advanced admin/mod tools. Returns only fields present in the schema.","path":"/discussionBoard/admin/comments","method":"patch","description":"Enables advanced searching and filtering of comments site-wide. Request body supports filtering by attributes like member, parent post, created/updated timestamps, and deleted state, as well as controlling pagination and sort order.\n\nResults are paginated and optimized for use by moderation tools, reporting dashboards, and advanced UI features. Error handling includes validation of search criteria and appropriate feedback for no-match or excessive result sets.\n\nAuthorization is limited to moderators and admins, as global comment search can expose sensitive content and requires oversight in compliance with board policies.","summary":"Filtered, paginated query of comments board-wide (discussion_board_comments).","parameters":[],"requestBody":{"description":"Search and filter specification for comments (members, posts, timestamps, status, etc.).","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated set of comments matching filter/query, with summary for listings.","typeName":"IPageIDiscussionBoardComment.ISummary"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Search/filter comments across the entire board with complex query support. Uses PATCH method with request body specifying filters (member, post, date, is_deleted, etc.). Operates on the discussion_board_comments table. Supports paginated results and advanced admin/mod tools. Returns only fields present in the schema.","path":"/discussionBoard/moderator/comments","method":"patch","description":"Enables advanced searching and filtering of comments site-wide. Request body supports filtering by attributes like member, parent post, created/updated timestamps, and deleted state, as well as controlling pagination and sort order.\n\nResults are paginated and optimized for use by moderation tools, reporting dashboards, and advanced UI features. Error handling includes validation of search criteria and appropriate feedback for no-match or excessive result sets.\n\nAuthorization is limited to moderators and admins, as global comment search can expose sensitive content and requires oversight in compliance with board policies.","summary":"Filtered, paginated query of comments board-wide (discussion_board_comments).","parameters":[],"requestBody":{"description":"Search and filter specification for comments (members, posts, timestamps, status, etc.).","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated set of comments matching filter/query, with summary for listings.","typeName":"IPageIDiscussionBoardComment.ISummary"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieve detailed information on a specific comment given its unique commentId. Uses discussion_board_comments table, which holds one record per comment, including creator, post reference, timestamps, and soft delete flag. Used in moderation UIs, editing screens, or reply/read views. Access limited to roles who can see all comment content: admin, moderator, plus the comment's author (handled in application for privacy).","path":"/discussionBoard/admin/comments/{commentId}","method":"get","description":"Fetches the complete record for a comment, identified by its globally unique commentId. Returns all persisted fields as defined in the discussion_board_comments schema: content, deletion status, relate member and post IDs, and relevant timestamps.\n\nCompanion APIs should validate that only authorized roles or the owner can access this endpoint. Used for precise moderation workflows, member lookups, or to populate detailed comment views.\n\nIncludes proper error feedback if the comment does not exist, has been hard deleted (if ever allowed), or if the user lacks privileges.","summary":"Get a single comment's details by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full record of the comment, all persisted metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieve detailed information on a specific comment given its unique commentId. Uses discussion_board_comments table, which holds one record per comment, including creator, post reference, timestamps, and soft delete flag. Used in moderation UIs, editing screens, or reply/read views. Access limited to roles who can see all comment content: admin, moderator, plus the comment's author (handled in application for privacy).","path":"/discussionBoard/moderator/comments/{commentId}","method":"get","description":"Fetches the complete record for a comment, identified by its globally unique commentId. Returns all persisted fields as defined in the discussion_board_comments schema: content, deletion status, relate member and post IDs, and relevant timestamps.\n\nCompanion APIs should validate that only authorized roles or the owner can access this endpoint. Used for precise moderation workflows, member lookups, or to populate detailed comment views.\n\nIncludes proper error feedback if the comment does not exist, has been hard deleted (if ever allowed), or if the user lacks privileges.","summary":"Get a single comment's details by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full record of the comment, all persisted metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieve detailed information on a specific comment given its unique commentId. Uses discussion_board_comments table, which holds one record per comment, including creator, post reference, timestamps, and soft delete flag. Used in moderation UIs, editing screens, or reply/read views. Access limited to roles who can see all comment content: admin, moderator, plus the comment's author (handled in application for privacy).","path":"/discussionBoard/member/comments/{commentId}","method":"get","description":"Fetches the complete record for a comment, identified by its globally unique commentId. Returns all persisted fields as defined in the discussion_board_comments schema: content, deletion status, relate member and post IDs, and relevant timestamps.\n\nCompanion APIs should validate that only authorized roles or the owner can access this endpoint. Used for precise moderation workflows, member lookups, or to populate detailed comment views.\n\nIncludes proper error feedback if the comment does not exist, has been hard deleted (if ever allowed), or if the user lacks privileges.","summary":"Get a single comment's details by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full record of the comment, all persisted metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"member"},{"specification":"Create a new comment under a post, identified in the request body (not in URL). Writes to discussion_board_comments table, which stores all business-required fields: content, is_deleted (always false on creation), creator, and references to the post and member IDs. Only authenticated members may create comments, as required by business logic. Returns the created comment with all database-generated values (e.g., timestamps, IDs).","path":"/discussionBoard/member/comments","method":"post","description":"Adds a new comment to a specified post. The required fields (discussed in IDiscussionBoardComment.ICreate) must include the parent post ID, creator member ID (from session or API context), and comment content. Comment is never soft-deleted on creation. Backend logic enforces member authentication, and validates that the referenced post and member exist and are active.\n\nA successful insert returns the full comment record with assigned ID, timestamps, and reference metadata. Error responses are used for attempts by unauthenticated/guest users, missing required data, or referencing locked/deleted posts. This endpoint is a cornerstone of participation on the board.","summary":"Create a new comment under a post (discussion_board_comments).","parameters":[],"requestBody":{"description":"New comment fields: content, creator, parent post, etc.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment record as stored in database.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Update the content of a comment defined by commentId. Modifies the discussion_board_comments table, enforcing update by original author, moderator, or admin. Soft deletion can also be handled here (set is_deleted). Request body restricts editable fields to match Prisma schema. Timestamps and edit trails are maintained by related tables. Returns updated comment with all changes.","path":"/discussionBoard/admin/comments/{commentId}","method":"put","description":"Updates the visible content or deletion status of a comment as defined in the request body. The Prisma schema supports editing only by the comment's creator, admin, or moderator. Request body must conform to the allowed updatable fields (content, is_deleted). Authorization checks apply for each role—members may only update their own comments, while moderators/admins may edit any comment.\n\nThis endpoint is essential for moderation, correcting prior input, or soft-deleting abusive/inappropriate comments (by setting is_deleted=true). On success, returns the full updated comment record. Failure to update due to missing comment, invalid update, or lack of privileges returns a detailed error message.","summary":"Update comment content/status by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier for the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: content, is_deleted.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"Updated comment as stored in database.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["admin","moderator","member"],"name":"update","authorizationRole":"admin"},{"specification":"Update the content of a comment defined by commentId. Modifies the discussion_board_comments table, enforcing update by original author, moderator, or admin. Soft deletion can also be handled here (set is_deleted). Request body restricts editable fields to match Prisma schema. Timestamps and edit trails are maintained by related tables. Returns updated comment with all changes.","path":"/discussionBoard/moderator/comments/{commentId}","method":"put","description":"Updates the visible content or deletion status of a comment as defined in the request body. The Prisma schema supports editing only by the comment's creator, admin, or moderator. Request body must conform to the allowed updatable fields (content, is_deleted). Authorization checks apply for each role—members may only update their own comments, while moderators/admins may edit any comment.\n\nThis endpoint is essential for moderation, correcting prior input, or soft-deleting abusive/inappropriate comments (by setting is_deleted=true). On success, returns the full updated comment record. Failure to update due to missing comment, invalid update, or lack of privileges returns a detailed error message.","summary":"Update comment content/status by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier for the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: content, is_deleted.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"Updated comment as stored in database.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["admin","moderator","member"],"name":"update","authorizationRole":"moderator"},{"specification":"Update the content of a comment defined by commentId. Modifies the discussion_board_comments table, enforcing update by original author, moderator, or admin. Soft deletion can also be handled here (set is_deleted). Request body restricts editable fields to match Prisma schema. Timestamps and edit trails are maintained by related tables. Returns updated comment with all changes.","path":"/discussionBoard/member/comments/{commentId}","method":"put","description":"Updates the visible content or deletion status of a comment as defined in the request body. The Prisma schema supports editing only by the comment's creator, admin, or moderator. Request body must conform to the allowed updatable fields (content, is_deleted). Authorization checks apply for each role—members may only update their own comments, while moderators/admins may edit any comment.\n\nThis endpoint is essential for moderation, correcting prior input, or soft-deleting abusive/inappropriate comments (by setting is_deleted=true). On success, returns the full updated comment record. Failure to update due to missing comment, invalid update, or lack of privileges returns a detailed error message.","summary":"Update comment content/status by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier for the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: content, is_deleted.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"Updated comment as stored in database.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["admin","moderator","member"],"name":"update","authorizationRole":"member"},{"specification":"Physically remove a comment from the database. Operates on discussion_board_comments identified by commentId. Hard delete is performed since there is no deleted_at, only is_deleted for soft deletion. Only admins and moderators may hard delete comments; members can only set is_deleted flag. Request body is null as no data is needed for deletion. No response body on success.","path":"/discussionBoard/admin/comments/{commentId}","method":"delete","description":"Permanently deletes a comment given its unique identifier. The lack of a deleted_at column in the schema means this operation truly erases the record, not just flags it. Only users with admin or moderator privileges can perform this action; members are restricted to soft deletion via updates.\n\nError handling manages attempts to delete non-existent comments or unauthorized requests. Compliance logs should capture each deletion for audit purposes. Use of this operation is rare in production, primarily for compliance or when handling spam/abuse at scale.\n\nOn success, returns 204 with no body. Client applications should refresh listings and handle missing references accordingly.","summary":"Hard-delete a comment by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"Physically remove a comment from the database. Operates on discussion_board_comments identified by commentId. Hard delete is performed since there is no deleted_at, only is_deleted for soft deletion. Only admins and moderators may hard delete comments; members can only set is_deleted flag. Request body is null as no data is needed for deletion. No response body on success.","path":"/discussionBoard/moderator/comments/{commentId}","method":"delete","description":"Permanently deletes a comment given its unique identifier. The lack of a deleted_at column in the schema means this operation truly erases the record, not just flags it. Only users with admin or moderator privileges can perform this action; members are restricted to soft deletion via updates.\n\nError handling manages attempts to delete non-existent comments or unauthorized requests. Compliance logs should capture each deletion for audit purposes. Use of this operation is rare in production, primarily for compliance or when handling spam/abuse at scale.\n\nOn success, returns 204 with no body. Client applications should refresh listings and handle missing references accordingly.","summary":"Hard-delete a comment by commentId (discussion_board_comments).","parameters":[{"name":"commentId","description":"Unique identifier of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This API retrieves the full version history of a specific comment on the discussion board, as stored in the discussion_board_comment_versions table. Each version record represents an edit made to the comment and is linked to both the editor (member) and the parent comment. The endpoint is vital for audit trails, transparency, and moderation, as required by the platform's compliance and user trust requirements. Version history includes all edits performed, with metadata such as when the edit occurred and by whom. The operation is directly related to the core editing and moderation features described in the requirements analysis document.","path":"/discussionBoard/member/comments/{commentId}/versions","method":"get","description":"Fetch the complete version history of a specific comment, identified by its unique commentId. The returned data includes all revisions, editors (by member), timestamp of each version's creation, and content snapshot per version. This enables members to review or roll back their own edits, while also allowing moderators and admins to audit the editing history for moderation and compliance purposes.\n\nSecurity measures restrict access such that only the comment author, admins, or moderators may view this audit trail. The endpoint maps directly to the comment versioning mechanism described in the Prisma schema, where each comment can have many versions stored in the discussion_board_comment_versions table. Error scenarios are handled for cases where the comment does not exist, no versions are found, or the caller lacks permissions.","summary":"List all edit versions of a specific comment (from discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the target comment whose version history is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all edit versions associated with the given comment, including content, editor, and timestamps.","typeName":"IPageIDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"member"},{"specification":"This API retrieves the full version history of a specific comment on the discussion board, as stored in the discussion_board_comment_versions table. Each version record represents an edit made to the comment and is linked to both the editor (member) and the parent comment. The endpoint is vital for audit trails, transparency, and moderation, as required by the platform's compliance and user trust requirements. Version history includes all edits performed, with metadata such as when the edit occurred and by whom. The operation is directly related to the core editing and moderation features described in the requirements analysis document.","path":"/discussionBoard/moderator/comments/{commentId}/versions","method":"get","description":"Fetch the complete version history of a specific comment, identified by its unique commentId. The returned data includes all revisions, editors (by member), timestamp of each version's creation, and content snapshot per version. This enables members to review or roll back their own edits, while also allowing moderators and admins to audit the editing history for moderation and compliance purposes.\n\nSecurity measures restrict access such that only the comment author, admins, or moderators may view this audit trail. The endpoint maps directly to the comment versioning mechanism described in the Prisma schema, where each comment can have many versions stored in the discussion_board_comment_versions table. Error scenarios are handled for cases where the comment does not exist, no versions are found, or the caller lacks permissions.","summary":"List all edit versions of a specific comment (from discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the target comment whose version history is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all edit versions associated with the given comment, including content, editor, and timestamps.","typeName":"IPageIDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"This API retrieves the full version history of a specific comment on the discussion board, as stored in the discussion_board_comment_versions table. Each version record represents an edit made to the comment and is linked to both the editor (member) and the parent comment. The endpoint is vital for audit trails, transparency, and moderation, as required by the platform's compliance and user trust requirements. Version history includes all edits performed, with metadata such as when the edit occurred and by whom. The operation is directly related to the core editing and moderation features described in the requirements analysis document.","path":"/discussionBoard/admin/comments/{commentId}/versions","method":"get","description":"Fetch the complete version history of a specific comment, identified by its unique commentId. The returned data includes all revisions, editors (by member), timestamp of each version's creation, and content snapshot per version. This enables members to review or roll back their own edits, while also allowing moderators and admins to audit the editing history for moderation and compliance purposes.\n\nSecurity measures restrict access such that only the comment author, admins, or moderators may view this audit trail. The endpoint maps directly to the comment versioning mechanism described in the Prisma schema, where each comment can have many versions stored in the discussion_board_comment_versions table. Error scenarios are handled for cases where the comment does not exist, no versions are found, or the caller lacks permissions.","summary":"List all edit versions of a specific comment (from discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the target comment whose version history is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all edit versions associated with the given comment, including content, editor, and timestamps.","typeName":"IPageIDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"This API allows searching and paginated retrieval of comment versions associated with a given commentId, supporting advanced search, filter, and sort requirements on the discussion_board_comment_versions table. It allows filtering by editor, date range, or partial content. It is aligned with analytic requirements and platform needs for fine-grained version tracing and audit queries. The result provides a paginated set of version summaries for the specified comment.","path":"/discussionBoard/member/comments/{commentId}/versions","method":"patch","description":"Retrieve a filtered, sorted, and paginated list of version records for a specific comment. Search parameters allow filtering by editor_member_id, creation date range, or content keywords, and results can be sorted by created_at or version number. This operation empowers both advanced users (members, admins, moderators) and analytics/reporting modules to efficiently query comment edit histories for compliance and transparency.\n\nThe Prisma schema's design ensures that discussion_board_comment_versions maintains 3NF with clear separation of audit, member, and content fields. Pagination ensures that long edit histories do not overload the client or UI, and security restrictions guarantee only authorized actors can utilize advanced search.","summary":"Search and paginate comment versions for a specific comment (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment whose versions are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria (editor filter, date range, content, page, etc) for comment version listing.","typeName":"IDiscussionBoardCommentVersion.IRequest"},"responseBody":{"description":"Paginated search result of comment version summaries matching the query.","typeName":"IPageIDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"member"},{"specification":"This API allows searching and paginated retrieval of comment versions associated with a given commentId, supporting advanced search, filter, and sort requirements on the discussion_board_comment_versions table. It allows filtering by editor, date range, or partial content. It is aligned with analytic requirements and platform needs for fine-grained version tracing and audit queries. The result provides a paginated set of version summaries for the specified comment.","path":"/discussionBoard/moderator/comments/{commentId}/versions","method":"patch","description":"Retrieve a filtered, sorted, and paginated list of version records for a specific comment. Search parameters allow filtering by editor_member_id, creation date range, or content keywords, and results can be sorted by created_at or version number. This operation empowers both advanced users (members, admins, moderators) and analytics/reporting modules to efficiently query comment edit histories for compliance and transparency.\n\nThe Prisma schema's design ensures that discussion_board_comment_versions maintains 3NF with clear separation of audit, member, and content fields. Pagination ensures that long edit histories do not overload the client or UI, and security restrictions guarantee only authorized actors can utilize advanced search.","summary":"Search and paginate comment versions for a specific comment (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment whose versions are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria (editor filter, date range, content, page, etc) for comment version listing.","typeName":"IDiscussionBoardCommentVersion.IRequest"},"responseBody":{"description":"Paginated search result of comment version summaries matching the query.","typeName":"IPageIDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"This API allows searching and paginated retrieval of comment versions associated with a given commentId, supporting advanced search, filter, and sort requirements on the discussion_board_comment_versions table. It allows filtering by editor, date range, or partial content. It is aligned with analytic requirements and platform needs for fine-grained version tracing and audit queries. The result provides a paginated set of version summaries for the specified comment.","path":"/discussionBoard/admin/comments/{commentId}/versions","method":"patch","description":"Retrieve a filtered, sorted, and paginated list of version records for a specific comment. Search parameters allow filtering by editor_member_id, creation date range, or content keywords, and results can be sorted by created_at or version number. This operation empowers both advanced users (members, admins, moderators) and analytics/reporting modules to efficiently query comment edit histories for compliance and transparency.\n\nThe Prisma schema's design ensures that discussion_board_comment_versions maintains 3NF with clear separation of audit, member, and content fields. Pagination ensures that long edit histories do not overload the client or UI, and security restrictions guarantee only authorized actors can utilize advanced search.","summary":"Search and paginate comment versions for a specific comment (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment whose versions are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria (editor filter, date range, content, page, etc) for comment version listing.","typeName":"IDiscussionBoardCommentVersion.IRequest"},"responseBody":{"description":"Paginated search result of comment version summaries matching the query.","typeName":"IPageIDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a single version record for a specific comment, by versionId. This directly maps to a row in discussion_board_comment_versions, showing the complete snapshot content, editor info, and edit timestamp for the requested version. The endpoint supports compliance, transparency, and detailed moderation as outlined in the requirements, and connects to rollback/workflow features. The endpoint has security restrictions for audit integrity.","path":"/discussionBoard/member/comments/{commentId}/versions/{versionId}","method":"get","description":"Fetch and return a specific comment version associated with a commentId and versionId. The API provides a complete snapshot of the comment content as it was at the time of that version, including precise information on the member who performed the edit, and when it was made. This supports both end-user edit history navigation and staff audit purposes.\n\nRole-based access control ensures only the comment author, moderators, or admins may view version details. Any attempt to access a non-existent or unauthorized version returns an appropriate error message, maintaining data protection and integrity.","summary":"Get a specific comment version by versionId (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment that owns the version.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier (UUID) of the exact comment version to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the requested comment version including content, editor, created_at, and related audit metadata.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"member"},{"specification":"Retrieve a single version record for a specific comment, by versionId. This directly maps to a row in discussion_board_comment_versions, showing the complete snapshot content, editor info, and edit timestamp for the requested version. The endpoint supports compliance, transparency, and detailed moderation as outlined in the requirements, and connects to rollback/workflow features. The endpoint has security restrictions for audit integrity.","path":"/discussionBoard/moderator/comments/{commentId}/versions/{versionId}","method":"get","description":"Fetch and return a specific comment version associated with a commentId and versionId. The API provides a complete snapshot of the comment content as it was at the time of that version, including precise information on the member who performed the edit, and when it was made. This supports both end-user edit history navigation and staff audit purposes.\n\nRole-based access control ensures only the comment author, moderators, or admins may view version details. Any attempt to access a non-existent or unauthorized version returns an appropriate error message, maintaining data protection and integrity.","summary":"Get a specific comment version by versionId (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment that owns the version.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier (UUID) of the exact comment version to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the requested comment version including content, editor, created_at, and related audit metadata.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieve a single version record for a specific comment, by versionId. This directly maps to a row in discussion_board_comment_versions, showing the complete snapshot content, editor info, and edit timestamp for the requested version. The endpoint supports compliance, transparency, and detailed moderation as outlined in the requirements, and connects to rollback/workflow features. The endpoint has security restrictions for audit integrity.","path":"/discussionBoard/admin/comments/{commentId}/versions/{versionId}","method":"get","description":"Fetch and return a specific comment version associated with a commentId and versionId. The API provides a complete snapshot of the comment content as it was at the time of that version, including precise information on the member who performed the edit, and when it was made. This supports both end-user edit history navigation and staff audit purposes.\n\nRole-based access control ensures only the comment author, moderators, or admins may view version details. Any attempt to access a non-existent or unauthorized version returns an appropriate error message, maintaining data protection and integrity.","summary":"Get a specific comment version by versionId (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment that owns the version.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier (UUID) of the exact comment version to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the requested comment version including content, editor, created_at, and related audit metadata.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new version record for an existing comment. This supports the editing and revision-tracking requirements in the system. The discussion_board_comment_versions table stores each edit as a new version linked to the parent comment and the editor. The API validates that only the comment's author or allowed staff may append new versions, and ensures proper update logic in the parent comment's content. All business, audit, and compliance rules on version edits are enforced.","path":"/discussionBoard/member/comments/{commentId}/versions","method":"post","description":"Append a new version (edit) to a given comment, recording a full snapshot of the edited content, the editor's member ID, and the event timestamp. Only the comment's author, admins, or moderators are permitted to create new comment versions. The operation ensures version sequence continuity and updates the current visible content of the parent comment accordingly.\n\nError handling covers failed permission checks, missing parent comment, and validation failures (e.g., empty or excessively long content). The version record created in discussion_board_comment_versions is also referenced for audit and potential future rollbacks.","summary":"Create a new version (edit) for a comment (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment being edited (parent for version creation).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new version's content snapshot and editor information.","typeName":"IDiscussionBoardCommentVersion.ICreate"},"responseBody":{"description":"The newly-created comment version record, including id, content, editor, version number, and timestamps.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member"},{"specification":"Create a new version record for an existing comment. This supports the editing and revision-tracking requirements in the system. The discussion_board_comment_versions table stores each edit as a new version linked to the parent comment and the editor. The API validates that only the comment's author or allowed staff may append new versions, and ensures proper update logic in the parent comment's content. All business, audit, and compliance rules on version edits are enforced.","path":"/discussionBoard/moderator/comments/{commentId}/versions","method":"post","description":"Append a new version (edit) to a given comment, recording a full snapshot of the edited content, the editor's member ID, and the event timestamp. Only the comment's author, admins, or moderators are permitted to create new comment versions. The operation ensures version sequence continuity and updates the current visible content of the parent comment accordingly.\n\nError handling covers failed permission checks, missing parent comment, and validation failures (e.g., empty or excessively long content). The version record created in discussion_board_comment_versions is also referenced for audit and potential future rollbacks.","summary":"Create a new version (edit) for a comment (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment being edited (parent for version creation).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new version's content snapshot and editor information.","typeName":"IDiscussionBoardCommentVersion.ICreate"},"responseBody":{"description":"The newly-created comment version record, including id, content, editor, version number, and timestamps.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Create a new version record for an existing comment. This supports the editing and revision-tracking requirements in the system. The discussion_board_comment_versions table stores each edit as a new version linked to the parent comment and the editor. The API validates that only the comment's author or allowed staff may append new versions, and ensures proper update logic in the parent comment's content. All business, audit, and compliance rules on version edits are enforced.","path":"/discussionBoard/admin/comments/{commentId}/versions","method":"post","description":"Append a new version (edit) to a given comment, recording a full snapshot of the edited content, the editor's member ID, and the event timestamp. Only the comment's author, admins, or moderators are permitted to create new comment versions. The operation ensures version sequence continuity and updates the current visible content of the parent comment accordingly.\n\nError handling covers failed permission checks, missing parent comment, and validation failures (e.g., empty or excessively long content). The version record created in discussion_board_comment_versions is also referenced for audit and potential future rollbacks.","summary":"Create a new version (edit) for a comment (discussion_board_comment_versions)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment being edited (parent for version creation).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new version's content snapshot and editor information.","typeName":"IDiscussionBoardCommentVersion.ICreate"},"responseBody":{"description":"The newly-created comment version record, including id, content, editor, version number, and timestamps.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update (replace) an existing comment version with new content or editor attribution. Used for moderation/audit only, as revision overwrite is typically restricted to system actors. Applies to a single record in discussion_board_comment_versions. The API ensures that updates preserve audit consistency and that only admins/moderators (never ordinary members) can use this endpoint. Checks foreign key validity (comment, version, editor).","path":"/discussionBoard/moderator/comments/{commentId}/versions/{versionId}","method":"put","description":"Modify a specific version record of a comment, allowing admins and moderators to overwrite (correct, redact, or repair) version details for compliance or abuse handling. Typical users do not update version records. Updates are only permitted when necessary for regulatory or legal reasons, and all changes are logged for audit. The request can replace the content snapshot or reassign the editor member.\n\nThe integrity of the version sequence in discussion_board_comment_versions is maintained, and all foreign keys are validated. Error handling covers permission denial, not-found errors, and invalid update attempts.","summary":"Update (moderate) a specific comment version. Staff-only.","parameters":[{"name":"commentId","description":"UUID of the parent comment whose version is modified.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"UUID of the specific comment version to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for comment version, including content and optional editor re-attribution.","typeName":"IDiscussionBoardCommentVersion.IUpdate"},"responseBody":{"description":"The updated comment version record reflecting all changes made by the update request.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Update (replace) an existing comment version with new content or editor attribution. Used for moderation/audit only, as revision overwrite is typically restricted to system actors. Applies to a single record in discussion_board_comment_versions. The API ensures that updates preserve audit consistency and that only admins/moderators (never ordinary members) can use this endpoint. Checks foreign key validity (comment, version, editor).","path":"/discussionBoard/admin/comments/{commentId}/versions/{versionId}","method":"put","description":"Modify a specific version record of a comment, allowing admins and moderators to overwrite (correct, redact, or repair) version details for compliance or abuse handling. Typical users do not update version records. Updates are only permitted when necessary for regulatory or legal reasons, and all changes are logged for audit. The request can replace the content snapshot or reassign the editor member.\n\nThe integrity of the version sequence in discussion_board_comment_versions is maintained, and all foreign keys are validated. Error handling covers permission denial, not-found errors, and invalid update attempts.","summary":"Update (moderate) a specific comment version. Staff-only.","parameters":[{"name":"commentId","description":"UUID of the parent comment whose version is modified.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"UUID of the specific comment version to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for comment version, including content and optional editor re-attribution.","typeName":"IDiscussionBoardCommentVersion.IUpdate"},"responseBody":{"description":"The updated comment version record reflecting all changes made by the update request.","typeName":"IDiscussionBoardCommentVersion"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete a comment version record. As each version is critical for audit, deletion is strictly limited to admins and only under extraordinary circumstances (e.g., legal takedown, content required to be removed fully from version history). The operation acts on a single discussion_board_comment_versions row, ensuring that regulatory, legal, and audit integrity policies are maintained. All deletes are hard (physical) unless the schema provides a soft-delete; here, true delete applies. Action is fully logged.","path":"/discussionBoard/admin/comments/{commentId}/versions/{versionId}","method":"delete","description":"Permanently remove a comment version from the history, allowed only for administrators. Used for high-compliance takedown or privacy/law enforcement requests. Deletes the row from discussion_board_comment_versions. Before deletion, the endpoint validates that the version exists, the caller is an admin, and any legal or policy prerequisites for full erasure are met.\n\nPost-operation, admins should review sequence continuity and audit trails. If version removal would disrupt audit or integrity, the operation returns an error and does not proceed.","summary":"Delete a comment version record (admin-only, hard delete)","parameters":[{"name":"commentId","description":"Parent comment's unique identifier (UUID) for which a version is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier (UUID) of the comment version to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"List all attachment files currently associated with a given comment, according to the discussion_board_comment_attachments table. This endpoint supports the requirement for members to view all files/images/media attached to their comment, as well as moderation/audit features. Each attachment record provides metadata and a URI for client retrieval and display. Access control ensures only permitted actors can view non-public attachments, such as those pending moderation or flagged for abuse.","path":"/discussionBoard/member/comments/{commentId}/attachments","method":"get","description":"Return all attachment records for a specific comment, allowing members, moderators, and admins to see/download/manage their own or others' files, subject to permission checks. The result contains metadata (file name, URI, uploaded_by, MIME type, timestamp) for each linked file, as defined by discussion_board_comment_attachments. Supports user experience, moderation, and audit flows.\n\nSecurity: Only comment owners, moderators, and admins can list attachments for non-public comments. Attempts to access attachments for non-existent comments, or by unauthorized users, are explicitly denied.","summary":"List all attachments for a comment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment whose attachments to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All file attachment records linked to the specified comment, suitable for direct download and rendering.","typeName":"IPageIDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"member"},{"specification":"List all attachment files currently associated with a given comment, according to the discussion_board_comment_attachments table. This endpoint supports the requirement for members to view all files/images/media attached to their comment, as well as moderation/audit features. Each attachment record provides metadata and a URI for client retrieval and display. Access control ensures only permitted actors can view non-public attachments, such as those pending moderation or flagged for abuse.","path":"/discussionBoard/moderator/comments/{commentId}/attachments","method":"get","description":"Return all attachment records for a specific comment, allowing members, moderators, and admins to see/download/manage their own or others' files, subject to permission checks. The result contains metadata (file name, URI, uploaded_by, MIME type, timestamp) for each linked file, as defined by discussion_board_comment_attachments. Supports user experience, moderation, and audit flows.\n\nSecurity: Only comment owners, moderators, and admins can list attachments for non-public comments. Attempts to access attachments for non-existent comments, or by unauthorized users, are explicitly denied.","summary":"List all attachments for a comment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment whose attachments to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All file attachment records linked to the specified comment, suitable for direct download and rendering.","typeName":"IPageIDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"List all attachment files currently associated with a given comment, according to the discussion_board_comment_attachments table. This endpoint supports the requirement for members to view all files/images/media attached to their comment, as well as moderation/audit features. Each attachment record provides metadata and a URI for client retrieval and display. Access control ensures only permitted actors can view non-public attachments, such as those pending moderation or flagged for abuse.","path":"/discussionBoard/admin/comments/{commentId}/attachments","method":"get","description":"Return all attachment records for a specific comment, allowing members, moderators, and admins to see/download/manage their own or others' files, subject to permission checks. The result contains metadata (file name, URI, uploaded_by, MIME type, timestamp) for each linked file, as defined by discussion_board_comment_attachments. Supports user experience, moderation, and audit flows.\n\nSecurity: Only comment owners, moderators, and admins can list attachments for non-public comments. Attempts to access attachments for non-existent comments, or by unauthorized users, are explicitly denied.","summary":"List all attachments for a comment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the comment whose attachments to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All file attachment records linked to the specified comment, suitable for direct download and rendering.","typeName":"IPageIDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"Search and filter attachment records associated with a given comment. This operation provides paginated, filtered, and sorted results over discussion_board_comment_attachments, using criteria such as uploader, file name, mime type, and upload date. Use cases include detailed review for moderation, managing media types (e.g., finding images, documents), and analytics/reporting.","path":"/discussionBoard/member/comments/{commentId}/attachments","method":"patch","description":"Retrieve a paginated and filtered list of attachment records for a specific comment. Permitted filters include uploader_member_id, MIME type, file name, and upload date range. Results are paginated and can be sorted as per front-end requirements and business rules. Enables both user-facing browsing and moderation/analytics workflows.\n\nImplementation honors all constraints and indexes from the Prisma schema's discussion_board_comment_attachments table. Security requires that only the comment author, admins, or moderators can use this search function. Error handling includes missing comment, no matching attachments, and permission denials.","summary":"Search/filter attachments for a comment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"UUID of the comment to which attachments belong.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter controls for attachment record listing (uploader, MIME type, file name, upload date, etc).","typeName":"IDiscussionBoardCommentAttachment.IRequest"},"responseBody":{"description":"Page of comment attachment records matching search criteria.","typeName":"IPageIDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"member"},{"specification":"Search and filter attachment records associated with a given comment. This operation provides paginated, filtered, and sorted results over discussion_board_comment_attachments, using criteria such as uploader, file name, mime type, and upload date. Use cases include detailed review for moderation, managing media types (e.g., finding images, documents), and analytics/reporting.","path":"/discussionBoard/moderator/comments/{commentId}/attachments","method":"patch","description":"Retrieve a paginated and filtered list of attachment records for a specific comment. Permitted filters include uploader_member_id, MIME type, file name, and upload date range. Results are paginated and can be sorted as per front-end requirements and business rules. Enables both user-facing browsing and moderation/analytics workflows.\n\nImplementation honors all constraints and indexes from the Prisma schema's discussion_board_comment_attachments table. Security requires that only the comment author, admins, or moderators can use this search function. Error handling includes missing comment, no matching attachments, and permission denials.","summary":"Search/filter attachments for a comment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"UUID of the comment to which attachments belong.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter controls for attachment record listing (uploader, MIME type, file name, upload date, etc).","typeName":"IDiscussionBoardCommentAttachment.IRequest"},"responseBody":{"description":"Page of comment attachment records matching search criteria.","typeName":"IPageIDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"Search and filter attachment records associated with a given comment. This operation provides paginated, filtered, and sorted results over discussion_board_comment_attachments, using criteria such as uploader, file name, mime type, and upload date. Use cases include detailed review for moderation, managing media types (e.g., finding images, documents), and analytics/reporting.","path":"/discussionBoard/admin/comments/{commentId}/attachments","method":"patch","description":"Retrieve a paginated and filtered list of attachment records for a specific comment. Permitted filters include uploader_member_id, MIME type, file name, and upload date range. Results are paginated and can be sorted as per front-end requirements and business rules. Enables both user-facing browsing and moderation/analytics workflows.\n\nImplementation honors all constraints and indexes from the Prisma schema's discussion_board_comment_attachments table. Security requires that only the comment author, admins, or moderators can use this search function. Error handling includes missing comment, no matching attachments, and permission denials.","summary":"Search/filter attachments for a comment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"UUID of the comment to which attachments belong.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter controls for attachment record listing (uploader, MIME type, file name, upload date, etc).","typeName":"IDiscussionBoardCommentAttachment.IRequest"},"responseBody":{"description":"Page of comment attachment records matching search criteria.","typeName":"IPageIDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a single file attachment record pertaining to a specific comment, identified by attachmentId. The endpoint fetches detailed metadata about the file, including download URI, uploader, MIME type, and timestamps. Critical for rendering individual files inline, downloading, or conducting file-level moderation. Permission checks prevent unauthorized download or file inspection by users who do not own the comment or possess staff roles.","path":"/discussionBoard/member/comments/{commentId}/attachments/{attachmentId}","method":"get","description":"Obtain detailed metadata for a specific attachment linked to a comment. Use case includes user-initiated download, moderation display, or file inspection for legal/audit purposes. Only the comment's author, related staff, or the uploader can access attachment details. Attempts to retrieve attachments for non-existent comments or files, or by unauthorized users, will return an error.\n\nMaps to the discussion_board_comment_attachments table with a one-to-one record match for given commentId and attachmentId.","summary":"Get details of a specific comment attachment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Parent comment's UUID identifier for attachment lookup.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier (UUID) of the attachment file to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment record for specified attachmentId and parent comment, including file URI, meta, uploader info, and timestamps.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"member"},{"specification":"Retrieve a single file attachment record pertaining to a specific comment, identified by attachmentId. The endpoint fetches detailed metadata about the file, including download URI, uploader, MIME type, and timestamps. Critical for rendering individual files inline, downloading, or conducting file-level moderation. Permission checks prevent unauthorized download or file inspection by users who do not own the comment or possess staff roles.","path":"/discussionBoard/moderator/comments/{commentId}/attachments/{attachmentId}","method":"get","description":"Obtain detailed metadata for a specific attachment linked to a comment. Use case includes user-initiated download, moderation display, or file inspection for legal/audit purposes. Only the comment's author, related staff, or the uploader can access attachment details. Attempts to retrieve attachments for non-existent comments or files, or by unauthorized users, will return an error.\n\nMaps to the discussion_board_comment_attachments table with a one-to-one record match for given commentId and attachmentId.","summary":"Get details of a specific comment attachment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Parent comment's UUID identifier for attachment lookup.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier (UUID) of the attachment file to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment record for specified attachmentId and parent comment, including file URI, meta, uploader info, and timestamps.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieve a single file attachment record pertaining to a specific comment, identified by attachmentId. The endpoint fetches detailed metadata about the file, including download URI, uploader, MIME type, and timestamps. Critical for rendering individual files inline, downloading, or conducting file-level moderation. Permission checks prevent unauthorized download or file inspection by users who do not own the comment or possess staff roles.","path":"/discussionBoard/admin/comments/{commentId}/attachments/{attachmentId}","method":"get","description":"Obtain detailed metadata for a specific attachment linked to a comment. Use case includes user-initiated download, moderation display, or file inspection for legal/audit purposes. Only the comment's author, related staff, or the uploader can access attachment details. Attempts to retrieve attachments for non-existent comments or files, or by unauthorized users, will return an error.\n\nMaps to the discussion_board_comment_attachments table with a one-to-one record match for given commentId and attachmentId.","summary":"Get details of a specific comment attachment (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Parent comment's UUID identifier for attachment lookup.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier (UUID) of the attachment file to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment record for specified attachmentId and parent comment, including file URI, meta, uploader info, and timestamps.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Upload/add a new file attachment to a specific comment. Supports members augmenting their comments with images or documents, with full audit and compliance logging. Implements the structure of discussion_board_comment_attachments, where each file is given a URI (external store), presenter-friendly file name, MIME type, and timestamps. Permission validation ensures only comment authors may upload files. All insertion is atomic and adheres to normalization rules from Prisma. Triggered moderation/audit is possible on suspicious content types.","path":"/discussionBoard/member/comments/{commentId}/attachments","method":"post","description":"Attach a new file to a comment, providing the file URL (external URI), original file name, MIME type, and uploader's member ID. Only authenticated members (comment owners) may create attachments, though staff may assist or moderate as needed. The resulting record enables direct download, audit, and moderation.\n\nInput is validated for file size/format/allowed types as per business rules enforced at the application layer. Errors are returned for upload failures, permission denials, or unsupported file types. Actions are logged for compliance and reporting.","summary":"Create a new comment attachment record (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Target comment's unique identifier (UUID) for attachment insertion.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new file attachment (URL, file name, mime type, uploader).","typeName":"IDiscussionBoardCommentAttachment.ICreate"},"responseBody":{"description":"The created attachment record, including all file metadata and upload details.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member"},{"specification":"Upload/add a new file attachment to a specific comment. Supports members augmenting their comments with images or documents, with full audit and compliance logging. Implements the structure of discussion_board_comment_attachments, where each file is given a URI (external store), presenter-friendly file name, MIME type, and timestamps. Permission validation ensures only comment authors may upload files. All insertion is atomic and adheres to normalization rules from Prisma. Triggered moderation/audit is possible on suspicious content types.","path":"/discussionBoard/moderator/comments/{commentId}/attachments","method":"post","description":"Attach a new file to a comment, providing the file URL (external URI), original file name, MIME type, and uploader's member ID. Only authenticated members (comment owners) may create attachments, though staff may assist or moderate as needed. The resulting record enables direct download, audit, and moderation.\n\nInput is validated for file size/format/allowed types as per business rules enforced at the application layer. Errors are returned for upload failures, permission denials, or unsupported file types. Actions are logged for compliance and reporting.","summary":"Create a new comment attachment record (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Target comment's unique identifier (UUID) for attachment insertion.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new file attachment (URL, file name, mime type, uploader).","typeName":"IDiscussionBoardCommentAttachment.ICreate"},"responseBody":{"description":"The created attachment record, including all file metadata and upload details.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Upload/add a new file attachment to a specific comment. Supports members augmenting their comments with images or documents, with full audit and compliance logging. Implements the structure of discussion_board_comment_attachments, where each file is given a URI (external store), presenter-friendly file name, MIME type, and timestamps. Permission validation ensures only comment authors may upload files. All insertion is atomic and adheres to normalization rules from Prisma. Triggered moderation/audit is possible on suspicious content types.","path":"/discussionBoard/admin/comments/{commentId}/attachments","method":"post","description":"Attach a new file to a comment, providing the file URL (external URI), original file name, MIME type, and uploader's member ID. Only authenticated members (comment owners) may create attachments, though staff may assist or moderate as needed. The resulting record enables direct download, audit, and moderation.\n\nInput is validated for file size/format/allowed types as per business rules enforced at the application layer. Errors are returned for upload failures, permission denials, or unsupported file types. Actions are logged for compliance and reporting.","summary":"Create a new comment attachment record (discussion_board_comment_attachments)","parameters":[{"name":"commentId","description":"Target comment's unique identifier (UUID) for attachment insertion.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the new file attachment (URL, file name, mime type, uploader).","typeName":"IDiscussionBoardCommentAttachment.ICreate"},"responseBody":{"description":"The created attachment record, including all file metadata and upload details.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update metadata of an existing comment file attachment, such as changing the file name, updating the URI due to relocation, or correcting the MIME type. The action is restricted to staff (admin, moderator) and the original uploader. The modified fields are reflected in the returned record. The operation supports compliance, audit, and moderation workflows. Permissions and content-type/validity validation are enforced.","path":"/discussionBoard/member/comments/{commentId}/attachments/{attachmentId}","method":"put","description":"Edit an attachment's metadata, such as file name, download URI, or MIME type. Action is limited to the owner (uploader) or platform staff (admins, moderators) for compliance, legal, or corrective workflows. All changes are logged per audit requirements.\n\nCare is taken to maintain link validity (URI), file type compliance, and correct ownership. Errors are returned for permission denial, non-existent attachment, or invalid updates. Prerequisite: attachment must exist and caller must have the correct privileges.","summary":"Edit metadata for a comment attachment. Owner/staff only.","parameters":[{"name":"commentId","description":"UUID identifier (parent comment) for the attachment to modify.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID identifier of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment metadata update payload (typically file name/uri/mime type only).","typeName":"IDiscussionBoardCommentAttachment.IUpdate"},"responseBody":{"description":"Updated attachment record with all changes applied and audit logged.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"Update metadata of an existing comment file attachment, such as changing the file name, updating the URI due to relocation, or correcting the MIME type. The action is restricted to staff (admin, moderator) and the original uploader. The modified fields are reflected in the returned record. The operation supports compliance, audit, and moderation workflows. Permissions and content-type/validity validation are enforced.","path":"/discussionBoard/moderator/comments/{commentId}/attachments/{attachmentId}","method":"put","description":"Edit an attachment's metadata, such as file name, download URI, or MIME type. Action is limited to the owner (uploader) or platform staff (admins, moderators) for compliance, legal, or corrective workflows. All changes are logged per audit requirements.\n\nCare is taken to maintain link validity (URI), file type compliance, and correct ownership. Errors are returned for permission denial, non-existent attachment, or invalid updates. Prerequisite: attachment must exist and caller must have the correct privileges.","summary":"Edit metadata for a comment attachment. Owner/staff only.","parameters":[{"name":"commentId","description":"UUID identifier (parent comment) for the attachment to modify.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID identifier of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment metadata update payload (typically file name/uri/mime type only).","typeName":"IDiscussionBoardCommentAttachment.IUpdate"},"responseBody":{"description":"Updated attachment record with all changes applied and audit logged.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Update metadata of an existing comment file attachment, such as changing the file name, updating the URI due to relocation, or correcting the MIME type. The action is restricted to staff (admin, moderator) and the original uploader. The modified fields are reflected in the returned record. The operation supports compliance, audit, and moderation workflows. Permissions and content-type/validity validation are enforced.","path":"/discussionBoard/admin/comments/{commentId}/attachments/{attachmentId}","method":"put","description":"Edit an attachment's metadata, such as file name, download URI, or MIME type. Action is limited to the owner (uploader) or platform staff (admins, moderators) for compliance, legal, or corrective workflows. All changes are logged per audit requirements.\n\nCare is taken to maintain link validity (URI), file type compliance, and correct ownership. Errors are returned for permission denial, non-existent attachment, or invalid updates. Prerequisite: attachment must exist and caller must have the correct privileges.","summary":"Edit metadata for a comment attachment. Owner/staff only.","parameters":[{"name":"commentId","description":"UUID identifier (parent comment) for the attachment to modify.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID identifier of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment metadata update payload (typically file name/uri/mime type only).","typeName":"IDiscussionBoardCommentAttachment.IUpdate"},"responseBody":{"description":"Updated attachment record with all changes applied and audit logged.","typeName":"IDiscussionBoardCommentAttachment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (hard-delete) a comment attachment. This fully removes the corresponding record from the discussion_board_comment_attachments table. Staff and the original uploader may delete attachments, often following moderation or user request. Deletion removes download visibility and typically triggers any required cleanup of external storage (handled by backend logic). All actions logged for audit. The operation enforces permission, existence, and integrity checks as per schema and requirements.","path":"/discussionBoard/member/comments/{commentId}/attachments/{attachmentId}","method":"delete","description":"Remove (hard-delete) a file attachment from a comment, allowed for the original uploader, moderators, or admins. The file is removed from the record, download is disabled, and associated logs are updated for moderation/compliance. Error handling covers permission denials, missing attachment, and failed deletions (e.g., referenced elsewhere).\n\nIf the backend is configured, removal of the corresponding media from external stores may also be triggered as part of the operation. The operation abides by the normalization, logging, and audit requirements stated in the schema and requirements.","summary":"Delete a comment attachment record (hard delete; owner or staff only)","parameters":[{"name":"commentId","description":"Parent comment's UUID (attachment association context).","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID of the specific attachment record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Delete (hard-delete) a comment attachment. This fully removes the corresponding record from the discussion_board_comment_attachments table. Staff and the original uploader may delete attachments, often following moderation or user request. Deletion removes download visibility and typically triggers any required cleanup of external storage (handled by backend logic). All actions logged for audit. The operation enforces permission, existence, and integrity checks as per schema and requirements.","path":"/discussionBoard/moderator/comments/{commentId}/attachments/{attachmentId}","method":"delete","description":"Remove (hard-delete) a file attachment from a comment, allowed for the original uploader, moderators, or admins. The file is removed from the record, download is disabled, and associated logs are updated for moderation/compliance. Error handling covers permission denials, missing attachment, and failed deletions (e.g., referenced elsewhere).\n\nIf the backend is configured, removal of the corresponding media from external stores may also be triggered as part of the operation. The operation abides by the normalization, logging, and audit requirements stated in the schema and requirements.","summary":"Delete a comment attachment record (hard delete; owner or staff only)","parameters":[{"name":"commentId","description":"Parent comment's UUID (attachment association context).","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID of the specific attachment record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Delete (hard-delete) a comment attachment. This fully removes the corresponding record from the discussion_board_comment_attachments table. Staff and the original uploader may delete attachments, often following moderation or user request. Deletion removes download visibility and typically triggers any required cleanup of external storage (handled by backend logic). All actions logged for audit. The operation enforces permission, existence, and integrity checks as per schema and requirements.","path":"/discussionBoard/admin/comments/{commentId}/attachments/{attachmentId}","method":"delete","description":"Remove (hard-delete) a file attachment from a comment, allowed for the original uploader, moderators, or admins. The file is removed from the record, download is disabled, and associated logs are updated for moderation/compliance. Error handling covers permission denials, missing attachment, and failed deletions (e.g., referenced elsewhere).\n\nIf the backend is configured, removal of the corresponding media from external stores may also be triggered as part of the operation. The operation abides by the normalization, logging, and audit requirements stated in the schema and requirements.","summary":"Delete a comment attachment record (hard delete; owner or staff only)","parameters":[{"name":"commentId","description":"Parent comment's UUID (attachment association context).","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID of the specific attachment record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a list of content reports from the discussion board moderation system. This operation is associated with the 'discussion_board_reports' Prisma table, which tracks user-submitted reports on posts or comments. It returns a paginated list of reports for review or analytics. Useful for compliance teams, admins, and moderators who need an overview of outstanding or historical moderation cases.","path":"/discussionBoard/moderator/reports","method":"get","description":"Fetches a paginated list of user reports regarding content that may violate community guidelines. This leverages the discussion_board_reports table, pulling all reports, regardless of status, for review or data analytics. Useful for compliance, moderation, or admin dashboards. Only trusted roles such as moderators and admins may access the full reports list, as it may contain sensitive content and personal details.\n\nSecurity and permissions control is enforced: only users with 'moderator' or 'admin' roles may call this endpoint. Results connect with related moderation actions or audit logs via UUID references, optimizing workflows for content resolution or compliance tracking.\n\nA typical error case is requesting too many results or unauthorized access, which returns a standard error and does not leak information about specific reports.\n\nThis endpoint may be used with PATCH /reports for advanced filtering, and GET /reports/{reportId} for individual details.","summary":"Retrieve paginated list of discussion board content reports.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of discussion board report summaries.","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"Retrieves a list of content reports from the discussion board moderation system. This operation is associated with the 'discussion_board_reports' Prisma table, which tracks user-submitted reports on posts or comments. It returns a paginated list of reports for review or analytics. Useful for compliance teams, admins, and moderators who need an overview of outstanding or historical moderation cases.","path":"/discussionBoard/admin/reports","method":"get","description":"Fetches a paginated list of user reports regarding content that may violate community guidelines. This leverages the discussion_board_reports table, pulling all reports, regardless of status, for review or data analytics. Useful for compliance, moderation, or admin dashboards. Only trusted roles such as moderators and admins may access the full reports list, as it may contain sensitive content and personal details.\n\nSecurity and permissions control is enforced: only users with 'moderator' or 'admin' roles may call this endpoint. Results connect with related moderation actions or audit logs via UUID references, optimizing workflows for content resolution or compliance tracking.\n\nA typical error case is requesting too many results or unauthorized access, which returns a standard error and does not leak information about specific reports.\n\nThis endpoint may be used with PATCH /reports for advanced filtering, and GET /reports/{reportId} for individual details.","summary":"Retrieve paginated list of discussion board content reports.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of discussion board report summaries.","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"Performs advanced search on the discussion_board_reports table, returning a paginated and filtered list of content reports based on criteria such as status, content type, reported user, time period, or resolution state. This endpoint enables compliance and moderation teams to locate reports by complex parameters, supporting operational audits or bulk reviews.","path":"/discussionBoard/moderator/reports","method":"patch","description":"Allows moderators or admins to perform advanced queries over all reports, enabling filtering by parameters like content type, status, reporter, or time window. Utilizes the discussion_board_reports table and joins permitted related entities for rich search functionality.\n\nAccess is restricted to users with moderator or admin roles. Complex queries assist in operational workflows (triage, follow-ups, closure monitoring) and analytics. Pagination and sorting should be used to manage large result sets, and results are summaries optimized for quick review.\n\nErrors may include malformed search queries or requests by unauthorized actors. This endpoint complements GET /reports for unfiltered listings.","summary":"Advanced search with filter and pagination on content reports.","parameters":[],"requestBody":{"description":"Search and filtering options for board content reports.","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated, filtered results with summaries of matching reports.","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"Performs advanced search on the discussion_board_reports table, returning a paginated and filtered list of content reports based on criteria such as status, content type, reported user, time period, or resolution state. This endpoint enables compliance and moderation teams to locate reports by complex parameters, supporting operational audits or bulk reviews.","path":"/discussionBoard/admin/reports","method":"patch","description":"Allows moderators or admins to perform advanced queries over all reports, enabling filtering by parameters like content type, status, reporter, or time window. Utilizes the discussion_board_reports table and joins permitted related entities for rich search functionality.\n\nAccess is restricted to users with moderator or admin roles. Complex queries assist in operational workflows (triage, follow-ups, closure monitoring) and analytics. Pagination and sorting should be used to manage large result sets, and results are summaries optimized for quick review.\n\nErrors may include malformed search queries or requests by unauthorized actors. This endpoint complements GET /reports for unfiltered listings.","summary":"Advanced search with filter and pagination on content reports.","parameters":[],"requestBody":{"description":"Search and filtering options for board content reports.","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated, filtered results with summaries of matching reports.","typeName":"IPageIDiscussionBoardReport.ISummary"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches detailed information about a specific content report from the discussion_board_reports table by its unique reportId. This operation allows authorized reviewers to see the status, subject, originator, timestamps, and any links to moderation actions or resolution logs.","path":"/discussionBoard/moderator/reports/{reportId}","method":"get","description":"Retrieves a detailed report record as stored in discussion_board_reports, including all required fields and any connected moderation or resolution metadata (via linked entities or UUIDs). Appropriate for in-depth review or for processing moderation actions.\n\nPermission checks ensure only admins or moderators may retrieve full details, which can include sensitive user data or content allegations. Attempts by unauthorized roles yield clear error messages without disclosing underlying report content.\n\nThis endpoint is typically used after locating an interesting report via list/search, enabling one-by-one processing and resolution workflows.","summary":"Get detailed information for a specific content report by ID.","parameters":[{"name":"reportId","description":"Unique identifier for the targeted content report (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed report object with all content and metadata.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Fetches detailed information about a specific content report from the discussion_board_reports table by its unique reportId. This operation allows authorized reviewers to see the status, subject, originator, timestamps, and any links to moderation actions or resolution logs.","path":"/discussionBoard/admin/reports/{reportId}","method":"get","description":"Retrieves a detailed report record as stored in discussion_board_reports, including all required fields and any connected moderation or resolution metadata (via linked entities or UUIDs). Appropriate for in-depth review or for processing moderation actions.\n\nPermission checks ensure only admins or moderators may retrieve full details, which can include sensitive user data or content allegations. Attempts by unauthorized roles yield clear error messages without disclosing underlying report content.\n\nThis endpoint is typically used after locating an interesting report via list/search, enabling one-by-one processing and resolution workflows.","summary":"Get detailed information for a specific content report by ID.","parameters":[{"name":"reportId","description":"Unique identifier for the targeted content report (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed report object with all content and metadata.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new user-submitted report for inappropriate or guideline-violating content. Directly inserts into the discussion_board_reports Prisma table, which supports polymorphic references to either posts or comments. The initial status is typically set to 'pending' for review by moderators or admins. Reporter must be a registered member of the board.","path":"/discussionBoard/member/reports","method":"post","description":"Allows an authenticated member to submit a report about questionable or abusive content. The operation validates required fields—such as reporterId, content type, reported entity, and reason for the report—before storing. All new reports default to 'pending' status for review. Automated timestamping of creation supports audits and follow-up.\n\nOnly users with member, moderator, or admin roles may create reports (guests cannot file complaints). Error scenarios include insufficient permissions, attempts to double-report, or references to non-existent content.\n\nCreation triggers notifications to moderators for review. Use GET or PATCH endpoints to retrieve or review submitted reports.","summary":"Create a new moderation report for abusive or inappropriate content.","parameters":[],"requestBody":{"description":"Information required to create a new content report.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"The created report object.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member"},{"specification":"Creates a new user-submitted report for inappropriate or guideline-violating content. Directly inserts into the discussion_board_reports Prisma table, which supports polymorphic references to either posts or comments. The initial status is typically set to 'pending' for review by moderators or admins. Reporter must be a registered member of the board.","path":"/discussionBoard/moderator/reports","method":"post","description":"Allows an authenticated member to submit a report about questionable or abusive content. The operation validates required fields—such as reporterId, content type, reported entity, and reason for the report—before storing. All new reports default to 'pending' status for review. Automated timestamping of creation supports audits and follow-up.\n\nOnly users with member, moderator, or admin roles may create reports (guests cannot file complaints). Error scenarios include insufficient permissions, attempts to double-report, or references to non-existent content.\n\nCreation triggers notifications to moderators for review. Use GET or PATCH endpoints to retrieve or review submitted reports.","summary":"Create a new moderation report for abusive or inappropriate content.","parameters":[],"requestBody":{"description":"Information required to create a new content report.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"The created report object.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Creates a new user-submitted report for inappropriate or guideline-violating content. Directly inserts into the discussion_board_reports Prisma table, which supports polymorphic references to either posts or comments. The initial status is typically set to 'pending' for review by moderators or admins. Reporter must be a registered member of the board.","path":"/discussionBoard/admin/reports","method":"post","description":"Allows an authenticated member to submit a report about questionable or abusive content. The operation validates required fields—such as reporterId, content type, reported entity, and reason for the report—before storing. All new reports default to 'pending' status for review. Automated timestamping of creation supports audits and follow-up.\n\nOnly users with member, moderator, or admin roles may create reports (guests cannot file complaints). Error scenarios include insufficient permissions, attempts to double-report, or references to non-existent content.\n\nCreation triggers notifications to moderators for review. Use GET or PATCH endpoints to retrieve or review submitted reports.","summary":"Create a new moderation report for abusive or inappropriate content.","parameters":[],"requestBody":{"description":"Information required to create a new content report.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"The created report object.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing content report in the discussion_board_reports table, usually to modify its status or add moderator/admin resolution information. May be called by moderators or admins when reviewing or closing reports. All fields updated must correspond to those provided in the Prisma model; no fields outside the schema are modifiable.","path":"/discussionBoard/moderator/reports/{reportId}","method":"put","description":"Allows authorized users (moderators or admins) to update report records—for instance, changing status from 'pending' to 'resolved', annotating the report, or linking to a moderation action. Only fields present in the underlying schema are mutable. Input undergoes validation, audit trails are triggered on each update.\n\nStrict permissions prevent non-moderators from updating content reports. Errors may arise if attempts are made to update immutable or non-existent records.\n\nFrequently used in moderation workflows alongside GET endpoints for resolving user complaints.","summary":"Update properties of a specific report (e.g., resolve, annotate, reassign).","parameters":[{"name":"reportId","description":"UUID of the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields permitted for update on a report.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"The updated report object reflecting new field values.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing content report in the discussion_board_reports table, usually to modify its status or add moderator/admin resolution information. May be called by moderators or admins when reviewing or closing reports. All fields updated must correspond to those provided in the Prisma model; no fields outside the schema are modifiable.","path":"/discussionBoard/admin/reports/{reportId}","method":"put","description":"Allows authorized users (moderators or admins) to update report records—for instance, changing status from 'pending' to 'resolved', annotating the report, or linking to a moderation action. Only fields present in the underlying schema are mutable. Input undergoes validation, audit trails are triggered on each update.\n\nStrict permissions prevent non-moderators from updating content reports. Errors may arise if attempts are made to update immutable or non-existent records.\n\nFrequently used in moderation workflows alongside GET endpoints for resolving user complaints.","summary":"Update properties of a specific report (e.g., resolve, annotate, reassign).","parameters":[{"name":"reportId","description":"UUID of the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields permitted for update on a report.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"The updated report object reflecting new field values.","typeName":"IDiscussionBoardReport"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes an existing report record from the discussion_board_reports table, usually for incorrect, duplicate, or withdrawn reports. This is a hard delete since the schema does not provide soft delete logic. Can only be performed by admins or authorized moderators after compliance checks.","path":"/discussionBoard/admin/reports/{reportId}","method":"delete","description":"Removes a report from persistent storage in the reports moderation system. The operation is irreversible due to the absence of a soft-delete or timestamp field in the schema. Implement strict permission checks to avoid improper data loss—only admins or, where policy allows, senior moderators should be granted this method.\n\nAll successful deletions must be logged in the system audit trail as per moderation/compliance requirements. Attempts to delete non-existent or locked records yield informative errors without side effects.\n\nThis should be used with caution, and log review is advised after usage for compliance and troubleshooting.","summary":"Permanently delete a report record (hard delete).","parameters":[{"name":"reportId","description":"UUID of the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of moderation actions from the discussion_board_moderation_actions table, providing an audit trail of actions taken by moderators or admins on reported or problematic content. Useful for compliance, transparency, and operational dashboards.","path":"/discussionBoard/moderator/moderationActions","method":"get","description":"Fetches a paginated, chronological or filtered list of moderation actions performed on posts and comments. Leveraging the discussion_board_moderation_actions schema, each item includes key fields such as actor type, target entity, and action details. Includes links to related report IDs if applicable.\n\nAccess is typically restricted to moderation personnel or admins. Sensitive information, such as internal notes, should be handled with care in the frontend.\n\nErrors may include unauthorized requests or exceeding result limits. Related endpoints include GET/PATCH for detailed or filtered queries throughout the moderation pipeline.","summary":"Paginated list of moderation actions for audit and transparency.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated result set of moderation actions (summaries).","typeName":"IPageIDiscussionBoardModerationAction.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"Retrieves a paginated list of moderation actions from the discussion_board_moderation_actions table, providing an audit trail of actions taken by moderators or admins on reported or problematic content. Useful for compliance, transparency, and operational dashboards.","path":"/discussionBoard/admin/moderationActions","method":"get","description":"Fetches a paginated, chronological or filtered list of moderation actions performed on posts and comments. Leveraging the discussion_board_moderation_actions schema, each item includes key fields such as actor type, target entity, and action details. Includes links to related report IDs if applicable.\n\nAccess is typically restricted to moderation personnel or admins. Sensitive information, such as internal notes, should be handled with care in the frontend.\n\nErrors may include unauthorized requests or exceeding result limits. Related endpoints include GET/PATCH for detailed or filtered queries throughout the moderation pipeline.","summary":"Paginated list of moderation actions for audit and transparency.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated result set of moderation actions (summaries).","typeName":"IPageIDiscussionBoardModerationAction.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"Performs a filtered and paginated search on the discussion_board_moderation_actions table, enabling advanced queries by actor, target entity, action type, time window, or related report. Facilitates compliance audits, performance analytics, and operational reporting.","path":"/discussionBoard/moderator/moderationActions","method":"patch","description":"Permits the admin or moderator to search for moderation actions using complex filters. The request body describes filterable properties, pagination, and sorting. Optimized for use in dashboards/analytics and supports time-window audits or targeted workflow queries.\n\nPermissioned for roles with moderation authority. Malformed or unauthorized requests are rejected with clear error details. Results are typically linked to underlying report, post, or comment entities for contextual inspection.\n\nThe response contains summaries of actions keyed by unique moderation action UUIDs.","summary":"Filtered, advanced search for moderation actions with pagination.","parameters":[],"requestBody":{"description":"Complex search filters and pagination for moderation actions.","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated, filtered result set for moderation actions (summaries).","typeName":"IPageIDiscussionBoardModerationAction.ISummary"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"Performs a filtered and paginated search on the discussion_board_moderation_actions table, enabling advanced queries by actor, target entity, action type, time window, or related report. Facilitates compliance audits, performance analytics, and operational reporting.","path":"/discussionBoard/admin/moderationActions","method":"patch","description":"Permits the admin or moderator to search for moderation actions using complex filters. The request body describes filterable properties, pagination, and sorting. Optimized for use in dashboards/analytics and supports time-window audits or targeted workflow queries.\n\nPermissioned for roles with moderation authority. Malformed or unauthorized requests are rejected with clear error details. Results are typically linked to underlying report, post, or comment entities for contextual inspection.\n\nThe response contains summaries of actions keyed by unique moderation action UUIDs.","summary":"Filtered, advanced search for moderation actions with pagination.","parameters":[],"requestBody":{"description":"Complex search filters and pagination for moderation actions.","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated, filtered result set for moderation actions (summaries).","typeName":"IPageIDiscussionBoardModerationAction.ISummary"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches the full details of a specific moderation action from the discussion_board_moderation_actions table, as identified by unique moderationActionId. Used for audits or forensics, linking to report, actor, and content metadata as per schema.","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"get","description":"Provides a full record of a specific moderation action with all metadata from the underlying moderation_action entity, such as involved actor(s), affected content (post/comment), linked report, action type, and timestamps.\n\nPermissioned for moderators and admins only due to sensitivity of audit data. Invalid or unauthorized requests result in descriptive error messages, with no data leak of sensitive details.\n\nCommonly used for audit trails or to review the handling of individual reports or content moderation incidents.","summary":"Fetch all details for an identified moderation action by ID.","parameters":[{"name":"moderationActionId","description":"UUID of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full moderation action object with all metadata.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Fetches the full details of a specific moderation action from the discussion_board_moderation_actions table, as identified by unique moderationActionId. Used for audits or forensics, linking to report, actor, and content metadata as per schema.","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"get","description":"Provides a full record of a specific moderation action with all metadata from the underlying moderation_action entity, such as involved actor(s), affected content (post/comment), linked report, action type, and timestamps.\n\nPermissioned for moderators and admins only due to sensitivity of audit data. Invalid or unauthorized requests result in descriptive error messages, with no data leak of sensitive details.\n\nCommonly used for audit trails or to review the handling of individual reports or content moderation incidents.","summary":"Fetch all details for an identified moderation action by ID.","parameters":[{"name":"moderationActionId","description":"UUID of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full moderation action object with all metadata.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new moderation action entry, storing information about moderator or admin review/changes on reported content. Directly inserts into discussion_board_moderation_actions table, with references to report, post, or comment as per schema. Used during the moderation process to update compliance, logs, and trigger downstream workflows.","path":"/discussionBoard/moderator/moderationActions","method":"post","description":"Allows authorized users (moderators or admins) to record a moderation action as part of resolving a report, editing/removing content, or issuing warnings. All required Foreign Keys (actor, content) must be valid and present in the request. Additional information such as evidence, action notes, and timestamps are stored atomically for audit and reporting.\n\nAttempts to create actions without proper references or permissions are blocked by strict validation. Moderation actions are a core compliance requirement; downstream integrations may notify affected parties or trigger system events.","summary":"Create and log a new moderation action record for auditing and compliance.","parameters":[],"requestBody":{"description":"New moderation action data, including references to actors and targets as applicable.","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"The moderation action record created, reflecting all detail fields.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Creates a new moderation action entry, storing information about moderator or admin review/changes on reported content. Directly inserts into discussion_board_moderation_actions table, with references to report, post, or comment as per schema. Used during the moderation process to update compliance, logs, and trigger downstream workflows.","path":"/discussionBoard/admin/moderationActions","method":"post","description":"Allows authorized users (moderators or admins) to record a moderation action as part of resolving a report, editing/removing content, or issuing warnings. All required Foreign Keys (actor, content) must be valid and present in the request. Additional information such as evidence, action notes, and timestamps are stored atomically for audit and reporting.\n\nAttempts to create actions without proper references or permissions are blocked by strict validation. Moderation actions are a core compliance requirement; downstream integrations may notify affected parties or trigger system events.","summary":"Create and log a new moderation action record for auditing and compliance.","parameters":[],"requestBody":{"description":"New moderation action data, including references to actors and targets as applicable.","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"The moderation action record created, reflecting all detail fields.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing moderation_action record, used by moderators/admins to adjust or annotate an action's status, details, or linked references. All changes must align with schema field constraints; no extra fields allowed. Fully auditable via change timestamps in the schema.","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"put","description":"Enables authorized actors to update the attributes of a recorded moderation action, such as correcting action details, changing associations, or updating evidence or notes. Strictly validates data against modifiable schema fields. Updated timestamps recorded for all changes as per audit and compliance specs.\n\nOnly moderation-authorized roles may access this endpoint; privilege checks are enforced. Error scenarios include attempting to update immutable, missing, or non-existent records.\n\nFrequently paired with GET endpoints to review and update moderation logs as part of compliance cycles.","summary":"Update or annotate a specific moderation action record.","parameters":[{"name":"moderationActionId","description":"UUID of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and references permitted for update to a moderation action.","typeName":"IDiscussionBoardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action object with new metadata.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing moderation_action record, used by moderators/admins to adjust or annotate an action's status, details, or linked references. All changes must align with schema field constraints; no extra fields allowed. Fully auditable via change timestamps in the schema.","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"put","description":"Enables authorized actors to update the attributes of a recorded moderation action, such as correcting action details, changing associations, or updating evidence or notes. Strictly validates data against modifiable schema fields. Updated timestamps recorded for all changes as per audit and compliance specs.\n\nOnly moderation-authorized roles may access this endpoint; privilege checks are enforced. Error scenarios include attempting to update immutable, missing, or non-existent records.\n\nFrequently paired with GET endpoints to review and update moderation logs as part of compliance cycles.","summary":"Update or annotate a specific moderation action record.","parameters":[{"name":"moderationActionId","description":"UUID of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and references permitted for update to a moderation action.","typeName":"IDiscussionBoardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action object with new metadata.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Removes a moderation action record from the discussion_board_moderation_actions table. This is a hard delete—no soft-delete field exists. Only an admin can perform this, typically to remove accidental or incorrect entries after review.","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"delete","description":"Permanently deletes a moderation action record, including all associated audit and reference metadata, from persistent storage. Deletions are irreversible in the absence of soft-delete logic in the schema. Only system administrators may execute this function.\n\nAll deletion events are logged in the audit trail for accountability. Any attempt to delete an unknown or protected moderation action results in clear error feedback. Use with caution, as this removes key compliance and auditing information.","summary":"Delete a moderation action completely (irreversible).","parameters":[{"name":"moderationActionId","description":"UUID of the moderation action to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated collection of discussion board content flags. This operation interacts with the discussion_board_content_flags table, allowing authorized users to access summaries of all flags attached to posts and comments. Each flag record identifies its target (post or comment), flag type, creator (moderator/admin), flag source, timestamps, and current status. Filtering by type, moderator, admin, or activity status is supported to facilitate moderation and audit tasks. Results are sorted and paginated per request parameters.","path":"/discussionBoard/moderator/contentFlags","method":"get","description":"This API retrieves a paginated listing of content flags attached to posts or comments in the discussion board system. It provides moderators and admins with an overview of all flagged content for review, enforcement, and compliance auditing, supporting filter options such as flag type, creator, or date range.\n\nAccess is restricted to users with moderation or administrative privileges to safeguard sensitive moderation data. The operation enforces audit trails for every invocation, aligning with platform requirements for transparency and role-based access.\n\nThe output includes basic information for each flag (target type and ID, flag type/source, creator identity, creation time, and if cleared), as described in the schema. For details on a specific flag, use the GET /contentFlags/{contentFlagId} endpoint.","summary":"Retrieve paginated summary list of all discussion board content flags.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary list of content flags, as used by moderation tools and audit reporting.","typeName":"IPageIDiscussionBoardContentFlag.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"Retrieves a paginated collection of discussion board content flags. This operation interacts with the discussion_board_content_flags table, allowing authorized users to access summaries of all flags attached to posts and comments. Each flag record identifies its target (post or comment), flag type, creator (moderator/admin), flag source, timestamps, and current status. Filtering by type, moderator, admin, or activity status is supported to facilitate moderation and audit tasks. Results are sorted and paginated per request parameters.","path":"/discussionBoard/admin/contentFlags","method":"get","description":"This API retrieves a paginated listing of content flags attached to posts or comments in the discussion board system. It provides moderators and admins with an overview of all flagged content for review, enforcement, and compliance auditing, supporting filter options such as flag type, creator, or date range.\n\nAccess is restricted to users with moderation or administrative privileges to safeguard sensitive moderation data. The operation enforces audit trails for every invocation, aligning with platform requirements for transparency and role-based access.\n\nThe output includes basic information for each flag (target type and ID, flag type/source, creator identity, creation time, and if cleared), as described in the schema. For details on a specific flag, use the GET /contentFlags/{contentFlagId} endpoint.","summary":"Retrieve paginated summary list of all discussion board content flags.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary list of content flags, as used by moderation tools and audit reporting.","typeName":"IPageIDiscussionBoardContentFlag.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"Performs a complex search and retrieves a filtered, paginated list of content flags from the discussion_board_content_flags table based on advanced criteria. Supports searching/filtering by flag type, source, status, moderator/admin, target (post/comment), and date ranges. Integrates with moderation workflows and enables configurable sorting and paginated retrieval for dashboard use.","path":"/discussionBoard/moderator/contentFlags","method":"patch","description":"This API enables authorized users (moderators/admins) to search and filter content flags using advanced query parameters. Filters may include flag type (spam, abuse, etc.), flag source (manual/automation), creation/clearance date range, target type (post/comment), or actor identity.\n\nRole-based access restrictions are enforced, and operations are logged for audit and compliance. The system protects sensitive information by returning only permitted details per user role. Results are paginated and sortable, supporting moderator dashboards and compliance analytics.\n\nFor viewing individual flag details, use the GET /contentFlags/{contentFlagId} endpoint. For flag creation or resolution, see POST/PUT endpoints.","summary":"Search, filter, and retrieve detailed paginated content flag listings with advanced criteria.","parameters":[],"requestBody":{"description":"Advanced search and filtering criteria for content flags, including pagination and sort options.","typeName":"IDiscussionBoardContentFlag.IRequest"},"responseBody":{"description":"Paginated result of content flags matching search and filter criteria for moderation and audit purposes.","typeName":"IPageIDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"Performs a complex search and retrieves a filtered, paginated list of content flags from the discussion_board_content_flags table based on advanced criteria. Supports searching/filtering by flag type, source, status, moderator/admin, target (post/comment), and date ranges. Integrates with moderation workflows and enables configurable sorting and paginated retrieval for dashboard use.","path":"/discussionBoard/admin/contentFlags","method":"patch","description":"This API enables authorized users (moderators/admins) to search and filter content flags using advanced query parameters. Filters may include flag type (spam, abuse, etc.), flag source (manual/automation), creation/clearance date range, target type (post/comment), or actor identity.\n\nRole-based access restrictions are enforced, and operations are logged for audit and compliance. The system protects sensitive information by returning only permitted details per user role. Results are paginated and sortable, supporting moderator dashboards and compliance analytics.\n\nFor viewing individual flag details, use the GET /contentFlags/{contentFlagId} endpoint. For flag creation or resolution, see POST/PUT endpoints.","summary":"Search, filter, and retrieve detailed paginated content flag listings with advanced criteria.","parameters":[],"requestBody":{"description":"Advanced search and filtering criteria for content flags, including pagination and sort options.","typeName":"IDiscussionBoardContentFlag.IRequest"},"responseBody":{"description":"Paginated result of content flags matching search and filter criteria for moderation and audit purposes.","typeName":"IPageIDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves the detailed record of a single content flag identified by contentFlagId from the discussion_board_content_flags table. Returns all properties of this flag, including creator (moderator/admin, if any), target object (post or comment), flag type/source, detailed notes, timeline (created, cleared), and status. Used by moderation workflows for investigation, review, and compliance purposes.","path":"/discussionBoard/moderator/contentFlags/{contentFlagId}","method":"get","description":"Fetches detailed information for a single content flag instance specified by contentFlagId. This endpoint is used by moderators and admins to investigate and resolve flagged posts or comments, supporting audit requirements and compliance enforcement.\n\nReturned details include IDs of moderator/admin who set the flag, target type, flag type/source, additional notes, and relevant timestamps. Only users with proper roles can access sensitive flag metadata, and unsuccessful attempts are logged for security compliance.\n\nFor modifying or clearing the flag, use PUT or DELETE on this endpoint. Related moderation actions may be found via corresponding endpoints.","summary":"Retrieve detailed information for a specific content flag for moderation or audit.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag instance.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full content flag entity record with all details for moderation, review, and audit.","typeName":"IDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieves the detailed record of a single content flag identified by contentFlagId from the discussion_board_content_flags table. Returns all properties of this flag, including creator (moderator/admin, if any), target object (post or comment), flag type/source, detailed notes, timeline (created, cleared), and status. Used by moderation workflows for investigation, review, and compliance purposes.","path":"/discussionBoard/admin/contentFlags/{contentFlagId}","method":"get","description":"Fetches detailed information for a single content flag instance specified by contentFlagId. This endpoint is used by moderators and admins to investigate and resolve flagged posts or comments, supporting audit requirements and compliance enforcement.\n\nReturned details include IDs of moderator/admin who set the flag, target type, flag type/source, additional notes, and relevant timestamps. Only users with proper roles can access sensitive flag metadata, and unsuccessful attempts are logged for security compliance.\n\nFor modifying or clearing the flag, use PUT or DELETE on this endpoint. Related moderation actions may be found via corresponding endpoints.","summary":"Retrieve detailed information for a specific content flag for moderation or audit.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the target content flag instance.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full content flag entity record with all details for moderation, review, and audit.","typeName":"IDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new content flag in the discussion_board_content_flags table. This allows moderators or admins to mark specific posts or comments as requiring moderation (e.g., for spam or abuse). The payload specifies which content is flagged, flag type, flag source, and optional notes. Flagged content can then appear in moderation queues for further action, and all flag creation is audited in logs.","path":"/discussionBoard/moderator/contentFlags","method":"post","description":"This endpoint allows a moderator or admin to create a new flag on a post or comment. It supports polymorphic targeting by including either post_id or comment_id, and specifies the flag type, source, and any additional details.\n\nPermissions are enforced to restrict flag creation to users with moderation or admin roles. The operation is audit-logged to record flag creation events, supporting traceability and compliance.\n\nAfter flag creation, the returned record includes all information for reference in moderation tracking tools.","summary":"Create a new content flag for posts or comments, marking them for moderation.","parameters":[],"requestBody":{"description":"Flag creation details, including target (post/comment), flag type/source, and optional notes.","typeName":"IDiscussionBoardContentFlag.ICreate"},"responseBody":{"description":"Full flag record as created and persisted for moderation and compliance workflows.","typeName":"IDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"Creates a new content flag in the discussion_board_content_flags table. This allows moderators or admins to mark specific posts or comments as requiring moderation (e.g., for spam or abuse). The payload specifies which content is flagged, flag type, flag source, and optional notes. Flagged content can then appear in moderation queues for further action, and all flag creation is audited in logs.","path":"/discussionBoard/admin/contentFlags","method":"post","description":"This endpoint allows a moderator or admin to create a new flag on a post or comment. It supports polymorphic targeting by including either post_id or comment_id, and specifies the flag type, source, and any additional details.\n\nPermissions are enforced to restrict flag creation to users with moderation or admin roles. The operation is audit-logged to record flag creation events, supporting traceability and compliance.\n\nAfter flag creation, the returned record includes all information for reference in moderation tracking tools.","summary":"Create a new content flag for posts or comments, marking them for moderation.","parameters":[],"requestBody":{"description":"Flag creation details, including target (post/comment), flag type/source, and optional notes.","typeName":"IDiscussionBoardContentFlag.ICreate"},"responseBody":{"description":"Full flag record as created and persisted for moderation and compliance workflows.","typeName":"IDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing content flag in the discussion_board_content_flags table. Permits authorized users to modify target details, flag status, or resolution notes. This supports moderation workflows, such as clearing flags after review or editing flag attributes. All updates are persisted and fully audit-trailed for compliance.","path":"/discussionBoard/moderator/contentFlags/{contentFlagId}","method":"put","description":"Enables moderators or admins to update an existing content flag identified by contentFlagId. This includes clearing a flag, amending flag type/source, or adding flag details as resolution notes.\n\nAuthorization and auditing are strictly enforced, capturing who made updates and when. Changes appear in moderation dashboards and compliance reports.\n\nIncorrect or unauthorized updates are blocked and recorded for audit monitoring. To delete a flag completely, use the DELETE endpoint.","summary":"Update an existing content flag’s status, type, or details for moderation workflows.","parameters":[{"name":"contentFlagId","description":"Unique identifier for the target flag to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update instructions for the flag, such as clearing status, amending details, or flag type/source changes.","typeName":"IDiscussionBoardContentFlag.IUpdate"},"responseBody":{"description":"Updated flag record reflecting all modifications and resolution status.","typeName":"IDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing content flag in the discussion_board_content_flags table. Permits authorized users to modify target details, flag status, or resolution notes. This supports moderation workflows, such as clearing flags after review or editing flag attributes. All updates are persisted and fully audit-trailed for compliance.","path":"/discussionBoard/admin/contentFlags/{contentFlagId}","method":"put","description":"Enables moderators or admins to update an existing content flag identified by contentFlagId. This includes clearing a flag, amending flag type/source, or adding flag details as resolution notes.\n\nAuthorization and auditing are strictly enforced, capturing who made updates and when. Changes appear in moderation dashboards and compliance reports.\n\nIncorrect or unauthorized updates are blocked and recorded for audit monitoring. To delete a flag completely, use the DELETE endpoint.","summary":"Update an existing content flag’s status, type, or details for moderation workflows.","parameters":[{"name":"contentFlagId","description":"Unique identifier for the target flag to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update instructions for the flag, such as clearing status, amending details, or flag type/source changes.","typeName":"IDiscussionBoardContentFlag.IUpdate"},"responseBody":{"description":"Updated flag record reflecting all modifications and resolution status.","typeName":"IDiscussionBoardContentFlag"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (removes) a content flag specified by contentFlagId from the discussion_board_content_flags table. This is a hard delete since no soft-delete field exists. Removal of a flag typically occurs after moderation review concludes the content no longer requires flagging. All deletions are audited for compliance and traceability.","path":"/discussionBoard/moderator/contentFlags/{contentFlagId}","method":"delete","description":"Removes a content flag from the system, permanently deleting it from the database. Hard deletion is performed since discussion_board_content_flags has no soft-delete capability.\n\nRestricted to moderators or admins, this operation is audit-logged to ensure traceability and compliance. Attempted deletion of non-existent or unauthorized flags results in appropriate error responses and event logging.\n\nTo clear (but retain) a flag, use the PUT endpoint with status update instead. For listing all flags, see GET or PATCH endpoints.","summary":"Permanently delete a specific content flag after moderation review. Hard delete—no soft delete field.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the flag record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes (removes) a content flag specified by contentFlagId from the discussion_board_content_flags table. This is a hard delete since no soft-delete field exists. Removal of a flag typically occurs after moderation review concludes the content no longer requires flagging. All deletions are audited for compliance and traceability.","path":"/discussionBoard/admin/contentFlags/{contentFlagId}","method":"delete","description":"Removes a content flag from the system, permanently deleting it from the database. Hard deletion is performed since discussion_board_content_flags has no soft-delete capability.\n\nRestricted to moderators or admins, this operation is audit-logged to ensure traceability and compliance. Attempted deletion of non-existent or unauthorized flags results in appropriate error responses and event logging.\n\nTo clear (but retain) a flag, use the PUT endpoint with status update instead. For listing all flags, see GET or PATCH endpoints.","summary":"Permanently delete a specific content flag after moderation review. Hard delete—no soft delete field.","parameters":[{"name":"contentFlagId","description":"Unique identifier of the flag record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of discussion board subscriptions from the discussion_board_subscriptions table. Supports summary listing for all user subscriptions by authorized actors, including filtering by target type (thread/topic), user, or active status. Used by admins or the authenticated member to review or audit current subscriptions for engagement management.","path":"/discussionBoard/admin/subscriptions","method":"get","description":"Retrieves a paginated summary listing of all discussion board subscriptions, showing which members are subscribed to which topics or threads. Used by admins for engagement analytics and by users to review their own subscriptions.\n\nSupports filtering and sorting by subscriber, target type, or activation status, and includes all attributes from the table such as notification method, creation date, and related references. Only accessible to the subscription owner or to admins for full audit.","summary":"Get a paginated summary list of all subscriptions, with support for filtering, sorting, and pagination.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary list of user subscriptions matching filter and page query.","typeName":"IPageIDiscussionBoardSubscription.ISummary"},"authorizationRoles":["admin","member"],"name":"index","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of discussion board subscriptions from the discussion_board_subscriptions table. Supports summary listing for all user subscriptions by authorized actors, including filtering by target type (thread/topic), user, or active status. Used by admins or the authenticated member to review or audit current subscriptions for engagement management.","path":"/discussionBoard/member/subscriptions","method":"get","description":"Retrieves a paginated summary listing of all discussion board subscriptions, showing which members are subscribed to which topics or threads. Used by admins for engagement analytics and by users to review their own subscriptions.\n\nSupports filtering and sorting by subscriber, target type, or activation status, and includes all attributes from the table such as notification method, creation date, and related references. Only accessible to the subscription owner or to admins for full audit.","summary":"Get a paginated summary list of all subscriptions, with support for filtering, sorting, and pagination.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary list of user subscriptions matching filter and page query.","typeName":"IPageIDiscussionBoardSubscription.ISummary"},"authorizationRoles":["admin","member"],"name":"index","authorizationRole":"member"},{"specification":"Performs an advanced search for subscriptions in the discussion_board_subscriptions table, supporting compound filtering, sorting, and pagination. Allows querying by user, target type, activity window, or notification method. Admins see all subscriptions; members only their own.","path":"/discussionBoard/admin/subscriptions","method":"patch","description":"Enables users and admins to search subscriptions using advanced filters around user, target type (thread/topic), notification method, or activity. Enforces that non-admin users can only see their own subscriptions.\n\nResult includes all attributes used for managing or auditing subscription relationships, supporting engagement analysis and notification delivery controls. Accessible to authenticated users for personal management and to admins for system-wide auditing.","summary":"Search, filter, and paginate subscriptions with moderation and member scoping enforced.","parameters":[],"requestBody":{"description":"Filter, pagination, and sort criteria for advanced subscription listing.","typeName":"IDiscussionBoardSubscription.IRequest"},"responseBody":{"description":"Paginated collection of subscriptions matching filter, role, and sort criteria.","typeName":"IPageIDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"search","authorizationRole":"admin"},{"specification":"Performs an advanced search for subscriptions in the discussion_board_subscriptions table, supporting compound filtering, sorting, and pagination. Allows querying by user, target type, activity window, or notification method. Admins see all subscriptions; members only their own.","path":"/discussionBoard/member/subscriptions","method":"patch","description":"Enables users and admins to search subscriptions using advanced filters around user, target type (thread/topic), notification method, or activity. Enforces that non-admin users can only see their own subscriptions.\n\nResult includes all attributes used for managing or auditing subscription relationships, supporting engagement analysis and notification delivery controls. Accessible to authenticated users for personal management and to admins for system-wide auditing.","summary":"Search, filter, and paginate subscriptions with moderation and member scoping enforced.","parameters":[],"requestBody":{"description":"Filter, pagination, and sort criteria for advanced subscription listing.","typeName":"IDiscussionBoardSubscription.IRequest"},"responseBody":{"description":"Paginated collection of subscriptions matching filter, role, and sort criteria.","typeName":"IPageIDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"search","authorizationRole":"member"},{"specification":"Retrieves full details for a subscription specified by subscriptionId from the discussion_board_subscriptions table. Displays attributes such as target (thread/topic), notification method, activation status, and timestamps. Only the subscription owner (member) or admins may access this information.","path":"/discussionBoard/admin/subscriptions/{subscriptionId}","method":"get","description":"Fetches the complete record for a single subscription entry given its subscriptionId. Shows all properties, including subscriber, target type and id, notification method, timestamps, and status.\n\nNon-admin users may access only their own subscription details, with full access given to admins for system-wide audit and support. Related activity (such as notification history) is discoverable from associated endpoints.\n\nFor modification, use the PUT endpoint. For deletion, use DELETE.","summary":"Retrieve details of a specific subscription for the owner or auditing admin.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the target subscription record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full subscription entity record with all details for user or admin management.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieves full details for a subscription specified by subscriptionId from the discussion_board_subscriptions table. Displays attributes such as target (thread/topic), notification method, activation status, and timestamps. Only the subscription owner (member) or admins may access this information.","path":"/discussionBoard/member/subscriptions/{subscriptionId}","method":"get","description":"Fetches the complete record for a single subscription entry given its subscriptionId. Shows all properties, including subscriber, target type and id, notification method, timestamps, and status.\n\nNon-admin users may access only their own subscription details, with full access given to admins for system-wide audit and support. Related activity (such as notification history) is discoverable from associated endpoints.\n\nFor modification, use the PUT endpoint. For deletion, use DELETE.","summary":"Retrieve details of a specific subscription for the owner or auditing admin.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the target subscription record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full subscription entity record with all details for user or admin management.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"at","authorizationRole":"member"},{"specification":"Creates a new subscription in the discussion_board_subscriptions table, allowing a member to subscribe to notifications for a thread or topic. The payload specifies the subscribing user, target type and id, preferred notification delivery, and active status. Supports personalized engagement and notification delivery management as described in requirements.","path":"/discussionBoard/admin/subscriptions","method":"post","description":"Allows a user to create a new subscription (to a topic or thread) to receive notifications about discussions. Requires specifying subscriber_id, target_type (thread/topic), target_id, delivery method, and whether the subscription is active.\n\nAdmins can create subscriptions for any user; authenticated members can create only their own subscriptions. All operations are logged for engagement and delivery analytics.\n\nFor listing or reading subscriptions, use GET, PATCH, or GET /subscriptions/{subscriptionId}.","summary":"Create a new thread/topic subscription for notification delivery to a user.","parameters":[],"requestBody":{"description":"Details of the subscription to create, including subscriber, target, notification method, and activation status.","typeName":"IDiscussionBoardSubscription.ICreate"},"responseBody":{"description":"Full subscription record just created for user engagement tracking or audit.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"create","authorizationRole":"admin"},{"specification":"Creates a new subscription in the discussion_board_subscriptions table, allowing a member to subscribe to notifications for a thread or topic. The payload specifies the subscribing user, target type and id, preferred notification delivery, and active status. Supports personalized engagement and notification delivery management as described in requirements.","path":"/discussionBoard/member/subscriptions","method":"post","description":"Allows a user to create a new subscription (to a topic or thread) to receive notifications about discussions. Requires specifying subscriber_id, target_type (thread/topic), target_id, delivery method, and whether the subscription is active.\n\nAdmins can create subscriptions for any user; authenticated members can create only their own subscriptions. All operations are logged for engagement and delivery analytics.\n\nFor listing or reading subscriptions, use GET, PATCH, or GET /subscriptions/{subscriptionId}.","summary":"Create a new thread/topic subscription for notification delivery to a user.","parameters":[],"requestBody":{"description":"Details of the subscription to create, including subscriber, target, notification method, and activation status.","typeName":"IDiscussionBoardSubscription.ICreate"},"responseBody":{"description":"Full subscription record just created for user engagement tracking or audit.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"create","authorizationRole":"member"},{"specification":"Updates an existing subscription in the discussion_board_subscriptions table given subscriptionId. Permits changing notification method, activation status, or target attributes. Validates that only owner (user) or admin may update the record. All changes are audit logged, supporting compliance and troubleshooting.","path":"/discussionBoard/admin/subscriptions/{subscriptionId}","method":"put","description":"Updates a subscription record with new details, such as delivery method, activation status, or (if supported) target updates. Only the subscription owner (member) or an admin may update the record. Modifications are audit-logged as per board compliance and notification reliability tracking.\n\nIncorrect or unauthorized update attempts are rejected and audit-logged for security compliance. Related notifications and engagement stats automatically reflect updates.","summary":"Update an existing user’s subscription, modifying notification method or active status.","parameters":[{"name":"subscriptionId","description":"Unique identifier for the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for updating the subscription, including new delivery method, status, or target assignment.","typeName":"IDiscussionBoardSubscription.IUpdate"},"responseBody":{"description":"Updated subscription record with current details for engagement and notification management.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"update","authorizationRole":"admin"},{"specification":"Updates an existing subscription in the discussion_board_subscriptions table given subscriptionId. Permits changing notification method, activation status, or target attributes. Validates that only owner (user) or admin may update the record. All changes are audit logged, supporting compliance and troubleshooting.","path":"/discussionBoard/member/subscriptions/{subscriptionId}","method":"put","description":"Updates a subscription record with new details, such as delivery method, activation status, or (if supported) target updates. Only the subscription owner (member) or an admin may update the record. Modifications are audit-logged as per board compliance and notification reliability tracking.\n\nIncorrect or unauthorized update attempts are rejected and audit-logged for security compliance. Related notifications and engagement stats automatically reflect updates.","summary":"Update an existing user’s subscription, modifying notification method or active status.","parameters":[{"name":"subscriptionId","description":"Unique identifier for the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for updating the subscription, including new delivery method, status, or target assignment.","typeName":"IDiscussionBoardSubscription.IUpdate"},"responseBody":{"description":"Updated subscription record with current details for engagement and notification management.","typeName":"IDiscussionBoardSubscription"},"authorizationRoles":["admin","member"],"name":"update","authorizationRole":"member"},{"specification":"Deletes an existing subscription from the discussion_board_subscriptions table, specified by subscriptionId. This operation performs a hard delete. Only admins or the record owner (user) may delete subscriptions. Use for unsubscribing or system-level cleaning of engagement records. Deletion is audit logged for traceability.","path":"/discussionBoard/admin/subscriptions/{subscriptionId}","method":"delete","description":"Deletes a user's subscription to a topic or thread, permanently removing the record from the system. This is a hard delete, not soft delete, since there is no deleted_at field on the table.\n\nAllowed for the subscription owner or an admin only. Deletion events are audit logged. Access is denied for unauthorized users, and failed attempts are recorded for security monitoring.\n\nFor modifying, see PUT. For viewing related notifications or logs, see respective endpoints.","summary":"Permanently delete a specific subscription to stop all future notifications. Hard delete—no soft delete capability.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","member"],"name":"erase","authorizationRole":"admin"},{"specification":"Deletes an existing subscription from the discussion_board_subscriptions table, specified by subscriptionId. This operation performs a hard delete. Only admins or the record owner (user) may delete subscriptions. Use for unsubscribing or system-level cleaning of engagement records. Deletion is audit logged for traceability.","path":"/discussionBoard/member/subscriptions/{subscriptionId}","method":"delete","description":"Deletes a user's subscription to a topic or thread, permanently removing the record from the system. This is a hard delete, not soft delete, since there is no deleted_at field on the table.\n\nAllowed for the subscription owner or an admin only. Deletion events are audit logged. Access is denied for unauthorized users, and failed attempts are recorded for security monitoring.\n\nFor modifying, see PUT. For viewing related notifications or logs, see respective endpoints.","summary":"Permanently delete a specific subscription to stop all future notifications. Hard delete—no soft delete capability.","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","member"],"name":"erase","authorizationRole":"member"},{"specification":"Fetch a paginated list of notifications for the current user. Operates on the discussion_board_notifications table, allowing users to retrieve notification events, filter by status (delivered, failed, etc.), date, or type, and sort by delivery time or read status. The API supports business requirements for notification delivery audit, read tracking, and delivery status reporting. Integrates with discussion_board_subscriptions for contextual information. Only notifications relevant to the authenticated user are returned. The response provides the main notification details, complying with privacy and access controls.","path":"/discussionBoard/member/notifications","method":"get","description":"Retrieve a list of discussion board notifications for the authenticated user. This operation lists both in-app and email/system notifications, permitting filtering and sorting by delivery status, notification type (reply, mention, post, etc.), and delivery time. The API ensures notifications are only visible to recipients, supports pagination, and applies any security restrictions from the notification schema. Authorization checks confirm the requestor matches the recipient user.\n\nThe operation is implemented over the discussion_board_notifications and discussion_board_subscriptions tables. Filters and sorting are optimized per index for delivery time and type. Error scenarios include unauthorized access, invalid filters, or no results.\n\nUse in conjunction with PATCH /notifications for more complex search, or GET /notifications/{notificationId} for single notification detail retrieval.","summary":"List notifications for the authenticated user (discussion_board_notifications table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of notifications for the authenticated user","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"Search and filter notifications using flexible parameters such as notification type, delivery status, delivery date range, read/unread status, and target entity. Utilizes the discussion_board_notifications table and supports pagination, advanced search, and sorting. Designed to meet business and reporting requirements for notification workflows. Only notifications for the authenticated user are returned, with support for partial and date-based searching.","path":"/discussionBoard/member/notifications","method":"patch","description":"Performs an advanced search on the discussion_board_notifications table for the current user, offering filtering by type, delivery status, delivery and read timestamps, or failure reasons. Results include only notifications for the requesting member, respecting privacy and security.\n\nFiltering/sorting parameters can be used for reporting unread notifications or audit trails. Pagination is enforced, and the API supports complex queries for in-app vs. email notifications, unread history, etc. Use this endpoint for robust workflow support (batch fetch, search by content, etc.).\n\nAuthorization ensures only recipients can access their own notifications. Related APIs include GET /notifications for simple listing and GET /notifications/{notificationId} for single event detail.","summary":"Advanced notification search and filtering for authenticated user (discussion_board_notifications)","parameters":[],"requestBody":{"description":"Search and pagination parameters for filtering notifications","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated search results of notifications","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"Retrieve detailed information for a specific notification by its unique identifier. Looks up a row in discussion_board_notifications by id, returning all details including type, message, target info, delivery/read status, and failure reasons if applicable. Business logic ensures only the recipient may access the notification contents, with full auditing compliant with privacy rules.","path":"/discussionBoard/member/notifications/{notificationId}","method":"get","description":"Fetch detailed notification information corresponding to the provided notificationId. This operation retrieves all fields from the discussion_board_notifications table, including the notification message, type, status, delivery/read timestamps, and target context.\n\nAccess control restricts visibility to the notification recipient. Use this endpoint for audit, notification rendering, or troubleshooting delivery errors. Handles cases of not found, unauthorized, or system error with precise error reporting.\n\nRelated endpoints: GET /notifications (list), PATCH /notifications (search), PUT /notifications/{notificationId} (update read status), DELETE /notifications/{notificationId} (remove notification).","summary":"Retrieve notification details by ID (discussion_board_notifications table)","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed single notification info","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"Create (issue) a new notification event to a user's notification feed. Inserts a row into discussion_board_notifications, typically triggered by a system event, user mention, subscription update, or admin notice. The body must supply all required notification schema fields including recipient, message, type, and delivery context. Designed for system and admin use in audit-event creation, system notices, or custom notification workflows.","path":"/discussionBoard/admin/notifications","method":"post","description":"Registers a new notification in the discussion_board_notifications table. Input must provide the recipient member ID, message content, type (e.g., reply, system, mention), delivery status, and any optional context (subscription link, target entity info).\n\nSecurity context: Only admins, moderators, or automated systems are authorized to deliver notifications directly. Audit logs track who/what originated the notification, and improper access will be denied.\n\nRelated APIs: GET/PATCH for notification retrieval; PUT for updating delivery/read status; DELETE to remove notifications (e.g., manual admin cleanup).","summary":"Create a new notification event (discussion_board_notifications table)","parameters":[],"requestBody":{"description":"Information for creating the notification event","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification event object","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"Create (issue) a new notification event to a user's notification feed. Inserts a row into discussion_board_notifications, typically triggered by a system event, user mention, subscription update, or admin notice. The body must supply all required notification schema fields including recipient, message, type, and delivery context. Designed for system and admin use in audit-event creation, system notices, or custom notification workflows.","path":"/discussionBoard/moderator/notifications","method":"post","description":"Registers a new notification in the discussion_board_notifications table. Input must provide the recipient member ID, message content, type (e.g., reply, system, mention), delivery status, and any optional context (subscription link, target entity info).\n\nSecurity context: Only admins, moderators, or automated systems are authorized to deliver notifications directly. Audit logs track who/what originated the notification, and improper access will be denied.\n\nRelated APIs: GET/PATCH for notification retrieval; PUT for updating delivery/read status; DELETE to remove notifications (e.g., manual admin cleanup).","summary":"Create a new notification event (discussion_board_notifications table)","parameters":[],"requestBody":{"description":"Information for creating the notification event","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification event object","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"Modify (mark as read, update delivery status, or edit message) an existing notification. Updates a row in discussion_board_notifications as identified by notificationId. Fields that may be changed include message, notification_type, delivery/read timestamps, delivery_status, and failure_reason. Complies with requirements for notification state management and read tracking.","path":"/discussionBoard/member/notifications/{notificationId}","method":"put","description":"Update an existing notification event, typically used to mark as read, update message details, change delivery status, or record a delivery failure. Only the recipient, admins, or system agents can update a notification. Changes are fully audit-logged according to the notifications schema.\n\nBusiness logic blocks updates on notifications not belonging to the session user unless an admin role is present. Proper validation occurs on all updated fields (read_at timestamp, etc.).\n\nTypical use: Mark notification as read in UI, report message delivery issues, or manually update failed delivery records for analytics. Related: single notification GET/DELETE.","summary":"Update notification properties (discussion_board_notifications table)","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified notification","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"Notification object with updated fields","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","admin"],"name":"update","authorizationRole":"member"},{"specification":"Modify (mark as read, update delivery status, or edit message) an existing notification. Updates a row in discussion_board_notifications as identified by notificationId. Fields that may be changed include message, notification_type, delivery/read timestamps, delivery_status, and failure_reason. Complies with requirements for notification state management and read tracking.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"put","description":"Update an existing notification event, typically used to mark as read, update message details, change delivery status, or record a delivery failure. Only the recipient, admins, or system agents can update a notification. Changes are fully audit-logged according to the notifications schema.\n\nBusiness logic blocks updates on notifications not belonging to the session user unless an admin role is present. Proper validation occurs on all updated fields (read_at timestamp, etc.).\n\nTypical use: Mark notification as read in UI, report message delivery issues, or manually update failed delivery records for analytics. Related: single notification GET/DELETE.","summary":"Update notification properties (discussion_board_notifications table)","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified notification","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"Notification object with updated fields","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Removes (deletes) a notification event by its unique identifier. Deletes a row from discussion_board_notifications, typically when a user dismisses a notification, marks it as irrelevant, or when admins clean up obsolete or failed notifications. If no soft-delete fields are present, this is a hard-delete operation. Access is restricted to the notification recipient or authorized admin roles.","path":"/discussionBoard/member/notifications/{notificationId}","method":"delete","description":"Delete a notification from the user's notification feed according to the discussion_board_notifications schema. Only the recipient, admin, or system agents may remove a notification. Operation removes the record entirely if there is no soft-delete flag in the schema.\n\nDeletion attempts by non-owners are rejected. Operation is fully audit-logged for compliance and recovery. Related: use GET for single view, PATCH for batch query, POST to create notifications.","summary":"Delete a notification by ID (discussion_board_notifications)","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Removes (deletes) a notification event by its unique identifier. Deletes a row from discussion_board_notifications, typically when a user dismisses a notification, marks it as irrelevant, or when admins clean up obsolete or failed notifications. If no soft-delete fields are present, this is a hard-delete operation. Access is restricted to the notification recipient or authorized admin roles.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"delete","description":"Delete a notification from the user's notification feed according to the discussion_board_notifications schema. Only the recipient, admin, or system agents may remove a notification. Operation removes the record entirely if there is no soft-delete flag in the schema.\n\nDeletion attempts by non-owners are rejected. Operation is fully audit-logged for compliance and recovery. Related: use GET for single view, PATCH for batch query, POST to create notifications.","summary":"Delete a notification by ID (discussion_board_notifications)","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Fetch a paginated list of activity log entries for the system (typically admin or moderator access). Operates over the discussion_board_activity_logs table, supporting index/sorting by timestamp, actor, action_type, topic/thread/post, user agent, and IP address. Used for system, audit, and analytics dashboard purposes. Returns activity entry summaries.","path":"/discussionBoard/admin/activityLogs","method":"get","description":"Retrieve a paginated list of activity logs from the discussion_board_activity_logs table. Logs track actions by all actors (members, moderators, admins, guests), including activity type (views, posts, moderation, etc.), target entity, and context information like IP address or user agent.\n\nFiltering/sorting may be restricted to high-privilege roles (admin, moderator). Used by analytics dashboards, moderation audit, and compliance systems. Pagination and basic filtering are supported. Related: PATCH /activityLogs for advanced search, GET /activityLogs/{activityLogId} for single record view.","summary":"List activity logs (discussion_board_activity_logs table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of activity log entries","typeName":"IPageIDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Fetch a paginated list of activity log entries for the system (typically admin or moderator access). Operates over the discussion_board_activity_logs table, supporting index/sorting by timestamp, actor, action_type, topic/thread/post, user agent, and IP address. Used for system, audit, and analytics dashboard purposes. Returns activity entry summaries.","path":"/discussionBoard/moderator/activityLogs","method":"get","description":"Retrieve a paginated list of activity logs from the discussion_board_activity_logs table. Logs track actions by all actors (members, moderators, admins, guests), including activity type (views, posts, moderation, etc.), target entity, and context information like IP address or user agent.\n\nFiltering/sorting may be restricted to high-privilege roles (admin, moderator). Used by analytics dashboards, moderation audit, and compliance systems. Pagination and basic filtering are supported. Related: PATCH /activityLogs for advanced search, GET /activityLogs/{activityLogId} for single record view.","summary":"List activity logs (discussion_board_activity_logs table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of activity log entries","typeName":"IPageIDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Advanced search/filter of activity logs via the discussion_board_activity_logs table. Supports filtering by time range, actor, action type, topic/thread/post, user agent, and other meta fields. Advanced sorting and pagination for analytics, compliance, and reporting. Intended for high-privilege roles (admin, moderator) to conduct detailed audit analysis.","path":"/discussionBoard/admin/activityLogs","method":"patch","description":"Perform a robust, filtered query of the system's activity logs for analytics or compliance needs. Enables searching by time interval, actor role/type, action type, entity involved, or by user agent/IP. Supports extensive audit trails for site admins and moderators as required by analytics and workflow reporting.\n\nAuthorization protects access to high-sensitivity activity data. Results can be sorted/paged as required by dashboard or investigation features. Use with GET (single fetch) or PATCH (batch/filtered query) as needed.","summary":"Search/filter activity logs with advanced parameters (discussion_board_activity_logs)","parameters":[],"requestBody":{"description":"Search, filter, and pagination settings for activity logs","typeName":"IDiscussionBoardActivityLog.IRequest"},"responseBody":{"description":"Filtered paginated activity log entries","typeName":"IPageIDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Advanced search/filter of activity logs via the discussion_board_activity_logs table. Supports filtering by time range, actor, action type, topic/thread/post, user agent, and other meta fields. Advanced sorting and pagination for analytics, compliance, and reporting. Intended for high-privilege roles (admin, moderator) to conduct detailed audit analysis.","path":"/discussionBoard/moderator/activityLogs","method":"patch","description":"Perform a robust, filtered query of the system's activity logs for analytics or compliance needs. Enables searching by time interval, actor role/type, action type, entity involved, or by user agent/IP. Supports extensive audit trails for site admins and moderators as required by analytics and workflow reporting.\n\nAuthorization protects access to high-sensitivity activity data. Results can be sorted/paged as required by dashboard or investigation features. Use with GET (single fetch) or PATCH (batch/filtered query) as needed.","summary":"Search/filter activity logs with advanced parameters (discussion_board_activity_logs)","parameters":[],"requestBody":{"description":"Search, filter, and pagination settings for activity logs","typeName":"IDiscussionBoardActivityLog.IRequest"},"responseBody":{"description":"Filtered paginated activity log entries","typeName":"IPageIDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieve detailed information from a specific activity log entry by its unique identifier. Fetches the details from discussion_board_activity_logs with all record fields, including IP/user agent, actor, time, action, targets (topic/thread/post), and metadata. Intended for audit log inspection by admins or moderators. Enforces access control and auditability as per compliance requirements.","path":"/discussionBoard/admin/activityLogs/{activityLogId}","method":"get","description":"Fetch the full details for one activity log entry given a unique activityLogId. Returns all properties from the discussion_board_activity_logs table, including actor info, target entities, time, action type, meta fields, user agent, IP, and any extensible JSON metadata.\n\nAccess is governed by role-based controls; only admins and moderators can access full log data. Used for incident analysis, compliance audits, and dashboard drilldowns. Related: PATCH for batch query; DELETE for log removal (if implemented), GET for lists.","summary":"Get details for one activity log entry by ID (discussion_board_activity_logs)","parameters":[{"name":"activityLogId","description":"Unique identifier of the activity log entry to fetch","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Activity log entry details","typeName":"IDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieve detailed information from a specific activity log entry by its unique identifier. Fetches the details from discussion_board_activity_logs with all record fields, including IP/user agent, actor, time, action, targets (topic/thread/post), and metadata. Intended for audit log inspection by admins or moderators. Enforces access control and auditability as per compliance requirements.","path":"/discussionBoard/moderator/activityLogs/{activityLogId}","method":"get","description":"Fetch the full details for one activity log entry given a unique activityLogId. Returns all properties from the discussion_board_activity_logs table, including actor info, target entities, time, action type, meta fields, user agent, IP, and any extensible JSON metadata.\n\nAccess is governed by role-based controls; only admins and moderators can access full log data. Used for incident analysis, compliance audits, and dashboard drilldowns. Related: PATCH for batch query; DELETE for log removal (if implemented), GET for lists.","summary":"Get details for one activity log entry by ID (discussion_board_activity_logs)","parameters":[{"name":"activityLogId","description":"Unique identifier of the activity log entry to fetch","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Activity log entry details","typeName":"IDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"Create a new activity log record in the discussion_board_activity_logs table. Used primarily by backend components (system, admin, or moderator) to explicitly log audit events, actions, or externally-initiated activities. Input must cover mandatory activity log schema fields. Audit integrity is critical; only privileged actors may write.","path":"/discussionBoard/admin/activityLogs","method":"post","description":"Create a new system activity log entry, typically related to security, moderation actions, audit trail events, or high-value analytics. Only high-privilege actors (admin, moderator, automated systems) can log activity events. All mandatory fields from the activity log schema (actor, action, target(s), timestamp) must be supplied and are validated.\n\nAudit log creation is a compliance requirement for moderator/admin actions and is supported by background jobs or system triggers. Related endpoints include GET/PATCH for retrieval and analytics.","summary":"Create a new activity log entry (discussion_board_activity_logs)","parameters":[],"requestBody":{"description":"Full specification of the activity event to log","typeName":"IDiscussionBoardActivityLog.ICreate"},"responseBody":{"description":"The newly created activity log entry object","typeName":"IDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"Create a new activity log record in the discussion_board_activity_logs table. Used primarily by backend components (system, admin, or moderator) to explicitly log audit events, actions, or externally-initiated activities. Input must cover mandatory activity log schema fields. Audit integrity is critical; only privileged actors may write.","path":"/discussionBoard/moderator/activityLogs","method":"post","description":"Create a new system activity log entry, typically related to security, moderation actions, audit trail events, or high-value analytics. Only high-privilege actors (admin, moderator, automated systems) can log activity events. All mandatory fields from the activity log schema (actor, action, target(s), timestamp) must be supplied and are validated.\n\nAudit log creation is a compliance requirement for moderator/admin actions and is supported by background jobs or system triggers. Related endpoints include GET/PATCH for retrieval and analytics.","summary":"Create a new activity log entry (discussion_board_activity_logs)","parameters":[],"requestBody":{"description":"Full specification of the activity event to log","typeName":"IDiscussionBoardActivityLog.ICreate"},"responseBody":{"description":"The newly created activity log entry object","typeName":"IDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"Update an existing activity log entry as identified by activityLogId. Typical updates include adding metadata, clarifying user agent/IP, or modifying the action details for compliance or correction. Modifies a row in discussion_board_activity_logs. Audit integrity is critical; only privileged roles are allowed to update logs under strict access control, and all changes are logged.","path":"/discussionBoard/admin/activityLogs/{activityLogId}","method":"put","description":"Update one or more attributes of an activity log record. Supported fields include metadata updates, user agent/IP clarifications, or changing typed details. Critical for compliance error correction, after-the-fact data additions, or to resolve disputes. All updates require admin or moderator access; every change is separately logged and authorized.\n\nCoordinate with GET for single view, POST for explicit log creation, or PATCH for batch reporting. Unauthorized or improperly validated updates are denied and fully audited.","summary":"Update an activity log entry by ID (discussion_board_activity_logs)","parameters":[{"name":"activityLogId","description":"Unique identifier of the activity log entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Specification of activity log fields to update","typeName":"IDiscussionBoardActivityLog.IUpdate"},"responseBody":{"description":"The updated activity log entry object","typeName":"IDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"Update an existing activity log entry as identified by activityLogId. Typical updates include adding metadata, clarifying user agent/IP, or modifying the action details for compliance or correction. Modifies a row in discussion_board_activity_logs. Audit integrity is critical; only privileged roles are allowed to update logs under strict access control, and all changes are logged.","path":"/discussionBoard/moderator/activityLogs/{activityLogId}","method":"put","description":"Update one or more attributes of an activity log record. Supported fields include metadata updates, user agent/IP clarifications, or changing typed details. Critical for compliance error correction, after-the-fact data additions, or to resolve disputes. All updates require admin or moderator access; every change is separately logged and authorized.\n\nCoordinate with GET for single view, POST for explicit log creation, or PATCH for batch reporting. Unauthorized or improperly validated updates are denied and fully audited.","summary":"Update an activity log entry by ID (discussion_board_activity_logs)","parameters":[{"name":"activityLogId","description":"Unique identifier of the activity log entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Specification of activity log fields to update","typeName":"IDiscussionBoardActivityLog.IUpdate"},"responseBody":{"description":"The updated activity log entry object","typeName":"IDiscussionBoardActivityLog"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"Remove (hard delete) an activity log entry, identified by activityLogId. Since the schema does not have any soft-delete field, the operation erases the entry permanently. Used for GDPR/retention policy compliance, legal removals, or system cleanup. Restricted to admin and moderator roles. All removal actions are logged in accordance with audit requirements.","path":"/discussionBoard/admin/activityLogs/{activityLogId}","method":"delete","description":"Delete an existing activity log entry entirely from the discussion_board_activity_logs table. With no soft-delete column in the schema, this is a hard delete, suitable for legal, compliance, or audit-clearing operations. Deletion is strictly limited to admin or moderator roles, and every erase is separately logged for compliance.\n\nOperation must block unauthorized deletions and handle not found or already-deleted errors clearly. Use with GET/PATCH for fetching entries before erase, and coordinate with wider retention/data management workflows.","summary":"Delete an activity log entry by ID (discussion_board_activity_logs)","parameters":[{"name":"activityLogId","description":"Unique identifier for log entry to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"Remove (hard delete) an activity log entry, identified by activityLogId. Since the schema does not have any soft-delete field, the operation erases the entry permanently. Used for GDPR/retention policy compliance, legal removals, or system cleanup. Restricted to admin and moderator roles. All removal actions are logged in accordance with audit requirements.","path":"/discussionBoard/moderator/activityLogs/{activityLogId}","method":"delete","description":"Delete an existing activity log entry entirely from the discussion_board_activity_logs table. With no soft-delete column in the schema, this is a hard delete, suitable for legal, compliance, or audit-clearing operations. Deletion is strictly limited to admin or moderator roles, and every erase is separately logged for compliance.\n\nOperation must block unauthorized deletions and handle not found or already-deleted errors clearly. Use with GET/PATCH for fetching entries before erase, and coordinate with wider retention/data management workflows.","summary":"Delete an activity log entry by ID (discussion_board_activity_logs)","parameters":[{"name":"activityLogId","description":"Unique identifier for log entry to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This operation retrieves a paginated list of engagement statistics records, operating on the discussion_board_engagement_stats table. It supports retrieval of summarized analytics and statistical reporting for the discussion board platform, including metrics such as post/comment counts, active users, and report rates, as required by the platform's analytics dashboard. The endpoint can be used by authorized users to monitor forum health and activity volume. The list is suitable for dashboards or reporting use cases. Pagination and query parameter support may be included in implementation.","path":"/discussionBoard/admin/engagementStats","method":"get","description":"Retrieve a paginated set of engagement statistics records for the discussion board analytics dashboard. This operation fetches activity summary rows from the discussion_board_engagement_stats table, enabling reviews of forum engagement, post/comment volumes, user activity counts, and report metrics broken down by period and segment (e.g., by topic or user role). \n\nAccess is restricted to users with the 'admin' role, in line with permission policies that mandate analytics visibility for platform managers only. All returned data is strictly from the analytics summary table and does not include sensitive user details, maintaining privacy.\n\nThis operation is typically used together with endpoints that fetch detailed statistics or analytics for a specific period, topic, or dimension. Errors from invalid queries or insufficient permissions are returned according to the API's standardized error response structure.","summary":"List all engagement statistics entries for dashboard analytics (discussion_board_engagement_stats).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of engagement statistics entries for reporting.","typeName":"IPageIDiscussionBoardEngagementStat"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation allows advanced search, filtering, and paginated retrieval of engagement statistics, referencing the discussion_board_engagement_stats table. It is designed to support inquiries such as statistics by time interval, topic, dimension, or segment value, and enables complex queries for the analytics dashboard. The request body supports filter parameters relevant to analytics review and administrative insight.","path":"/discussionBoard/admin/engagementStats","method":"patch","description":"Search and filter engagement statistics from the discussion_board_engagement_stats reporting table. This endpoint provides advanced query capabilities as required by dashboard analytics and administrative reports. Supported filters may include time range (period_start/period_end), dimension, segment_value, or topic-related breakdowns. Returned data gives platform managers high-level insights into discussion board usage, activity, moderation reports, and engagement trends.\n\nSecurity policy restricts access to users with 'admin' privileges. Detailed result sets are suitable for customized analytics dashboards, including multi-dimensional breakdowns for management decision-making. Failure modes, such as malformed filters, return standard validation errors as per API guidelines.\n\nThis endpoint is often used with item detail retrieval or summary chart rendering for operational analytics.","summary":"Search, filter, and paginate analytics engagement stats (discussion_board_engagement_stats).","parameters":[],"requestBody":{"description":"Query and filter parameters for analytics stats search.","typeName":"IDiscussionBoardEngagementStat.IRequest"},"responseBody":{"description":"Filtered, paginated set of engagement stat entries.","typeName":"IPageIDiscussionBoardEngagementStat"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves a specific engagement statistics record by its unique identifier. It operates on the discussion_board_engagement_stats table, following RESTful patterns for resource retrieval by ID. This enables detailed inspection of a single statistical summary for analysis, troubleshooting, or audit.","path":"/discussionBoard/admin/engagementStats/{engagementStatId}","method":"get","description":"Retrieve details of a single engagement statistics record from the discussion_board_engagement_stats table, by specifying the record's unique ID. This operation is critical for presenting complete analytics information to administrators needing granular insights into board activity over a particular time interval, dimension, or segment.\n\nThe operation is restricted to users with 'admin' privileges, as per analytics and reporting access controls defined in system requirements. Returned details include all fields for the reporting entity, suitable for drill-down dashboard use or analytical review. Errors for nonexistent IDs or unauthorized access are handled as described in the API error documentation.","summary":"Retrieve a specific engagement statistic by ID (discussion_board_engagement_stats).","parameters":[{"name":"engagementStatId","description":"Unique identifier of the target engagement statistic (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The engagement statistics entry for the given ID.","typeName":"IDiscussionBoardEngagementStat"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new engagement statistics record in the discussion_board_engagement_stats table. It is primarily intended for administrative workflows and automated analytical background jobs that materialize or update analytics data for the reporting dashboard. Only users with 'admin' privilege should be allowed to create or seed new analytics rows, and the request body must supply all required statistical dimensions and periods.","path":"/discussionBoard/admin/engagementStats","method":"post","description":"Create a new engagement statistics record for discussion board analytics reporting. Used by the analytics pipeline or administrative users to insert a new pre-calculated aggregate row with engagement metrics—including post count, comment count, user activity, and report statistics. The operation fully aligns with the schema constraints and data normalization rules, expecting required fields such as period, dimension, and counts.\n\nThe endpoint is strictly limited to 'admin' users due to sensitivity around raw analytics injection/modification. All validation, such as no duplicate reporting intervals and segment combinations, follows the schema's unique constraints. Error scenarios include input validation failures or attempts to duplicate an existing stat entry for a period/dimension/segment.","summary":"Create a new engagement statistics report row (discussion_board_engagement_stats).","parameters":[],"requestBody":{"description":"Payload for creating a new analytics statistic entry.","typeName":"IDiscussionBoardEngagementStat.ICreate"},"responseBody":{"description":"The newly created engagement statistics record.","typeName":"IDiscussionBoardEngagementStat"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This operation updates an existing engagement statistics record specified by its ID, corresponding to the discussion_board_engagement_stats table. Administrative users can use this endpoint to amend or correct analytics data, such as to rectify metrics for a given reporting interval or to respond to reprocessing jobs. Input validation must match column requirements and uniqueness constraints.","path":"/discussionBoard/admin/engagementStats/{engagementStatId}","method":"put","description":"Update an existing engagement statistics record in the analytics reporting table, identified by unique ID. This operation permits authorized administrators to correct, amend, or repopulate summary data for a given analytic interval, dimension, or segment. All relevant metrics including period, dimension, and statistics fields can be updated as supported by the schema. Only a user with 'admin' privileges may perform this action, in accordance with role-based access control policies for analytics.\n\nImplementation must honor uniqueness and normalization constraints. Violations, such as updating to overlap another record's unique key (period/dimension/segment), or referencing nonexistent records, will return validation or not-found errors as per API protocol.","summary":"Update an engagement statistics entry by ID (discussion_board_engagement_stats).","parameters":[{"name":"engagementStatId","description":"Unique identifier of the engagement stat entry to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating the analytics stat entry.","typeName":"IDiscussionBoardEngagementStat.IUpdate"},"responseBody":{"description":"The updated engagement statistics record.","typeName":"IDiscussionBoardEngagementStat"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation deletes an engagement statistics record, identified by its unique ID, from the discussion_board_engagement_stats table. As there is no soft-delete field in the schema, this operation is a hard delete and will physically remove the record. It is restricted to administrative users as raw deletion affects historical and dashboard analytics integrity.","path":"/discussionBoard/admin/engagementStats/{engagementStatId}","method":"delete","description":"Delete (hard-delete) an engagement statistic entry from the discussion_board_engagement_stats reporting table, specified by unique ID. This operation is only allowed for 'admin' users, reflecting the destructive and sensitive nature of analytics record deletion. As there is no soft-delete provision in the schema, the record is physically removed. Attempting to delete a nonexistent or in-use record will result in an error as per API standards.\n\nUsed primarily for correcting errors in analytics processing, regulatory compliance, or data integrity management. Caution and audit logging are strongly recommended for all delete operations in production.","summary":"Delete an engagement statistic entry by ID (discussion_board_engagement_stats; hard delete).","parameters":[{"name":"engagementStatId","description":"Unique identifier of the engagement stat entry to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"}],"components":{"authorization":[{"name":"admin","description":"The administrator has full permissions to manage the discussion board, including moderating content, managing user roles, configuring topics, handling reports, and accessing analytics."},{"name":"moderator","description":"Moderators can review and moderate discussion posts and comments, resolve user reports, enforce community guidelines, and assist admins in maintaining order."},{"name":"member","description":"Members are authenticated users who can create new topics, post comments, participate in discussions, and report inappropriate content."},{"name":"guest","description":"Guests can browse public discussions and topics but must register and authenticate to participate in discussions or interact with content."}],"schemas":{"IPage.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number. Indicates which page of results to return. Optional; when omitted, defaults to first page."},"limit":{"type":"integer","description":"Records per page. Controls how many items appear on each page. Optional; when omitted, default behavior applies (e.g., 100)."}},"required":[],"description":"Standard paging request object for all paginated API endpoints. Includes optional page number ('page') and optional page size ('limit'). Referenced by search and list request schemas throughout the API. This enables consistent pagination handling in API requests."},"IPageIDiscussionBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션에 대한 정보입니다.\n\n현재 페이지, 페이지당 항목 수, 전체 레코드 수, 전체 페이지 수 같은 메타데이터를 포함합니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory"},"description":"이 레코드에 포함된 카테고리 목록 배열입니다."}},"required":["pagination","data"],"description":"게시판 카테고리 목록에 대한 페이지 단위 컨테이너 타입입니다.\n\n각 페이지에는 전체 카테고리가 아니라 일부(페이징된) 카테고리의 정보만 포함되며, 페이지 변경 시 pagination 메타데이터 조정됩니다.\n관리자/사용자 모두 조회 시 사용합니다."},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"필터링에 사용할 카테고리 이름입니다. 부분 일치 또는 정확히 매칭할 수 있습니다."},{"type":"null"}],"description":"필터링에 사용할 카테고리 이름입니다. 부분 일치 또는 정확히 매칭할 수 있습니다."},"is_active":{"oneOf":[{"type":"boolean","description":"활성/비활성 카테고리 필터입니다. true: 활성, false: 비활성, null: 모든 상태."},{"type":"null"}],"description":"활성/비활성 카테고리 필터입니다. true: 활성, false: 비활성, null: 모든 상태."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"특정 상위 카테고리 하위만 가져올 때 사용하는 parent_id입니다."},{"type":"null"}],"description":"특정 상위 카테고리 하위만 가져올 때 사용하는 parent_id입니다."},"created_at_start":{"oneOf":[{"type":"string","format":"date-time","description":"생성일 기준 시작 범위 필터(ISO8601 형식의 타임스탬프)."},{"type":"null"}],"description":"생성일 기준 시작 범위 필터(ISO8601 형식의 타임스탬프)."},"created_at_end":{"oneOf":[{"type":"string","format":"date-time","description":"생성일 기준 종료 범위 필터(ISO8601 형식의 타임스탬프)."},{"type":"null"}],"description":"생성일 기준 종료 범위 필터(ISO8601 형식의 타임스탬프)."},"updated_at_start":{"oneOf":[{"type":"string","format":"date-time","description":"수정일 기준 시작 범위 필터(ISO8601 형식의 타임스탬프)."},{"type":"null"}],"description":"수정일 기준 시작 범위 필터(ISO8601 형식의 타임스탬프)."},"updated_at_end":{"oneOf":[{"type":"string","format":"date-time","description":"수정일 기준 종료 범위 필터(ISO8601 형식의 타임스탬프)."},{"type":"null"}],"description":"수정일 기준 종료 범위 필터(ISO8601 형식의 타임스탬프)."},"sort":{"oneOf":[{"type":"string","description":"정렬 필드명. 예) name, created_at, updated_at 등"},{"type":"null"}],"description":"정렬 필드명. 예) name, created_at, updated_at 등"},"order":{"oneOf":[{"const":"asc","description":"정렬 방향(오름차순/내림차순)"},{"const":"desc","description":"정렬 방향(오름차순/내림차순)"},{"type":"null"}],"description":"정렬 방향(오름차순/내림차순)"},"page":{"oneOf":[{"type":"integer","description":"조회할 페이지(기본 1)"},{"type":"null"}],"description":"조회할 페이지(기본 1)"},"limit":{"oneOf":[{"type":"integer","description":"페이지당 항목 수(기본: 100)"},{"type":"null"}],"description":"페이지당 항목 수(기본: 100)"}},"description":"게시판 카테고리 목록을 필터/검색하기 위한 요청 파라미터입니다.\n\n이름, 활성 상태, 상위 카테고리, 생성일/수정일 범위, 정렬, 페이징 등 UI와 연동되는 필터입니다.","required":[]},"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 카테고리 식별자(Prisma discussion_board_categories.id)."},"name":{"type":"string","description":"카테고리명. 유일하며, 토픽 그룹핑에 사용됩니다.\n\n비즈니스 상에서 한 카테고리에 중복된 이름이 존재할 수 없습니다."},"description":{"oneOf":[{"type":"string","description":"카테고리에 대한 설명 또는 추가 정보입니다.\n\n비워둘 수 있습니다."},{"type":"null"}],"description":"카테고리에 대한 설명 또는 추가 정보입니다.\n\n비워둘 수 있습니다."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"상위(부모) 카테고리의 id. 최상위는 null입니다."},{"type":"null"}],"description":"상위(부모) 카테고리의 id. 최상위는 null입니다."},"is_active":{"type":"boolean","description":"카테고리의 활성/비활성 상태입니다.\n\nfalse이면 사용자에게 숨겨지거나 사용할 수 없습니다."},"created_at":{"type":"string","format":"date-time","description":"카테고리가 생성된 일시(ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"카테고리 정보가 마지막으로 수정된 일시(ISO8601)."}},"required":["id","name","is_active","created_at","updated_at"],"description":"게시판 카테고리 테이블(discussion_board_categories)의 전체 컬럼을 반영한 타입.\n\n상위/하위 구조(parent_id), 활성화, 생성/수정시각 등 관리와 사용자 UI 양쪽 모두에서 사용되는 핵심 엔티티입니다. 유일성과 계층형 트리구조를 가진다는 점이 중요합니다. Prisma 테이블 주석 및 업무 도메인 이해를 포함하여 작성되었습니다."},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"신규로 생성할 카테고리 이름. 반드시 유일해야 하며, 기존에 동일한 이름이 존재하면 409 에러를 반환합니다."},"description":{"oneOf":[{"type":"string","description":"생성 시 입력할 카테고리 설명. 선택입니다."},{"type":"null"}],"description":"생성 시 입력할 카테고리 설명. 선택입니다."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"상위 카테고리 id. 상위 없이 최상위 카테고리를 생성할 때는 null 입력."},{"type":"null"}],"description":"상위 카테고리 id. 상위 없이 최상위 카테고리를 생성할 때는 null 입력."},"is_active":{"type":"boolean","description":"카테고리의 활성화 여부(초기 생성시부터 비활성 상태 가능)."}},"required":["name","is_active"],"description":"새로운 게시판 카테고리 생성 시 사용하는 요청 바디 타입입니다.\n\n카테고리명, 활성상태 필수, 설명/상위 카테고리는 옵션입니다. Prisma discussion_board_categories 테이블 생성 기준으로 설계되었습니다."},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"카테고리명(변경 시 유일성 검증 필요)."},{"type":"null"}],"description":"카테고리명(변경 시 유일성 검증 필요)."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명(변경/삭제 가능)."},{"type":"null"}],"description":"카테고리 설명(변경/삭제 가능)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"상위 카테고리 id. 계층 변경 허용."},{"type":"null"}],"description":"상위 카테고리 id. 계층 변경 허용."},"is_active":{"oneOf":[{"type":"boolean","description":"활성/비활성 전환 플래그."},{"type":"null"}],"description":"활성/비활성 전환 플래그."}},"description":"카테고리 수정 요청 바디 타입.\n\n모든 필드는 선택이며, 실제 수정하는 필드만 포함 가능합니다. Prisma discussion_board_categories 테이블 수정과 동기화됩니다.","required":[]},"IPageIDiscussionBoardCategoryModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보(현재 페이지, 전체 페이지, 개수 등)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategoryModerator"},"description":"해당 페이지 내의 카테고리-모더레이터 할당 목록."}},"required":["pagination","data"],"description":"카테고리별 담당 모더레이터 할당 정보의 페이징 컨테이너.\n보고, 관리, UI 등에서 사용됩니다."},"IDiscussionBoardCategoryModerator.IRequest":{"type":"object","properties":{"category_id":{"oneOf":[{"type":"string","format":"uuid","description":"카테고리 id로 검색조건 지정(필요시)."},{"type":"null"}],"description":"카테고리 id로 검색조건 지정(필요시)."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"모더레이터 id로 필터링."},{"type":"null"}],"description":"모더레이터 id로 필터링."},"created_at_start":{"oneOf":[{"type":"string","format":"date-time","description":"할당 일시(이후/from)"},{"type":"null"}],"description":"할당 일시(이후/from)"},"created_at_end":{"oneOf":[{"type":"string","format":"date-time","description":"할당 일시(이전/to)"},{"type":"null"}],"description":"할당 일시(이전/to)"},"sort":{"oneOf":[{"type":"string","description":"정렬 필드(예: created_at, moderator_id 등)."},{"type":"null"}],"description":"정렬 필드(예: created_at, moderator_id 등)."},"order":{"oneOf":[{"const":"asc","description":"정렬방향(asc/desc)"},{"const":"desc","description":"정렬방향(asc/desc)"},{"type":"null"}],"description":"정렬방향(asc/desc)"},"page":{"oneOf":[{"type":"integer","description":"페이지 번호(1~)"},{"type":"null"}],"description":"페이지 번호(1~)"},"limit":{"oneOf":[{"type":"integer","description":"페이지당 개수(기본 100)"},{"type":"null"}],"description":"페이지당 개수(기본 100)"}},"description":"카테고리-모더레이터 할당 관계에 대한 필터/검색 및 페이지네이션 요청 DTO.\n관리 UI 등에서 특정 모더레이터, 카테고리 기준으로 필터/정렬할 때 사용됩니다.","required":[]},"IDiscussionBoardCategoryModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"카테고리-모더레이터 할당 테이블의 PK(discussion_board_category_moderators.id), 고유 식별자."},"category_id":{"type":"string","format":"uuid","description":"카테고리 discussion_board_categories.id를 참조하는 FK. 어떤 카테고리에 할당된 모더레이터인지 나타냅니다."},"moderator_id":{"type":"string","format":"uuid","description":"모더레이터 discussion_board_moderators.id 참조 FK. 할당된 사용자."},"created_at":{"type":"string","format":"date-time","description":"할당 일시. 감사/감시 및 관리 로그용입니다."}},"required":["id","category_id","moderator_id","created_at"],"description":"카테고리별 모더레이터 할당을 나타내는 엔티티 타입.\n복합유일키(category_id, moderator_id), 할당일시 등 업무/권한 분배 관점에서 사용됩니다. Prisma discussion_board_category_moderators 테이블 설계와 동기화."},"IDiscussionBoardCategoryModerator.ICreate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"할당할 카테고리 discussion_board_categories.id. Path에서 받을 수도 있음."},"moderator_id":{"type":"string","format":"uuid","description":"할당할 모더레이터 discussion_board_moderators.id."}},"required":["category_id","moderator_id"],"description":"카테고리-모더레이터 할당 생성 요청 바디 타입.\n\n카테고리와 모더레이터 식별자는 둘 다 필수. business rule상 중복 할당은 불허합니다. Prisma discussion_board_category_moderators 생성기준."},"IDiscussionBoardCategoryModerator.IUpdate":{"type":"object","properties":{"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"모더레이터 변경 시에만 사용. 변경하지 않을 땐 생략 가능."},{"type":"null"}],"description":"모더레이터 변경 시에만 사용. 변경하지 않을 땐 생략 가능."}},"description":"카테고리-모더레이터 할당을 업데이트할 때 사용되는 타입.\n보통은 필요한 변경만 명시적으로 전달합니다.","required":[]},"IPageIDiscussionBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 및 메타데이터 정보(현재 페이지, 전체, limit 등)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSetting"},"description":"이 페이지 내의 설정 엔티티 목록."}},"required":["pagination","data"],"description":"게시판 설정 목록에 대한 페이징 응답 컨테이너.\n\n관리자 UI 또는 설정 API 리스트 인터페이스에 사용함."},"IDiscussionBoardSetting.IRequest":{"type":"object","properties":{"setting_key":{"oneOf":[{"type":"string","description":"설정키 필터(부분 또는 완전 일치 검색)."},{"type":"null"}],"description":"설정키 필터(부분 또는 완전 일치 검색)."},"created_at_start":{"oneOf":[{"type":"string","format":"date-time","description":"설정 생성일 기준 검색 범위(시작). ISO8601."},{"type":"null"}],"description":"설정 생성일 기준 검색 범위(시작). ISO8601."},"created_at_end":{"oneOf":[{"type":"string","format":"date-time","description":"설정 생성일 기준 검색 범위(종료). ISO8601."},{"type":"null"}],"description":"설정 생성일 기준 검색 범위(종료). ISO8601."},"updated_at_start":{"oneOf":[{"type":"string","format":"date-time","description":"설정 수정일 기준 검색 범위(시작). ISO8601."},{"type":"null"}],"description":"설정 수정일 기준 검색 범위(시작). ISO8601."},"updated_at_end":{"oneOf":[{"type":"string","format":"date-time","description":"설정 수정일 기준 검색 범위(종료). ISO8601."},{"type":"null"}],"description":"설정 수정일 기준 검색 범위(종료). ISO8601."},"sort":{"oneOf":[{"type":"string","description":"정렬 기준 필드명(예: setting_key, created_at 등)."},{"type":"null"}],"description":"정렬 기준 필드명(예: setting_key, created_at 등)."},"order":{"oneOf":[{"const":"asc","description":"정렬 순서(오름차순/내림차순)."},{"const":"desc","description":"정렬 순서(오름차순/내림차순)."},{"type":"null"}],"description":"정렬 순서(오름차순/내림차순)."},"page":{"oneOf":[{"type":"integer","description":"페이지 번호."},{"type":"null"}],"description":"페이지 번호."},"limit":{"oneOf":[{"type":"integer","description":"페이지당 반환 개수(기본 100)."},{"type":"null"}],"description":"페이지당 반환 개수(기본 100)."}},"description":"설정 목록의 검색/필터/정렬/페이징 조건을 전달하는 요청 타입.\n관리자 대시보드나 API에서 다양한 조건으로 설정을 검색/정렬할 때 사용됩니다.","required":[]},"IDiscussionBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자(UUID). 이 설정 레코드를 고유하게 식별합니다.\n\nPrisma 스키마 discussion_board_settings.id에서 유래했습니다. 시스템 내에서 각 설정을 참조할 때 필수적입니다."},"setting_key":{"type":"string","description":"설정의 고유 키 값(예: 'registration_open').\n\nPrisma discussion_board_settings.setting_key 컬럼(UNIQUE)에서 유래했습니다. 각 설정은 이 키로 식별되어 중복이 불가능합니다. 시스템 기능 토글, 등록, 정책 등 다양한 목적으로 사용됩니다."},"setting_value":{"type":"string","description":"설정의 현재 값이며 자유 텍스트로 저장됩니다.\n\nPrisma 스키마 discussion_board_settings.setting_value에서 유래했습니다. 설정의 의미와 실제 시스템 적용 값을 저장합니다."},"description":{"oneOf":[{"type":"string","description":"(선택) 이 설정이 제어(설정) 하는 바에 대한 설명.\n\nPrisma discussion_board_settings.description에서 유래했습니다. 상세한 설명이 포함될 수 있으며, null이 허용됩니다."},{"type":"null","description":"(선택) 이 설정이 제어(설정) 하는 바에 대한 설명.\n\nPrisma discussion_board_settings.description에서 유래했습니다. 상세한 설명이 포함될 수 있으며, null이 허용됩니다."}],"description":"(선택) 이 설정이 제어(설정) 하는 바에 대한 설명.\n\nPrisma discussion_board_settings.description에서 유래했습니다. 상세한 설명이 포함될 수 있으며, null이 허용됩니다."},"created_at":{"type":"string","format":"date-time","description":"설정 레코드 생성 시각. ISO 8601 포맷 사용.\n\nPrisma discussion_board_settings.created_at에서 유래했습니다."},"updated_at":{"type":"string","format":"date-time","description":"설정 레코드가 마지막으로 수정된 시각. ISO 8601 포맷입니다.\n\nPrisma discussion_board_settings.updated_at에서 유래했습니다."}},"required":["id","setting_key","setting_value","created_at","updated_at"],"description":"디스커션 보드의 시스템 설정 엔터티입니다.\n\nPrisma discussion_board_settings 테이블에서 파생되며, 보드 운영에 필요한 기능 토글, 주요 옵션, 정책, 또는 전역 변수 상태를 안전하게 관리할 수 있게 설계되었습니다. 각 설정은 유일한 키를 바탕으로 값(텍스트)과 설명 및 메타데이터를 보유합니다.\n\n관리 UI, 자동화 파이프라인, 운영 분석에서 활용될 수 있으며, 시스템 변경 시 생성/수정 이력 파악을 위해 타임스탬프가 포함됩니다.\n"},"IDiscussionBoardSetting.ICreate":{"type":"object","properties":{"setting_key":{"type":"string","description":"등록할 설정의 고유 키 값. Prisma setting_key(UNIQUE) 컬럼의 비즈니스 요구를 따릅니다."},"setting_value":{"type":"string","description":"설정 텍스트 값. Prisma setting_value 컬럼을 참조합니다."},"description":{"oneOf":[{"type":"string","description":"(선택) 이 설정의 목적 또는 설명입니다. Prisma discussion_board_settings.description에서 유래했습니다. 비어있거나 null 허용됩니다."},{"type":"null","description":"(선택) 이 설정의 목적 또는 설명입니다. Prisma discussion_board_settings.description에서 유래했습니다. 비어있거나 null 허용됩니다."}],"description":"(선택) 이 설정의 목적 또는 설명입니다. Prisma discussion_board_settings.description에서 유래했습니다. 비어있거나 null 허용됩니다."}},"required":["setting_key","setting_value"],"description":"새로운 보드 설정을 생성할 때 사용하는 객체입니다. 관리자가 UI나 백엔드에서 신규 옵션, 플래그를 생성 시 제출합니다.\n\n필수 입력은 고유 키 및 값이며, 설명은 선택입니다. Prisma discussion_board_settings ICreate 용도로 설계되었습니다.\n"},"IDiscussionBoardSetting.IUpdate":{"type":"object","properties":{"setting_key":{"type":"string","description":"설정의 고유 키(변경 가능). Prisma setting_key 필드를 참조합니다. 변경 시 키의 유일성이 보장되어야 하며, 시스템적 제약이 많으므로 주의가 필요합니다."},"setting_value":{"type":"string","description":"설정의 새로운 값입니다. 기존 setting_value의 업데이트용."},"description":{"oneOf":[{"type":"string","description":"(선택) 이 설정의 목적 및 설명. Prisma 컬럼에서 파생됨. null을 허용합니다."},{"type":"null","description":"(선택) 이 설정의 목적 및 설명. Prisma 컬럼에서 파생됨. null을 허용합니다."}],"description":"(선택) 이 설정의 목적 및 설명. Prisma 컬럼에서 파생됨. null을 허용합니다."}},"description":"기존 보드 설정을 수정할 때 사용하는 업데이트 객체입니다.\n\n관리자는 이 타입을 통해 텍스트 값, 설명, 드물게 키까지 수정할 수 있습니다. Prisma discussion_board_settings IUpdate 용도입니다.","required":[]},"IPageIDiscussionBoardAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 관련 정보(현재 페이지, 페이지당 개수, 전체 레코드 수 등)"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAuditLog"},"description":"감사 로그 레코드 목록"}},"required":["pagination","data"],"description":"감사 로그 목록의 페이지 단위 컨테이너입니다. 한 페이지 내의 감사로그(rows)와 해당 페이지네이션 정보를 포함합니다."},"IDiscussionBoardAuditLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"페이지 번호입니다(옵션). 1 이상 양의 정수여야 합니다. 프론트의 검색/페이징 요청과 매칭합니다."},{"type":"null","format":"uint32","description":"페이지 번호입니다(옵션). 1 이상 양의 정수여야 합니다. 프론트의 검색/페이징 요청과 매칭합니다."}],"description":"페이지 번호입니다(옵션). 1 이상 양의 정수여야 합니다. 프론트의 검색/페이징 요청과 매칭합니다."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"페이지당 최대 로드할 레코드 수. 기본값은 100이며, 1 이상의 양수로 제한됩니다."},{"type":"null","format":"uint32","description":"페이지당 최대 로드할 레코드 수. 기본값은 100이며, 1 이상의 양수로 제한됩니다."}],"description":"페이지당 최대 로드할 레코드 수. 기본값은 100이며, 1 이상의 양수로 제한됩니다."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"액션을 실행한 actor(관리자, 모더레이터 등)의 식별자(UUID). null일 경우 전체 로그 대상으로 검색합니다."},{"type":"null","format":"uuid","description":"액션을 실행한 actor(관리자, 모더레이터 등)의 식별자(UUID). null일 경우 전체 로그 대상으로 검색합니다."}],"description":"액션을 실행한 actor(관리자, 모더레이터 등)의 식별자(UUID). null일 경우 전체 로그 대상으로 검색합니다."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"액션 대상 오브젝트의 ID(UUID). null일 경우 무제한 대상."},{"type":"null","format":"uuid","description":"액션 대상 오브젝트의 ID(UUID). null일 경우 무제한 대상."}],"description":"액션 대상 오브젝트의 ID(UUID). null일 경우 무제한 대상."},"action_type":{"oneOf":[{"type":"string","description":"액션 타입(e.g., 'assign_moderator', 'update_setting'). null이면 타입 제한 없이 전체 로그를 검색합니다."},{"type":"null","description":"액션 타입(e.g., 'assign_moderator', 'update_setting'). null이면 타입 제한 없이 전체 로그를 검색합니다."}],"description":"액션 타입(e.g., 'assign_moderator', 'update_setting'). null이면 타입 제한 없이 전체 로그를 검색합니다."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"조회 기간의 시작 시각 (ISO8601). null이면 제한 없음."},{"type":"null","format":"date-time","description":"조회 기간의 시작 시각 (ISO8601). null이면 제한 없음."}],"description":"조회 기간의 시작 시각 (ISO8601). null이면 제한 없음."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"조회 기간의 종료 시각 (ISO8601). null이면 미제한."},{"type":"null","format":"date-time","description":"조회 기간의 종료 시각 (ISO8601). null이면 미제한."}],"description":"조회 기간의 종료 시각 (ISO8601). null이면 미제한."}},"description":"감사 로그(관리감사, 정책변경 등) 목록을 고급 조건(검색/필터/정렬)으로 조회할 때 사용하는 요청 객체입니다. 페이지, 액터, 액션타입, 기간 등 다양한 필터를 조합할 수 있습니다.","required":[]},"IDiscussionBoardAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 감사 로그 ID. Prisma discussion_board_audit_logs.id 컬럼에서 파생됨."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"액션을 실행한 유저의 ID. null일 경우 시스템 또는 익명 작업. Prisma actor_id 컬럼."},{"type":"null","format":"uuid","description":"액션을 실행한 유저의 ID. null일 경우 시스템 또는 익명 작업. Prisma actor_id 컬럼."}],"description":"액션을 실행한 유저의 ID. null일 경우 시스템 또는 익명 작업. Prisma actor_id 컬럼."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"액션의 영향을 받은 엔터티의 식별자. 대상이 없는 경우 null. Prisma target_id 컬럼."},{"type":"null","format":"uuid","description":"액션의 영향을 받은 엔터티의 식별자. 대상이 없는 경우 null. Prisma target_id 컬럼."}],"description":"액션의 영향을 받은 엔터티의 식별자. 대상이 없는 경우 null. Prisma target_id 컬럼."},"action_type":{"type":"string","description":"이벤트 타입/액션(예: assign_moderator). Prisma action_type 컬럼 참조."},"action_detail":{"oneOf":[{"type":"string","description":"상세 로그 또는 부가 정보(선택). Prisma action_detail 컬럼."},{"type":"null","description":"상세 로그 또는 부가 정보(선택). Prisma action_detail 컬럼."}],"description":"상세 로그 또는 부가 정보(선택). Prisma action_detail 컬럼."},"created_at":{"type":"string","format":"date-time","description":"이 로그가 기록된 시각(ISO8601). Prisma created_at 컬럼."}},"required":["id","action_type","created_at"],"description":"platform 내 주요 정책 변경, 권한 위임, 설정, 보안 이벤트 등의 감사 추적을 위한 단일 감사로그 엔터티입니다. Prisma discussion_board_audit_logs에서 직접 맵핑되었으며, 각 필드는 감사 추론·감사 시스템의 핵심 메타입니다."},"IDiscussionBoardAuditLog.ICreate":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"액션 실행 주체(관리자/모더레이터 등)의 id. null이면 시스템 이벤트로 간주."},{"type":"null","format":"uuid","description":"액션 실행 주체(관리자/모더레이터 등)의 id. null이면 시스템 이벤트로 간주."}],"description":"액션 실행 주체(관리자/모더레이터 등)의 id. null이면 시스템 이벤트로 간주."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"액션 영향 엔터티 id(카테고리 등). 미지정시 null."},{"type":"null","format":"uuid","description":"액션 영향 엔터티 id(카테고리 등). 미지정시 null."}],"description":"액션 영향 엔터티 id(카테고리 등). 미지정시 null."},"action_type":{"type":"string","description":"수행된 이벤트/작업명 (예: assign_moderator). Prisma action_type 컬럼."},"action_detail":{"oneOf":[{"type":"string","description":"상세 설명 또는 증거, 부가 설명(옵션)."},{"type":"null","description":"상세 설명 또는 증거, 부가 설명(옵션)."}],"description":"상세 설명 또는 증거, 부가 설명(옵션)."}},"required":["action_type"],"description":"신규 감사 로그 기록 시 사용되는 생성 타입입니다. actor, 대상, 액션타입, 상세내용 입력을 지원하며, 필수는 action_type(이벤트명)입니다. created_at 등 시스템값은 서버에서 할당됩니다."},"IDiscussionBoardAuditLog.IUpdate":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"액터 id."},{"type":"null","format":"uuid","description":"액터 id."}],"description":"액터 id."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 엔터티 id."},{"type":"null","format":"uuid","description":"대상 엔터티 id."}],"description":"대상 엔터티 id."},"action_type":{"type":"string","description":"수정할 액션타입명."},"action_detail":{"oneOf":[{"type":"string","description":"상세 설명 또는 부연 설명."},{"type":"null","description":"상세 설명 또는 부연 설명."}],"description":"상세 설명 또는 부연 설명."}},"description":"기존 감사 로그 row에 수기로 수정 설명을 추가(관리자/감사자)하거나, 액션명 또는 actor/target을 교정할 때 사용하는 오브젝트입니다. 로그의 신뢰성 확보와 감사 metadata 보완을 위해 활용됩니다.","required":[]},"IPageIDiscussionBoardSystemNotice":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 메타 데이터"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSystemNotice"},"description":"공지 개별 데이터의 배열"}},"required":["pagination","data"],"description":"시스템 공지 엔터티의 페이지 단위 결과 집계 객체입니다. 전체 공지 목록과 페이징 정보를 동시에 제공합니다."},"IDiscussionBoardSystemNotice.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32","description":"페이지 번호(1-index). 검색조건의 일부."},{"type":"null","format":"uint32","description":"페이지 번호(1-index). 검색조건의 일부."}],"description":"페이지 번호(1-index). 검색조건의 일부."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"페이지당 레코드 개수. 디폴트 100, 1이상 정수."},{"type":"null","format":"uint32","description":"페이지당 레코드 개수. 디폴트 100, 1이상 정수."}],"description":"페이지당 레코드 개수. 디폴트 100, 1이상 정수."},"is_active":{"oneOf":[{"type":"boolean","description":"활성화 여부 필터(선택). null이면 제한없음."},{"type":"null","description":"활성화 여부 필터(선택). null이면 제한없음."}],"description":"활성화 여부 필터(선택). null이면 제한없음."},"category_id":{"oneOf":[{"type":"string","format":"uuid","description":"특정 카테고리의 공지만 조회할 때(옵션). null은 모든 카테고리 포함."},{"type":"null","format":"uuid","description":"특정 카테고리의 공지만 조회할 때(옵션). null은 모든 카테고리 포함."}],"description":"특정 카테고리의 공지만 조회할 때(옵션). null은 모든 카테고리 포함."},"start_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"조회 범위: 공지 시작 시각 이후(옵션, ISO8601)."},{"type":"null","format":"date-time","description":"조회 범위: 공지 시작 시각 이후(옵션, ISO8601)."}],"description":"조회 범위: 공지 시작 시각 이후(옵션, ISO8601)."},"start_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"조회 범위: 공지 시작 시각 이전까지(옵션)."},{"type":"null","format":"date-time","description":"조회 범위: 공지 시작 시각 이전까지(옵션)."}],"description":"조회 범위: 공지 시작 시각 이전까지(옵션)."},"end_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"조회 범위: 공지 종료 시각 이후(옵션)."},{"type":"null","format":"date-time","description":"조회 범위: 공지 종료 시각 이후(옵션)."}],"description":"조회 범위: 공지 종료 시각 이후(옵션)."},"end_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"조회 범위: 공지 종료 시각 이전(옵션)."},{"type":"null","format":"date-time","description":"조회 범위: 공지 종료 시각 이전(옵션)."}],"description":"조회 범위: 공지 종료 시각 이전(옵션)."},"title":{"oneOf":[{"type":"string","description":"제목 내에 포함될 텍스트(부분 일치 검색)."},{"type":"null","description":"제목 내에 포함될 텍스트(부분 일치 검색)."}],"description":"제목 내에 포함될 텍스트(부분 일치 검색)."},"body":{"oneOf":[{"type":"string","description":"본문 내에 포함될 텍스트(부분 일치 검색)."},{"type":"null","description":"본문 내에 포함될 텍스트(부분 일치 검색)."}],"description":"본문 내에 포함될 텍스트(부분 일치 검색)."}},"description":"시스템 공지사항(announcement)의 목록/검색 요청 DTO입니다. 다양한 필터(활성 여부, 카테고리, 기간, 키워드 등) 및 페이징 필드가 옵션입니다.","required":[]},"IDiscussionBoardSystemNotice":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"시스템 공지의 고유 UUID 식별자."},"category_id":{"oneOf":[{"type":"string","format":"uuid","description":"공지 연결 카테고리 ID (글로벌 공지시는 null)."},{"type":"null","format":"uuid","description":"공지 연결 카테고리 ID (글로벌 공지시는 null)."}],"description":"공지 연결 카테고리 ID (글로벌 공지시는 null)."},"title":{"type":"string","description":"공지의 제목/헤드라인. 단일 텍스트 값(필수)."},"body":{"type":"string","description":"공지 본문 역할. 자유 텍스트(필수)."},"is_active":{"type":"boolean","description":"활성화 여부(공개/숨김)."},"start_at":{"oneOf":[{"type":"string","format":"date-time","description":"(선택) 공지 시작시간(스케줄). null이면 상시 노출."},{"type":"null","format":"date-time","description":"(선택) 공지 시작시간(스케줄). null이면 상시 노출."}],"description":"(선택) 공지 시작시간(스케줄). null이면 상시 노출."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"(선택) 공지 종료 예정시간. null이면 무기한 유지."},{"type":"null","format":"date-time","description":"(선택) 공지 종료 예정시간. null이면 무기한 유지."}],"description":"(선택) 공지 종료 예정시간. null이면 무기한 유지."},"created_at":{"type":"string","format":"date-time","description":"공지 생성일시(ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"공지 수정일시."}},"required":["id","title","body","is_active","created_at","updated_at"],"description":"시스템(글로벌 및 카테고리별) 공지사항 엔터티입니다. Prisma discussion_board_system_notices에서 파생된 구조로, 공지방송, 알림 운영, 사용자 경험 관리 등에서 이용됩니다. 주요 필드는 제목, 본문, 연결 카테고리, 활성 플래그, 스케줄링 window 및 생성/수정 메타데이터입니다."},"IDiscussionBoardSystemNotice.ICreate":{"type":"object","properties":{"category_id":{"oneOf":[{"type":"string","format":"uuid","description":"연결 카테고리 ID(UUID). null이면 전역/전체 공지."},{"type":"null","format":"uuid","description":"연결 카테고리 ID(UUID). null이면 전역/전체 공지."}],"description":"연결 카테고리 ID(UUID). null이면 전역/전체 공지."},"title":{"type":"string","description":"공지 제목(필수)."},"body":{"type":"string","description":"공지 본문(필수)."},"is_active":{"type":"boolean","description":"공지 활성화/숨김 여부."},"start_at":{"oneOf":[{"type":"string","format":"date-time","description":"시작 시간(옵션, null가능)."},{"type":"null","format":"date-time","description":"시작 시간(옵션, null가능)."}],"description":"시작 시간(옵션, null가능)."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"종료 시간(옵션)."},{"type":"null","format":"date-time","description":"종료 시간(옵션)."}],"description":"종료 시간(옵션)."}},"required":["title","body","is_active"],"description":"시스템 공지(글로벌 또는 카테고리공지) 등록시 요청 객체입니다. 필수: 제목, 본문, 활성화 상태; 선택: 카테고리 연결, 스케줄링 window. Prisma discussion_board_system_notices의 비즈니스 요구와 스키마 제약을 모두 따릅니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (uint32)."},"limit":{"type":"integer","description":"Records per page (uint32, default 100)."},"records":{"type":"integer","description":"Total records in the database (uint32)."},"pages":{"type":"integer","description":"Total pages of records (uint32, ceil(records / limit))."}},"required":["current","limit","records","pages"],"description":"Page information following the IPage.IPagination interface for all paged result containers."},"IDiscussionBoardSystemNotice.IUpdate":{"type":"object","properties":{"category_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional category reference. If null, the notice is global. References an existing discussion_board_categories.id. Changes notice scope between global and category-bound.\n\nReferenced from the discussion_board_system_notices Prisma model."},{"type":"null","format":"uuid","description":"Optional category reference. If null, the notice is global. References an existing discussion_board_categories.id. Changes notice scope between global and category-bound.\n\nReferenced from the discussion_board_system_notices Prisma model."}],"description":"Optional category reference. If null, the notice is global. References an existing discussion_board_categories.id. Changes notice scope between global and category-bound.\n\nReferenced from the discussion_board_system_notices Prisma model."},"title":{"type":"string","description":"Notice headline/title. Required.\n\nReferenced from the discussion_board_system_notices Prisma model."},"body":{"type":"string","description":"Main content message of the notice. Required.\n\nReferenced from the discussion_board_system_notices Prisma model."},"is_active":{"type":"boolean","description":"Whether the notice is currently displayed.\n\nReferenced from the discussion_board_system_notices Prisma model."},"start_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional start date for scheduling notice visibility. Null = always active until end_at.\n\nReferenced from the discussion_board_system_notices Prisma model."},{"type":"null","format":"date-time","description":"Optional start date for scheduling notice visibility. Null = always active until end_at.\n\nReferenced from the discussion_board_system_notices Prisma model."}],"description":"Optional start date for scheduling notice visibility. Null = always active until end_at.\n\nReferenced from the discussion_board_system_notices Prisma model."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional end date for scheduled notice expiration. Null = runs indefinitely if is_active is true.\n\nReferenced from the discussion_board_system_notices Prisma model."},{"type":"null","format":"date-time","description":"Optional end date for scheduled notice expiration. Null = runs indefinitely if is_active is true.\n\nReferenced from the discussion_board_system_notices Prisma model."}],"description":"Optional end date for scheduled notice expiration. Null = runs indefinitely if is_active is true.\n\nReferenced from the discussion_board_system_notices Prisma model."}},"required":["title","body","is_active"],"description":"Updateable fields for board system notices.\n\nBased on the discussion_board_system_notices table and business logic for scheduling/targeting board notices."},"IPageIDiscussionBoardAdmin":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging and counting information for pagination (see standard IPage)"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdmin"},"description":"Page of board admin entity records, one per admin user/assignment"}},"required":["pagination","data"],"description":"Paginated result set for admin records.\n\nArray of board administrator assignments with pagination. Used in admin management UI."},"IDiscussionBoardAdmin.IRequest":{"type":"object","properties":{"user_identifier":{"oneOf":[{"type":"string","description":"Filter by the admin user's unique identifier (UUID, email, SSO ID). Optional for search."},{"type":"null","description":"Filter by the admin user's unique identifier (UUID, email, SSO ID). Optional for search."}],"description":"Filter by the admin user's unique identifier (UUID, email, SSO ID). Optional for search."},"granted_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of grant date/time range for admin assignments to search. Optional."},{"type":"null","format":"date-time","description":"Start of grant date/time range for admin assignments to search. Optional."}],"description":"Start of grant date/time range for admin assignments to search. Optional."},"granted_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of grant date/time range for search. Optional."},{"type":"null","format":"date-time","description":"End of grant date/time range for search. Optional."}],"description":"End of grant date/time range for search. Optional."},"revoked_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of revoke window for historical admin search. Optional."},{"type":"null","format":"date-time","description":"Start of revoke window for historical admin search. Optional."}],"description":"Start of revoke window for historical admin search. Optional."},"revoked_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of revoke window filter for search. Optional."},{"type":"null","format":"date-time","description":"End of revoke window filter for search. Optional."}],"description":"End of revoke window filter for search. Optional."},"page":{"oneOf":[{"type":"integer","description":"Requested page number (for pagination)."},{"type":"null","description":"Requested page number (for pagination)."}],"description":"Requested page number (for pagination)."},"limit":{"oneOf":[{"type":"integer","description":"Page size limit (per page)."},{"type":"null","description":"Page size limit (per page)."}],"description":"Page size limit (per page)."}},"description":"Request/criteria for searching board admins in paginated fashion.\n\nDerived from search features in admin dashboards.","required":[]},"IDiscussionBoardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the admin row.\n\nReferenced from discussion_board_admins Prisma schema."},"user_identifier":{"type":"string","description":"The external or platform-unique identifier for the admin user (e.g., UUID, email, or SSO ID).\n\nReferenced from discussion_board_admins Prisma schema."},"granted_at":{"type":"string","format":"date-time","description":"Timestamp when admin privilege was assigned.\n\nReferenced from discussion_board_admins Prisma schema."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If privileges are revoked, the date/time. Null if assignment is currently active.\n\nReferenced from discussion_board_admins Prisma schema."},{"type":"null","format":"date-time","description":"If privileges are revoked, the date/time. Null if assignment is currently active.\n\nReferenced from discussion_board_admins Prisma schema."}],"description":"If privileges are revoked, the date/time. Null if assignment is currently active.\n\nReferenced from discussion_board_admins Prisma schema."}},"required":["id","user_identifier","granted_at"],"description":"Board administrator assignment entity from the database.\n\nAligns to the discussion_board_admins table; describes full record per admin user role assignment, for permission, audit, and management."},"IDiscussionBoardAdmin.ICreate":{"type":"object","properties":{"user_identifier":{"type":"string","description":"User ID (platform or external) of the admin to assign. Must not duplicate an existing admin's user_identifier.\n\nReferenced from discussion_board_admins Prisma schema."},"granted_at":{"type":"string","format":"date-time","description":"Timestamp when admin is assigned. Usually now, but can be set in admin UI for future effect.\n\nReferenced from discussion_board_admins Prisma schema."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If assignment is preplanned to revoke, set time; else omit/null for indefinite active.\n\nReferenced from discussion_board_admins Prisma schema."},{"type":"null","format":"date-time","description":"If assignment is preplanned to revoke, set time; else omit/null for indefinite active.\n\nReferenced from discussion_board_admins Prisma schema."}],"description":"If assignment is preplanned to revoke, set time; else omit/null for indefinite active.\n\nReferenced from discussion_board_admins Prisma schema."}},"required":["user_identifier","granted_at"],"description":"Request body for creating a new board admin assignment.\n\nFollows the writable/insertable fields from discussion_board_admins."},"IDiscussionBoardAdmin.IUpdate":{"type":"object","properties":{"user_identifier":{"oneOf":[{"type":"string","description":"(Optional) Update user identifier for the admin role, e.g., after SSO/account mapping change. Omit/null to leave unchanged.\n\nReferenced from discussion_board_admins Prisma schema."},{"type":"null","description":"(Optional) Update user identifier for the admin role, e.g., after SSO/account mapping change. Omit/null to leave unchanged.\n\nReferenced from discussion_board_admins Prisma schema."}],"description":"(Optional) Update user identifier for the admin role, e.g., after SSO/account mapping change. Omit/null to leave unchanged.\n\nReferenced from discussion_board_admins Prisma schema."},"granted_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Change/correct grant timestamp. Omit/null to keep existing.\n\nReferenced from discussion_board_admins Prisma schema."},{"type":"null","format":"date-time","description":"(Optional) Change/correct grant timestamp. Omit/null to keep existing.\n\nReferenced from discussion_board_admins Prisma schema."}],"description":"(Optional) Change/correct grant timestamp. Omit/null to keep existing.\n\nReferenced from discussion_board_admins Prisma schema."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Mark or clear the revoked timestamp to enable/disable admin role. Omit/null to keep as is.\n\nReferenced from discussion_board_admins Prisma schema."},{"type":"null","format":"date-time","description":"(Optional) Mark or clear the revoked timestamp to enable/disable admin role. Omit/null to keep as is.\n\nReferenced from discussion_board_admins Prisma schema."}],"description":"(Optional) Mark or clear the revoked timestamp to enable/disable admin role. Omit/null to keep as is.\n\nReferenced from discussion_board_admins Prisma schema."}},"description":"Request body for updating an admin assignment record.\n\nFollows updateable fields of discussion_board_admins.","required":[]},"IPageIDiscussionBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging/result info for result set"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerator"},"description":"Page of moderator entity records returned"}},"required":["pagination","data"],"description":"Paginated result wrapper for discussion board moderator records.\n\nUsed for admin/mod dashboards, role assignment management, etc."},"IDiscussionBoardModerator.IRequest":{"type":"object","properties":{"user_identifier":{"oneOf":[{"type":"string","description":"Filter by moderator's user identity (UUID, email, or SSO ID). Optional for search."},{"type":"null","description":"Filter by moderator's user identity (UUID, email, or SSO ID). Optional for search."}],"description":"Filter by moderator's user identity (UUID, email, or SSO ID). Optional for search."},"granted_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of grant time filter for moderator search. Optional."},{"type":"null","format":"date-time","description":"Start of grant time filter for moderator search. Optional."}],"description":"Start of grant time filter for moderator search. Optional."},"granted_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of grant window for moderator lookup. Optional."},{"type":"null","format":"date-time","description":"End of grant window for moderator lookup. Optional."}],"description":"End of grant window for moderator lookup. Optional."},"revoked_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of revoked window for search. Optional."},{"type":"null","format":"date-time","description":"Start of revoked window for search. Optional."}],"description":"Start of revoked window for search. Optional."},"revoked_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of revoked window for filter. Optional."},{"type":"null","format":"date-time","description":"End of revoked window for filter. Optional."}],"description":"End of revoked window for filter. Optional."},"page":{"oneOf":[{"type":"integer","description":"Requested page number for pagination."},{"type":"null","description":"Requested page number for pagination."}],"description":"Requested page number for pagination."},"limit":{"oneOf":[{"type":"integer","description":"Page size maximum for returned data."},{"type":"null","description":"Page size maximum for returned data."}],"description":"Page size maximum for returned data."}},"description":"Advanced search and paging request structure for board moderators.","required":[]},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID of this moderator assignment record. discussion_board_moderators.id"},"user_identifier":{"type":"string","description":"External/user identity uuid, email, or principal (platform unique) for this moderator. discussion_board_moderators.user_identifier"},"granted_at":{"type":"string","format":"date-time","description":"Timestamp when moderator was assigned. discussion_board_moderators.granted_at"},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If moderator removed, timestamp. Null if active. discussion_board_moderators.revoked_at"},{"type":"null","format":"date-time","description":"If moderator removed, timestamp. Null if active. discussion_board_moderators.revoked_at"}],"description":"If moderator removed, timestamp. Null if active. discussion_board_moderators.revoked_at"}},"required":["id","user_identifier","granted_at"],"description":"Moderator role assignment entity for the board, as stored in discussion_board_moderators."},"IDiscussionBoardModerator.ICreate":{"type":"object","properties":{"user_identifier":{"type":"string","description":"User to grant moderator. Must be valid in platform users. Unique per moderator.\n\ndiscussion_board_moderators.user_identifier"},"granted_at":{"type":"string","format":"date-time","description":"Start timestamp for moderation rights. Usually now; can be in future for deferred. discussion_board_moderators.granted_at"},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If assignment pre-configured to auto-revoke, set revoke time; else null. discussion_board_moderators.revoked_at"},{"type":"null","format":"date-time","description":"If assignment pre-configured to auto-revoke, set revoke time; else null. discussion_board_moderators.revoked_at"}],"description":"If assignment pre-configured to auto-revoke, set revoke time; else null. discussion_board_moderators.revoked_at"}},"required":["user_identifier","granted_at"],"description":"Post body for creating/moderator assignment for board moderation."},"IDiscussionBoardModerator.IUpdate":{"type":"object","properties":{"user_identifier":{"oneOf":[{"type":"string","description":"(Optional) Change moderator user ID. For corrections/migrations. Null/omit to leave unchanged."},{"type":"null","description":"(Optional) Change moderator user ID. For corrections/migrations. Null/omit to leave unchanged."}],"description":"(Optional) Change moderator user ID. For corrections/migrations. Null/omit to leave unchanged."},"granted_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Change/correct grant timestamp. Null/omit to leave unchanged."},{"type":"null","format":"date-time","description":"(Optional) Change/correct grant timestamp. Null/omit to leave unchanged."}],"description":"(Optional) Change/correct grant timestamp. Null/omit to leave unchanged."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Set/correct removed timestamp for moderation rights. Null/omit to leave as is."},{"type":"null","format":"date-time","description":"(Optional) Set/correct removed timestamp for moderation rights. Null/omit to leave as is."}],"description":"(Optional) Set/correct removed timestamp for moderation rights. Null/omit to leave as is."}},"description":"Request/update body for moderator entity records. Only specified fields are changed; others remain unchanged.","required":[]},"IPageIDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Standard IPage pagination metadata"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember"},"description":"Array of member entity rows (records, paged)"}},"required":["pagination","data"],"description":"Paged result set for all board members as retrieved by management endpoints."},"IDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for a registered discussion board member. This value is assigned by the system, conforming to UUID v4. Used for referencing member records in all board-related operations. (See Prisma: @id @db.Uuid)"},"user_identifier":{"type":"string","description":"External/business identifier for the user, such as a user UUID, SSO id, or normalized email. This is the principal mapping to a platform identity, and is guaranteed unique. (See Prisma: user_identifier, @unique)"},"joined_at":{"type":"string","format":"date-time","description":"Timestamp at which the member joined/was registered on the discussion board. Used for auditing, onboarding analytics, and membership calculations. (See Prisma: joined_at, @db.Timestamptz)"},"suspended_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp marking when the member's participation was suspended. Null if the membership is still active; holds the suspension event time if suspended. (See Prisma: suspended_at, nullable)"},{"type":"null","format":"date-time","description":"Timestamp marking when the member's participation was suspended. Null if the membership is still active; holds the suspension event time if suspended. (See Prisma: suspended_at, nullable)"}],"description":"Timestamp marking when the member's participation was suspended. Null if the membership is still active; holds the suspension event time if suspended. (See Prisma: suspended_at, nullable)"}},"required":["id","user_identifier","joined_at"],"description":"Discussion Board Member record, representing a registered, authenticated user authorized for full participation. Mirrors the schema in the Actors domain with references to external identities. Includes join/suspension times for audit, privileges, and system workflows."},"IDiscussionBoardMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination. This property allows clients to request a specific page of the results. Must be a positive integer when provided. Null or omitted for first page."},{"type":"null","description":"Page number for pagination. This property allows clients to request a specific page of the results. Must be a positive integer when provided. Null or omitted for first page."}],"description":"Page number for pagination. This property allows clients to request a specific page of the results. Must be a positive integer when provided. Null or omitted for first page."},"limit":{"oneOf":[{"type":"integer","description":"Number of records per page. Used for paginating member search results. Defaults to 100 if not provided. Should be within acceptable (non-abusive) query size limits."},{"type":"null","description":"Number of records per page. Used for paginating member search results. Defaults to 100 if not provided. Should be within acceptable (non-abusive) query size limits."}],"description":"Number of records per page. Used for paginating member search results. Defaults to 100 if not provided. Should be within acceptable (non-abusive) query size limits."},"user_identifier":{"oneOf":[{"type":"string","description":"Search filter for the unique user identifier string. This supports filtering member records by external user reference, SSO id, or email, as recorded in the database. Can be used for exact or partial match searches."},{"type":"null","description":"Search filter for the unique user identifier string. This supports filtering member records by external user reference, SSO id, or email, as recorded in the database. Can be used for exact or partial match searches."}],"description":"Search filter for the unique user identifier string. This supports filtering member records by external user reference, SSO id, or email, as recorded in the database. Can be used for exact or partial match searches."},"joined_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime filter: return only members who joined after this timestamp (inclusive). ISO 8601 format. Optional."},{"type":"null","format":"date-time","description":"Datetime filter: return only members who joined after this timestamp (inclusive). ISO 8601 format. Optional."}],"description":"Datetime filter: return only members who joined after this timestamp (inclusive). ISO 8601 format. Optional."},"joined_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime filter: return only members who joined before this timestamp (inclusive). ISO 8601 format. Optional."},{"type":"null","format":"date-time","description":"Datetime filter: return only members who joined before this timestamp (inclusive). ISO 8601 format. Optional."}],"description":"Datetime filter: return only members who joined before this timestamp (inclusive). ISO 8601 format. Optional."},"suspended":{"oneOf":[{"type":"boolean","description":"Optional filter to return only suspended or only active members. True returns only suspended, False returns only active, null/no filter returns all."},{"type":"null","description":"Optional filter to return only suspended or only active members. True returns only suspended, False returns only active, null/no filter returns all."}],"description":"Optional filter to return only suspended or only active members. True returns only suspended, False returns only active, null/no filter returns all."}},"required":[],"description":"Filter/pagination controls for searching discussion board members. All properties are optional for flexible and compound filtering."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"user_identifier":{"type":"string","description":"External/business identifier (user UUID, SSO id, or email) for the new member. Must be unique across all members. Cannot be null. Required at creation."},"joined_at":{"type":"string","format":"date-time","description":"Datetime of member registration/join event; set at creation. ISO 8601 format. Generally system-generated."}},"required":["user_identifier","joined_at"],"description":"Request body for registering a new board member. Only allows fields that can be set at creation time. Excludes id and suspension data, which are system-generated or managed via separate update endpoints."},"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"user_identifier":{"oneOf":[{"type":"string","description":"Business/external identifier to be updated (rare; only for correcting SSO/identity references). Optional."},{"type":"null","description":"Business/external identifier to be updated (rare; only for correcting SSO/identity references). Optional."}],"description":"Business/external identifier to be updated (rare; only for correcting SSO/identity references). Optional."},"joined_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update for join timestamp (rare, admin use). ISO 8601 format. Optional."},{"type":"null","format":"date-time","description":"Update for join timestamp (rare, admin use). ISO 8601 format. Optional."}],"description":"Update for join timestamp (rare, admin use). ISO 8601 format. Optional."},"suspended_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/unset suspension of the member (admin action). When provided, sets suspension; if null, clears suspension. Optional for status changes."},{"type":"null","format":"date-time","description":"Set/unset suspension of the member (admin action). When provided, sets suspension; if null, clears suspension. Optional for status changes."}],"description":"Set/unset suspension of the member (admin action). When provided, sets suspension; if null, clears suspension. Optional for status changes."}},"required":[],"description":"Updatable fields for an existing Discussion Board Member. Can only set/change business identifier, join date, or suspended state. For full admin management workflows."},"IPageIDiscussionBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardGuest"},"description":"Page of guest session entities as tracked in the board analytics. Each record represents a unique guest session."}},"required":["pagination","data"],"description":"Paginated page of board guest session entities. Combines guest entity data with standard paging metadata for list/search endpoints."},"IDiscussionBoardGuest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Zero-based page number for pagination; null/empty for first page. Used for fetching specific page in results."},{"type":"null","description":"Zero-based page number for pagination; null/empty for first page. Used for fetching specific page in results."}],"description":"Zero-based page number for pagination; null/empty for first page. Used for fetching specific page in results."},"limit":{"oneOf":[{"type":"integer","description":"How many records to return per page. Optional; defaults to 100."},{"type":"null","description":"How many records to return per page. Optional; defaults to 100."}],"description":"How many records to return per page. Optional; defaults to 100."},"session_identifier":{"oneOf":[{"type":"string","description":"Optional filter: session id of guest. For audit/tracing individual guest sessions."},{"type":"null","description":"Optional filter: session id of guest. For audit/tracing individual guest sessions."}],"description":"Optional filter: session id of guest. For audit/tracing individual guest sessions."},"first_seen_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Restricts results to sessions with first_seen_at at or after this time. ISO 8601 format."},{"type":"null","format":"date-time","description":"Restricts results to sessions with first_seen_at at or after this time. ISO 8601 format."}],"description":"Restricts results to sessions with first_seen_at at or after this time. ISO 8601 format."},"first_seen_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Restricts results to sessions with first_seen_at at or before this time. ISO 8601 format."},{"type":"null","format":"date-time","description":"Restricts results to sessions with first_seen_at at or before this time. ISO 8601 format."}],"description":"Restricts results to sessions with first_seen_at at or before this time. ISO 8601 format."},"last_seen_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Restricts results to sessions with last_seen_at at or after this time. ISO 8601 format."},{"type":"null","format":"date-time","description":"Restricts results to sessions with last_seen_at at or after this time. ISO 8601 format."}],"description":"Restricts results to sessions with last_seen_at at or after this time. ISO 8601 format."},"last_seen_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Restricts results to sessions with last_seen_at at or before this time. ISO 8601 format."},{"type":"null","format":"date-time","description":"Restricts results to sessions with last_seen_at at or before this time. ISO 8601 format."}],"description":"Restricts results to sessions with last_seen_at at or before this time. ISO 8601 format."}},"required":[],"description":"Filter/pagination controls for guest session search/reporting. All fields optional; filtering supports auditing, onboarding and guest analytics."},"IDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for guest session, assigned by system. Used for tracing unique visits. (See Prisma: @id @db.Uuid)"},"session_identifier":{"type":"string","description":"Opaque, unique session id for this guest/visit, typically a UUID or cookie-based identifier. Used for analytics and onboarding. (See Prisma: session_identifier, @unique)"},"first_seen_at":{"type":"string","format":"date-time","description":"When this guest session was first detected. Reflects creation or first request time. (See Prisma: first_seen_at, @db.Timestamptz)"},"last_seen_at":{"type":"string","format":"date-time","description":"Last activity time detected for guest session. Used for session duration and active/abandoned analysis. (See Prisma: last_seen_at, @db.Timestamptz)"}},"required":["id","session_identifier","first_seen_at","last_seen_at"],"description":"Analytics record of a single unauthenticated guest session tracked on the board. Holds only session metadata; never personally identifiable info. Used for onboarding, behavior analytics, and reporting. Mirrors schema in Actors domain."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_identifier":{"type":"string","description":"Opaque string to uniquely identify the guest session. This is typically a random UUID, cookie value, or similar identifier for visitor analytics. Required."},"first_seen_at":{"type":"string","format":"date-time","description":"Timestamp of the moment the guest session was created/first encountered. May be set equal to last_seen_at on creation. ISO 8601 string."},"last_seen_at":{"type":"string","format":"date-time","description":"Timestamp indicating the most recent detected activity for the guest. Should match first_seen_at on creation, may differ for session updates."}},"required":["session_identifier","first_seen_at","last_seen_at"],"description":"Request body for registering a new guest session in the tracking table. Only allows establishing a new unique session; not for updating records."},"IDiscussionBoardGuest.IUpdate":{"type":"object","properties":{"session_identifier":{"oneOf":[{"type":"string","description":"Update for session identifier if needed (rare; generally system-managed, but allowed for session reconciliation or import)."},{"type":"null","description":"Update for session identifier if needed (rare; generally system-managed, but allowed for session reconciliation or import)."}],"description":"Update for session identifier if needed (rare; generally system-managed, but allowed for session reconciliation or import)."},"first_seen_at":{"oneOf":[{"type":"string","format":"date-time","description":"Correct creation time for guest session (for historical data correction or audits)."},{"type":"null","format":"date-time","description":"Correct creation time for guest session (for historical data correction or audits)."}],"description":"Correct creation time for guest session (for historical data correction or audits)."},"last_seen_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update for the most recent activity time detected for guest session. Typically used for session keep-alive and analytics refresh."},{"type":"null","format":"date-time","description":"Update for the most recent activity time detected for guest session. Typically used for session keep-alive and analytics refresh."}],"description":"Update for the most recent activity time detected for guest session. Typically used for session keep-alive and analytics refresh."}},"required":[],"description":"Fields permitted for updating an existing guest session entity. Used for analytics/statistics/session management. Supports update of identifiers/times only."},"IPageIDiscussionBoardUserSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardUserSession"},"description":"Page with user/guest session tracking records, each row corresponding to an active/past session."}},"required":["pagination","data"],"description":"Paginated results combining tracked user/guest session records and pagination info."},"IDiscussionBoardUserSession.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (zero- or one-based per API). Optional; null for first page."},{"type":"null","description":"Page number for pagination (zero- or one-based per API). Optional; null for first page."}],"description":"Page number for pagination (zero- or one-based per API). Optional; null for first page."},"limit":{"oneOf":[{"type":"integer","description":"Number of records to return per page; defaults to 100 when omitted."},{"type":"null","description":"Number of records to return per page; defaults to 100 when omitted."}],"description":"Number of records to return per page; defaults to 100 when omitted."},"actor_type":{"oneOf":[{"type":"string","description":"Filter to search for sessions by actor type (admin, moderator, member, guest). May be an enumeration in API, stored as string in schema."},{"type":"null","description":"Filter to search for sessions by actor type (admin, moderator, member, guest). May be an enumeration in API, stored as string in schema."}],"description":"Filter to search for sessions by actor type (admin, moderator, member, guest). May be an enumeration in API, stored as string in schema."},"actor_identifier":{"oneOf":[{"type":"string","description":"Filter by actor_identifier value (platform user/session id per actor type). Permits tracing session scope/ownership."},{"type":"null","description":"Filter by actor_identifier value (platform user/session id per actor type). Permits tracing session scope/ownership."}],"description":"Filter by actor_identifier value (platform user/session id per actor type). Permits tracing session scope/ownership."},"active_only":{"oneOf":[{"type":"boolean","description":"When true, restricts to active (not terminated/expired) session records. False returns all records. Null disables this filter."},{"type":"null","description":"When true, restricts to active (not terminated/expired) session records. False returns all records. Null disables this filter."}],"description":"When true, restricts to active (not terminated/expired) session records. False returns all records. Null disables this filter."},"session_token":{"oneOf":[{"type":"string","description":"Search/filter for a specific session token value. Used in session tracking, forced logout, and audit events."},{"type":"null","description":"Search/filter for a specific session token value. Used in session tracking, forced logout, and audit events."}],"description":"Search/filter for a specific session token value. Used in session tracking, forced logout, and audit events."}},"required":[],"description":"Filter/search controls for tracking user/guest sessions (across Actors). Allows for filtering, pagination, and advanced analytics/audit."},"IDiscussionBoardUserSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this user/guest session, system assigned. (Prisma: @id @db.Uuid)"},"actor_type":{"type":"string","description":"Type of actor/session this record represents (admin/moderator/member/guest). Used for filtering, audit, and feature gating (Prisma: actor_type)"},"actor_identifier":{"type":"string","description":"Unique identifier for the actor/user/guest for this session. This corresponds to user_identifier, moderator_id, or session_identifier, depending on actor_type. (Prisma: actor_identifier)"},"session_token":{"type":"string","description":"Opaque session token associated with this session record (eg JWT, UUID, cookie secret). Used for authentication, tracing, and forced logout (Prisma: session_token, @unique)"},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking session creation/start. Used for analytics, session expiration logic (Prisma: created_at, @db.Timestamptz)"},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when session will expire and require renewal/reauthentication. (Prisma: expires_at, @db.Timestamptz)"},"terminated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp indicating early/forced session termination (logout, revocation, timeout). Null if active. Used for audit, compliance, and forced logouts (Prisma: terminated_at, nullable)"},{"type":"null","format":"date-time","description":"Timestamp indicating early/forced session termination (logout, revocation, timeout). Null if active. Used for audit, compliance, and forced logouts (Prisma: terminated_at, nullable)"}],"description":"Timestamp indicating early/forced session termination (logout, revocation, timeout). Null if active. Used for audit, compliance, and forced logouts (Prisma: terminated_at, nullable)"}},"required":["id","actor_type","actor_identifier","session_token","created_at","expires_at"],"description":"Tracked session information for an authenticated user or guest. Used for all token-based authentication, analytics, session management, and forced logout/audit operations. Matches policy as described in Actors Prisma schema."},"IDiscussionBoardUserSession.ICreate":{"type":"object","properties":{"actor_type":{"type":"string","description":"The type of actor (admin, moderator, member, or guest) for whom the session is created. This property determines session scoping for authentication and role-based authorization. Must match a role present in the system."},"actor_identifier":{"type":"string","description":"The unique identifier for the actor (e.g., user_identifier for admin/moderator/member or session_identifier for guest). This string links the session to the specific entity in its corresponding actor table."},"session_token":{"type":"string","description":"An opaque, unique session token (e.g., JWT, UUID, or secure random string) used for authentication and persistent session tracking."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when the session is created. Used for audit and session lifecycle analytics."},"expires_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when the session is scheduled to expire. Controls auto-logout and session lifecycle."}},"required":["actor_type","actor_identifier","session_token","created_at","expires_at"],"description":"Request body for creating a new user or guest session in the discussion board authentication system. All fields are required to establish a proper session entry aligned with Prisma schema for persistent login and traceability."},"IDiscussionBoardUserSession.IUpdate":{"type":"object","properties":{"expires_at":{"type":"string","format":"date-time","description":"The new ISO 8601 UTC expiry time for the session. Used for prolonging or curtailing the session lifespan."},"terminated_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp marking when the session was explicitly terminated (e.g., logout, timeout, forced revoke). Null indicates session still active; set to ISO timestamp to mark session as closed."}},"required":[],"description":"Request body for updating a user/guest session record. Only the fields explicitly listed in the schema may be patched: expires_at, terminated_at."},"IPageIDiscussionBoardTopics.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopics.ISummary"},"description":"The array/list of topic summaries for the requested page."}},"required":["pagination","data"],"description":"A paginated result set for browsing topic summaries. The schema aligns with IPage<T> pattern and contains page metadata plus an array of summary topic records."},"IDiscussionBoardTopics.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the discussion topic. Matches the id field in discussion_board_topics."},"title":{"type":"string","description":"The visible title for the topic, used in headings and list navigation."},"description":{"oneOf":[{"type":"string","description":"Short summary, guidelines, or details about the topic. Optional."},{"type":"null","description":"Short summary, guidelines, or details about the topic. Optional."}],"description":"Short summary, guidelines, or details about the topic. Optional."},"pinned":{"type":"boolean","description":"Indicates if the topic is currently pinned by staff (true = sticky/featured at top of list)."},"closed":{"type":"boolean","description":"Indicates if the topic is closed for new threads/posts (true = locked for activity)."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the topic was created."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of last update to topic record."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Reference to the parent category's UUID id."}},"required":["id","title","pinned","closed","created_at","updated_at","discussion_board_category_id"],"description":"A summary-level object representing minimal details for a topic. Used primarily in topic list/index pages, this omits deep relational data but enables fast UI rendering."},"IDiscussionBoardTopics.IRequest":{"type":"object","properties":{"category_id":{"oneOf":[{"type":"string","format":"uuid","description":"If specified, filters topics to those within the referenced category (by UUID)."},{"type":"null","format":"uuid","description":"If specified, filters topics to those within the referenced category (by UUID)."}],"description":"If specified, filters topics to those within the referenced category (by UUID)."},"title":{"oneOf":[{"type":"string","description":"If specified, partial or case-insensitive match filter on topic title (trgm-index accelerated)."},{"type":"null","description":"If specified, partial or case-insensitive match filter on topic title (trgm-index accelerated)."}],"description":"If specified, partial or case-insensitive match filter on topic title (trgm-index accelerated)."},"pinned":{"oneOf":[{"type":"boolean","description":"If specified, filters for only pinned or non-pinned topics."},{"type":"null","description":"If specified, filters for only pinned or non-pinned topics."}],"description":"If specified, filters for only pinned or non-pinned topics."},"closed":{"oneOf":[{"type":"boolean","description":"If specified, filters only for open or closed topics."},{"type":"null","description":"If specified, filters only for open or closed topics."}],"description":"If specified, filters only for open or closed topics."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"If specified, only topics created after this timestamp will be returned."},{"type":"null","format":"date-time","description":"If specified, only topics created after this timestamp will be returned."}],"description":"If specified, only topics created after this timestamp will be returned."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"If specified, only topics created before this timestamp will be returned."},{"type":"null","format":"date-time","description":"If specified, only topics created before this timestamp will be returned."}],"description":"If specified, only topics created before this timestamp will be returned."},"updated_from":{"oneOf":[{"type":"string","format":"date-time","description":"If specified, only topics updated after this timestamp will be returned."},{"type":"null","format":"date-time","description":"If specified, only topics updated after this timestamp will be returned."}],"description":"If specified, only topics updated after this timestamp will be returned."},"updated_to":{"oneOf":[{"type":"string","format":"date-time","description":"If specified, only topics updated before this timestamp will be returned."},{"type":"null","format":"date-time","description":"If specified, only topics updated before this timestamp will be returned."}],"description":"If specified, only topics updated before this timestamp will be returned."},"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number for paginated result set. Optional."},{"type":"null","format":"uint32","description":"Page number for paginated result set. Optional."}],"description":"Page number for paginated result set. Optional."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Number of records per page (pagination). Optional. Defaults to 100."},{"type":"null","format":"uint32","description":"Number of records per page (pagination). Optional. Defaults to 100."}],"description":"Number of records per page (pagination). Optional. Defaults to 100."},"sort":{"oneOf":[{"const":"created_at","description":"Sort field. Accepts one of: created_at, updated_at, title."},{"const":"updated_at","description":"Sort field. Accepts one of: created_at, updated_at, title."},{"const":"title","description":"Sort field. Accepts one of: created_at, updated_at, title."},{"type":"null","enum":["created_at","updated_at","title"],"description":"Sort field. Accepts one of: created_at, updated_at, title."}],"description":"Sort field. Accepts one of: created_at, updated_at, title."},"order":{"oneOf":[{"const":"asc","description":"Sort order (ascending or descending)."},{"const":"desc","description":"Sort order (ascending or descending)."},{"type":"null","enum":["asc","desc"],"description":"Sort order (ascending or descending)."}],"description":"Sort order (ascending or descending)."}},"required":[],"description":"Request query for searching/filtering/sorting discussion topics. Allows filtering by category, title (partial), pinned/closed state, date ranges, as well as setting pagination and sort order."},"IDiscussionBoardTopics":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this discussion topic - primary key from the discussion_board_topics schema."},"title":{"type":"string","description":"Displayable title of the topic."},"description":{"oneOf":[{"type":"string","description":"Optional detailed summary, rules, or introduction for the topic."},{"type":"null","description":"Optional detailed summary, rules, or introduction for the topic."}],"description":"Optional detailed summary, rules, or introduction for the topic."},"pinned":{"type":"boolean","description":"If true, the topic is featured/pinned; only admins/moderators may set this state."},"closed":{"type":"boolean","description":"If true, the topic is not accepting new threads/posts (locked state)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of initial topic creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent topic update."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Reference to the category to which this topic belongs."},"creator_member_id":{"type":"string","format":"uuid","description":"The member who created the topic (internal reference for audit)."}},"required":["id","title","pinned","closed","created_at","updated_at","discussion_board_category_id","creator_member_id"],"description":"Full topic entity as returned by detail endpoints or creation. Includes all topic metadata and primary relations but not populated references. This type maps 1:1 to Prisma's discussion_board_topics schema."},"IDiscussionBoardTopics.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Displayable title for the topic. Must be unique within the selected category."},"description":{"oneOf":[{"type":"string","description":"Optional summary or introductory text for the topic."},{"type":"null","description":"Optional summary or introductory text for the topic."}],"description":"Optional summary or introductory text for the topic."},"pinned":{"type":"boolean","description":"Whether the topic is pinned (featured) on creation. Only settable by moderation roles."},"closed":{"type":"boolean","description":"Whether the topic is closed for new participation. Only allowed by moderation roles."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"The UUID of the category in which the topic is created (reference to the parent category)."}},"required":["title","pinned","closed","discussion_board_category_id"],"description":"Request body for creating a new topic. Requires title, category, and state flags. creator_member_id is excluded as it is provided by authenticated context. No creator_id/user_id accepted in request - security principle enforced."},"IDiscussionBoardTopics.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"If provided, the new/updated displayable title for the topic."},{"type":"null","description":"If provided, the new/updated displayable title for the topic."}],"description":"If provided, the new/updated displayable title for the topic."},"description":{"oneOf":[{"type":"string","description":"If provided, new summary/rules/description."},{"type":"null","description":"If provided, new summary/rules/description."}],"description":"If provided, new summary/rules/description."},"pinned":{"oneOf":[{"type":"boolean","description":"If provided, updates the pinned state for the topic."},{"type":"null","description":"If provided, updates the pinned state for the topic."}],"description":"If provided, updates the pinned state for the topic."},"closed":{"oneOf":[{"type":"boolean","description":"If provided, updates the closed/not-accepting state for the topic."},{"type":"null","description":"If provided, updates the closed/not-accepting state for the topic."}],"description":"If provided, updates the closed/not-accepting state for the topic."},"discussion_board_category_id":{"oneOf":[{"type":"string","format":"uuid","description":"If provided, updates the UUID reference to parent category for this topic."},{"type":"null","format":"uuid","description":"If provided, updates the UUID reference to parent category for this topic."}],"description":"If provided, updates the UUID reference to parent category for this topic."}},"required":[],"description":"Request body for updating a topic. All fields optional, but at least one should be present; PK/topicId is path param, not body. Fields follow direct mapping to topic object and enforce schema's security on modifiable fields."},"IPageIDiscussionBoardThreads.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardThreads.ISummary"},"description":"List of thread summaries on the page."}},"required":["pagination","data"],"description":"A page of thread summary objects, including page metadata for UI and navigation."},"IDiscussionBoardThreads.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/UUID for thread."},"title":{"type":"string","description":"Displayable title of the thread."},"created_at":{"type":"string","format":"date-time","description":"When thread was created."},"updated_at":{"type":"string","format":"date-time","description":"When thread was last updated."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Parent topic reference (UUID PK)."}},"required":["id","title","created_at","updated_at","discussion_board_topic_id"],"description":"Summary of a thread for listing threads under a topic, omitting posts or full creator detail for performance."},"IDiscussionBoardThreads.IRequest":{"type":"object","properties":{"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"If specified, only threads under this topic are returned."},{"type":"null","format":"uuid","description":"If specified, only threads under this topic are returned."}],"description":"If specified, only threads under this topic are returned."},"title":{"oneOf":[{"type":"string","description":"If specified, partial match for thread title using trgm search."},{"type":"null","description":"If specified, partial match for thread title using trgm search."}],"description":"If specified, partial match for thread title using trgm search."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Include only threads created after this date."},{"type":"null","format":"date-time","description":"Include only threads created after this date."}],"description":"Include only threads created after this date."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Include only threads created before this date."},{"type":"null","format":"date-time","description":"Include only threads created before this date."}],"description":"Include only threads created before this date."},"updated_from":{"oneOf":[{"type":"string","format":"date-time","description":"Include only threads updated after this date."},{"type":"null","format":"date-time","description":"Include only threads updated after this date."}],"description":"Include only threads updated after this date."},"updated_to":{"oneOf":[{"type":"string","format":"date-time","description":"Include only threads updated before this date."},{"type":"null","format":"date-time","description":"Include only threads updated before this date."}],"description":"Include only threads updated before this date."},"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page to retrieve."},{"type":"null","format":"uint32","description":"Page to retrieve."}],"description":"Page to retrieve."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Records per page (optional, defaults to 100)."},{"type":"null","format":"uint32","description":"Records per page (optional, defaults to 100)."}],"description":"Records per page (optional, defaults to 100)."},"sort":{"oneOf":[{"const":"created_at","description":"Field to sort by. Supported: created_at, updated_at, title."},{"const":"updated_at","description":"Field to sort by. Supported: created_at, updated_at, title."},{"const":"title","description":"Field to sort by. Supported: created_at, updated_at, title."},{"type":"null","enum":["created_at","updated_at","title"],"description":"Field to sort by. Supported: created_at, updated_at, title."}],"description":"Field to sort by. Supported: created_at, updated_at, title."},"order":{"oneOf":[{"const":"asc","description":"Sort order: asc or desc."},{"const":"desc","description":"Sort order: asc or desc."},{"type":"null","enum":["asc","desc"],"description":"Sort order: asc or desc."}],"description":"Sort order: asc or desc."}},"required":[],"description":"Advanced search/filter/pagination query for browsing threads under a topic or for admin audit."},"IDiscussionBoardThreads":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID identifier for thread."},"title":{"type":"string","description":"Title of the thread for display and search indexing."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of thread creation."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of last update."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Parent topic's PK to which thread belongs."},"creator_member_id":{"type":"string","format":"uuid","description":"Member who created the thread (internal ref/audit)."}},"required":["id","title","created_at","updated_at","discussion_board_topic_id","creator_member_id"],"description":"Full thread object for retrieval, creation confirmation, or update. Maps 1:1 to Prisma schema and audit references, includes all metadata fields but not posts."},"IDiscussionBoardThreads.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Title for the thread. Must be unique within the parent topic."}},"required":["title"],"description":"Request body to create a new thread under an existing topic. Creator is implied by session/context, not present in request object (SECURITY: never accept user_id from client)."},"IDiscussionBoardThreads.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"If provided, new displayable title for the thread (must be unique in topic)."},{"type":"null","description":"If provided, new displayable title for the thread (must be unique in topic)."}],"description":"If provided, new displayable title for the thread (must be unique in topic)."}},"required":[],"description":"Request body to update a thread's title. Only the title is editable - all other changes require separate endpoints or privileges. Null means no update."},"IPageIDiscussionBoardPost":{"type":"object","description":"Paginated result type for discussion board posts. This type encapsulates a collection of posts (records of type IDiscussionBoardPost) along with pagination metadata. It is used in API responses for post listing and search endpoints.\n\nFollows the IPage<T> generic container pattern, specifically for discussion board posts. Reflects the Prisma schema for posts plus infrastructure for paged data transfer. See board requirements (Features/Workflow/Technical) for end-to-end paginated exchange details.\n\nThis type includes both the array of individual post records and a nested description of pagination state (such as page size, number, total records, etc). No extra statistics or post-count aggregates are returned here; for analytics, refer to board stats endpoints.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","description":"Array of discussion board posts for this page of results.\n\nEach entry in this array is a fully hydrated post record conforming to the IDiscussionBoardPost schema, including safe post metadata but never containing sensitive actor credentials or deleted/private content.\n\nArray may be empty if there are no posts for this page.","items":{"$ref":"#/components/schemas/IDiscussionBoardPost"}}},"required":["pagination","data"]},"IDiscussionBoardPost.IRequest":{"type":"object","description":"Request structure for advanced searching/filtering of posts. Used in POST/PATCH for server-side search on the discussion_board_posts table.\n\nAll fields here are optional; only those with values are used for filter/scoping. Keeps adherence to Prisma table's model.\n\nUsed for advanced thread browsing, moderation views, and analytics.\n\nFor basic page/query, use IPage.IRequest.","properties":{"threadId":{"type":"string","format":"uuid","description":"Thread ID to filter posts by parent thread (discussion_board_thread_id in schema). If provided, restricts search to posts under the specified thread."},"creatorMemberId":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by creator member. Returns only posts authored by the specified board member (creator_member_id in schema)."},{"type":"null"}],"description":"Filter by creator member. Returns only posts authored by the specified board member (creator_member_id in schema)."},"isEdited":{"type":"boolean","description":"If provided, filters posts by their is_edited state. True for posts that have been edited; false for original/unmodified."},"createdFrom":{"oneOf":[{"type":"string","format":"date-time","description":"Start of creation time window. Only posts created at or after this timestamp are returned."},{"type":"null"}],"description":"Start of creation time window. Only posts created at or after this timestamp are returned."},"createdTo":{"oneOf":[{"type":"string","format":"date-time","description":"End of creation time window. Only posts created at or before this timestamp are returned."},{"type":"null"}],"description":"End of creation time window. Only posts created at or before this timestamp are returned."},"deleted":{"type":"boolean","description":"If true, returns soft-deleted posts only. If false, returns only non-deleted posts. If omitted, both are included."},"bodySubstring":{"oneOf":[{"type":"string","description":"If present, limits results to posts whose body contains this substring (case-insensitive, trgm-indexed in DB). Enables simple full-text search for post content."},{"type":"null"}],"description":"If present, limits results to posts whose body contains this substring (case-insensitive, trgm-indexed in DB). Enables simple full-text search for post content."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"required":[]},"IDiscussionBoardPost":{"type":"object","description":"A post entity in the discussion board, as defined in the discussion_board_posts table (Articles domain). Represents an individual contribution within a thread, authored by a member, and structured for direct mapping to the Prisma schema.\n\nThis schema is used in post retrieval, list, and detail responses. For creation/update, see .ICreate/.IUpdate variants. For responses, all required metadata, author info (by ID reference), timestamps, and safe content fields are included.\n\nSensitive information such as passwords, security tokens, etc. are NEVER included in response objects.\n\nSee documentation in requirements for allowed API field semantics and role-based field visibility.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post (discussion_board_posts.id PK). Must be a valid UUID per Prisma table."},"discussion_board_thread_id":{"type":"string","format":"uuid","description":"ID of parent thread (FK discussion_board_threads.id). Indicates which thread this post belongs to."},"creator_member_id":{"type":"string","format":"uuid","description":"ID of board member that authored the post (FK discussion_board_members.id). Field is read-only and never accepted from clients."},"body":{"type":"string","description":"Body of the post in markdown/text (discussion_board_posts.body). No computation/aggregation, only user input as stored in the schema."},"is_edited":{"type":"boolean","description":"Indicates if this post was edited after creation (discussion_board_posts.is_edited). True for edited posts, false for unedited originals."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of post creation in ISO 8601 format (discussion_board_posts.created_at)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to post (discussion_board_posts.updated_at)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, timestamp for when post was soft-deleted (discussion_board_posts.deleted_at). Null for active posts. Only shown to moderators/admins."},{"type":"null"}],"description":"If present, timestamp for when post was soft-deleted (discussion_board_posts.deleted_at). Null for active posts. Only shown to moderators/admins."}},"required":["id","discussion_board_thread_id","creator_member_id","body","is_edited","created_at","updated_at"]},"IDiscussionBoardPost.ICreate":{"type":"object","description":"Request body for creating a new discussion board post. Corresponds to writable columns from discussion_board_posts schema. Does not include fields auto-computed by system (id, created_at, updated_at) or ownership (creator_member_id is inferred from authentication context).\n\nFor security, NEVER accept or require creator_member_id from the client. This field is set by the server based on logged-in session.\n\nOn creation, is_edited is always false and deleted_at is null; only body and parent thread association are required.\n\nSee requirements for ownership/actor context rules.","properties":{"discussion_board_thread_id":{"type":"string","format":"uuid","description":"ID of parent thread (discussion_board_threads.id FK). This references the target thread where the new post will be added. Required."},"body":{"type":"string","description":"Post content in markdown/plaintext. Required. Must comply with validation for maximum allowed length, non-empty, and formatting as described in business rules."}},"required":["discussion_board_thread_id","body"]},"IDiscussionBoardPost.IUpdate":{"type":"object","description":"Request body for updating an existing discussion board post. Contains only fields eligible for client-side update: post body and edit status (is_edited). Ownership and creation fields are immutable and not updatable.\n\nSee requirements for role-based access and post editing rights. Admins/moderators may update any post; regular members may update only their own posts.\n\nUpdating deleted_at is not supported by this operation (see erase/delete APIs for soft deletion).","properties":{"body":{"type":"string","description":"New content/body for the post. Optional—omit if body should remain unchanged. Must comply with post editing validation."},"is_edited":{"type":"boolean","description":"True to indicate post is edited. System will enforce consistency; client cannot set to false for already-edited posts. Optional."}},"required":[]},"IPageIDiscussionBoardPostVersion":{"type":"object","description":"Paginated result set for discussion board post versions (edit history, audit trail).\n\nIncludes an array of post version records and page metadata; used for listing or searching post edits/audits as per board requirements.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","description":"Array of post version records for this page of history; each entry corresponds to one edit iteration (snapshot) as stored by discussion_board_post_versions table. All details as per the IDiscussionBoardPostVersion schema.","items":{"$ref":"#/components/schemas/IDiscussionBoardPostVersion"}}},"required":["pagination","data"]},"IDiscussionBoardPostVersion.IRequest":{"type":"object","description":"Advanced search and filtering criteria for post version records. Supports queries by editor, time window, content substring, or version number range. Used in PATCH endpoints for audit/history tools and moderation UIs.","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Limits search to versions for this specified post. Required for context scoping."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Restrict to versions created (edited) by a specific board member (FK to discussion_board_members.id).\n\nOptional, for filtering to a single editor's changes."},{"type":"null"}],"description":"Restrict to versions created (edited) by a specific board member (FK to discussion_board_members.id).\n\nOptional, for filtering to a single editor's changes."},"versionFrom":{"type":"integer","description":"Lower bound of version number for filtering (inclusive). Omits versions below this; optional."},"versionTo":{"type":"integer","description":"Upper bound of version number for filtering (inclusive). Version numbers above this are omitted; optional."},"contentSubstring":{"oneOf":[{"type":"string","description":"Filter by substring (trgm search) present in snapshot body. Optional, used for moderation/audit search.\n\nNull for unfiltered."},{"type":"null"}],"description":"Filter by substring (trgm search) present in snapshot body. Optional, used for moderation/audit search.\n\nNull for unfiltered."},"createdFrom":{"type":"string","format":"date-time","description":"Only include post version events created at or after this timestamp (ISO 8601); optional."},"createdTo":{"type":"string","format":"date-time","description":"Only include post version events created at or before this timestamp (ISO 8601); optional."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"required":[]},"IDiscussionBoardPostVersion":{"type":"object","description":"A version/snapshot of a post's body as stored in the discussion_board_post_versions table. Encodes one step in a post's edit history; provides immutable content at a specific timestamp and identifies the editor.\n\nThis object allows for audit, rollback, or display of revision history. Follows the Prisma schema strictly; supplemental business fields are not included. For moderation settings, see additional compliance documentation.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the individual post version (discussion_board_post_versions.id, PK)."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"FK to post whose this is a version/snapshot for (discussion_board_posts.id)."},"editor_member_id":{"type":"string","format":"uuid","description":"Member ID (FK discussion_board_members.id) of the editor who created this version. Used for role/audit purposes."},"version":{"type":"integer","description":"Monotonically increasing integer identifier for the sequential version. Starts at 1 for original post, increments by 1 for each subsequent edit."},"body":{"type":"string","description":"Full post content snapshot for this version as it was at creation (markdown/text)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format for creation of this post version; immutable after insert."}},"required":["id","discussion_board_post_id","editor_member_id","version","body","created_at"]},"IDiscussionBoardPostVersion.ICreate":{"type":"object","description":"Schema for creating a new version snapshot for a post (edit/revise). Used during edit flow for post history tracking. Fields are subset of post version schema: references original post, provides new snapshot body, and acting editor member (never accepted from client but attached by backend).\n\nSee append/edit requirements for version sequence rules. Version and created_at are auto-incremented and not provided by client.","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Post (FK discussion_board_posts.id) to which this version record is attached."},"body":{"type":"string","description":"The full new body/content of the post as edited by the user."}},"required":["discussion_board_post_id","body"]},"IDiscussionBoardPostVersion.IUpdate":{"type":"object","description":"Schema for updating/editing an existing post version. Generally only allowed for moderation compliance cases; not typical for members.\n\nPermits editing the body (snapshot content) or (by admin) potentially re-attributing the editor. All other fields are immutable. Used by PATCH/PUT endpoints for revision correction.","properties":{"body":{"type":"string","description":"Sets a replacement snapshot for the body content in this version record."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"With admin-level access, can re-attach a version to a different editor (rare compliance-only use case)."},{"type":"null"}],"description":"With admin-level access, can re-attach a version to a different editor (rare compliance-only use case)."}},"required":[]},"IDiscussionBoardPostAttachment.ISummary":{"type":"object","description":"Summary object for a single discussion board post attachment.\n\nContains essential metadata fields about a file attached to a post. Intended for list or preview contexts, so non-essential fields or large binary data are omitted. Fields include:\n- id (UUID): Primary key for the attachment record.\n- discussion_board_post_id (UUID): The parent post to which this file is attached.\n- uploader_member_id (UUID): Which board member uploaded this file (audit/compliance reference).\n- file_uri (string): URI (link) for retrieving or previewing the file.\n- file_name (string): The original file name presented to the user on upload.\n- mime_type (string): File format (e.g., 'image/png').\n- uploaded_at (DateTime): Timestamp for when the file was added.\n\nThese are sufficient to show a basic overview (list row, card, media preview, download link) in board UIs or moderation dashboards.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the attachment (UUID)."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"UUID referencing the post this file is attached to."},"uploader_member_id":{"type":"string","format":"uuid","description":"UUID of the board member who uploaded this file (audit reference)."},"file_uri":{"type":"string","description":"URI or public link for downloading or previewing the file. File storage is external (CDN, S3, etc)."},"file_name":{"type":"string","description":"Original user-selected file name."},"mime_type":{"type":"string","description":"File MIME type (e.g., 'image/png', 'application/pdf')."},"uploaded_at":{"type":"string","format":"date-time","description":"Timestamp for when the attachment was uploaded (ISO 8601 UTC)."}},"required":["id","discussion_board_post_id","uploader_member_id","file_uri","file_name","mime_type","uploaded_at"]},"IDiscussionBoardPostAttachment.IRequest":{"type":"object","description":"Request object for advanced searching/filtering of file attachments for discussion board posts. Used where pagination, uploader/member or file type filters, and file name substring search is needed. Utilizes Prisma schema for attachments.","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"FK of the parent post (discussion_board_posts.id) whose attachments are being searched/paged."},"uploader_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter to only attachments uploaded by a specific member (discussion_board_members.id). Optional, only used if present."},{"type":"null"}],"description":"Filter to only attachments uploaded by a specific member (discussion_board_members.id). Optional, only used if present."},"file_name":{"oneOf":[{"type":"string","description":"Text search for filename substring (case-insensitive, partial match via trgm index). Optional, null for unfiltered."},{"type":"null"}],"description":"Text search for filename substring (case-insensitive, partial match via trgm index). Optional, null for unfiltered."},"mime_type":{"oneOf":[{"type":"string","description":"Restrict returned attachments to those of specified MIME type (e.g. 'image/png'). Optional.\n\nNull (default) to show all types."},{"type":"null"}],"description":"Restrict returned attachments to those of specified MIME type (e.g. 'image/png'). Optional.\n\nNull (default) to show all types."},"uploadedFrom":{"type":"string","format":"date-time","description":"Return only attachments uploaded at or after this timestamp (ISO 8601 format, includes boundary). Optional."},"uploadedTo":{"type":"string","format":"date-time","description":"Return only attachments uploaded at or before this timestamp (ISO 8601 format, includes boundary). Optional."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"required":[]},"IPageIDiscussionBoardPostAttachment.ISummary":{"type":"object","description":"Paginated result for summary views of discussion board post attachments.\n\nThis schema defines the paginated container for lists of post attachments in summary format for the discussion board system. It is designed to be used in endpoints that support paginated lists or advanced filtered results for post file attachments, for both admin/moderation UIs and user-facing features. The main properties are:\n\n- `pagination`: Standard pagination metadata, referencing the reusable IPage.IPagination structure. Indicates the current page, record count and total pages for the attachment query results.\n- `data`: Array of summary objects, each using the IDiscussionBoardPostAttachment.ISummary schema. Each object represents a simplified attachment record for a specific post, containing enough information for listing, preview, or file audit.\n\nThis structure is widely used in list, search, and filter endpoints relating to attachments on posts. Summary objects usually omit large binary/file fields and focus on references and metadata needed for navigation, rendering, and moderation.\n\nSee also: IPage.IPagination for pagination metadata; IDiscussionBoardPostAttachment.ISummary for attachment item structure.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","description":"Array of summary objects for post attachments, in order as returned by query.","items":{"$ref":"#/components/schemas/IDiscussionBoardPostAttachment.ISummary"}}},"required":["pagination","data"]},"IDiscussionBoardPostAttachment":{"type":"object","description":"Persistent attachment entity for a file uploaded to a discussion board post.\n\nThis schema describes all properties of a file attached to a specific post on the discussion board. Used in detail views, edit/update APIs, and audit scenarios. Fields include:\n- id (UUID): Unique primary key for the attachment record.\n- discussion_board_post_id (UUID): Post to which this file is attached (as foreign key reference).\n- uploader_member_id (UUID): Member uploading the file (foreign key to member).\n- file_uri (string): Direct URI for file retrieval from storage.\n- file_name (string): Name of file as uploaded by the user.\n- mime_type (string): MIME/format string of the file.\n- uploaded_at (DateTime): Creation timestamp (set on upload).\n\nThis schema is fully aligned with the Prisma schema and includes all fields except those intended only for system-internal use or soft-deleted states (which do not exist for attachments). Use this for single-object APIs: GET, PUT, POST, etc.","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key of the attachment record."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID (UUID) of the post to which the attachment belongs (foreign key)."},"uploader_member_id":{"type":"string","format":"uuid","description":"ID (UUID) of the member who uploaded the file (foreign key)."},"file_uri":{"type":"string","description":"Storage URI where file can be fetched/downloaded (external or CDN link)."},"file_name":{"type":"string","description":"Original file name as provided by user for the upload (plain text, not path)."},"mime_type":{"type":"string","description":"File content MIME type, e.g., 'image/jpeg', 'application/pdf', etc."},"uploaded_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601 UTC) for when file was uploaded."}},"required":["id","discussion_board_post_id","uploader_member_id","file_uri","file_name","mime_type","uploaded_at"]},"IDiscussionBoardPostAttachment.ICreate":{"type":"object","description":"Request schema for creating a new post attachment record (discussion_board_post_attachments).\n\nAll fields (except for ID and uploaded_at, which are system-generated) must be provided by the client in POST requests. Required fields:\n- discussion_board_post_id: Parent post's UUID\n- uploader_member_id: UUID of member uploading (supplied by backend from user context)\n- file_uri: Storage URI for uploaded file\n- file_name: Original name for file\n- mime_type: File content type\n\nThe system sets uploaded_at automatically. No ID is included in the request, as system assigns this.","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID (UUID) of the post to attach the file to"},"uploader_member_id":{"type":"string","format":"uuid","description":"ID (UUID) for member uploading the file (from user session/context)"},"file_uri":{"type":"string","description":"URI for the file in permanent storage (e.g., S3, CDN link, etc)"},"file_name":{"type":"string","description":"Original file name selected by user."},"mime_type":{"type":"string","description":"MIME/content type of the uploaded file."}},"required":["discussion_board_post_id","uploader_member_id","file_uri","file_name","mime_type"]},"IDiscussionBoardPostAttachment.IUpdate":{"type":"object","description":"Request schema for updating metadata of an existing post attachment record. This is used for PATCH/PUT where mutable fields (file_name, file_uri, mime_type) may be altered. The record is identified via primary key path or parameter, so no ID is included. Fields:\n- file_name (string, optional): Updated file name\n- file_uri (string, optional): Updated storage location if file has moved/been replaced\n- mime_type (string, optional): Update for file type if correction needed\n\nAll properties are optional; only the supplied fields are updated. No ID, uploaded_at, or foreign key changes allowed (per schema and business rules).","properties":{"file_name":{"type":"string","description":"Optional: New file name for attachment (can update existing name)"},"file_uri":{"type":"string","description":"Optional: Updated URI/location of file if re-uploaded or moved"},"mime_type":{"type":"string","description":"Optional: Correction to MIME/file type metadata"},"uploader_member_id":{"type":"string","format":"uuid","description":"Optional: Correction to uploader member ID, for admin/audit scenarios"}},"required":[]},"IDiscussionBoardComment.ISummary":{"type":"object","description":"Summary object for a single comment on the discussion board. Used in list or preview endpoints for the discussion_board_comments table.\n\nFields included:\n- id (UUID): Primary key\n- discussion_board_member_id (UUID): Member who authored the comment\n- discussion_board_post_id (UUID): Parent post to which the comment belongs\n- content (string): Preview/summary of comment text (may be truncated or first few words)\n- is_deleted (boolean): True if comment is soft-deleted/hidden\n- created_at (DateTime): When comment was posted\n- updated_at (DateTime): Last modification time\n\nExcludes lengthy content, attachment info, or edit/version audit. Intended to power listings, moderation dashboards, or search engine result pages for comment activity.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Board member (UUID) who authored the comment."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"Parent post (UUID) to which this comment belongs."},"content":{"type":"string","description":"Short preview or extracted snippet of comment text."},"is_deleted":{"type":"boolean","description":"Whether the comment is currently soft-deleted (hidden but retained for moderation/audit)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for when comment was last edited."}},"required":["id","discussion_board_member_id","discussion_board_post_id","content","is_deleted","created_at","updated_at"]},"IDiscussionBoardComment.IRequest":{"type":"object","description":"Search/filter/pagination request schema for comments listing APIs.\n\nThis structure allows clients to specify query criteria for finding, sorting, or paginating discussion_board_comments entries across the board. Common properties include:\n- member_id (UUID, optional): Filter for all comments authored by a given member\n- post_id (UUID, optional): Limit to comments on a specific post\n- is_deleted (boolean, optional): Filter by deleted/non-deleted\n- created_at_from / created_at_to (DateTime, optional): Filter by creation time window\n- updated_at_from / updated_at_to (DateTime, optional): Filter by last edit time window\n- content_contains (string, optional): Free-text search or substring inclusion\n\nAll properties are optional (except for pagination controls, if used), supporting highly flexible comment retrieval/search. Pagination is supported by parent request structures or through extra properties as needed.","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter for comments by a single member (author), if provided."},"post_id":{"type":"string","format":"uuid","description":"Filter for comments on a specific post."},"is_deleted":{"type":"boolean","description":"Filter for deleted (true) or non-deleted (false) comments."},"created_at_from":{"type":"string","format":"date-time","description":"Filter for comments created at or after this datetime."},"created_at_to":{"type":"string","format":"date-time","description":"Filter for comments created at or before this datetime."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter for comments updated after this datetime."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter for comments updated before this datetime."},"content_contains":{"type":"string","description":"Free-text/substring search in comment content."}},"required":[]},"IPageIDiscussionBoardComment.ISummary":{"type":"object","description":"Paginated result container for summary objects (IDiscussionBoardComment.ISummary) representing board comments.\n\nThis paginated structure is used in list/search APIs for board comments, summarizing comment activity for UI/analytics/search functions. It embeds:\n- pagination: Standard IPage.IPagination metadata\n- data: Array of comment summary records\n\nThis aligns with standard board API pagination practices, and is designed for compatibility with large-scale moderation/analytics tools or user-facing comment feeds.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment.ISummary"},"description":"Summary comment records for the current page."}},"required":["pagination","data"]},"IDiscussionBoardComment":{"type":"object","description":"Full persistent schema for a single discussion board comment entity.\n\nDescribes all properties stored for a comment instance. Fields include:\n- id (UUID): Unique PK for the comment\n- discussion_board_member_id (UUID): Author's PK\n- discussion_board_post_id (UUID): Parent post's PK\n- content (string): Full text (latest version) of the comment\n- is_deleted (boolean): Whether soft deleted\n- created_at (DateTime): Timestamp\n- updated_at (DateTime): Timestamp\n\nVersion history and attachments are maintained in separate child tables. Used for detail retrieval, edit, moderation, and audit flows. See also: IDiscussionBoardCommentVersion, IDiscussionBoardCommentAttachment.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the comment (UUID)."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Author of the comment (member UUID)."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"Parent post's UUID to which the comment belongs."},"content":{"type":"string","description":"Full content string (markdown/text) of the comment in its latest state."},"is_deleted":{"type":"boolean","description":"Whether comment is currently soft deleted (hidden from ordinary users)."},"created_at":{"type":"string","format":"date-time","description":"Created timestamp (UTC/ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp (UTC/ISO 8601)."}},"required":["id","discussion_board_member_id","discussion_board_post_id","content","is_deleted","created_at","updated_at"]},"IDiscussionBoardComment.ICreate":{"type":"object","description":"Request schema for creating a new board comment via API.\n\nClient must provide all fields (except for system-managed fields like id, is_deleted, timestamps, which are assigned by the server), and all fields must map to columns in discussion_board_comments. Fields include:\n- discussion_board_member_id (UUID): Creator (derived from user session, not client-supplied!)\n- discussion_board_post_id (UUID): Parent post id\n- content (string): Body of new comment (markdown or plain text)\n\nis_deleted defaults to false on creation and is set by the server. Client must not send id, created_at, or updated_at fields.","properties":{"discussion_board_member_id":{"type":"string","format":"uuid","description":"Authoring member's id, usually set by authentication/session context, not direct user input."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"Parent post's unique identifier (UUID) to which the comment is attached."},"content":{"type":"string","description":"Full text of the new comment (markdown/supports styling)."}},"required":["discussion_board_member_id","discussion_board_post_id","content"]},"IDiscussionBoardComment.IUpdate":{"type":"object","description":"Request schema for updating a comment. Used in PATCH/PUT APIs to change content or soft-delete state. Fields:\n- content (string, optional): Replacement text\n- is_deleted (boolean, optional): Change deleted state\n\nID, post/member foreign keys, and audit fields are NOT mutable by the client.\nApplication must validate permission for edits (owner/moderator/admin).","properties":{"content":{"type":"string","description":"Optional: replacement/new text body for the comment, as edited by the user or staff."},"is_deleted":{"type":"boolean","description":"Optional: set true to soft-delete, false to restore or unhide."}},"required":[]},"IPageIDiscussionBoardCommentVersion":{"type":"object","description":"Paginated page of comment version records, used to deliver edit histories for a comment to the client/auditor.\n\nWraps pages of IDiscussionBoardCommentVersion (full or summary as needed), together with pagination metadata for large comment histories. Used in endpoints for comment version listing/browsing.\n\nProperties:\n- pagination: IPage.IPagination; metadata for paging\n- data: array of comment version summary objects (see IDiscussionBoardCommentVersion or ISummary variant)\n\nCritical for moderation/audit flows where view or review of extended edit history is needed, and for compliance presentation to end-users (e.g., 'edited 7 times - click for edit trail').","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCommentVersion"},"description":"Comment version objects for the current page."}},"required":["pagination","data"]},"IDiscussionBoardCommentVersion":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of this version entity. Referenced from moderation or analytics tables. Required for audit traceability."},"discussion_board_comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment this version belongs to. Ensures strict referential integrity."},"editor_member_id":{"type":"string","format":"uuid","description":"ID of the member who performed the edit. May be original author or admin/moderator."},"content":{"type":"string","description":"Full content snapshot for this version. Non-nullable; limited by business rules. Used for audits and rollback."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the version was created. For ordering and audit history."}},"required":["id","discussion_board_comment_id","editor_member_id","content","created_at"],"description":"Comment Version Entity representing an edit made to a comment. Fulfills audit, edit history, and moderation transparency requirements. Matches 3NF normalization by isolating change records from the comment entity. Each edit creates one of these objects, referenced by parent comment and the editor. Used for rollback and diff view. See schema comment for additional domain guidance."},"IDiscussionBoardCommentVersion.IRequest":{"type":"object","description":"Request schema for searching/filtering/paginating comment version history APIs. Used by backoffice, moderation, and audit endpoints to locate specific version events or support timeline navigation.\n\nAllowable filters:\n- editor_member_id: restrict to all edits by the same actor\n- created_at_from / created_at_to: date range\n- content_contains: substring search for the edited body\n\nPagination controlled elsewhere or via request parameters. All fields optional, except where paginated list parent requires page/limit.","properties":{"editor_member_id":{"type":"string","format":"uuid","description":"Limit to versions created by this member (UUID)"},"created_at_from":{"type":"string","format":"date-time","description":"Earliest creation time to include in results (UTC/ISO 8601)"},"created_at_to":{"type":"string","format":"date-time","description":"Latest creation time to include in filtered results"},"content_contains":{"type":"string","description":"Free-text search: find version snapshots containing this substring."}},"required":[]},"IDiscussionBoardCommentVersion.ICreate":{"type":"object","properties":{"discussion_board_comment_id":{"type":"string","format":"uuid","description":"The parent comment's ID being edited."},"editor_member_id":{"type":"string","format":"uuid","description":"The member ID performing the edit (original author or admin/moderator on behalf)."},"content":{"type":"string","description":"The new snapshot of comment text for this edit."}},"required":["discussion_board_comment_id","editor_member_id","content"],"description":"Request type for creating a new comment version (edit). Used by the comment edit flow or moderation override. Must specify parent comment, editor, and new content. Follows versioning and audit design. See schema and business logic for details."},"IDiscussionBoardCommentVersion.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"New content for this version. Edit only permitted by compliance or moderation override."},"editor_member_id":{"type":"string","format":"uuid","description":"(Optional) Change or correct editor attribution for this version. Set only by admins/mods if justified."}},"required":[],"description":"Type for updating a version record for compliance, moderator annotation, or rare legal use. Only certain fields may be updated. Normally append-only, updates permitted for compliance only. See schema and business audit policy for details."},"IPageIDiscussionBoardCommentAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCommentAttachment"}}},"required":["pagination","data"],"description":"Paginated result set for comment attachments. Contains page info and a list of attachment entities. Used for listing, searching, and displaying attachments on comments."},"IDiscussionBoardCommentAttachment.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment to filter attachments (required for scoping)."},"uploader_member_id":{"type":"string","format":"uuid","description":"Filter by uploader's member ID."},"mime_type":{"type":"string","description":"Filter by MIME type (e.g., 'image/png')."},"file_name":{"type":"string","description":"Partial or exact file name match filter."},"uploaded_from":{"type":"string","format":"date-time","description":"Filter for attachments uploaded after (inclusive) this time."},"uploaded_to":{"type":"string","format":"date-time","description":"Filter for attachments uploaded before (inclusive) this time."},"page":{"type":"number","description":"Requested page number (for pagination)."},"limit":{"type":"number","description":"Number of records per page."}},"required":["comment_id"],"description":"Search/filter request type for comment attachments. Allows filtering by comment, uploader, mime type, file name, upload date, and pagination. Used for advanced queries in comment attachment listing and moderation workflows."},"IDiscussionBoardCommentAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for each comment attachment."},"discussion_board_comment_id":{"type":"string","format":"uuid","description":"Parent comment's ID this attachment belongs to."},"uploader_member_id":{"type":"string","format":"uuid","description":"ID of member uploading the attachment."},"file_name":{"type":"string","description":"Original filename at upload (e.g., 'example.jpg')."},"file_url":{"type":"string","description":"Storage URI for the file (e.g., 'https://cdn.example.com/xyz')."},"mime_type":{"type":"string","description":"MIME type of the file (e.g., 'image/png')."},"uploaded_at":{"type":"string","format":"date-time","description":"Timestamp when file uploaded."}},"required":["id","discussion_board_comment_id","uploader_member_id","file_name","file_url","mime_type","uploaded_at"],"description":"Attachment file metadata for a comment. Contains file URI, name, type, and linking references. Used for download/view, moderation, and audit. See requirement docs for allowed file types and security."},"IDiscussionBoardCommentAttachment.ICreate":{"type":"object","properties":{"discussion_board_comment_id":{"type":"string","format":"uuid","description":"Parent comment's ID for the attachment."},"uploader_member_id":{"type":"string","format":"uuid","description":"ID of member uploading file."},"file_name":{"type":"string","description":"Original file name as provided by uploader."},"file_url":{"type":"string","description":"Permanent or pre-signed URI to the uploaded file."},"mime_type":{"type":"string","description":"File type for validation and browser rendering (e.g., 'image/jpeg')."}},"required":["discussion_board_comment_id","uploader_member_id","file_name","file_url","mime_type"],"description":"Request body type for uploading a file attachment to a comment. Specifies all upload and association fields. Used in member and moderator uploading workflows."},"IDiscussionBoardCommentAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"Change or correct the file name. Allowed for owner or admin/mod."},"file_url":{"type":"string","description":"Update, re-link, or correct the file's storage URI."},"mime_type":{"type":"string","description":"Update/correct the MIME type if auto-detected or re-uploaded."}},"required":[],"description":"Update type for a comment attachment. Only certain metadata can be changed (not upload timestamp or uploader). Used in moderation/file management flows."},"IPageIDiscussionBoardReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport.ISummary"}}},"required":["pagination","data"],"description":"Paginated result for search/listing of discussion board content reports. Used in moderation and admin review tools. Includes page info and an array of report summaries."},"IDiscussionBoardReport.IRequest":{"type":"object","properties":{"reporter_id":{"type":"string","format":"uuid","description":"Filter by reporting member's ID."},"content_type":{"type":"string","description":"Filter by reported object type (\"post\" or \"comment\")."},"reported_post_id":{"type":"string","format":"uuid","description":"Reported post ID, used for post-flag reports."},"reported_comment_id":{"type":"string","format":"uuid","description":"Reported comment ID, used for comment-flag reports."},"reason":{"type":"string","description":"Keyword or exact match filter for reason string."},"status":{"type":"string","description":"Moderation status filter, e.g., 'pending', 'resolved', 'reviewed'."},"created_from":{"type":"string","format":"date-time","description":"Only reports created after (inclusive) given timestamp."},"created_to":{"type":"string","format":"date-time","description":"Only reports created before (inclusive) given timestamp."},"page":{"type":"number","description":"Page number for pagination."},"limit":{"type":"number","description":"Records per page."}},"required":[],"description":"Search/filter and pagination contract for querying discussion board reports. Allows filter by reporter, content type, IDs, reason, status, time window, and paging."},"IDiscussionBoardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this report instance."},"reporter_id":{"type":"string","format":"uuid","description":"ID for reporting member."},"reported_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of reported post if type is 'post', else null."},{"type":"null","format":"uuid","description":"ID of reported post if type is 'post', else null."}],"description":"ID of reported post if type is 'post', else null."},"reported_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of reported comment if type is 'comment', else null."},{"type":"null","format":"uuid","description":"ID of reported comment if type is 'comment', else null."}],"description":"ID of reported comment if type is 'comment', else null."},"content_type":{"type":"string","description":"Type of reported content: 'post' or 'comment'."},"reason":{"type":"string","description":"Text explanation/reason for reporting content."},"status":{"type":"string","description":"Moderation state: 'pending', 'reviewed', 'resolved', etc."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of report creation."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time of resolution; null if unresolved."},{"type":"null","format":"date-time","description":"Time of resolution; null if unresolved."}],"description":"Time of resolution; null if unresolved."}},"required":["id","reporter_id","content_type","reason","status","created_at"],"description":"Full report record entity for moderation purposes. Covers content reports for posts or comments, includes all moderation metadata. Polymorphic references (post/comment) per schema. Excludes moderation action links (see separate moderation tables for relationships)."},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reporter_id":{"type":"string","format":"uuid","description":"ID of member creating the report."},"content_type":{"type":"string","description":"What type of content is being reported (must be 'post' or 'comment')."},"reported_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the reported post (required if content_type is 'post')."},{"type":"null","format":"uuid","description":"ID of the reported post (required if content_type is 'post')."}],"description":"ID of the reported post (required if content_type is 'post')."},"reported_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the reported comment (required if content_type is 'comment')."},{"type":"null","format":"uuid","description":"ID of the reported comment (required if content_type is 'comment')."}],"description":"ID of the reported comment (required if content_type is 'comment')."},"reason":{"type":"string","description":"Reporter explanation for the report."}},"required":["reporter_id","content_type","reason"],"description":"Request body type for creating a new content report. At least one of reported_post_id or reported_comment_id should be set according to content_type enum. Reason is mandatory. See schema documentation for report workflow. "},"IDiscussionBoardReport.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the report record."},"content_type":{"type":"string","description":"Type of content reported."},"status":{"type":"string","description":"Report status."},"created_at":{"type":"string","format":"date-time","description":"Time report submitted."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time report resolved, or null if unresolved."},{"type":"null","format":"date-time","description":"Time report resolved, or null if unresolved."}],"description":"Time report resolved, or null if unresolved."},"reporter_id":{"type":"string","format":"uuid","description":"Reporter member ID."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of reported post/comment. Populated per content_type; see schema."},{"type":"null","format":"uuid","description":"ID of reported post/comment. Populated per content_type; see schema."}],"description":"ID of reported post/comment. Populated per content_type; see schema."}},"required":["id","content_type","status","created_at","reporter_id"],"description":"Summary view of a report for listing/search response. Only exposes fields suitable for browse/search. Used in moderation dashboards for efficient scanning of report status and activity."},"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Current moderation status of the report (e.g., 'pending', 'reviewed', 'resolved'). String value restricted to valid business statuses. This is updated by moderators/admins to reflect review progress or closure. Reference: Prisma schema 'status' column in 'discussion_board_reports'."},"reason":{"type":"string","description":"Explanation/reason for reporting content. Only used in update if the moderator/admin wishes to add or correct admin review notes/reason annotations. Reference: Prisma schema 'reason' column in 'discussion_board_reports'."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when report was resolved (null if unresolved). Set by business logic when report is closed or a resolution action is taken. Reference: Prisma schema 'resolved_at' column in 'discussion_board_reports'."},{"type":"null","format":"date-time","description":"Timestamp when report was resolved (null if unresolved). Set by business logic when report is closed or a resolution action is taken. Reference: Prisma schema 'resolved_at' column in 'discussion_board_reports'."}],"description":"Timestamp when report was resolved (null if unresolved). Set by business logic when report is closed or a resolution action is taken. Reference: Prisma schema 'resolved_at' column in 'discussion_board_reports'."}},"description":"Update data structure for a discussion board report. Contains fields that can be changed during moderation, including status, resolution time, and notes per the requirements and Prisma schema.","required":["status"]},"IPageIDiscussionBoardModerationAction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationAction.ISummary"}}},"required":["pagination","data"],"description":"A page of summarized moderation actions, including pagination metadata and summaries as defined under IDiscussionBoardModerationAction.ISummary. Used for moderation audit/log UI overviews."},"IDiscussionBoardModerationAction.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (1-based index). Optional."},{"type":"null","description":"Page number for pagination (1-based index). Optional."}],"description":"Page number for pagination (1-based index). Optional."},"limit":{"oneOf":[{"type":"integer","description":"Maximum records per page. Used for pagination of search results."},{"type":"null","description":"Maximum records per page. Used for pagination of search results."}],"description":"Maximum records per page. Used for pagination of search results."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's UUID for filtering actions taken by a specific moderator. Reference: 'actor_moderator_id' in 'discussion_board_moderation_actions'."},{"type":"null","format":"uuid","description":"Moderator actor's UUID for filtering actions taken by a specific moderator. Reference: 'actor_moderator_id' in 'discussion_board_moderation_actions'."}],"description":"Moderator actor's UUID for filtering actions taken by a specific moderator. Reference: 'actor_moderator_id' in 'discussion_board_moderation_actions'."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's UUID for filtering actions performed by a particular admin. Reference: 'actor_admin_id' in 'discussion_board_moderation_actions'."},{"type":"null","format":"uuid","description":"Admin actor's UUID for filtering actions performed by a particular admin. Reference: 'actor_admin_id' in 'discussion_board_moderation_actions'."}],"description":"Admin actor's UUID for filtering actions performed by a particular admin. Reference: 'actor_admin_id' in 'discussion_board_moderation_actions'."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post UUID for searching moderation actions regarding a specific post. Matches 'post_id' column."},{"type":"null","format":"uuid","description":"Post UUID for searching moderation actions regarding a specific post. Matches 'post_id' column."}],"description":"Post UUID for searching moderation actions regarding a specific post. Matches 'post_id' column."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment UUID for filtering moderation actions on a specific comment. Matches 'comment_id' column."},{"type":"null","format":"uuid","description":"Comment UUID for filtering moderation actions on a specific comment. Matches 'comment_id' column."}],"description":"Comment UUID for filtering moderation actions on a specific comment. Matches 'comment_id' column."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report UUID for filtering moderation actions related to a particular report."},{"type":"null","format":"uuid","description":"Report UUID for filtering moderation actions related to a particular report."}],"description":"Report UUID for filtering moderation actions related to a particular report."},"action_type":{"oneOf":[{"type":"string","description":"Type of action performed (e.g., 'delete', 'edit', 'warn', 'ban'). Can be used to filter moderation actions by type."},{"type":"null","description":"Type of action performed (e.g., 'delete', 'edit', 'warn', 'ban'). Can be used to filter moderation actions by type."}],"description":"Type of action performed (e.g., 'delete', 'edit', 'warn', 'ban'). Can be used to filter moderation actions by type."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start datetime boundary for filtering actions. Use with 'created_at_to' for date range search."},{"type":"null","format":"date-time","description":"Start datetime boundary for filtering actions. Use with 'created_at_to' for date range search."}],"description":"Start datetime boundary for filtering actions. Use with 'created_at_to' for date range search."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End datetime boundary for filtering actions. Used together with 'created_at_from'."},{"type":"null","format":"date-time","description":"End datetime boundary for filtering actions. Used together with 'created_at_from'."}],"description":"End datetime boundary for filtering actions. Used together with 'created_at_from'."}},"description":"Request structure for searching or paginating discussion board moderation actions. Allows filtering by actors, targets, action type, and date range.","required":[]},"IDiscussionBoardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each moderation action event in 'discussion_board_moderation_actions'."},"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's UUID if the action was performed by a moderator. Nullable, refers to 'discussion_board_moderators'."},{"type":"null","format":"uuid","description":"Moderator actor's UUID if the action was performed by a moderator. Nullable, refers to 'discussion_board_moderators'."}],"description":"Moderator actor's UUID if the action was performed by a moderator. Nullable, refers to 'discussion_board_moderators'."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's UUID if the action was performed by an admin. Nullable, refers to 'discussion_board_admins'."},{"type":"null","format":"uuid","description":"Admin actor's UUID if the action was performed by an admin. Nullable, refers to 'discussion_board_admins'."}],"description":"Admin actor's UUID if the action was performed by an admin. Nullable, refers to 'discussion_board_admins'."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post being moderated. Nullable, for polymorphic action target. Foreign key."},{"type":"null","format":"uuid","description":"UUID of the post being moderated. Nullable, for polymorphic action target. Foreign key."}],"description":"UUID of the post being moderated. Nullable, for polymorphic action target. Foreign key."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being moderated. Nullable, for polymorphic action target. Foreign key."},{"type":"null","format":"uuid","description":"UUID of the comment being moderated. Nullable, for polymorphic action target. Foreign key."}],"description":"UUID of the comment being moderated. Nullable, for polymorphic action target. Foreign key."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If action directly relates to a report, this field links to 'discussion_board_reports'. Nullable."},{"type":"null","format":"uuid","description":"If action directly relates to a report, this field links to 'discussion_board_reports'. Nullable."}],"description":"If action directly relates to a report, this field links to 'discussion_board_reports'. Nullable."},"action_type":{"type":"string","description":"Nature/type of moderation action performed (e.g., 'delete', 'edit', 'warn', 'ban'). Free-form string, as required by business logic."},"action_details":{"oneOf":[{"type":"string","description":"Additional details (eg, reason, moderator notes, evidence). Allows for context about the moderation action taken. Nullable/text."},{"type":"null","description":"Additional details (eg, reason, moderator notes, evidence). Allows for context about the moderation action taken. Nullable/text."}],"description":"Additional details (eg, reason, moderator notes, evidence). Allows for context about the moderation action taken. Nullable/text."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when moderation action was performed. System managed field for audit/log sequencing."}},"required":["id","action_type","created_at"],"description":"Full record of a moderation action as described by the Prisma schema for 'discussion_board_moderation_actions'. Contains actor references, content targets, action labeling, and metadata for audit and compliance."},"IDiscussionBoardModerationAction.ICreate":{"type":"object","properties":{"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's UUID for whom is creating the action. Must be supplied or null; mutually exclusive with actor_admin_id."},{"type":"null","format":"uuid","description":"Moderator actor's UUID for whom is creating the action. Must be supplied or null; mutually exclusive with actor_admin_id."}],"description":"Moderator actor's UUID for whom is creating the action. Must be supplied or null; mutually exclusive with actor_admin_id."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's UUID for whom is creating the action. Must be supplied or null; mutually exclusive with actor_moderator_id."},{"type":"null","format":"uuid","description":"Admin actor's UUID for whom is creating the action. Must be supplied or null; mutually exclusive with actor_moderator_id."}],"description":"Admin actor's UUID for whom is creating the action. Must be supplied or null; mutually exclusive with actor_moderator_id."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post UUID that is the target of the moderation action; nullable if action targets a comment."},{"type":"null","format":"uuid","description":"Post UUID that is the target of the moderation action; nullable if action targets a comment."}],"description":"Post UUID that is the target of the moderation action; nullable if action targets a comment."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment UUID that is the target of the moderation action; nullable if action targets a post."},{"type":"null","format":"uuid","description":"Comment UUID that is the target of the moderation action; nullable if action targets a post."}],"description":"Comment UUID that is the target of the moderation action; nullable if action targets a post."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report UUID if the action is associated with a report; nullable otherwise."},{"type":"null","format":"uuid","description":"Report UUID if the action is associated with a report; nullable otherwise."}],"description":"Report UUID if the action is associated with a report; nullable otherwise."},"action_type":{"type":"string","description":"Description of the action (e.g., 'delete', 'edit', 'warn'). Business logic will validate allowed action types."},"action_details":{"oneOf":[{"type":"string","description":"Additional data, such as evidence, notes, or links to further context. Nullable."},{"type":"null","description":"Additional data, such as evidence, notes, or links to further context. Nullable."}],"description":"Additional data, such as evidence, notes, or links to further context. Nullable."}},"required":["action_type"],"description":"Structure for creating a new moderation action in the discussion board. Accepts required and optional fields for target references, actor, and metadata. Excludes PK/id and created_at, which are generated by the system. Refer to Prisma schema for field details."},"IDiscussionBoardModerationAction.IUpdate":{"type":"object","properties":{"actor_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the responsible moderator for the action. Usually null or not set."},{"type":"null","format":"uuid","description":"If updating the responsible moderator for the action. Usually null or not set."}],"description":"If updating the responsible moderator for the action. Usually null or not set."},"actor_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the responsible admin for the action. Usually null or not set."},{"type":"null","format":"uuid","description":"If updating the responsible admin for the action. Usually null or not set."}],"description":"If updating the responsible admin for the action. Usually null or not set."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the post target of the action, if business scenario requires."},{"type":"null","format":"uuid","description":"Update the post target of the action, if business scenario requires."}],"description":"Update the post target of the action, if business scenario requires."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the comment target, if relevant."},{"type":"null","format":"uuid","description":"Update the comment target, if relevant."}],"description":"Update the comment target, if relevant."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the related report, if applicable."},{"type":"null","format":"uuid","description":"Update the related report, if applicable."}],"description":"Update the related report, if applicable."},"action_type":{"oneOf":[{"type":"string","description":"Update the action type, if business logic permits."},{"type":"null","description":"Update the action type, if business logic permits."}],"description":"Update the action type, if business logic permits."},"action_details":{"oneOf":[{"type":"string","description":"Update details or moderator notes for the moderation action."},{"type":"null","description":"Update details or moderator notes for the moderation action."}],"description":"Update details or moderator notes for the moderation action."}},"description":"Business update form for a given moderation action record. Enables updating of actor, target, type, or additional context fields. Excludes immutable fields such as PK/id/created_at, and restricted by business policies depending on audit or workflow state. Maps to discussion_board_moderation_actions.","required":[]},"IPageIDiscussionBoardContentFlag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardContentFlag.ISummary"}}},"required":["pagination","data"],"description":"A page of content flag summaries, including full pagination information and item summaries for moderation audit, review, and compliance."},"IDiscussionBoardContentFlag.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Numeric page number for pagination (1-based indexing). Optional."},{"type":"null","description":"Numeric page number for pagination (1-based indexing). Optional."}],"description":"Numeric page number for pagination (1-based indexing). Optional."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of items to return per page. Used for result size control."},{"type":"null","description":"Maximum number of items to return per page. Used for result size control."}],"description":"Maximum number of items to return per page. Used for result size control."},"flag_type":{"oneOf":[{"type":"string","description":"Nature of flag (e.g., 'spam', 'abuse', 'automation', 'duplicate'). Used for flag type filtering."},{"type":"null","description":"Nature of flag (e.g., 'spam', 'abuse', 'automation', 'duplicate'). Used for flag type filtering."}],"description":"Nature of flag (e.g., 'spam', 'abuse', 'automation', 'duplicate'). Used for flag type filtering."},"flag_source":{"oneOf":[{"type":"string","description":"Source/origin of flag, e.g. 'manual', 'automation', 'external'. Filterable field."},{"type":"null","description":"Source/origin of flag, e.g. 'manual', 'automation', 'external'. Filterable field."}],"description":"Source/origin of flag, e.g. 'manual', 'automation', 'external'. Filterable field."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's UUID for filtering flags created by a specific moderator."},{"type":"null","format":"uuid","description":"Moderator actor's UUID for filtering flags created by a specific moderator."}],"description":"Moderator actor's UUID for filtering flags created by a specific moderator."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's UUID for filtering flags created by a specific admin."},{"type":"null","format":"uuid","description":"Admin actor's UUID for filtering flags created by a specific admin."}],"description":"Admin actor's UUID for filtering flags created by a specific admin."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID for searching flags that target a specific post."},{"type":"null","format":"uuid","description":"UUID for searching flags that target a specific post."}],"description":"UUID for searching flags that target a specific post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID for flags attached to a specific comment."},{"type":"null","format":"uuid","description":"UUID for flags attached to a specific comment."}],"description":"UUID for flags attached to a specific comment."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start range for creation date, used in time-window queries."},{"type":"null","format":"date-time","description":"Start range for creation date, used in time-window queries."}],"description":"Start range for creation date, used in time-window queries."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End range for creation date, used in time-window queries."},{"type":"null","format":"date-time","description":"End range for creation date, used in time-window queries."}],"description":"End range for creation date, used in time-window queries."},"cleared":{"oneOf":[{"type":"boolean","description":"Filter for currently active (not cleared) or historical (cleared) flags. True=only cleared, false=active, null=all."},{"type":"null","description":"Filter for currently active (not cleared) or historical (cleared) flags. True=only cleared, false=active, null=all."}],"description":"Filter for currently active (not cleared) or historical (cleared) flags. True=only cleared, false=active, null=all."}},"description":"Filter/search request type for paginated or filtered queries of content flags in moderation review workflows.","required":[]},"IPageIDiscussionBoardContentFlag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardContentFlag"}}},"required":["pagination","data"],"description":"Paginated result set of discussion board content flag records for moderation tracking and audit history."},"IDiscussionBoardContentFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID, uniquely identifies the content flag instance."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post being flagged. Nullable if flag targets a comment."},{"type":"null","format":"uuid","description":"ID of the post being flagged. Nullable if flag targets a comment."}],"description":"ID of the post being flagged. Nullable if flag targets a comment."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment being flagged. Nullable if flag targets a post."},{"type":"null","format":"uuid","description":"ID of the comment being flagged. Nullable if flag targets a post."}],"description":"ID of the comment being flagged. Nullable if flag targets a post."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's UUID who set this flag, if any."},{"type":"null","format":"uuid","description":"Moderator actor's UUID who set this flag, if any."}],"description":"Moderator actor's UUID who set this flag, if any."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's UUID who set this flag, if any."},{"type":"null","format":"uuid","description":"Admin actor's UUID who set this flag, if any."}],"description":"Admin actor's UUID who set this flag, if any."},"flag_type":{"type":"string","description":"Nature/type of the flag, as required by moderation workflow (e.g., 'spam', 'abuse'). No enum in Prisma, but controlled by business workflow."},"flag_source":{"type":"string","description":"Origin/source of the flag: manual, automation, or external system(s). Used for workflow/audit segmentation."},"flag_details":{"oneOf":[{"type":"string","description":"Additional moderation notes/context for the flag. Optional, for complex cases or compliance."},{"type":"null","description":"Additional moderation notes/context for the flag. Optional, for complex cases or compliance."}],"description":"Additional moderation notes/context for the flag. Optional, for complex cases or compliance."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when flag was created. Required per Prisma and audit logging."},"cleared_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the moderation flag was cleared or resolved (null if still active). Used for audit/historical tracking."},{"type":"null","format":"date-time","description":"Timestamp when the moderation flag was cleared or resolved (null if still active). Used for audit/historical tracking."}],"description":"Timestamp when the moderation flag was cleared or resolved (null if still active). Used for audit/historical tracking."}},"required":["id","flag_type","flag_source","created_at"],"description":"Full flag entity for moderation tracking on posts/comments. Maps all atomic detail from Prisma schema table."},"IDiscussionBoardContentFlag.ICreate":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target post's UUID if flag is on a post."},{"type":"null","format":"uuid","description":"Target post's UUID if flag is on a post."}],"description":"Target post's UUID if flag is on a post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target comment's UUID if flag is on a comment."},{"type":"null","format":"uuid","description":"Target comment's UUID if flag is on a comment."}],"description":"Target comment's UUID if flag is on a comment."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's UUID, if flag is being created by a moderator."},{"type":"null","format":"uuid","description":"Moderator actor's UUID, if flag is being created by a moderator."}],"description":"Moderator actor's UUID, if flag is being created by a moderator."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's UUID, if flag is set by admin."},{"type":"null","format":"uuid","description":"Admin actor's UUID, if flag is set by admin."}],"description":"Admin actor's UUID, if flag is set by admin."},"flag_type":{"type":"string","description":"Required. The type of the flag indicating moderation concern (e.g., 'spam', 'abuse')."},"flag_source":{"type":"string","description":"Required. The source/origin of the flag (manual, automation, external system, etc.)."},"flag_details":{"oneOf":[{"type":"string","description":"Optional details or notes from moderators or automated system at creation."},{"type":"null","description":"Optional details or notes from moderators or automated system at creation."}],"description":"Optional details or notes from moderators or automated system at creation."}},"required":["flag_type","flag_source"],"description":"Request/DTO type for creating a new flag on a post or comment. Accepts all mutable metadata fields and target pointers. Required fields flagged in the business rules."},"IDiscussionBoardContentFlag.IUpdate":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the flag to target a different post. Nullable, used in edge-case workflow corrections."},{"type":"null","format":"uuid","description":"Update the flag to target a different post. Nullable, used in edge-case workflow corrections."}],"description":"Update the flag to target a different post. Nullable, used in edge-case workflow corrections."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the flag to target a different comment. Nullable, only set if updating relationship."},{"type":"null","format":"uuid","description":"Update the flag to target a different comment. Nullable, only set if updating relationship."}],"description":"Update the flag to target a different comment. Nullable, only set if updating relationship."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the moderator who owns the flag, if reassignment is needed for audit/compliance."},{"type":"null","format":"uuid","description":"Update the moderator who owns the flag, if reassignment is needed for audit/compliance."}],"description":"Update the moderator who owns the flag, if reassignment is needed for audit/compliance."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the admin user responsible for this flag, if needed."},{"type":"null","format":"uuid","description":"Update the admin user responsible for this flag, if needed."}],"description":"Update the admin user responsible for this flag, if needed."},"flag_type":{"oneOf":[{"type":"string","description":"Update the type of flag, per moderation workflow escalation."},{"type":"null","description":"Update the type of flag, per moderation workflow escalation."}],"description":"Update the type of flag, per moderation workflow escalation."},"flag_source":{"oneOf":[{"type":"string","description":"Update source of the flag (for reclassification: manual to automation, etc.)."},{"type":"null","description":"Update source of the flag (for reclassification: manual to automation, etc.)."}],"description":"Update source of the flag (for reclassification: manual to automation, etc.)."},"flag_details":{"oneOf":[{"type":"string","description":"Update moderation notes or context for this flag."},{"type":"null","description":"Update moderation notes or context for this flag."}],"description":"Update moderation notes or context for this flag."},"cleared_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set or update timestamp for flag clearance (null if active, datetime if resolved)."},{"type":"null","format":"date-time","description":"Set or update timestamp for flag clearance (null if active, datetime if resolved)."}],"description":"Set or update timestamp for flag clearance (null if active, datetime if resolved)."}},"description":"Mutable/modifiable attributes of a content flag for auditing, compliance, and moderation workflows. Completes the CRUD structures for the moderation flag schema.","required":[]},"IDiscussionBoardModerationAction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID for the moderation action"},"actor_type":{"oneOf":[{"type":"string","description":"Type of actor (moderator/admin)"},{"type":"null","description":"Type of actor (moderator/admin)"}],"description":"Type of actor (moderator/admin)"}},"required":["id"],"description":"Summary of a moderation action for audit/overview listings. At minimum, includes ID and optional actor type for filtering."},"IDiscussionBoardContentFlag.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID for the content flag"},"flag_type":{"type":"string","description":"Type of the flag (for summary lists)"},"flag_source":{"type":"string","description":"Source of the flag (manual/automation)"},"created_at":{"type":"string","format":"date-time","description":"Time the flag was created"}},"required":["id","flag_type","flag_source","created_at"],"description":"Summary of a content flag for listing/indexing/audit UI."},"IPageIDiscussionBoardSubscription.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the page of subscription summaries.\n\nFollows the IPage standard structure, indicating current page, limit, total records, and total pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSubscription.ISummary"},"description":"Array of subscription summary objects representing individual subscriptions for the current page."}},"required":["pagination","data"],"description":"Paginated result of summary subscription records for the discussion board.\n\nThis structure is used for listing user subscriptions in a paginated way, typically for dashboard or account management UIs. Each entry contains a summary of an individual subscription, enforced by the requirements of the discussion_board_subscriptions table."},"IDiscussionBoardSubscription.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the subscription record.\n\nUnique identifier for each subscription in discussion_board_subscriptions."},"subscriber_id":{"type":"string","format":"uuid","description":"UUID of the member who owns this subscription.\n\nReferences discussion_board_members.id."},"target_type":{"type":"string","description":"Type of target entity being subscribed to. Should be either 'topic' or 'thread'.\n\nEnables polymorphic subscriptions.\n\nThis is always required."},"target_id":{"type":"string","format":"uuid","description":"UUID of the entity this subscription targets (topic or thread)."},"notification_method":{"type":"string","description":"The preferred delivery method for this subscription (e.g., 'email', 'in-app')."},"is_active":{"type":"boolean","description":"Whether this subscription is currently active.\n\nIf false, notifications are currently paused.\n\nEnforced by the requirements."},"subscribed_at":{"type":"string","format":"date-time","description":"Timestamp when the subscription was created.\n\nThis is set automatically on creation in discussion_board_subscriptions."}},"required":["id","subscriber_id","target_type","target_id","notification_method","is_active","subscribed_at"],"description":"Summary record for a single discussion board subscription as seen in lists or overviews."},"IDiscussionBoardSubscription.IRequest":{"type":"object","properties":{"subscriber_id":{"type":"string","format":"uuid","description":"Filter results to a specific subscriber (member user) by their UUID."},"target_type":{"type":"string","description":"Target entity type to filter (topic/thread)."},"target_id":{"type":"string","format":"uuid","description":"Target UUID for specific entity subscription search."},"notification_method":{"type":"string","description":"Filter by preferred delivery method (e.g., 'email', 'in-app') for this subscription."},"is_active":{"type":"boolean","description":"Return only active/inactive subscriptions if specified."},"subscribed_at_from":{"type":"string","format":"date-time","description":"Filter subscriptions created after this timestamp."},"subscribed_at_to":{"type":"string","format":"date-time","description":"Filter subscriptions created before this timestamp."},"page":{"type":"integer","description":"Page number for pagination (starts at 1)."},"limit":{"type":"integer","description":"Number of records per page (default-100)."}},"description":"Request/search structure to filter, sort, or page through subscriptions.\n\nField structure matches typical filters used in UIs and admin dashboards.","required":[]},"IPageIDiscussionBoardSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination data for this page, indicating page #, per-page count, total."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSubscription"},"description":"Array of full discussion board subscription objects for this page."}},"required":["pagination","data"],"description":"Paginated result page returning multiple discussion board subscription records."},"IDiscussionBoardSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of this subscription entry."},"subscriber_id":{"type":"string","format":"uuid","description":"Member user subscribing to notifications; references discussion_board_members.id."},"target_type":{"type":"string","description":"Type of subscription target (use 'topic' or 'thread')."},"target_id":{"type":"string","format":"uuid","description":"UUID of the thread or topic this subscription refers to."},"notification_method":{"type":"string","description":"Delivery method for this subscription's notifications (e.g., 'email', 'in-app')."},"is_active":{"type":"boolean","description":"Is the subscription currently active/enabled for notifications?"},"subscribed_at":{"type":"string","format":"date-time","description":"Date this subscription was created and enabled."}},"required":["id","subscriber_id","target_type","target_id","notification_method","is_active","subscribed_at"],"description":"Full persistent object for a discussion board subscription in the DB."},"IDiscussionBoardSubscription.ICreate":{"type":"object","properties":{"subscriber_id":{"type":"string","format":"uuid","description":"UUID of the subscribing member; references discussion_board_members.id."},"target_type":{"type":"string","description":"Type of entity to subscribe to (should be 'topic' or 'thread')."},"target_id":{"type":"string","format":"uuid","description":"Target entity's UUID (thread or topic)."},"notification_method":{"type":"string","description":"Preferred notification delivery method for this subscription (e.g., 'email', 'in-app')."},"is_active":{"type":"boolean","description":"True if the subscription is active upon creation."}},"required":["subscriber_id","target_type","target_id","notification_method","is_active"],"description":"Request body for creating a new user subscription to a topic or thread."},"IDiscussionBoardSubscription.IUpdate":{"type":"object","properties":{"notification_method":{"type":"string","description":"Change the delivery method (e.g., switch from 'in-app' to 'email')."},"is_active":{"type":"boolean","description":"Set the subscription as enabled/disabled."},"target_type":{"type":"string","description":"Update target type (uncommon; generally not changed)."},"target_id":{"type":"string","format":"uuid","description":"Update the subscribed target's UUID (rare; typically not changed)."}},"description":"Request body to update an existing subscription's editable fields.","required":[]},"IPageIDiscussionBoardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination meta for the notification list page."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotification"},"description":"Array of notification objects for the page."}},"required":["pagination","data"],"description":"Paginated result for notification list views."},"IDiscussionBoardNotification.IRequest":{"type":"object","properties":{"recipient_id":{"type":"string","format":"uuid","description":"UUID of the notification's recipient (member user)."},"subscription_id":{"type":"string","format":"uuid","description":"(Optional) Related subscription record for filtering notifications."},"notification_type":{"type":"string","description":"Filter by notification type (e.g., 'reply', 'system', 'mention')."},"target_type":{"type":"string","description":"Only return notifications related to this target entity type."},"target_id":{"type":"string","format":"uuid","description":"Filter notifications by the specific entity they reference."},"delivery_status":{"type":"string","description":"Filter by delivery status (e.g., 'delivered', 'failed')."},"read":{"type":"boolean","description":"Return only read/unread notifications."},"delivered_at_from":{"type":"string","format":"date-time","description":"Filter notifications delivered on/after this time."},"delivered_at_to":{"type":"string","format":"date-time","description":"Filter notifications delivered before this time."},"page":{"type":"integer","description":"Page number for pagination."},"limit":{"type":"integer","description":"Results per page."}},"description":"Request/paging/filter/search criteria for notification queries for a user.","required":[]},"IDiscussionBoardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key for the notification row."},"recipient_id":{"type":"string","format":"uuid","description":"ID of the target user who receives/owns this notification."},"subscription_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the related subscription trigger (if any; null for system notifications)."},{"type":"null"}],"description":"Reference to the related subscription trigger (if any; null for system notifications)."},"notification_type":{"type":"string","description":"Type/category of notification ('system', 'reply', 'mention', etc.)."},"target_type":{"type":"string","description":"Type of target entity (e.g., 'thread', 'topic')."},"target_id":{"type":"string","format":"uuid","description":"UUID of the notification's related thread/topic/post/etc."},"message":{"type":"string","description":"Notification short message or display string."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp the notification was delivered (and visible to user)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the user opened/read the notification. Null if still unread."},{"type":"null"}],"description":"When the user opened/read the notification. Null if still unread."},"delivery_status":{"type":"string","description":"Current delivery status ('delivered', 'pending', 'failed', etc.)."},"failure_reason":{"oneOf":[{"type":"string","description":"Error reason for failed delivery, if any (nullable)."},{"type":"null"}],"description":"Error reason for failed delivery, if any (nullable)."}},"required":["id","recipient_id","notification_type","target_type","target_id","message","delivered_at","delivery_status"],"description":"Full notification object sent to or managed for a user in the notification system."},"IDiscussionBoardNotification.ICreate":{"type":"object","properties":{"recipient_id":{"type":"string","format":"uuid","description":"UUID of member who should receive this notification."},"subscription_id":{"oneOf":[{"type":"string","format":"uuid","description":"Associate the notification with a subscription event (nullable if system-generated)."},{"type":"null"}],"description":"Associate the notification with a subscription event (nullable if system-generated)."},"notification_type":{"type":"string","description":"Type/category for the notification ('reply', 'mention', 'system', etc.)."},"target_type":{"type":"string","description":"Target entity type related to the notification."},"target_id":{"type":"string","format":"uuid","description":"Target entity UUID (e.g., for the thread/topic/post related to the event)."},"message":{"type":"string","description":"Main message text for display."},"delivered_at":{"type":"string","format":"date-time","description":"When the notification was delivered (ISO 8601 UTC)."},"delivery_status":{"type":"string","description":"Current delivery status (e.g., 'delivered', 'failed')."},"failure_reason":{"oneOf":[{"type":"string","description":"Reason for failure, if delivery_status = 'failed' (nullable)."},{"type":"null"}],"description":"Reason for failure, if delivery_status = 'failed' (nullable)."}},"required":["recipient_id","notification_type","target_type","target_id","message","delivered_at","delivery_status"],"description":"Request structure for creating a new notification event for a user."},"IDiscussionBoardNotification.IUpdate":{"type":"object","properties":{"message":{"type":"string","description":"Updated or new message (for admin edits/corrections)."},"delivery_status":{"type":"string","description":"Update the delivery status ('delivered', 'failed', etc.)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set or change the user read timestamp."},{"type":"null"}],"description":"Set or change the user read timestamp."},"failure_reason":{"oneOf":[{"type":"string","description":"Set/clear error/failure reason for delivery. Null to clear."},{"type":"null"}],"description":"Set/clear error/failure reason for delivery. Null to clear."}},"description":"Request structure for updating a notification event (e.g., when marking as read or handling delivery errors).","required":[]},"IPageIDiscussionBoardActivityLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination object containing information about the current and total results."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardActivityLog"},"description":"List of activity log objects for the current page."}},"required":["pagination","data"],"description":"Paginated result structure for system activity logs (used for dashboard/analytics)."},"IDiscussionBoardActivityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"활동 로그 고유 식별자(UUID).\n\n감사 및 분석을 위한 단일 로그 레코드의 PK입니다."},"actor_id":{"type":"string","format":"uuid","description":"행위자의 UUID. 액션을 수행한 사용자(회원/모더레이터/관리자/게스트)의 식별자입니다."},"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련 토픽의 UUID(있을 경우)."},{"type":"null","format":"uuid","description":"관련 토픽의 UUID(있을 경우)."}],"description":"관련 토픽의 UUID(있을 경우)."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련 스레드의 UUID(있을 경우)."},{"type":"null","format":"uuid","description":"관련 스레드의 UUID(있을 경우)."}],"description":"관련 스레드의 UUID(있을 경우)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"관련 게시물의 UUID(있을 경우)."},{"type":"null","format":"uuid","description":"관련 게시물의 UUID(있을 경우)."}],"description":"관련 게시물의 UUID(있을 경우)."},"actor_type":{"type":"string","description":"행위자의 역할 유형('member'/'moderator'/'admin'/'guest' 등).\n\n감사 및 통계를 위한 구분자입니다."},"action_type":{"type":"string","description":"수행한 활동의 유형(예: 'view_post', 'post_created', 'comment_created', 'moderation_action')."},"action_timestamp":{"type":"string","format":"date-time","description":"이 활동이 발생한 UTC 타임스탬프."},"ip_address":{"oneOf":[{"type":"string","description":"행위자의 IP 주소 (있을 경우). GDPR 보호 및 보안 감사 트레일용입니다."},{"type":"null","description":"행위자의 IP 주소 (있을 경우). GDPR 보호 및 보안 감사 트레일용입니다."}],"description":"행위자의 IP 주소 (있을 경우). GDPR 보호 및 보안 감사 트레일용입니다."},"user_agent":{"oneOf":[{"type":"string","description":"요청을 발생시킨 User-Agent (브라우저 또는 장치 식별용)."},{"type":"null","description":"요청을 발생시킨 User-Agent (브라우저 또는 장치 식별용)."}],"description":"요청을 발생시킨 User-Agent (브라우저 또는 장치 식별용)."},"metadata_json":{"oneOf":[{"type":"string","description":"해당 활동에 대한 확장 JSON 메타 데이터.\n\n예: 편집 사유, 변경 전/후 데이터, 추가 증거 등 다목적 용도로 사용. 문자열로 직렬화된 JSON."},{"type":"null","description":"해당 활동에 대한 확장 JSON 메타 데이터.\n\n예: 편집 사유, 변경 전/후 데이터, 추가 증거 등 다목적 용도로 사용. 문자열로 직렬화된 JSON."}],"description":"해당 활동에 대한 확장 JSON 메타 데이터.\n\n예: 편집 사유, 변경 전/후 데이터, 추가 증거 등 다목적 용도로 사용. 문자열로 직렬화된 JSON."}},"required":["id","actor_id","actor_type","action_type","action_timestamp"],"description":"단일 감사/통계 활동 로그 레코드.\n\n각 액티비티에 대한 주요 정보와 관련 엔티티(주제, 스레드, 게시글 등)의 참조, 메타 데이터를 포함합니다. GDPR, 보안, 운영 분석, 분쟁 해결 등의 다양한 용도로 활용됩니다."},"IDiscussionBoardActivityLog.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"배우의 고유 식별자(UUID).\n\n감사 로그 또는 분석을 위해 활동을 수행한 회원, 관리자, 모더레이터 또는 게스트를 지정합니다."},"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"활동이 특정 주제(DTO)의 컨텍스트 내에서 이루어진 경우 해당 주제의 UUID 식별자입니다."},{"type":"null","format":"uuid","description":"활동이 특정 주제(DTO)의 컨텍스트 내에서 이루어진 경우 해당 주제의 UUID 식별자입니다."}],"description":"활동이 특정 주제(DTO)의 컨텍스트 내에서 이루어진 경우 해당 주제의 UUID 식별자입니다."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"활동이 특정 스레드에 속해 있을 경우 해당 논의 스레드 UUID입니다."},{"type":"null","format":"uuid","description":"활동이 특정 스레드에 속해 있을 경우 해당 논의 스레드 UUID입니다."}],"description":"활동이 특정 스레드에 속해 있을 경우 해당 논의 스레드 UUID입니다."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"활동이 특정 게시글에 관련된 경우 참조되는 게시글 UUID입니다."},{"type":"null","format":"uuid","description":"활동이 특정 게시글에 관련된 경우 참조되는 게시글 UUID입니다."}],"description":"활동이 특정 게시글에 관련된 경우 참조되는 게시글 UUID입니다."},"actor_type":{"type":"string","description":"행위자의 역할 유형 (예: 'member', 'moderator', 'admin', 'guest')."},"action_type":{"type":"string","description":"수행된 활동의 유형 (예: 'view_topic', 'post_created', 'comment_created', 'moderation_action' 등)."},"action_timestamp_from":{"type":"string","format":"date-time","description":"검색 범위의 시작 UTC 타임스탬프."},"action_timestamp_to":{"type":"string","format":"date-time","description":"검색 범위의 종료 UTC 타임스탬프."},"ip_address":{"type":"string","description":"행위자의 IP 주소 (필터링에 사용될 경우)."},"user_agent":{"type":"string","description":"요청의 User-Agent (브라우저/디바이스 문자열)."},"page":{"type":"integer","description":"요청된 페이지 번호 (페이지네이션 지원용)."},"limit":{"type":"integer","description":"페이지당 최대 결과 수 (페이지네이션 지원용)."}},"required":[],"description":"감사/분석 로그 검색, 필터 및 페이징용 요청 타입입니다.\n\n각 필드는 활동 로그의 속성에 대한 선택적 필터나 범위를 제공합니다. 주제, 스레드, 게시글, 행위자, 타입, 시점, IP, User-Agent 등으로 필터링이 가능합니다. 페이지네이션 필드도 제공합니다."},"IDiscussionBoardActivityLog.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"이 활동을 수행한 회원/행위자의 고유 UUID 식별자."},"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"활동이 특정 주제를 참조하는 경우 해당 토픽의 UUID입니다."},{"type":"null","format":"uuid","description":"활동이 특정 주제를 참조하는 경우 해당 토픽의 UUID입니다."}],"description":"활동이 특정 주제를 참조하는 경우 해당 토픽의 UUID입니다."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"스레드 단위 활동이면 해당 스레드의 UUID."},{"type":"null","format":"uuid","description":"스레드 단위 활동이면 해당 스레드의 UUID."}],"description":"스레드 단위 활동이면 해당 스레드의 UUID."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"해당되는 게시글이 있을 경우의 UUID."},{"type":"null","format":"uuid","description":"해당되는 게시글이 있을 경우의 UUID."}],"description":"해당되는 게시글이 있을 경우의 UUID."},"actor_type":{"type":"string","description":"행위자 역할 구분자 ('member', 'moderator', 'admin', 'guest' 등)."},"action_type":{"type":"string","description":"액션의 유형: 수행된 주요 행동 또는 이벤트 타입(예: 'view_topic', 'report_submitted' 등)."},"action_timestamp":{"type":"string","format":"date-time","description":"이 활동이 발생한 UTC 타임스탬프."},"ip_address":{"oneOf":[{"type":"string","description":"활동 시 행위자의 IP 주소 (선택적)."},{"type":"null","description":"활동 시 행위자의 IP 주소 (선택적)."}],"description":"활동 시 행위자의 IP 주소 (선택적)."},"user_agent":{"oneOf":[{"type":"string","description":"요청의 User-Agent(옵션)."},{"type":"null","description":"요청의 User-Agent(옵션)."}],"description":"요청의 User-Agent(옵션)."},"metadata_json":{"oneOf":[{"type":"string","description":"확장 JSON 메타데이터 (선택적): 복합 이유, 증거 등 추가 정보. 문자열로 직렬화된 JSON이어야 합니다."},{"type":"null","description":"확장 JSON 메타데이터 (선택적): 복합 이유, 증거 등 추가 정보. 문자열로 직렬화된 JSON이어야 합니다."}],"description":"확장 JSON 메타데이터 (선택적): 복합 이유, 증거 등 추가 정보. 문자열로 직렬화된 JSON이어야 합니다."}},"required":["actor_id","actor_type","action_type","action_timestamp"],"description":"신규 활동 로그 레코드 생성 요청 타입.\n\n로그 PK(id)는 자동 생성됩니다. 행위자, 이벤트, 시각, 대상 엔터티(필요시), 메타데이터 필드 포함."},"IDiscussionBoardActivityLog.IUpdate":{"type":"object","properties":{"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"(선택적) 변경하려는 대상 토픽 UUID"},{"type":"null","format":"uuid","description":"(선택적) 변경하려는 대상 토픽 UUID"}],"description":"(선택적) 변경하려는 대상 토픽 UUID"},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"(선택적) 변경하려는 대상 스레드 UUID"},{"type":"null","format":"uuid","description":"(선택적) 변경하려는 대상 스레드 UUID"}],"description":"(선택적) 변경하려는 대상 스레드 UUID"},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"(선택적) 변경하려는 대상 게시글 UUID"},{"type":"null","format":"uuid","description":"(선택적) 변경하려는 대상 게시글 UUID"}],"description":"(선택적) 변경하려는 대상 게시글 UUID"},"actor_type":{"type":"string","description":"행위자 역할 구분자 ('member','moderator','admin','guest')."},"action_type":{"type":"string","description":"수정될 경우, 새로운 액션 유형 명칭."},"action_timestamp":{"type":"string","format":"date-time","description":"수정할 때 적용할 새로운 발생 타임스탬프(UTC)."},"ip_address":{"oneOf":[{"type":"string","description":"IP 주소(수정/추가)."},{"type":"null","description":"IP 주소(수정/추가)."}],"description":"IP 주소(수정/추가)."},"user_agent":{"oneOf":[{"type":"string","description":"User-Agent 문자열(수정/추가)."},{"type":"null","description":"User-Agent 문자열(수정/추가)."}],"description":"User-Agent 문자열(수정/추가)."},"metadata_json":{"oneOf":[{"type":"string","description":"확장 또는 보완할 JSON 메타데이터 문자열."},{"type":"null","description":"확장 또는 보완할 JSON 메타데이터 문자열."}],"description":"확장 또는 보완할 JSON 메타데이터 문자열."}},"required":[],"description":"특정 활동 로그를 부분적으로 수정/보완하기 위한 업데이트 요청 타입. PK(id)는 경로 파라미터 등에서 전달하며 본 타입에는 포함되지 않습니다.\n\n업데이트 가능한 필드만 제공하며, 변경이 필요한 항목만 선택적으로 지정합니다."},"IPageIDiscussionBoardEngagementStat":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardEngagementStat"}}},"required":["pagination","data"],"description":"페이지네이션이 적용된 포럼 분석(집계) 데이터의 목록 컨테이너.\n\n각 데이터(item)는 특정 기간/구간별 통계 데이터를 나타내며, pagination에는 페이지번호, limit, 전체 집계 수, 전체 페이지 수가 포함됩니다."},"IDiscussionBoardEngagementStat.IRequest":{"type":"object","properties":{"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"통계 집계 대상을 특정 토픽으로 한정할 때 사용."},{"type":"null","format":"uuid","description":"통계 집계 대상을 특정 토픽으로 한정할 때 사용."}],"description":"통계 집계 대상을 특정 토픽으로 한정할 때 사용."},"period_start_from":{"type":"string","format":"date-time","description":"집계 시작 범위(최소값, inclusive)."},"period_end_to":{"type":"string","format":"date-time","description":"집계 종료 범위(최대값, inclusive)."},"dimension":{"type":"string","description":"집계 차원 구분(예: 'site', 'topic', 'role', 'device_type')."},"segment_value":{"type":"string","description":"세그먼트별 값: 집계 구간을 추가적으로 좁힐 때 사용."},"page":{"type":"integer","description":"페이지 번호(페이지네이션)."},"limit":{"type":"integer","description":"페이지당 최대 결과 수."}},"required":[],"description":"포럼 통계(EngagementStat) 검색 및 분석 필터/페이지 요청 타입.\n\n통계 조회시 dimension, 기간, 토픽, 세그먼트별로 필터/집계가 가능합니다."},"IDiscussionBoardEngagementStat":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"포럼 통계 집계 레코드의 PK(UUID)."},"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"해당 통계가 특정 토픽에 한정되는 경우의 UUID."},{"type":"null","format":"uuid","description":"해당 통계가 특정 토픽에 한정되는 경우의 UUID."}],"description":"해당 통계가 특정 토픽에 한정되는 경우의 UUID."},"period_start":{"type":"string","format":"date-time","description":"통계 산출 시작 시점(포함)."},"period_end":{"type":"string","format":"date-time","description":"통계 산출 종료 시점(포함 또는 정의에 따름)."},"dimension":{"type":"string","description":"통계 집계의 구분 차원 ('site', 'topic', 'role', 'device_type' 등)."},"segment_value":{"type":"string","description":"세그먼트 값 (예: dimension=role 일 경우 'admin'/'moderator' 등)."},"post_count":{"type":"integer","description":"지정 기간/구간 내 집계된 게시글 수."},"comment_count":{"type":"integer","description":"집계 기간 내 전체 댓글(코멘트) 수."},"active_user_count":{"type":"integer","description":"해당 구간의 고유 활성 사용자(MAU/WAU/DAU 등) 수."},"report_count":{"type":"integer","description":"해당 기간/구간 내 접수된 리포트 건수(신고/제재 등)."}},"required":["id","period_start","period_end","dimension","segment_value","post_count","comment_count","active_user_count","report_count"],"description":"토론게시판 분석 및 통계 집계 데이터 상세.\n\n각 레코드는 단일 기간(구간)/차원/세그먼트 조합에 대한 게시글/댓글/유저수/신고건수 집계입니다. Analytics 및 관리 대시보드의 데이터 소스로 활용."},"IDiscussionBoardEngagementStat.ICreate":{"type":"object","properties":{"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"특정 토픽 관련(구간) 통계만 저장할 경우의 대상 토픽 UUID."},{"type":"null","format":"uuid","description":"특정 토픽 관련(구간) 통계만 저장할 경우의 대상 토픽 UUID."}],"description":"특정 토픽 관련(구간) 통계만 저장할 경우의 대상 토픽 UUID."},"period_start":{"type":"string","format":"date-time","description":"집계 기간 시작(포함)."},"period_end":{"type":"string","format":"date-time","description":"집계 기간 끝(포함/정의에 따름)."},"dimension":{"type":"string","description":"통계 기준 구분 ('site', 'topic', 'role', 'device_type' 등 중 하나)."},"segment_value":{"type":"string","description":"세그먼트 값: 예) 'admin', 'member', 구분용 세그먼트."},"post_count":{"type":"integer","description":"해당 기간 내 게시글(글) 총계."},"comment_count":{"type":"integer","description":"해당 기간 내 댓글 총계."},"active_user_count":{"type":"integer","description":"해당 분석기간 내 활성 사용자(고유) 수."},"report_count":{"type":"integer","description":"동일 구간 내 접수된 신고 총계."}},"required":["period_start","period_end","dimension","segment_value","post_count","comment_count","active_user_count","report_count"],"description":"포럼 통계(분석/집계) 신규 생성 요청 타입.\n\n집계 구간, 기준(dim, segment), 통계 항목별(게시글수, 댓글수, 사용자수, 신고수) 값이 모두 요구됩니다. PK는 자동생성."},"IDiscussionBoardEngagementStat.IUpdate":{"type":"object","properties":{"topic_id":{"oneOf":[{"type":"string","format":"uuid","description":"(선택) 통계 집계 대상 토픽(조정/수정시)."},{"type":"null","format":"uuid","description":"(선택) 통계 집계 대상 토픽(조정/수정시)."}],"description":"(선택) 통계 집계 대상 토픽(조정/수정시)."},"period_start":{"type":"string","format":"date-time","description":"수정될 통계 집계 기간 시작(포함)."},"period_end":{"type":"string","format":"date-time","description":"수정될 집계 기간 종료(포함/정의에 따름)."},"dimension":{"type":"string","description":"통계 기준 구분 업데이트."},"segment_value":{"type":"string","description":"(선택) 세그먼트 값."},"post_count":{"type":"integer","description":"수정시 새로운 게시글 총계."},"comment_count":{"type":"integer","description":"수정시 새로운 댓글 총계."},"active_user_count":{"type":"integer","description":"수정시 활성 사용자 총계."},"report_count":{"type":"integer","description":"수정시 신고 건수."}},"required":[],"description":"토론게시판 통계/집계 레코드의 수정/수정 요청 데이터 타입입니다.\n\n대상 엔티티는 경로(engagementStatId 등)에서 지정. 수정하고자 하는 필드만 선택적으로 포함."}}}}
{
  "files": [
    {
      "filename": "schema-01-attendance_core.prisma",
      "namespace": "AttendanceCore",
      "models": [
        {
          "name": "attendance_teacher",
          "description": "[Teacher Entity] - Implements the teacher role (02_attendance_user_roles.md 3.1, 3.4). Core info for faculty with attendance management privileges. Strict 3NF: atomic, normalized, all references via FKs, with audit and unique constraints for email, and TPT-style auth reference.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique teacher identifier. Used for all references/joins."
          },
          "foreignFields": [
            {
              "name": "school_id",
              "type": "uuid",
              "description": "[School Foreign Key] - Links to attendance_school. 3NF, required.",
              "nullable": false,
              "unique": false,
              "relation": {
                "name": "school",
                "targetModel": "attendance_school"
              }
            },
            {
              "name": "auth_account_id",
              "type": "uuid",
              "description": "[Auth Account FK] - 1:1 with attendance_auth_account. Role/account separation for security.",
              "nullable": false,
              "unique": true,
              "relation": {
                "name": "auth_account",
                "targetModel": "attendance_auth_account"
              }
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[Teacher Name] - Atomic, normalized. No derived values.",
              "nullable": false
            },
            {
              "name": "email",
              "type": "string",
              "description": "[Teacher Email] - Unique contact, atomic, not calculated.",
              "nullable": false
            },
            {
              "name": "phone",
              "type": "string",
              "description": "[Phone] - Direct contact, fully normalized.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created At] - Record creation timestamp for audit.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Updated At] - Modification timestamp for audit.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "email"
              ],
              "unique": true,
              "description": "Teacher email must be unique."
            },
            {
              "fieldNames": [
                "auth_account_id"
              ],
              "unique": true,
              "description": "Strict 1:1 mapping to auth account."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "school_id",
                "name"
              ],
              "description": "(Composite) Teacher list/query by school/name."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_student",
          "description": "[Student Entity] - Implements the normalized student role (02_attendance_user_roles.md 3.2). Only atomic fields and foreign keys. Never use derived or denormalized student statistics in this table.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique student identifier."
          },
          "foreignFields": [
            {
              "name": "school_id",
              "type": "uuid",
              "description": "[School Foreign Key] - Reference to attendance_school. Required, 3NF.",
              "nullable": false,
              "unique": false,
              "relation": {
                "name": "school",
                "targetModel": "attendance_school"
              }
            },
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "[Classroom Foreign Key] - Student's assigned class. 3NF, required.",
              "nullable": false,
              "unique": false,
              "relation": {
                "name": "classroom",
                "targetModel": "attendance_classroom"
              }
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "[Parent Foreign Key] - Many students:one parent. Nullable for orphans/imports.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "parent",
                "targetModel": "attendance_parent"
              }
            },
            {
              "name": "auth_account_id",
              "type": "uuid",
              "description": "[Auth Account FK] - 1:1 mapping to attendance_auth_account. No duplication.",
              "nullable": false,
              "unique": true,
              "relation": {
                "name": "auth_account",
                "targetModel": "attendance_auth_account"
              }
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[Student Name] - Atomic. Do not concatenate or calculate.",
              "nullable": false
            },
            {
              "name": "gender",
              "type": "string",
              "description": "[Gender] - Normalized, atomic string field (\"male\"/\"female\").",
              "nullable": false
            },
            {
              "name": "birthdate",
              "type": "datetime",
              "description": "[Birthdate] - ISO datetime, atomic, not aggregated. For stats/age calc elsewhere.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created At] - Student record timestamp for audits.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Updated At] - Audit timestamp for record changes.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "auth_account_id"
              ],
              "unique": true,
              "description": "1:1 mapping to login record."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "school_id",
                "classroom_id"
              ],
              "description": "Composite: optimize roster/queries by class/school."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_parent",
          "description": "[Parent Entity] - Implements the guardian/parent role (02_attendance_user_roles.md 3.3). All data atomic, no denormalization. Parent mapped to one or more students, with atomic contact and strict FK for login account.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Parent/guardian identity, referenced by students."
          },
          "foreignFields": [
            {
              "name": "auth_account_id",
              "type": "uuid",
              "description": "[Auth Account FK] - 1:1 parent authentication mapping.",
              "nullable": false,
              "unique": true,
              "relation": {
                "name": "auth_account",
                "targetModel": "attendance_auth_account"
              }
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[Parent Name] - Guardian full name, atomic.",
              "nullable": false
            },
            {
              "name": "email",
              "type": "string",
              "description": "[Email] - Unique, atomic for notifications.",
              "nullable": false
            },
            {
              "name": "phone",
              "type": "string",
              "description": "[Phone] - Direct, atomic for alerts/SMS.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created At] - Audit for addition/linkage.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Updated At] - Info change audit.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "email"
              ],
              "unique": true,
              "description": "Parent email must be unique."
            },
            {
              "fieldNames": [
                "auth_account_id"
              ],
              "unique": true,
              "description": "One-to-one mapping to auth account."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "phone"
              ],
              "description": "Query optimization by phone."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_admin",
          "description": "[Admin Entity] - Implements the administrator/official/inspector (02_attendance_user_roles.md 3.4/3.5). All info atomic/normalized. Reference to school is nullable to allow super-admins. Strict 1:1 login account linkage.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique admin/official identifier."
          },
          "foreignFields": [
            {
              "name": "school_id",
              "type": "uuid",
              "description": "[School Foreign Key] - Admin's school/responsibility. Nullable for system/global admin.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "school",
                "targetModel": "attendance_school"
              }
            },
            {
              "name": "auth_account_id",
              "type": "uuid",
              "description": "[Auth Account FK] - 1:1 with attendance_auth_account. Required for audit integrity.",
              "nullable": false,
              "unique": true,
              "relation": {
                "name": "auth_account",
                "targetModel": "attendance_auth_account"
              }
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[Admin Name] - Atomic, for contact/logging.",
              "nullable": false
            },
            {
              "name": "email",
              "type": "string",
              "description": "[Admin Email] - For contact, atomic, not derived.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created At] - Audit for admin creation.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Updated At] - Audit for admin changes.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "auth_account_id"
              ],
              "unique": true,
              "description": "Admin-account 1:1 mapping."
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "attendance_school",
          "description": "[School Entity] - Implements school/unit reference (design intro & anchor table). Atomic fields for school identification/address, used as FK for other entities. Never contains denormalized stats.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - School identifier."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[School Name] - Atomic, normalized for directory/search.",
              "nullable": false
            },
            {
              "name": "address",
              "type": "string",
              "description": "[School Address] - Complete address, atomic single field.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created At] - School record creation, audit only.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "name",
                "address"
              ],
              "unique": true,
              "description": "No duplicate school/address pair."
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        },
        {
          "name": "attendance_classroom",
          "description": "[Classroom Entity] - School/class grouping (anchor for rosters, stats). 3NF, atomic: no summary/calculation fields. Lead teacher required via FK for accountability.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Classroom identifier."
          },
          "foreignFields": [
            {
              "name": "school_id",
              "type": "uuid",
              "description": "[School Foreign Key] - 3NF, classroom's school owner.",
              "nullable": false,
              "unique": false,
              "relation": {
                "name": "school",
                "targetModel": "attendance_school"
              }
            },
            {
              "name": "teacher_id",
              "type": "uuid",
              "description": "[Lead Teacher FK] - Responsible teacher. 3NF, required (not derived from class roster).",
              "nullable": false,
              "unique": false,
              "relation": {
                "name": "teacher",
                "targetModel": "attendance_teacher"
              }
            }
          ],
          "plainFields": [
            {
              "name": "name",
              "type": "string",
              "description": "[Classroom Name] - Label for class listing/selection, atomic.",
              "nullable": false
            },
            {
              "name": "grade_level",
              "type": "int",
              "description": "[Grade Level] - Integer grade for grouping/stats. Normalized.",
              "nullable": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Created At] - Classroom creation time.",
              "nullable": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Updated At] - Record update time.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "school_id",
                "name"
              ],
              "unique": true,
              "description": "Class name must be unique within school."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "teacher_id"
              ],
              "description": "Optimize by responsible teacher."
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-02-attendance_auth.prisma",
      "namespace": "AttendanceAuth",
      "models": [
        {
          "name": "attendance_social_account",
          "description": "[OAuth2/Social Account Mapping] - This implements the social login integration requirement from the requirements analysis (see '소셜 로그인 및 사용자 역할별 이용 흐름', '07_attendance_auth_social_login.md').\n\nHandles external identity linkage (Google, Naver, etc.) with strict separation from core attendance/role tables. Maintains full 3NF by storing only atomic fields, no denormalized or computed values. \n\nFor example, when a student logs in with a Google or Naver account, the external provider/user key and internal auth user are mapped here.\n\nKey relationships: Must be connected to attendance_auth_account via auth_account_id. There is no direct connection to role-specific tables (teacher/student/parent/admin) for normalization. Special behaviors: Each (provider, social_id) pair is globally unique, and each auth_account_id may have multiple social accounts for cross-platform linking.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Implements the requirement for system-wide unique identification. Uniquely identifies a single social account link. Atomic, non-derivable, auto-generated UUID.",
            "nullable": false,
            "unique": true
          },
          "foreignFields": [
            {
              "name": "auth_account_id",
              "type": "uuid",
              "description": "[Authentication Account FK] - Links to the local core authentication account that this social account is mapped to. Ensures strict 3NF, never storing redundant user data.",
              "nullable": false,
              "unique": false,
              "relation": {
                "targetModel": "attendance_auth_account",
                "name": "attendance_social_account_auth_account_id",
                "onDelete": "Cascade"
              }
            }
          ],
          "plainFields": [
            {
              "name": "provider",
              "type": "string",
              "description": "[Social Provider Name] - Implements the '인증 제공자 종류' requirement. Stores provider key (e.g. 'google', 'naver', 'kakao'). Only atomic provider keys, never human readable names.",
              "nullable": false,
              "unique": false
            },
            {
              "name": "social_id",
              "type": "string",
              "description": "[Provider-side User ID] - The unique identity issued by the external provider. Implements the external identity mapping requirement without redundancy, strictly atomic.",
              "nullable": false,
              "unique": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Linkage Timestamp] - Records the link creation UTC time (membership via social account). For evidence, never update or delete, only append new link if needed.",
              "nullable": false,
              "unique": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "provider",
                "social_id"
              ],
              "description": "[Unique Social Account] - Ensures each provider-user_id pair is only linked once in the system.",
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "auth_account_id"
              ],
              "description": "[FK Performance] - For querying all social accounts associated with a base account."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_auth_account",
          "description": "[Authentication Account] - This implements core authentication/account management from multiple requirements (see '소셜 로그인 및 인증 연동 설계', '07_attendance_auth_social_login.md').\n\nPurpose: Represents a single login identity, potentially linked to one or more user roles (student/teacher/parent/admin) but is not itself a 'user' table. Stays in full 3NF by not containing denormalized role or profile data. For example, a parent may have multiple social logins mapped in attendance_social_account but still have one core login account here.\n\nKey relationships: Links to role-specific tables (attendance_teacher, attendance_student, attendance_parent, attendance_admin) via FKs FROM those tables, never the other way. Special behaviors: Email is only used for communication/identification if local login is supported. Soft deletion via deleted_at, never hard delete.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Implements unique identity across all authentication schemas.",
            "nullable": false,
            "unique": true
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "email",
              "type": "string",
              "description": "[Email] - Optional field for local auth/notification. Must be unique if specified. Null for pure social logins.",
              "nullable": true,
              "unique": true
            },
            {
              "name": "password_hash",
              "type": "string",
              "description": "[Password Hash] - Implements local account login. Null for accounts only using social login. Always store hashed, never cleartext.",
              "nullable": true,
              "unique": false
            },
            {
              "name": "created_at",
              "type": "datetime",
              "description": "[Creation Timestamp] - When the authentication account was created. Never updated.",
              "nullable": false,
              "unique": false
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "description": "[Last Updated Time] - For profile info or recovery. Update whenever account details change. For evidence/audit.",
              "nullable": false,
              "unique": false
            },
            {
              "name": "deleted_at",
              "type": "datetime",
              "description": "[Soft Delete Marker] - When account is deactivated/marked deleted. Null = active; non-null = no login permitted. Keeps history for audit evidence.",
              "nullable": true,
              "unique": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "email"
              ],
              "description": "[Email Uniqueness] - Only one account per email if using local (non-social only) auth.",
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "created_at"
              ],
              "description": "[Signup Date Query] - Optimizes reporting on joining activity."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_auth_session",
          "description": "[Session Token Management] - This implements OAuth2 session/static/token management (see 'API 인증 및 권한', '08_attendance_api_design.md').\n\nPurpose: Tracks live/issued authentication sessions (JWTs, scopes, expiration). 3NF by not including calculated/denormalized fields (e.g. profile email, role, permissions).\n\nFor example, upon login, a session token is issued and tracked here, with linkage to auth_account_id. Used for forced invalidation or JWT refresh flows.\n\nKey relationships: Linked to attendance_auth_account via FK, for query of active/inactive sessions per account. Special behaviors: On logoff, session is marked as revoked_at instead of hard deletion for audit chain. \n",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique identifier of the auth session. Required for linking sessions for audit purposes, strict 3NF; atomic.",
            "nullable": false,
            "unique": true
          },
          "foreignFields": [
            {
              "name": "auth_account_id",
              "type": "uuid",
              "description": "[FK: Auth Account] - Links session to login identity. For example, querying all sessions for a given account. Not unique (1:N).",
              "nullable": false,
              "unique": false,
              "relation": {
                "targetModel": "attendance_auth_account",
                "name": "attendance_auth_session_auth_account_id",
                "onDelete": "Cascade"
              }
            }
          ],
          "plainFields": [
            {
              "name": "session_token",
              "type": "string",
              "description": "[Session Token] - Persisted JWT or opaque token. Atomic and strictly not reused in multiple records. Never denormalized profile or calculated data.",
              "nullable": false,
              "unique": true
            },
            {
              "name": "issued_at",
              "type": "datetime",
              "description": "[Issue Time] - UTC creation of the session. Never updated.",
              "nullable": false,
              "unique": false
            },
            {
              "name": "expires_at",
              "type": "datetime",
              "description": "[Expire Time] - When the token or session is no longer valid. Value set according to OAuth2 flow. Never calculated in table, only stored.",
              "nullable": false,
              "unique": false
            },
            {
              "name": "revoked_at",
              "type": "datetime",
              "description": "[Revoke Time] - Non-null when session is explicitly ended (logout, forced expire, etc.). Null means active session. Do not delete for audit.",
              "nullable": true,
              "unique": false
            },
            {
              "name": "user_agent",
              "type": "string",
              "description": "[User Agent Info] - Optional: Stores string identifying device or client info for session context. Useful for audit. 3NF compliant, atomic field only.",
              "nullable": true,
              "unique": false
            },
            {
              "name": "ip_address",
              "type": "string",
              "description": "[IP Address] - Optional: Source IP of session creation. Needed for anomaly detection, audit. Never stores other calculated network info.",
              "nullable": true,
              "unique": false
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "session_token"
              ],
              "description": "[Session Token Uniqueness] - Ensures each session_token is only assigned to a single session. Required for secure token revocation.",
              "unique": true
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "auth_account_id",
                "issued_at"
              ],
              "description": "[Performance: Auth Account Sessions] - Query all sessions per user, ordered by creation time."
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-03-attendance_attendance.prisma",
      "namespace": "Attendance",
      "models": [
        {
          "name": "attendance_attendance_record",
          "description": "Attendance Record - This implements tracking each student's attendance submission for all required classes/sessions, fulfilling the requirement for verifiable and auditable attendance management as described in the documentation (see attendance check flow, teacher dashboard requirements).\n\nThis table maintains a normalized, atomic log of all individual attendance checks, each with explicit references to students, teachers, classrooms, and attendance codes (if code-based). 3NF is upheld by ensuring all non-key attributes are fully dependent on the attendance record's identity, with no derived or calculated data. Example: Each submission (present, late, absent, leave) with its metadata and linked code is recorded here for query, audit, and reporting.\n\nKey relationships: Links to students (attendance_student), classes (attendance_classroom), teachers (attendance_teacher), attendance methods (attendance_attendance_method), and attendance codes (attendance_attendance_code, optional).\nSpecial behaviors: All changes (corrections, exceptions) result in a new record or a state change, never mutation in place. No duplicate attendance for the same student/session is allowed (enforced by unique index).",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Unique primary key for each attendance record entry. Implements requirement for uniqueness and auditability. Atomic and canonical - no semantic meaning. Example: Used as main reference in logs/audit."
          },
          "foreignFields": [
            {
              "name": "student_id",
              "type": "uuid",
              "description": "Linked attendance_student.id - Which student this record represents. Fulfills the need to query per-student attendance for dashboards, parent notifications, etc. Maintains 3NF by using atomic FK. Always required.",
              "model": "attendance_student",
              "relation": {
                "name": "attendance_attendance_record_student_id_fkey",
                "fields": [
                  "student_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_student"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "Linked attendance_classroom.id - The class/lesson this attendance is for. Implements requirement to support per-class reporting and entrance filtering. Maintains normalized relationships.",
              "model": "attendance_classroom",
              "relation": {
                "name": "attendance_attendance_record_classroom_id_fkey",
                "fields": [
                  "classroom_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_classroom"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "teacher_id",
              "type": "uuid",
              "description": "Linked attendance_teacher.id - Teacher responsible for the attendance check. Needed for audit trails, permission checks, dashboard. Maintains normalized structure.",
              "model": "attendance_teacher",
              "relation": {
                "name": "attendance_attendance_record_teacher_id_fkey",
                "fields": [
                  "teacher_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_teacher"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "method_id",
              "type": "uuid",
              "description": "Linked attendance_attendance_method.id - The method the student used to check attendance (code, QR, manual, API, etc.), realizing the system's need to track how attendance was registered. Required, normalized to support method lookups and stats.",
              "model": "attendance_attendance_method",
              "relation": {
                "name": "attendance_attendance_record_method_id_fkey",
                "fields": [
                  "method_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_attendance_method"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "code_id",
              "type": "uuid",
              "description": "Linked attendance_attendance_code.id (Nullable) - If attendance was submitted using a code, this references the code used, fulfilling the audit and fraud prevention requirement. Optional as not all sessions may use code-based attendance.",
              "model": "attendance_attendance_code",
              "relation": {
                "name": "attendance_attendance_record_code_id_fkey",
                "fields": [
                  "code_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_attendance_code"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "checked_at",
              "type": "datetime",
              "description": "The timestamp when the student checked in (local TZ). Implements need for audit, lateness/absence resolution. Normalized and atomic. Example: Used for attendance time window checks.",
              "nullable": false
            },
            {
              "name": "status",
              "type": "string",
              "description": "Attendance status (e.g., present, late, absent, leave). Implements the business need for granular tracking. Normalized - valid options constrained via application/business layer. Example: 'present', 'late'.",
              "nullable": false
            },
            {
              "name": "exception_reason",
              "type": "string",
              "description": "Free text; optional reason for abnormal status (if any). Ex: \"Sick leave note from parent\". Implements exception tracking requirement as per teacher/admin needs. 3NF: No encoding, just atomic explanatory string.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [
            {
              "name": "uniq_attendance_record_student_classroom_checked_at",
              "fieldNames": [
                "student_id",
                "classroom_id",
                "checked_at"
              ],
              "unique": true,
              "description": "Enforces that a student can only have one attendance record for a classroom at a specific time. Implements deduplication for integrity."
            }
          ],
          "plainIndexes": [
            {
              "name": "idx_attendance_record_status_checked_at",
              "fieldNames": [
                "status",
                "checked_at"
              ],
              "description": "Composite index to support frequent queries: status statistics per time window, real-time queries for present/absent/late distributions."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_attendance_code",
          "description": "Attendance Code - This table realizes the requirement for randomly generated, per-session attendance codes to be distributed by teachers and used by students (see attendance check flow and code-based authentication requirement).\n\nFully normalized: each code record is atomic, generated for only one classroom & session, no extra calculated fields. For example, prevents code reuse and enables auditability.\n\nKey relationships: Linked to classroom (attendance_classroom), teacher (attendance_teacher). Snapshots/audit handled via code log table.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary key. Uniquely identifies each attendance code generated. Atomic, normalized (no semantic encoding)."
          },
          "foreignFields": [
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "FK to attendance_classroom. The class this code is issued for. Required for context, per requirements (teacher dashboard, stats). 3NF compliance: atomic value.",
              "model": "attendance_classroom",
              "relation": {
                "name": "attendance_attendance_code_classroom_id_fkey",
                "fields": [
                  "classroom_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_classroom"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "teacher_id",
              "type": "uuid",
              "description": "FK to attendance_teacher. Teacher who created this code. Needed for audit and fraud prevention (and per teacher dashboard). 3NF by reference.",
              "model": "attendance_teacher",
              "relation": {
                "name": "attendance_attendance_code_teacher_id_fkey",
                "fields": [
                  "teacher_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_teacher"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "code_value",
              "type": "string",
              "description": "Attendance code value (e.g., 'K8F9Z4'). Implements the actual code distributed to students. Constrained at application level (capital alphanum, fixed length per requirement). 3NF - no encoding, atomic.",
              "nullable": false
            },
            {
              "name": "issued_at",
              "type": "datetime",
              "description": "Issuing time (when created by teacher/dash/API). Needed for audit, stats dashboard, validation window. Example: Used for checking code validity period.",
              "nullable": false
            },
            {
              "name": "expires_at",
              "type": "datetime",
              "description": "Timestamp when this code expires and becomes invalid. Business-driven requirement for fraud/liability. No calculation here (which is done at app/backend level).",
              "nullable": false
            },
            {
              "name": "is_active",
              "type": "boolean",
              "description": "Flag set true if code is currently valid, false if expired or revoked. Implements business logic of code lifecycle.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "name": "uniq_attendance_code_classroom_code_value_is_active",
              "fieldNames": [
                "classroom_id",
                "code_value",
                "is_active"
              ],
              "unique": true,
              "description": "No duplicate active codes for same classroom, per fraud prevention & requirement doc."
            }
          ],
          "plainIndexes": [
            {
              "name": "idx_attendance_code_issued_at_expires_at",
              "fieldNames": [
                "issued_at",
                "expires_at"
              ],
              "description": "Support code lookups by time windows (teacher dashboard, code validation)."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_attendance_code_log",
          "description": "Attendance Code Log - Implements the audit/snapshot pattern for attendance code creation and usage. Required for both technical and legal audit (who made, who used, when, and from where), per system requirements for auditability, fraud tracing, and compliance.\n\nEach entry is atomic, attached to a specific attendance code. 3NF compliance ensured by FK and atomic fields; all calculated/aggregated data in materialized view tables only.\n\nKey relationships: Linked to the attendance_attendance_code it logs.\n\nSpecial behavior: Immutable log. New record per event.\nExample usage: Logging all access, creation, use attempts, and state changes to code (issued, used, expired, revoked, etc.).",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "Primary key. Uniquely identifies each code log event. Enables chronological and entity-specific log queries. Atomic pointer."
          },
          "foreignFields": [
            {
              "name": "code_id",
              "type": "uuid",
              "description": "FK to attendance_attendance_code. Exactly which code this event is related to. 3NF: Only FK, no encoding.",
              "model": "attendance_attendance_code",
              "relation": {
                "name": "attendance_attendance_code_log_code_id_fkey",
                "fields": [
                  "code_id"
                ],
                "references": [
                  "id"
                ],
                "targetModel": "attendance_attendance_code"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "event_type",
              "type": "string",
              "description": "Event type (issued, used, expired, revoked, failure, etc.). Implements business need for distinguishing code lifecycle and possible abnormal usage. Normalized and atomic.",
              "nullable": false
            },
            {
              "name": "event_time",
              "type": "datetime",
              "description": "Timestamp for when this event occurred (code creation/use/expire). Needed for indisputable audit. 3NF: atomic time point.",
              "nullable": false
            },
            {
              "name": "actor_id",
              "type": "uuid",
              "description": "UUID of the actor who triggered the event (could be teacher, student, system). Implements actor traceability per audit requirement. Cast/foreign key checks managed at application level, since polymorphic.",
              "nullable": true
            },
            {
              "name": "actor_type",
              "type": "string",
              "description": "Who or what type initiated (teacher, student, admin, system process). Required for full trace. 3NF. Example: 'student'.",
              "nullable": false
            },
            {
              "name": "details",
              "type": "string",
              "description": "Optional free text for contextual event note (e.g.: IP, device info, error trace). Useful for advanced audit/troubleshooting. Null when none.",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "name": "idx_attendance_code_log_code_id_event_time",
              "fieldNames": [
                "code_id",
                "event_time"
              ],
              "description": "Support efficient ordering and querying of code logs per code."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_attendance_method",
          "description": "Attendance Method Master - Implements the normalization of all possible mechanisms by which attendance is recorded, per the requirements to enable dynamic addition/processing of new attendance types without disrupting the core data model and for analytics (teacher dashboard, admin stats).\n\nThis is a static/master data table holding the canonical list of valid attendance check methods (e.g., code input, QR scan, manual teacher entry, API, NFC). 3NF: only atomic fields.\n\nKey relationships: Referenced from attendance_attendance_record for query, UI, and analytics.\nSpecial behaviors: Application layer manages allowed method list and expansion.\nExample: Used to normalize 'method_id' in other tables.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "PK. Canonical ID of the method. Ensures normalization & referential integrity."
          },
          "foreignFields": [],
          "plainFields": [
            {
              "name": "method_name",
              "type": "string",
              "description": "Display label / code for method (e.g. \"CODE\", \"QR\", \"MANUAL\"). Atomic value fulfilling 3NF. Used in UI/config. Example usage: show available methods in teacher dashboard.",
              "nullable": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "Explanation of what this method means or how it works. Fulfills need for self-described method catalog/master table. Example: '6-digit random code input by student on web/mobile.'",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "name": "uniq_attendance_method_method_name",
              "fieldNames": [
                "method_name"
              ],
              "unique": true,
              "description": "Enforces method label uniqueness. No duplicate methods per 3NF."
            }
          ],
          "plainIndexes": [],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-04-attendance_notification.prisma",
      "namespace": "AttendanceNotification",
      "models": [
        {
          "name": "attendance_notification",
          "description": "[Attendance Notification] - This implements requirements from '학부모 알림 서비스', '관리자/교사 실시간 통지', and '학생 출석 이벤트 발생 시 알림 자동 발송' in the requirements document.\n\nThis table acts as the master record for all scheduled or triggered notifications sent to parents, admins, or other interested parties related to attendance events (출석, 지각, 결석, 조퇴, 등). Maintains full 3NF normalization by separating channel-specific, delivery, and logging details to related tables. For example, when a student's attendance is recorded, a record is created here, traceably triggering one or more outbound notifications via allowed channels.\n\nKey relationships: Linked to attendance_notification_channel for channel management, attendance_notification_history for delivery logging, and foreign keys referencing the event source (attendance_record, student, etc.).\nSpecial behaviors: Only stores normalized trigger/event data, never caches actual delivery results—those are kept in the history table.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[PK] - Implements unique identification for each notification event.\nGlobally unique identifier for tracking and referencing attendance-related notifications. Ensures normalization and system-wide traceability.\nFor example, used as a foreign key in notification channels and history records.",
            "isRequired": true,
            "isId": true,
            "isUnique": true
          },
          "foreignFields": [
            {
              "name": "attendance_record_id",
              "type": "uuid",
              "description": "[FK] - Implements linkage to the attendance event that caused this notification.\nLinks back to the student's attendance record so full audit trail is retained.\nFor example, notification references a specific student's daily check-in/absence event.",
              "isRequired": true,
              "relation": {
                "targetModel": "attendance_attendance_record",
                "name": "attendance_record",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "student_id",
              "type": "uuid",
              "description": "[FK] - References attendance_student.\nSpecifies which student this notification relates to. Maintains 3NF by not duplicating student attributes here; join as needed.\nFor example, so parent notifications are correctly directed.",
              "isRequired": true,
              "relation": {
                "targetModel": "attendance_student",
                "name": "student",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "teacher_id",
              "type": "uuid",
              "description": "[FK] - References attendance_teacher.\nWho triggered the event/notification (if applicable). Maintains 3NF by not duplicating teacher details.\nUseful for teacher-determined notifications or exception notes.",
              "isRequired": false,
              "relation": {
                "targetModel": "attendance_teacher",
                "name": "teacher",
                "onDelete": "SetNull"
              },
              "unique": false,
              "nullable": true
            },
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "[FK] - References attendance_classroom.\nFacilitates filtering/group notification by classroom context. Maintains normalization.\nFor example: Notifications related to whole class events.",
              "isRequired": true,
              "relation": {
                "targetModel": "attendance_classroom",
                "name": "classroom",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "event_type",
              "type": "string",
              "description": "[Event Type] - Implements notification event typing.\nEnumerates triggers such as 'present', 'late', 'absent', 'leave'. Maintains normalization by not duplicating status logic elsewhere.\nFor example: 'present' when a student checks in on time.",
              "nullable": false
            },
            {
              "name": "triggered_at",
              "type": "datetime",
              "description": "[Triggered Timestamp] - When this notification event was generated.\nEnsures auditability and sequential event tracking.\nFor example: Record created at the moment attendance is submitted.",
              "nullable": false
            },
            {
              "name": "message_template",
              "type": "string",
              "description": "[Message Template] - Stores the notification template used for this event.\nDoes not store actual sent message (see history table). Maintains normalization.\nFor example: A message like '홍길동 학생이 정상 출석하였습니다.' with placeholders.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "name": "unique_event_per_record",
              "fieldNames": [
                "attendance_record_id",
                "event_type"
              ],
              "unique": true,
              "description": "Ensures that each attendance event triggers only one type of notification per attendance record per event type. For example, cannot notify 'present' for the same attendance twice."
            }
          ],
          "plainIndexes": [
            {
              "name": "event_time_idx",
              "fieldNames": [
                "triggered_at"
              ],
              "description": "For efficient query/filtering of notifications by event occurrence timestamps."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_notification_channel",
          "description": "[Attendance Notification Channel] - Implements requirements for '선호 채널 설정', '알림 방식(앱푸시/SMS/이메일 등) 관리', and '보호자별/학생별 알림 경로 분리 관리' from the requirements document.\n\nThis model manages the available notification delivery channels (push, sms, email, etc.), user-specific preferences, and active/disable settings for outbound messaging. Maintains full 3NF by relating to student, parent, and notification tables without duplicating recipient or contact data.\n\nKey relationships: References student, parent, and notification tables for proper channel delivery. Does not store message delivery results (see history).\nSpecial behaviors: Only the facts about allowed or preferred channels are kept here; status/results are always kept in the history table.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[PK] - Unique identifier for each channel binding.\nEnables reliable foreign key referencing and traceability across the system.\nFor example, maps each channel preference to notifications and history tables.",
            "isRequired": true,
            "isId": true,
            "isUnique": true
          },
          "foreignFields": [
            {
              "name": "student_id",
              "type": "uuid",
              "description": "[FK] - References attendance_student, to route per-student preferences.\nMaintains normalized storage of channel logic without duplicating student or parent info.\nAllows lookups of a student's preferred notification channel.",
              "isRequired": true,
              "relation": {
                "targetModel": "attendance_student",
                "name": "student",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "description": "[FK] - References attendance_parent, maps to legal guardians/recipients.\nFor multi-child parents, allows consolidation of notification channel entries per student.\nDoes not duplicate parent contact—always join on FK.",
              "isRequired": false,
              "relation": {
                "targetModel": "attendance_parent",
                "name": "parent",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": true
            }
          ],
          "plainFields": [
            {
              "name": "channel_type",
              "type": "string",
              "description": "[Channel Type] - Defines the type of channel (app_push, sms, email, etc).\nEnumerates all supported outbound notification patterns. Maintains normalization by not embedding channel behavior.\nFor example: 'app_push', 'sms', 'email'.",
              "nullable": false
            },
            {
              "name": "is_enabled",
              "type": "boolean",
              "description": "[Is Enabled] - Whether this channel is currently active for this (student, parent).\nFor example, app_push can be disabled by parent, sms left enabled.",
              "nullable": false
            },
            {
              "name": "preference_order",
              "type": "int",
              "description": "[Preference Order] - Rank or fallback order for channels when multiple are available.\nLower value = higher priority. Used for automated failover logic.\nFor example, 1 for app, 2 for sms, 3 for email.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [
            {
              "name": "unique_channel_per_parent_student_type",
              "fieldNames": [
                "student_id",
                "parent_id",
                "channel_type"
              ],
              "unique": true,
              "description": "Prevents duplicate channel preference rows for a given (student, parent, channel_type) triplet."
            }
          ],
          "plainIndexes": [
            {
              "name": "enabled_idx",
              "fieldNames": [
                "is_enabled"
              ],
              "description": "Supports fast look-up of all enabled/disabled channel rows across the system."
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_notification_history",
          "description": "[Attendance Notification History] - Implements requirements from '알림 이력 관리', '성공/실패 전송 로그', '관리자/교사 피드백', and '발송 결과 데이터 감시 및 분석' in the requirements document.\n\nThis table logs every actual delivery attempt or result per notification and channel, supporting full audit trails, troubleshooting, analytics, and operational reporting. It enforces full normalization by never duplicating notification or channel info, instead referencing via FKs.\n\nKey relationships: Ties to attendance_notification (event), attendance_notification_channel (route/preference), and provides outcome context for analysis/dashboards.\nSpecial behaviors: Marks full status lifecycle: pending, delivered, failed, retried, etc. Never includes user message bodies, only references templates/notification ids.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[PK] - Uniquely identifies each delivery log entry.\nAllows tracking, troubleshooting, and reporting per notification delivery attempt.\nFor example, one notification can have several attempts/rows per channel.",
            "isRequired": true,
            "isId": true,
            "isUnique": true
          },
          "foreignFields": [
            {
              "name": "notification_id",
              "type": "uuid",
              "description": "[FK] - Links to attendance_notification.\nMatches each history record to the exact event/notification it logs. Maintains strict 3NF.",
              "isRequired": true,
              "relation": {
                "targetModel": "attendance_notification",
                "name": "notification",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": false
            },
            {
              "name": "channel_id",
              "type": "uuid",
              "description": "[FK] - Links to attendance_notification_channel.\nAllows each attempt/result row to be tied to its delivery channel context. Strictly normalized.",
              "isRequired": true,
              "relation": {
                "targetModel": "attendance_notification_channel",
                "name": "channel",
                "onDelete": "Cascade"
              },
              "unique": false,
              "nullable": false
            }
          ],
          "plainFields": [
            {
              "name": "sent_at",
              "type": "datetime",
              "description": "[Sent Timestamp] - Timestamp message was sent or attempted.\nSupports auditability and analytics.",
              "nullable": false
            },
            {
              "name": "delivered_at",
              "type": "datetime",
              "description": "[Delivered Timestamp] - When delivery was confirmed by provider or feedback API.\nMay be null if not delivered.",
              "nullable": true
            },
            {
              "name": "status",
              "type": "string",
              "description": "[Status] - Status of this attempt: 'pending', 'delivered', 'failed', 'retried', etc.\nMaintains normalization by never caching per-notification status elsewhere. Example: 'delivered', 'failed', 'pending'.",
              "nullable": false
            },
            {
              "name": "error_message",
              "type": "string",
              "description": "[Error Message] - Stores provider or system error reason if delivery failed (nullable).\nNever exposes user data. Normalized: no templated message is included.\nFor example, the reported reason by SMS API or system ('invalid phone', 'timeout', etc').",
              "nullable": true
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "name": "status_idx",
              "fieldNames": [
                "status"
              ],
              "description": "For quick query of notifications by delivery status for operations & dashboard."
            },
            {
              "name": "history_sent_at_idx",
              "fieldNames": [
                "sent_at"
              ],
              "description": "Used to filter/sort history by time period for advanced reporting."
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-05-attendance_stats_dashboard.prisma",
      "namespace": "AttendanceStatsDashboard",
      "models": [
        {
          "name": "attendance_stats_daily",
          "description": "[Daily Attendance Statistics] - Implements the requirement for daily classroom and school-level attendance summaries (admin/teacher dashboards, period exports) as described in the requirement analysis.\n\nBusiness purpose: Tracks attendance outcomes (present, late, absent, early leave counts) for each classroom and school for a given day. No detailed student-level data, strictly day-level aggregates only. Maintains 3NF by making sure no per-student details or pre-calculated roll-ups outside the denominated statistics. Used for powering summary dashboards and exportable daily reports for teachers/admins.\n\nKey relationships: FK to classroom (required) and school (required).\nSpecial behaviors: One and only one record per classroom+day. Periodic upsert allowed. No denormalized/cached subrecords.\n\nUsage example: Used in dashboard charts, daily reporting, period-over-period comparisons.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique identifier for this daily classroom/school statistic row. Always atomic, guarantees uniqueness by row."
          },
          "foreignFields": [
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "[Classroom Reference] - FK to classroom. Ensures stats are specific to a classroom, not global. Required.",
              "relation": {
                "name": "classroom",
                "targetModel": "attendance_classroom"
              },
              "nullable": false,
              "unique": false
            },
            {
              "name": "school_id",
              "type": "uuid",
              "description": "[School Reference] - FK to school. Provides option to aggregate/partition stats by institution. Required.",
              "relation": {
                "name": "school",
                "targetModel": "attendance_school"
              },
              "nullable": false,
              "unique": false
            }
          ],
          "plainFields": [
            {
              "name": "day",
              "type": "string",
              "nullable": false,
              "description": "[Target Day] - The date string (YYYY-MM-DD) for this statistics row. Always atomic. For filtering/aggregation."
            },
            {
              "name": "present_count",
              "type": "int",
              "nullable": false,
              "description": "[Present Count] - Number of present students. Must match attendance record aggregation result. No duplication."
            },
            {
              "name": "late_count",
              "type": "int",
              "nullable": false,
              "description": "[Late Count] - Number of late students. Atomic, no duplication."
            },
            {
              "name": "absent_count",
              "type": "int",
              "nullable": false,
              "description": "[Absent Count] - Number of absentees for the day."
            },
            {
              "name": "early_leave_count",
              "type": "int",
              "nullable": false,
              "description": "[Early Leave Count] - Number of students with early leave (if supported), atomic and normalized."
            },
            {
              "name": "created_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Created At Timestamp] - Row creation time (auditing)."
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Updated At Timestamp] - Last modification time (auditing)."
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "classroom_id",
                "day"
              ],
              "unique": true,
              "description": "Uniqueness enforced: one stat row per classroom per day."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "school_id",
                "day"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_stats_student_summary",
          "description": "[Student Period Summary Stats] - Implements the requirement for summary dashboards of student-centric attendance aggregation within teacher/student and risk-detection portals.\n\nBusiness purpose: Tracks per-student attendance statistics per term/period (e.g., a semester or month). Maintains strict normalization: each record is for (student, period), not by day; never duplicates per-attendance details. Used for summary dashboards, risk analysis, student historical queries.\n\nKey relationships: FK to student (required), classroom (required).\nSpecial behaviors: Each summary is (student, period), recomputed on record changes.\n\nUsage example: Answers queries like \"student X, semester 1, present: 27, late: 2, absent: 1\" and populates risk-detection views.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique summary for (student, period)."
          },
          "foreignFields": [
            {
              "name": "student_id",
              "type": "uuid",
              "description": "[Student Reference] - FK to the student. Ensures all stats are per student. Required.",
              "relation": {
                "name": "student",
                "targetModel": "attendance_student"
              },
              "nullable": false,
              "unique": false
            },
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "[Classroom Reference] - FK to the student's main classroom for the period. Required.",
              "relation": {
                "name": "classroom",
                "targetModel": "attendance_classroom"
              },
              "nullable": false,
              "unique": false
            }
          ],
          "plainFields": [
            {
              "name": "period_start",
              "type": "string",
              "nullable": false,
              "description": "[Period Start Date] - First day of aggregation (YYYY-MM-DD, atomic, not nullable)."
            },
            {
              "name": "period_end",
              "type": "string",
              "nullable": false,
              "description": "[Period End Date] - Last day of aggregation (YYYY-MM-DD, atomic, not nullable)."
            },
            {
              "name": "total_present",
              "type": "int",
              "nullable": false,
              "description": "[Total Present] - Days present in period."
            },
            {
              "name": "total_late",
              "type": "int",
              "nullable": false,
              "description": "[Total Late] - Days late in period."
            },
            {
              "name": "total_absent",
              "type": "int",
              "nullable": false,
              "description": "[Total Absent] - Days absent in period."
            },
            {
              "name": "total_early_leave",
              "type": "int",
              "nullable": false,
              "description": "[Total Early Leave] - Days with early leave. Atomic, not nullable."
            },
            {
              "name": "created_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Created At Timestamp] - Row creation time for provenance."
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Updated At Timestamp] - Last modification time for provenance."
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "student_id",
                "period_start",
                "period_end"
              ],
              "unique": true,
              "description": "Uniqueness: one student/period summary row per period."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "classroom_id",
                "period_start",
                "period_end"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_stats_classroom_summary",
          "description": "[Classroom Period Summary Stats] - Implements the class-by-class, per-period aggregate statistics needed for power dashboards, ranking, reporting, and period-based monitoring by admin/teacher.\n\nBusiness purpose: Aggregates attendance statistics for a classroom within a fixed period (e.g. semester, month). Strict normalization: one record per (classroom, period). Powers dashboard summary tables, quick health views, or exports. No per-student duplication inside each summary.\n\nKey relationships: FK to classroom (required), school (required).\nSpecial behaviors: Each record is (classroom, period). Always recalculated from normalized records.\n\nUsage example: Allows, e.g., \"Class 1: Total 80 student-days, Present 75, Late 2, Absent 1, Early Leave 2\" over a semester.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique summary for (classroom, period)."
          },
          "foreignFields": [
            {
              "name": "classroom_id",
              "type": "uuid",
              "description": "[Classroom Reference] - FK to classroom. Required, normalizes aggregation to exact class.\n",
              "relation": {
                "name": "classroom",
                "targetModel": "attendance_classroom"
              },
              "nullable": false,
              "unique": false
            },
            {
              "name": "school_id",
              "type": "uuid",
              "description": "[School Reference] - FK to school. Extra aggregation support for admin, mandatory.",
              "relation": {
                "name": "school",
                "targetModel": "attendance_school"
              },
              "nullable": false,
              "unique": false
            }
          ],
          "plainFields": [
            {
              "name": "period_start",
              "type": "string",
              "nullable": false,
              "description": "[Summary Start Date] - Beginning day of summary period (YYYY-MM-DD)."
            },
            {
              "name": "period_end",
              "type": "string",
              "nullable": false,
              "description": "[Summary End Date] - Final day covered by this period (YYYY-MM-DD)."
            },
            {
              "name": "total_present",
              "type": "int",
              "nullable": false,
              "description": "[Total Present] - Present count for classroom/period."
            },
            {
              "name": "total_late",
              "type": "int",
              "nullable": false,
              "description": "[Total Late] - Late count for classroom/period."
            },
            {
              "name": "total_absent",
              "type": "int",
              "nullable": false,
              "description": "[Total Absent] - Absence count for classroom/period."
            },
            {
              "name": "total_early_leave",
              "type": "int",
              "nullable": false,
              "description": "[Total Early Leave] - Early leave count for class/period."
            },
            {
              "name": "created_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Created At Timestamp] - Creation time for auditing."
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Updated At Timestamp] - Modification time for auditing."
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "classroom_id",
                "period_start",
                "period_end"
              ],
              "unique": true,
              "description": "Uniqueness: only one rollup per classroom, per period."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "school_id",
                "period_start",
                "period_end"
              ]
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_stats_abnormal_log",
          "description": "[Abnormal Attendance Log] - Implements anomaly detection and auditability as required for admin/teacher monitoring and reporting.\n\nBusiness purpose: Records all detected anomalies for a specific attendance record and student. 3NF: strictly FK-driven per event, never duplicates record or student Meta. Supports dashboard lists of \"problematic patterns\" (frequent absentees, suspicious codes), and audit history of handling/resolution per anomaly instance.\n\nKey relationships: FK to attendance record (required), student (required), admin (optional - who flagged/resolved event).\nSpecial behaviors: Multiple logs per attendance. Status field allows open/closed/in_review. All timestamps atomic.\n\nUsage example: Used for daily audit logs, anomaly dashboard widgets, risk analysis features.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary Key] - Unique anomaly log. Each row is a single anomaly instance."
          },
          "foreignFields": [
            {
              "name": "attendance_record_id",
              "type": "uuid",
              "description": "[Attendance Record Reference] - FK to the atom-level attendance record that this anomaly log is attached to.",
              "relation": {
                "name": "record",
                "targetModel": "attendance_attendance_record"
              },
              "nullable": false,
              "unique": false
            },
            {
              "name": "student_id",
              "type": "uuid",
              "description": "[Student Reference] - FK to student involved in anomaly.",
              "relation": {
                "name": "student",
                "targetModel": "attendance_student"
              },
              "nullable": false,
              "unique": false
            },
            {
              "name": "admin_id",
              "type": "uuid",
              "description": "[Admin Reference] - FK to admin who manually tagged/resolved anomaly. Optional (nullable if anomaly unresolved or system-detected only).",
              "relation": {
                "name": "admin",
                "targetModel": "attendance_admin"
              },
              "nullable": true,
              "unique": false
            }
          ],
          "plainFields": [
            {
              "name": "anomaly_type",
              "type": "string",
              "nullable": false,
              "description": "[Anomaly Type] - Label (duplicate, location_mismatch, code_invalid, etc). Required for audit/search. Normalized, not nullable."
            },
            {
              "name": "anomaly_rule",
              "type": "string",
              "nullable": false,
              "description": "[Detection Rule] - Mechanism/rule which detected anomaly (e.g., code reuse, location mismatch, late submission). Not nullable."
            },
            {
              "name": "status",
              "type": "string",
              "nullable": false,
              "description": "[Status] - Workflow: open, closed, in_review. Not nullable. (Enum enforced at business logic.)"
            },
            {
              "name": "occurred_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Detected At] - When this anomaly was first detected. Not nullable."
            },
            {
              "name": "resolved_at",
              "type": "datetime",
              "nullable": true,
              "description": "[Resolved At] - When status changed to closed (nullable)."
            },
            {
              "name": "created_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Log Created At] - Provenance/audit."
            },
            {
              "name": "updated_at",
              "type": "datetime",
              "nullable": false,
              "description": "[Last Updated At] - Audit trail for log changes."
            }
          ],
          "uniqueIndexes": [
            {
              "fieldNames": [
                "attendance_record_id",
                "anomaly_type"
              ],
              "unique": true,
              "description": "No duplicates: one anomaly type per attendance record."
            }
          ],
          "plainIndexes": [
            {
              "fieldNames": [
                "student_id",
                "anomaly_type"
              ]
            }
          ],
          "ginIndexes": []
        }
      ]
    },
    {
      "filename": "schema-06-attendance_audit_log.prisma",
      "namespace": "AttendanceAuditLog",
      "models": [
        {
          "name": "attendance_access_log",
          "description": "[System access logs] - This implements the system access/audit trail requirement from the compliance and security section (admin/authority monitoring, user action logging) in the attendance requirement analysis.\n\nRecords all user and admin access to the attendance system for security audit, compliance, and traceability. This table stores each access event with session/user/account/classroom reference, IP, device, agent, and timestamp. Maintains strict 3NF normalization by storing only atomic log facts.\n\nFor example, used to track every time an admin or teacher accesses a dashboard, or a parent/guardian checks attendance alerts. Used for internal compliance and for audits (e.g. police, educational authorities).\n\nKey relationships: references user-type accounts, classroom (optional), and records detailed metadata of access events.\nSpecial behaviors: immutable row; never update/delete for auditability. May be large/requires archiving/partitioning for long-term retention.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary key] - Implements unique identification for each access event. All access log rows have a globally unique id for audit traceability. Always in the 'id' field for normalization and reference. For example, log line ID for reviewing access history.",
            "nullable": false
          },
          "foreignFields": [
            {
              "name": "teacher_id",
              "type": "uuid",
              "reference": "attendance_teacher",
              "description": "[Teacher reference] - Links access event to teacher role, if performed by a teacher. Null if not relevant. Normalizes who performed the access for auditing by role. For example, a teacher opening the class dashboard. Nullable: admin/parent access.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "teacher",
                "targetModel": "attendance_teacher"
              }
            },
            {
              "name": "student_id",
              "type": "uuid",
              "reference": "attendance_student",
              "description": "[Student reference] - Links access event to student, if performed by a student. Null if not relevant. Maintains normalization by only referencing, never duplicating user data. For example, a student checks their attendance log. Nullable: teacher/parent access.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "student",
                "targetModel": "attendance_student"
              }
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "reference": "attendance_parent",
              "description": "[Parent reference] - Links access event to a parent, if performed by parent/guardian. Null if not relevant. Ensures normalization and distinct role link. For example, a parent viewing notification dashboard. Nullable except for parent access.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "parent",
                "targetModel": "attendance_parent"
              }
            },
            {
              "name": "admin_id",
              "type": "uuid",
              "reference": "attendance_admin",
              "description": "[Admin reference] - If the access was by an admin/authority. Always normalized – records only UUID, never duplicated info. Null if not relevant. For example, an admin reviewing logs. Nullable for non-admin roles.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "admin",
                "targetModel": "attendance_admin"
              }
            },
            {
              "name": "classroom_id",
              "type": "uuid",
              "reference": "attendance_classroom",
              "description": "[Classroom reference] - Optionally links this access to a classroom context if relevant (e.g., teacher opens a class dashboard). Null if not relevant. Maintains strict normalization – never duplicating classroom data, only referencing. For example, viewing attendance for a specific class.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "classroom",
                "targetModel": "attendance_classroom"
              }
            }
          ],
          "plainFields": [
            {
              "name": "ip_address",
              "type": "string",
              "description": "[IP Address] - Captures remote IP address from which the user accessed the system. Implements regulatory and audit requirements for traceability by IP. For example, used in suspicious access investigations. Maintains normalization as atomic string. Non-null.",
              "nullable": false
            },
            {
              "name": "user_agent",
              "type": "string",
              "description": "[User Agent] - User's browser/device client agent string at access time. For device and environment forensics/audit. Maintains normalization by storing the agent string atomically. For example, 'Mozilla/5.0...'. Non-null.",
              "nullable": false
            },
            {
              "name": "device_id",
              "type": "string",
              "description": "[Device ID or fingerprint] - Optionally, the device/fingerprint associated with this access action (if available). Implements device tracking/auditability. Maintains 3NF normalization by being an atomic string. Nullable: not all accesses have unique fingerprint.",
              "nullable": true
            },
            {
              "name": "accessed_at",
              "type": "datetime",
              "description": "[Access timestamp] - The exact timestamp of the access event, in UTC. Implements requirement for access event ordering and full audit trace. Maintains normalization (atomic datetime, non-duplicated). For example, can sort by access time for investigations. Non-null.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "teacher_id",
                "accessed_at"
              ],
              "description": "Query optimization for per-teacher audit trails"
            },
            {
              "fieldNames": [
                "student_id",
                "accessed_at"
              ],
              "description": "Query optimization for per-student audit trails"
            },
            {
              "fieldNames": [
                "parent_id",
                "accessed_at"
              ],
              "description": "For parent audit/delegation reviews"
            },
            {
              "fieldNames": [
                "admin_id",
                "accessed_at"
              ],
              "description": "Auditing admin access time trends"
            },
            {
              "fieldNames": [
                "classroom_id",
                "accessed_at"
              ],
              "description": "Quickly filter by classroom-time activity"
            }
          ],
          "ginIndexes": []
        },
        {
          "name": "attendance_audit_log",
          "description": "[Critical action audit log] - Implements the requirement to keep a secure, normalized record of all key/sensitive actions (modifications, exports, setting changes, account modifications) as cited in admin/authority oversight in requirements.\n\nStores per-event audit logs of entity changes, policy updates, sensitive data accesses, major system exports, and more. Fully normalized (3NF); NO derived data or redundancy, all foreign keys reference atomic records (users, admin, affected classroom or record if relevant).\n\nFor example: an admin changes attendance policy, a teacher bulk-modifies attendance, an export/download of all attendance. Used for security, compliance, and incident response. NEVER stores pre-calculated or denormalized data.\n\nKey relationships: referenced user/admin/parent/teacher (action performer), classroom (if applicable), and atomic log details.\nSpecial behaviors: append-only (never updated/deleted); used for legal and regulatory audits.",
          "material": false,
          "primaryField": {
            "name": "id",
            "type": "uuid",
            "description": "[Primary key] - Uniquely identifies every audit event. Implements atomic row identity for each action. For example, for referencing an audit trail or incident report. Non-null, strictly unique.",
            "nullable": false
          },
          "foreignFields": [
            {
              "name": "teacher_id",
              "type": "uuid",
              "reference": "attendance_teacher",
              "description": "[Teacher reference] - Actor if the action was performed by a teacher. Null otherwise. Maintains normalization, enables per-teacher audits (e.g., edits own students).",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "teacher",
                "targetModel": "attendance_teacher"
              }
            },
            {
              "name": "student_id",
              "type": "uuid",
              "reference": "attendance_student",
              "description": "[Student reference] - Actor if the event was done by a student (e.g., requests own attendance edit). Nullable for other roles/actions. Normalization enforced.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "student",
                "targetModel": "attendance_student"
              }
            },
            {
              "name": "parent_id",
              "type": "uuid",
              "reference": "attendance_parent",
              "description": "[Parent reference] - Actor if audit event performed by parent/guardian (e.g., notification request/view). Nullable for other roles. Maintains 3NF.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "parent",
                "targetModel": "attendance_parent"
              }
            },
            {
              "name": "admin_id",
              "type": "uuid",
              "reference": "attendance_admin",
              "description": "[Admin reference] - Used if the audit event was performed by admin/authority. Null for non-admin. Maintains normalized structure (FK linkage, role separation).",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "admin",
                "targetModel": "attendance_admin"
              }
            },
            {
              "name": "classroom_id",
              "type": "uuid",
              "reference": "attendance_classroom",
              "description": "[Classroom reference] - Links to classroom context if the event relates to a classroom (e.g., attendance export, bulk policy change). Nullable if not relevant. Normalization via FK only.",
              "nullable": true,
              "unique": false,
              "relation": {
                "name": "classroom",
                "targetModel": "attendance_classroom"
              }
            }
          ],
          "plainFields": [
            {
              "name": "event_type",
              "type": "string",
              "description": "[Event type] - Describes the kind of action being audited: e.g. 'attendance_edit', 'policy_update', 'data_export', etc. Implements requirement for granular action logs. Fully normalized as atomic string, reinforced by documentation/examples but not enums (for extensibility). E.g.: 'policy_update', 'student_added', 'bulk_export'.",
              "nullable": false
            },
            {
              "name": "action_details",
              "type": "string",
              "description": "[Action details] - Atomic short/medium text description of the action performed. E.g., 'Updated attendance for 3B class 2025-07-09', or info about export/file path/policy json. Implements transparency and accountability requirement. Normalized (not JSON, not aggregate); if detailed object, store as reference elsewhere.",
              "nullable": false
            },
            {
              "name": "success",
              "type": "boolean",
              "description": "[Action result flag] - Indicates if the critical action completed successfully (true/false). Implements requirement to track failed attempts and all audit flows. Maintains normalization. For example, 'false' if export failed due to permission error.",
              "nullable": false
            },
            {
              "name": "failed_reason",
              "type": "string",
              "description": "[Failure reason] - Supplies additional description or code for failure event IF (and only if) the action failed. Nullable for success, non-null if success==false. 3NF with atomic narrative for compliance. For example, 'Permission denied'. Null if not failed.",
              "nullable": true
            },
            {
              "name": "audited_at",
              "type": "datetime",
              "description": "[Audit event timestamp] - Exact UTC datetime event was logged. Implements requirement for chronological forensic trail of critical actions. Maintains normalization; for example, used in timeline incident investigations.",
              "nullable": false
            }
          ],
          "uniqueIndexes": [],
          "plainIndexes": [
            {
              "fieldNames": [
                "admin_id",
                "audited_at"
              ],
              "description": "Admin authority audit reviews"
            },
            {
              "fieldNames": [
                "teacher_id",
                "audited_at"
              ],
              "description": "Teacher critical action queries"
            },
            {
              "fieldNames": [
                "parent_id",
                "audited_at"
              ],
              "description": "Parent-side audit review"
            },
            {
              "fieldNames": [
                "event_type",
                "audited_at"
              ],
              "description": "Action/event type filtering for security dashboard"
            }
          ],
          "ginIndexes": []
        }
      ]
    }
  ]
}
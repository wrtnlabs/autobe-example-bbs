import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IUserRole } from "../../../api/structures/IUserRole";
import { IPageIUserRole } from "../../../api/structures/IPageIUserRole";

@Controller("/core/userRoles")
export class CoreUserrolesController {
  /**
   * Create a new user role (core.userRoles table).
   *
   * Creates a new user role based on the schema structure, with fields for
   * name (label) and description. Enforces the uniqueness of the role name
   * and ensures all required information is provided, following the comments
   * and requirements detailed in the Prisma schema.
   *
   * Intended for administrator setup or customization of new permission
   * levels. Errors are sent in case of duplicate names, missing fields, or
   * insufficient permissions. Successful creation returns the new user role
   * record, suitable for immediate assignment to users.
   *
   * Related endpoints: list (PATCH), single GET, update (PUT), and delete
   * (DELETE) for user roles.
   *
   * @param body New user role details, including name and description.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async post(
    @TypedBody()
    body: IUserRole.ICreate,
  ): Promise<IUserRole> {
    body;
    return typia.random<IUserRole>();
  }

  /**
   * List and filter user roles (core.userRoles table).
   *
   * This operation returns a paginated list of user roles available to
   * assign, as defined by the user_roles model. Roles govern permissions
   * across the board (e.g., member, moderator, administrator). Designed for
   * use in registration processes, admin dashboards, or role management
   * panels, enabling filtering by role name or description and ordering of
   * results.
   *
   * Data returned is defined strictly by the Prisma model and schema
   * comments. This operation is auditable and respects business constraints
   * on who may view/assign roles. Related endpoints: single role GET, create
   * (POST), update (PUT), and delete (DELETE).
   *
   * Error cases (e.g., forbidden access) are handled with appropriate status
   * codes. Pagination and search parameters maximize usability and
   * efficiency, especially for large deployments with custom roles.
   *
   * @param body Filter, search, and pagination info for user roles listing.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async patch(
    @TypedBody()
    body: IUserRole.IRequest,
  ): Promise<IPageIUserRole> {
    body;
    return typia.random<IPageIUserRole>();
  }

  /**
   * Get a single user role's details (core.userRoles table).
   *
   * Retrieves all details for a single user role, specified by ID. Used in
   * admin panels to display all properties of a role, or in account
   * registration to inform users about the meaning and permissions of each
   * role (as described in schema comments: name, description, etc).
   *
   * Respects all business rules regarding role assignment and application.
   * Related endpoints: list (PATCH), creation (POST), update (PUT), delete
   * (DELETE). Errors for missing roles or unauthorized actions are handled
   * gracefully, with clear messaging.
   *
   * @param id Target role's ID (UUID).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async getById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IUserRole> {
    id;
    return typia.random<IUserRole>();
  }

  /**
   * Edit label/description for a user role (core.userRoles table).
   *
   * Updates an existing user role's properties (name and/or description).
   * Uniqueness of the name is enforced by Prisma schema rules. Typical in
   * systems where additional roles/policies are introduced or for correcting
   * role definitions.
   *
   * Only administrators are permitted to update roles. Change history is
   * tracked and any update is reflected in audit fields. Related endpoints:
   * detail GET, list PATCH, creation POST, and deletion DELETE for user
   * roles.
   *
   * Any errors due to duplicates, forbidden edits, or missing records
   * generate suitable error codes in response. Endpoint matches structure and
   * intentions described in requirements and schema comments.
   *
   * @param id Target role's ID (UUID).
   * @param body New values for user role fields (name/description).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async putById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IUserRole.IUpdate,
  ): Promise<IUserRole> {
    id;
    body;
    return typia.random<IUserRole>();
  }

  /**
   * Delete a user role from the system (core.userRoles table).
   *
   * Deletes a user role identified by its ID. Enforces business and schema
   * rules about which roles can be deleted (e.g., prevents deletion of
   * critical roles if protected by business logic). If the role is in use
   * (referenced by users), operation will fail with a clear error message.
   *
   * Administrative rights are required. Detailed audit trails are maintained
   * for changes. Related endpoints: create (POST), list (PATCH), update
   * (PUT), detail (GET). All operations match Prisma schema and requirements.
   * Appropriate handling is provided for not found, forbidden, or dependency
   * errors.
   *
   * @param id Target role's ID (UUID).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async eraseById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IUserRole.IDeleteResponse> {
    id;
    return typia.random<IUserRole.IDeleteResponse>();
  }
}

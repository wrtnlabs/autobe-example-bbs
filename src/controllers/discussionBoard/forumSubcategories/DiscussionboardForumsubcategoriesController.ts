import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IDiscussionBoardForumSubcategory } from "../../../api/structures/IDiscussionBoardForumSubcategory";
import { IPageDiscussionBoardForumSubcategory } from "../../../api/structures/IPageDiscussionBoardForumSubcategory";

@Controller("/discussionBoard/forumSubcategories")
export class DiscussionboardForumsubcategoriesController {
  /**
   * Create a new forum subcategory (discussion_board_forum_subcategory).
   *
   * This POST operation allows authorized users (typically admins or
   * moderators) to create a new forum subcategory, supporting organizational
   * requirements for hierarchical topic management in the discussion board.
   * The request body maps to 'IDiscussionBoardForumSubcategory.ICreate' and
   * must include referenced forum_category_id, subcategory name, and optional
   * description. The operation enforces normalization and referential
   * integrity by ensuring the 'forum_category_id' exists and the subcategory
   * name is unique within its parent. On success, the operation returns the
   * created subcategory record, including audit info. Validation errors
   * (e.g., duplicate name, missing category) result in suitable errors.
   * Business logic follows the Prisma schema's design for atomic, normalized
   * values and audit timestamps.
   *
   * @param connection
   * @param body Data for creating a new forum subcategory
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async post(
    @TypedBody()
    body: IDiscussionBoardForumSubcategory.ICreate,
  ): Promise<IDiscussionBoardForumSubcategory> {
    body;
    return typia.random<IDiscussionBoardForumSubcategory>();
  }

  /**
   * List/filter forum subcategories in discussion_board_forum_subcategory.
   *
   * This endpoint queries the discussion_board_forum_subcategory table and
   * returns a paginated list suitable for powering UI navigation, analytics,
   * or administrative subcategory management. Filters may apply to category
   * ID, name, or creation/updated timestamps. Output is pageable and
   * filterable via the request body, and the response uses
   * IPageDiscussionBoardForumSubcategory schema. Related endpoints exist to
   * create, update, read, or delete individual subcategories.
   *
   * @param connection
   * @param body Filtering, search, and pagination info for listing forum
   *   subcategories
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async patch(
    @TypedBody()
    body: IDiscussionBoardForumSubcategory.IRequest,
  ): Promise<IPageDiscussionBoardForumSubcategory> {
    body;
    return typia.random<IPageDiscussionBoardForumSubcategory>();
  }

  /**
   * Get details of a specific forum subcategory
   * (discussion_board_forum_subcategory) by ID.
   *
   * This GET operation provides a detailed view of a single forum
   * subcategory, as defined in the 'discussion_board_forum_subcategory'
   * Prisma table. Each subcategory is uniquely identified by its 'id' (UUID),
   * which must be provided as a path parameter. The API retrieves the
   * metadata of the forum subcategory, including its parent category
   * relationship, name, description, and timestamps for audit and UI display.
   * The endpoint is protected by standard role-based access controls, such
   * that only authorized users, moderators, or admins can retrieve
   * subcategory details. The operation follows Prisma schema best practices:
   * atomic values, soft-delete handling (nullable timestamps), and
   * referential integrity, guaranteeing consistent and reliable data
   * throughout the forum structure. If the specified subcategory is not
   * found, the API returns an appropriate error (such as 404 Not Found).
   *
   * @param connection
   * @param id The UUID of the forum subcategory to retrieve.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async getById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardForumSubcategory> {
    id;
    return typia.random<IDiscussionBoardForumSubcategory>();
  }

  /**
   * Update a forum subcategory (discussion_board_forum_subcategory) by ID.
   *
   * This PUT operation enables modification of forum subcategory details,
   * such as name, description, or forum_category_id. The endpoint is mapped
   * to the 'discussion_board_forum_subcategory' entity, with the target
   * subcategory identified by the 'id' path parameter. The request body
   * ('IDiscussionBoardForumSubcategory.IUpdate') contains only changed fields
   * or a full replacement set, following domain update best practices
   * (atomicity, referential integrity, and audit timestamping). Authorization
   * is enforced; unauthorized attempts will yield errors. Upon success, the
   * response delivers the updated subcategory object for consumption in
   * moderator/admin panels or configuration UIs. The operation guarantees
   * correspondence with the latest normalized schema state.
   *
   * @param connection
   * @param id UUID of the forum subcategory to update.
   * @param body New data for the forum subcategory.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async putById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardForumSubcategory.IUpdate,
  ): Promise<IDiscussionBoardForumSubcategory> {
    id;
    body;
    return typia.random<IDiscussionBoardForumSubcategory>();
  }

  /**
   * Delete a forum subcategory (discussion_board_forum_subcategory) by ID.
   *
   * This DELETE operation authorizes moderators or administrators to remove a
   * subcategory from the forum structure. Path parameter 'id' identifies the
   * subcategory; the system checks for any dependent child threads prior to
   * deletion, returning errors if deletion is blocked by business logic.
   * Deletion is typically a soft-delete (sets 'deleted_at'), complying with
   * auditability requirements. Operation adheres strictly to the Prisma
   * schema for normalized entity handling, ensuring referential integrity.
   * After successful deletion, the response confirms the change, providing
   * either the now-deleted entity or a minimal confirmation object, per
   * response contract.
   *
   * @param connection
   * @param id UUID of the forum subcategory to delete.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async eraseById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardForumSubcategory> {
    id;
    return typia.random<IDiscussionBoardForumSubcategory>();
  }
}

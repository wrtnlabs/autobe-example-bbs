import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IDiscussionBoardUserSession } from "../../../api/structures/IDiscussionBoardUserSession";

@Controller("/discussionBoard/userSessions")
export class DiscussionboardUsersessionsController {
  /**
   * Register a new user or guest session in tracking system.
   *
   * Upon new login or session tracking event, generate a new session record
   * for the actor. Required fields include actor_type, actor_identifier,
   * session_token, and time windows for creation/expiry. This operation
   * ensures that each user or guest receives a unique session entry for
   * authentication and audit purposes.
   *
   * Proper usage mandates that only legitimate system or platform logic can
   * create session recordsâ€”either as part of the login flow or to establish
   * session analytics. No personally identifiable information outside those
   * fields defined in the schema is recorded here.
   *
   * @param connection
   * @param body Session details for creation of the new user/guest session.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IDiscussionBoardUserSession.ICreate,
  ): Promise<IDiscussionBoardUserSession> {
    body;
    return typia.random<IDiscussionBoardUserSession>();
  }
}

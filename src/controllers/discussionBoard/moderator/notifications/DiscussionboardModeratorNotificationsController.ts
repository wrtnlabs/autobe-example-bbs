import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IDiscussionBoardNotification } from "../../../../api/structures/IDiscussionBoardNotification";

@Controller("/discussionBoard/moderator/notifications")
export class DiscussionboardModeratorNotificationsController {
  /**
   * Create a new notification event (discussion_board_notifications table).
   *
   * Registers a new notification in the discussion_board_notifications table.
   * Input must provide the recipient member ID, message content, type (e.g.,
   * reply, system, mention), delivery status, and any optional context
   * (subscription link, target entity info).
   *
   * Security context: Only admins, moderators, or automated systems are
   * authorized to deliver notifications directly. Audit logs track who/what
   * originated the notification, and improper access will be denied.
   *
   * Related APIs: GET/PATCH for notification retrieval; PUT for updating
   * delivery/read status; DELETE to remove notifications (e.g., manual admin
   * cleanup).
   *
   * @param connection
   * @param body Information for creating the notification event
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IDiscussionBoardNotification.ICreate,
  ): Promise<IDiscussionBoardNotification> {
    body;
    return typia.random<IDiscussionBoardNotification>();
  }
}

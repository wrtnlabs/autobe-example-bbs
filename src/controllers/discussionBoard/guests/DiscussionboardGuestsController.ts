import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IDiscussionBoardGuest } from "../../../api/structures/IDiscussionBoardGuest";

@Controller("/discussionBoard/guests")
export class DiscussionboardGuestsController {
  /**
   * Create and track a new guest session entry.
   *
   * Register a new guest session. This operation stores a new record for an
   * anonymous user visit, typically when the system generates a new session
   * identifier for tracking and analytics. Required details include the
   * session_identifier, first and last seen timestamps (usually identical at
   * creation), and the initial data as defined by the schema.
   *
   * This call is generally made automatically by frontend or middleware code
   * that wishes to track unique visits and analyze guest behavior. Although
   * no personal information is stored, this route should be protected from
   * abuse (e.g., bot traffic inflating analytics).
   *
   * Field definitions are strictly those from the discussion_board_guests
   * model in the Actors schema.
   *
   * @param connection
   * @param body Session information for the new guest.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IDiscussionBoardGuest.ICreate,
  ): Promise<IDiscussionBoardGuest> {
    body;
    return typia.random<IDiscussionBoardGuest>();
  }
}

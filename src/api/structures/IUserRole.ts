import { tags } from "typia";

import { IUser } from "./IUser";

/**
 * Full user role entity, as per user_roles Prisma model. Details all
 * privilege/permission details, assignment context, and required unique
 * properties.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserRole = {
  /**
   * Unique ID for this user role entry.
   *
   * Primary key in user_roles. Required for all entity referencing
   * (assignment, lookup, etc.).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Machine- and human-readable name for the user role, e.g., 'member',
   * 'moderator', or 'administrator'.
   *
   * Must be unique, and required for referential integrity.
   */
  name: string;

  /**
   * Human explanation of what privileges and duties this role holds.
   *
   * Aids in assigning and documenting permissions for users. Required for
   * compliance with admin/business rule traceability.
   */
  description: string;

  /**
   * (For reference/audit) Array of users holding this role. May be omitted if
   * not required at runtime.
   */
  users?: IUser.ISummary[];
};
export namespace IUserRole {
  /**
   * Summary/view version of a user role entity. Contains only essential
   * fields (id, name).
   *
   * Used for responses where full details are unnecessary but reference is
   * required.
   */
  export type ISummary = {
    /**
     * Unique identifier for user role (user_roles.id field).
     *
     * Enforces referential integrity for permission assignments.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Short label name for the user role (e.g., 'member', 'moderator',
     * 'administrator').
     *
     * Used in dropdowns, labels, admin tools. Required and unique per
     * database schema.
     */
    name: string;
  };

  /**
   * List/request filtering schema for user roles table.
   *
   * Supports pagination, keyword search for role management dashboards,
   * registration, and editor widgets.
   */
  export type IRequest = {
    /**
     * Page number for role list pagination. Optional; aligns with IPage
     * best-practice.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Pagination limit for number of roles per page. Defaults to 100 if
     * missing.
     *
     * Standard for IPage APIs.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Keyword filter for role name or description fields. Enables quick
     * role lookup.
     */
    search?: string;
  };

  /**
   * Request schema for creating new user roles.
   *
   * Allows admin tools to set up new permissions/policies in the board, with
   * full business rule auditing.
   */
  export type ICreate = {
    /**
     * Unique name for new role; will become user_roles.name. E.g.,
     * 'moderator', 'editor', or custom label.
     */
    name: string;

    /**
     * Text description covering what the role enables/limits for users
     * assigned to it.
     */
    description: string;
  };

  /**
   * Request schema for editing an existing user role entry.
   *
   * All fields optional; only modified fields must be sent.
   */
  export type IUpdate = {
    /** (Optional) New/updated role name. Must remain unique if updated. */
    name?: string;

    /** (Optional) Update/extend role meaning or allowed actions. */
    description?: string;
  };

  /**
   * Response schema for confirming user role deletion (admin-only).
   *
   * Includes minimal info required for audit logs and error/success
   * reporting.
   */
  export type IDeleteResponse = {
    /**
     * ID of user role entry deleted or marked deleted. For audit and
     * post-delete reference.
     */
    id?: string & tags.Format<"uuid">;

    /**
     * Delete or audit status: e.g., 'deleted', 'archived', 'in use - not
     * deleted'.
     */
    status?: string;
  };
}

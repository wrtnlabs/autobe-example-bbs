import { tags } from "typia";

/**
 * User-specific configuration entity for personal preferences, critical for
 * per-user customization, accessibility, internationalization, and legal
 * compliance with user rights. The Prisma schema’s user_settings table enforces
 * a 1:1 relationship with users, where each record stores all atomic settings
 * per user as required to support UI, accessibility, and notification rules. No
 * calculated or redundant values—each property is directly referenced from
 * schema column commentaries. This type is essential for user dashboards,
 * account management, onboarding flows, and compliance. Ensures retrieval,
 * update, and deletion are precise and auditable, referenced in the
 * requirements for internationalization, privacy, customization, and platform
 * inclusiveness.
 *
 * All properties correspond directly to distinct, atomic Prisma DB columns;
 * each is described in-depth based on original column comments to inform both
 * backend and frontend designers about the settings granularity, compliance
 * requirements, and UI importance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserSettings = {
  /**
   * Primary Key. Unique identifier for user settings record.
   *
   * Referenced from the Prisma schema for the `user_settings` table. Each
   * value is a UUID that uniquely identifies a settings row, ensuring one
   * record per user. Essential for fetching, updating, or deleting a specific
   * user's settings from the database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged user's ID (users.id).
   *
   * Enforces a 1:1 relationship with a real user account, as described in the
   * Prisma schema. Provides referential integrity and supports auditability –
   * for example, ensures personalized settings are correctly tied to an
   * active account. Must always point to a valid user.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * User interface language code (e.g., 'en-US').
   *
   * Implements the internationalization requirement. Allows users to select
   * their preferred UI language, supporting accessibility and localization.
   * The value should conform to valid language tags. Set during user
   * onboarding or later preference updates.
   */
  language: string;

  /**
   * Site theme preference (e.g., 'light', 'dark').
   *
   * Provides accessibility and comfort by letting users switch between
   * themes. Maintains normalization – only stored for the user, not for the
   * whole site. Used for responsive UI and user comfort considerations.
   */
  theme: string;

  /**
   * Serialized notification preferences (JSON string).
   *
   * Implements fine-grained notification control, such as email alerts,
   * mention notifications, digest preferences, etc. The structure is stored
   * as a JSON string to maintain normalization, storing user-specific
   * notification rules without redundancy.
   */
  notification_preferences_json: string;

  /**
   * Serialized accessibility options (JSON string).
   *
   * Facilitates per-user accommodation requirements (e.g., larger fonts,
   * high-contrast mode, custom keyboard navigation). Keeps these preferences
   * as a normalized JSON string. Set by users needing enhanced access.
   */
  accessibility_options_json: string;

  /**
   * Creation timestamp.
   *
   * Records when this settings row was created, supporting audit trails,
   * troubleshooting, or rollback. Always required – never null.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Update timestamp.
   *
   * Tracks the last change made to this user’s settings. Useful for
   * troubleshooting, restoring old preferences, or monitoring rapid changes.
   * Non-null, always kept up-to-date.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IUserSettings {
  /**
   * Search/filtering/pagination definition for requesting user_settings
   * record(s). Applied in admin dashboards or user-side settings panes.
   * Structured in line with standard IPage.IRequest conventions from platform
   * shared types. Maps closely to the Prisma user_settings model for per-user
   * configuration.
   */
  export type IRequest = {
    /**
     * Optional filter to select settings for a specific user by user_id.
     *
     * Enables retrieving settings for a particular user in admin dashboards
     * or per-user management flows.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter for the user's UI language selection.
     *
     * Used in settings management forms or admin audit trails.
     */
    language?: string;

    /** Filter for the user's UI theme preference (e.g., 'light', 'dark'). */
    theme?: string;

    /** (Optional) Retrieve records created after this datetime. */
    created_at_from?: string & tags.Format<"date-time">;

    /** (Optional) Retrieve records created before this datetime. */
    created_at_to?: string & tags.Format<"date-time">;

    /** Pagination: page number to retrieve. */
    page?: number & tags.Type<"int32">;

    /** Pagination: how many records per page. Capped for scalability. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Type for user settings creation. Used in onboarding, registration, and
   * when an admin or user first establishes configuration details linked to
   * their account.
   *
   * Every property is atomic, strictly matching columns in the user_settings
   * Prisma schema. Enforces referential integrity and normalization—ensuring
   * each user can only have one settings row, as per schema and database
   * constraints. Property documentation references column-level requirements
   * and best practices for per-user preference storage. Enforces completeness
   * and integrity at creation time, in line with onboarding and user
   * customization requirements.
   */
  export type ICreate = {
    /**
     * Belonged user's ID. Must match an existing entry in the users table.
     *
     * Referenced for 1:1 relationship enforcement in the Prisma schema.
     * Used when initializing a new user’s account preferences during
     * registration or onboarding. Ensures referential integrity – no
     * settings row can exist without an actual user.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * User interface language code (e.g., 'en-US').
     *
     * Sets the preferred UI language for the user. Established at
     * registration or initial profile setup according to
     * internationalization principles and user needs.
     */
    language: string;

    /**
     * Site theme preference (e.g., 'light', 'dark').
     *
     * Allows users to select preferred site color theme. Supports
     * accessibility and comfort. Normalized at creation to ensure defaults
     * can be set and later updated.
     */
    theme: string;

    /**
     * Serialized notification preferences (JSON string).
     *
     * Stores all user-specific notification settings (frequency, types,
     * channels, etc.) as a JSON string at initialization. Follows the
     * normalization strategy, enabling complex, extensible notification
     * schemas per-user, per requirements.
     */
    notification_preferences_json: string;

    /**
     * Serialized accessibility options (JSON string).
     *
     * Captures settings for enhanced accessibility—screen reader support,
     * high-contrast, font size, etc. Normalized and encoded as JSON for
     * extensibility and compliance.
     */
    accessibility_options_json: string;
  };

  /**
   * Type for updating user settings. Any combination of the supported fields
   * may be provided. All properties are strictly atomic, aligning with the
   * columns of the user_settings table in Prisma. Enables modification of
   * personal preferences as outlined in onboarding, accessibility, and
   * internationalization requirements. Each property directly references its
   * atomic column in the database, borrowing language and best practices from
   * the schema documentation. Critical for account management UIs and
   * compliance with user-driven customization workflows.
   */
  export type IUpdate = {
    /**
     * User interface language code (e.g., 'en-US').
     *
     * Allows users to change their preferred UI language at any point.
     * Handling this update caters to evolving user needs and is central to
     * accessibility and inclusivity requirements from the requirements
     * documentation.
     */
    language?: string;

    /**
     * Site theme preference (e.g., 'light', 'dark').
     *
     * Enables toggling display settings for improved accessibility or
     * preference. Editable by users at any time through settings UI or by
     * admins in compliance/support cases.
     */
    theme?: string;

    /**
     * Serialized notification preferences (JSON string).
     *
     * Updated value reflecting changes in how the user wishes to receive
     * alerts and notifications. Supports evolving user privacy and
     * engagement needs, fulfilling normalization and extensibility from the
     * schema.
     */
    notification_preferences_json?: string;

    /**
     * Serialized accessibility options (JSON string).
     *
     * Allows for modification of accessibility features in response to
     * changes in user needs (e.g., enabling high-contrast mode). Normalized
     * and extensible as JSON.
     */
    accessibility_options_json?: string;
  };
}

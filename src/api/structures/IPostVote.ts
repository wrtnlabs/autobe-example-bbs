import { tags } from "typia";

/**
 * Single upvote or downvote entry for a post, as per voting audit and
 * reputation system described in requirements/Prisma. This is the atomic vote
 * action, not a derived aggregate.
 *
 * Represents individual user participation in post scoring and moderation. Used
 * for reviewing user conduct and calculating overall post score.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPostVote = {
  /**
   * Unique vote record identifier (post_votes.id). Required for
   * evidence/audit and unique user-post vote constraint.
   */
  id: string & tags.Format<"uuid">;

  /** Target post's ID (posts.id ref). The post this vote applies to. */
  post_id: string & tags.Format<"uuid">;

  /**
   * Voting user's ID (users.id ref). Necessary for audit, controlling
   * duplicate votes, and reputation reporting.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Vote direction: true=upvote, false=downvote. Indicates
   * agreement/disagreement and drives post visibility/reputation.
   */
  is_upvote: boolean;

  /**
   * Timestamp event was cast (post_votes.created_at from schema). Enables
   * time-bounded analytics and audit/anti-abuse review.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IPostVote {
  /**
   * Request object for searching or filtering post vote records as per
   * 'post_votes' table and voting audit/analytics needs. Used by PATCH API
   * for admin/mod dashboards, reputation metrics, or fraud review.
   *
   * Allows specifying voters, posts, is_upvote state, and time range filters.
   * Supports bulk review of voting patterns and advanced querying for
   * moderation.
   */
  export type IRequest = {
    /**
     * If provided, filters votes to those cast on a specific post
     * (posts.id).
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Limit or search only votes by a particular user (users.id). Useful
     * for reputation analysis and anti-fraud queries.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * True=upvotes, False=downvotes; restrict to only one direction for
     * search.
     */
    is_upvote?: boolean;

    /**
     * Return only votes cast after this timestamp (for time-bounded
     * search).
     */
    created_after?: string & tags.Format<"date-time">;

    /** Return only votes inserted before this timestamp (audit window). */
    created_before?: string & tags.Format<"date-time">;

    /** Which page of results to return, for pagination. */
    page?: number & tags.Type<"int32">;

    /** How many results per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Outbound payload for creating a new post vote (upvote or downvote).
   * Implements user voting workflows; mapped to post_votes Prisma model.
   *
   * Must specify the target post and vote direction, and authenticating user
   * ID. Used by normal voting UI for all posts/comments.
   */
  export type ICreate = {
    /** Target post (posts.id) to apply the vote to. */
    post_id: string & tags.Format<"uuid">;

    /**
     * Voting user. Only one vote per user per post constraint is enforced
     * at DB/API level.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * True/false: marks as upvote or downvote as per voting system.
     * Requiredâ€”must specify.
     */
    is_upvote: boolean;
  };

  /**
   * Request schema to update an existing post_vote record. Used for user
   * actions on vote direction change (switching upvote<->downvote) or admin
   * corrections as detailed in moderation requirements/Prisma model.
   *
   * Typically, only is_upvote field or audit timestamp is updated for such
   * corrections.
   */
  export type IUpdate = {
    /**
     * Set to new vote direction (true=upvote, false=downvote) as allowed by
     * business logic for user corrections.
     */
    is_upvote: boolean;
  };
}

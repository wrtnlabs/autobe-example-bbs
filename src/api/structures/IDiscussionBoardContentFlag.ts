import { tags } from "typia";

/**
 * Full flag entity for moderation tracking on posts/comments. Maps all atomic
 * detail from Prisma schema table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardContentFlag = {
  /** Primary Key UUID, uniquely identifies the content flag instance. */
  id: string & tags.Format<"uuid">;

  /** ID of the post being flagged. Nullable if flag targets a comment. */
  post_id?: (string & tags.Format<"uuid">) | null;

  /** ID of the comment being flagged. Nullable if flag targets a post. */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /** Moderator actor's UUID who set this flag, if any. */
  flagged_by_moderator_id?: (string & tags.Format<"uuid">) | null;

  /** Admin actor's UUID who set this flag, if any. */
  flagged_by_admin_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Nature/type of the flag, as required by moderation workflow (e.g.,
   * 'spam', 'abuse'). No enum in Prisma, but controlled by business
   * workflow.
   */
  flag_type: string;

  /**
   * Origin/source of the flag: manual, automation, or external system(s).
   * Used for workflow/audit segmentation.
   */
  flag_source: string;

  /**
   * Additional moderation notes/context for the flag. Optional, for complex
   * cases or compliance.
   */
  flag_details?: string | null;

  /** Timestamp when flag was created. Required per Prisma and audit logging. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the moderation flag was cleared or resolved (null if still
   * active). Used for audit/historical tracking.
   */
  cleared_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardContentFlag {
  /**
   * Filter/search request type for paginated or filtered queries of content
   * flags in moderation review workflows.
   */
  export type IRequest = {
    /** Numeric page number for pagination (1-based indexing). Optional. */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Maximum number of items to return per page. Used for result size
     * control.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Nature of flag (e.g., 'spam', 'abuse', 'automation', 'duplicate').
     * Used for flag type filtering.
     */
    flag_type?: string | null;

    /**
     * Source/origin of flag, e.g. 'manual', 'automation', 'external'.
     * Filterable field.
     */
    flag_source?: string | null;

    /**
     * Moderator actor's UUID for filtering flags created by a specific
     * moderator.
     */
    flagged_by_moderator_id?: (string & tags.Format<"uuid">) | null;

    /** Admin actor's UUID for filtering flags created by a specific admin. */
    flagged_by_admin_id?: (string & tags.Format<"uuid">) | null;

    /** UUID for searching flags that target a specific post. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** UUID for flags attached to a specific comment. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Start range for creation date, used in time-window queries. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** End range for creation date, used in time-window queries. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /**
     * Filter for currently active (not cleared) or historical (cleared)
     * flags. True=only cleared, false=active, null=all.
     */
    cleared?: boolean | null;
  };

  /**
   * Request/DTO type for creating a new flag on a post or comment. Accepts
   * all mutable metadata fields and target pointers. Required fields flagged
   * in the business rules.
   */
  export type ICreate = {
    /** Target post's UUID if flag is on a post. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Target comment's UUID if flag is on a comment. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Moderator actor's UUID, if flag is being created by a moderator. */
    flagged_by_moderator_id?: (string & tags.Format<"uuid">) | null;

    /** Admin actor's UUID, if flag is set by admin. */
    flagged_by_admin_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Required. The type of the flag indicating moderation concern (e.g.,
     * 'spam', 'abuse').
     */
    flag_type: string;

    /**
     * Required. The source/origin of the flag (manual, automation, external
     * system, etc.).
     */
    flag_source: string;

    /**
     * Optional details or notes from moderators or automated system at
     * creation.
     */
    flag_details?: string | null;
  };

  /**
   * Mutable/modifiable attributes of a content flag for auditing, compliance,
   * and moderation workflows. Completes the CRUD structures for the
   * moderation flag schema.
   */
  export type IUpdate = {
    /**
     * Update the flag to target a different post. Nullable, used in
     * edge-case workflow corrections.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Update the flag to target a different comment. Nullable, only set if
     * updating relationship.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Update the moderator who owns the flag, if reassignment is needed for
     * audit/compliance.
     */
    flagged_by_moderator_id?: (string & tags.Format<"uuid">) | null;

    /** Update the admin user responsible for this flag, if needed. */
    flagged_by_admin_id?: (string & tags.Format<"uuid">) | null;

    /** Update the type of flag, per moderation workflow escalation. */
    flag_type?: string | null;

    /**
     * Update source of the flag (for reclassification: manual to
     * automation, etc.).
     */
    flag_source?: string | null;

    /** Update moderation notes or context for this flag. */
    flag_details?: string | null;

    /**
     * Set or update timestamp for flag clearance (null if active, datetime
     * if resolved).
     */
    cleared_at?: (string & tags.Format<"date-time">) | null;
  };

  /** Summary of a content flag for listing/indexing/audit UI. */
  export type ISummary = {
    /** Unique UUID for the content flag */
    id: string & tags.Format<"uuid">;

    /** Type of the flag (for summary lists) */
    flag_type: string;

    /** Source of the flag (manual/automation) */
    flag_source: string;

    /** Time the flag was created */
    created_at: string & tags.Format<"date-time">;
  };
}

import { tags } from "typia";

/**
 * Represents an individual search history record in the discussion board
 * platform. Aligns closely with the normalized structure in the
 * discussion_board_search_histories table. Records the search event, actor,
 * parameters, and timing.
 *
 * Referenced by analytics, account review, personalization, and moderation
 * features.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSearchHistory = {
  /**
   * Unique identifier for this search history record. Used as the primary key
   * and for joining/querying details.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the guest or member who performed the search. Enforces audit,
   * analytics, and compliance requirements.
   */
  actor_id: string & tags.Format<"uuid">;

  /**
   * The keyword(s) inputted for the search event. Reflects the search's main
   * query string. Required, atomic, non-derived.
   */
  keyword: string;

  /**
   * Serialized (JSON/string) filter object used for the search. Represents
   * structured search filters (e.g., tag/category/date). Null if simple
   * keyword only.
   */
  filters?: string | null;

  /**
   * Optional string indicating the context of this search (e.g., which board
   * UI or page originated the search). Null means unscoped context.
   */
  search_context?: string | null;

  /**
   * Timestamp (ISO 8601) when the search was performed. Supports analytics,
   * audit, and sorting.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardSearchHistory {
  /**
   * Request query body for listing/filtering/paginating search histories.
   * Supports advanced analytics, user search review, and UX enhancement.
   *
   * Fields allow filtering by keyword, actor ID, context, or date range. Used
   * primarily by admins/moderators for review or by users for their own
   * history. This schema is referenced for endpoints that require complex
   * filter/search/pagination for search history records.
   */
  export type IRequest = {
    /**
     * Optional page number for pagination. If omitted or null, defaults to
     * first page.
     */
    page?: (number & tags.Type<"int32">) | null;

    /** Optional page size for pagination. Defaults to 100 if not specified. */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Filter history items by keywords entered in past searches. Supports
     * partial and multi-keyword matching. Null for no filtering.
     */
    keyword?: string | null;

    /**
     * Filter by search actor (user or guest) UUID. Useful for
     * reviewing/searching a particular user's or guest's history. Null for
     * no filter.
     */
    actor_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Context field for scoping search history, such as 'thread_list',
     * 'homepage', etc. Useful in analytics and auditing.
     */
    search_context?: string | null;

    /**
     * Filter for search history created after this date (inclusive). ISO
     * 8601 format. Null if not filtering by starting date.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Filter for search history created before this date (inclusive). ISO
     * 8601 format. Null if not filtering by end date.
     */
    created_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Request schema for creating a new Search History event. Used whenever a
   * user or guest performs a board search. Validates required details, and
   * captures all necessary metadata for downstream analytics and audit.
   *
   * All fields map directly to the normalized table columns; only filters and
   * context may be null.
   */
  export type ICreate = {
    /**
     * UUID of the guest or member performing the search. Required for
     * linking search to the correct account/session.
     */
    actor_id: string & tags.Format<"uuid">;

    /**
     * The main search term(s) used in the board query. Must be non-null and
     * represent the query exactly as input by the user/guest.
     */
    keyword: string;

    /**
     * Serialized structured search filter as used in advanced queries
     * (e.g., tag, date, category). Null for basic search.
     */
    filters?: string | null;

    /**
     * Optional indicator of the context where the search was performed
     * (page/ui context/etc). Null for standard/global context.
     */
    search_context?: string | null;
  };

  /**
   * Request body for updating an existing search history event. Used by
   * admins or the original actor for correcting search metadata, filter
   * rectification, or compliance adjustments.
   *
   * May only update keyword, filters, or search_context; not
   * id/actor_id/created_at. All updatable fields are optional—supply only
   * those to be changed.
   */
  export type IUpdate = {
    /**
     * Replacement string for the original search keyword(s). Optional—only
     * provide if updating.
     */
    keyword?: string;

    /**
     * Replacement serialized filter object. Null clears the filter;
     * optional when not updating.
     */
    filters?: string | null;

    /**
     * Replacement or update for search context metadata. Optional, null to
     * clear.
     */
    search_context?: string | null;
  };
}

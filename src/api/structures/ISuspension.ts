import { tags } from "typia";

/**
 * Represents a record of a user being suspended with full audit and business
 * rule support. Each record is atomic, points to both the affected user and the
 * moderator, documents rationale, and includes start/end timestamps for
 * enforcement.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISuspension = {
  /**
   * Unique identifier for this suspension, as used in all moderation records
   * and audit logs. (suspensions.id, PK)
   */
  id: string & tags.Format<"uuid">;

  /**
   * Target user's UUID. Points to the users table: this user is subject to
   * temporary access restriction. Fulfilled by suspensions.user_id.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Moderator or admin who issued the suspension (suspensions.moderator_id).
   * Used for audit and appeals.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * The full documented rationale for this suspension event, per moderation
   * policy (business rules section: progressive discipline).
   */
  reason: string;

  /**
   * Timestamp for when the suspension begins. Required for all temporary
   * lockout periods (suspensions.start_at).
   */
  start_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for when the suspension expires, after which user regains
   * access. Required (suspensions.end_at).
   */
  end_at: string & tags.Format<"date-time">;
};
export namespace ISuspension {
  /**
   * Search/filter request body for paged queries to suspensions (suspensions
   * table). Implements moderation dashboard and audit/filter functionality.
   * Each field enables a facet of the review process for temporary user
   * lockouts.
   */
  export type IRequest = {
    /**
     * Filter for suspensions targeting a specific user
     * (suspensions.user_id). Optional.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Filter for suspensions issued by a specific moderator
     * (suspensions.moderator_id). Optional.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Start querying only those suspensions beginning after this timestamp.
     * Optional.
     */
    start_after?: string & tags.Format<"date-time">;

    /**
     * Query for suspensions with an end before this timestamp (displays
     * expired suspensions). Optional.
     */
    end_before?: string & tags.Format<"date-time">;

    /**
     * Free-text search within the reason/explanation for suspension to
     * support audit and discovery. Optional.
     */
    reason_q?: string;

    /** Pagination: fetch which page (default 1). */
    page?: number & tags.Type<"int32">;

    /** Pagination: number of records per page (default 100). */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Model for creating a new user suspension in the moderation workflow.
   * Enforces business rules about unique users, timeframe, and moderator
   * accountability.
   */
  export type ICreate = {
    /** User's UUID to suspend. Must correspond to users.id; required. */
    user_id: string & tags.Format<"uuid">;

    /** Moderator/admin issuing the suspension; required. */
    moderator_id: string & tags.Format<"uuid">;

    /** Text reason for the suspension. Required for audit, transparency. */
    reason: string;

    /** Start time for suspension; required. */
    start_at: string & tags.Format<"date-time">;

    /** End time for suspension; required. */
    end_at: string & tags.Format<"date-time">;
  };

  /**
   * Allows updating the rationale or time window for an existing suspension.
   * All actions are logged for audit; only admins/moderators may update.
   */
  export type IUpdate = {
    /** Update rationale for suspension, if needed. */
    reason?: string;

    /** Optionally modify suspension start date/time. */
    start_at?: string & tags.Format<"date-time">;

    /** Optionally modify suspension end date/time. */
    end_at?: string & tags.Format<"date-time">;
  };
}

import { tags } from "typia";

/**
 * Records a moderation warning issued to a specific user by a moderator, as
 * detailed in the user_warnings Prisma table. Each warning is unique, atomic,
 * and auditable, supporting escalation workflows and transparency.
 *
 * Warnings can refer to particular posts or comments, and serve both as a
 * disciplinary step and formal evidence in future moderation (e.g., for
 * suspensions/bans).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserWarning = {
  /**
   * Unique identifier for the user warning record. Used as the primary key
   * for referencing this warning throughout the moderation and audit
   * systems.
   *
   * Drawn from the user_warnings Prisma table (see Moderation ERD).
   */
  id: string & tags.Format<"uuid">;

  /**
   * The ID of the user who has received the warning. Points to the users
   * table (user_warnings.user_id) and implements the business rule that all
   * warnings must be associated with a real, registered user.
   *
   * Links warnings directly to users for moderation review and escalation
   * workflows.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * The ID of the moderator who issued this warning. Relationally references
   * the moderator (users.id) for audit and transparency. Business rules in
   * content/moderation demand that every warning is traceable to a
   * responsible human moderator.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * If applicable, the post (posts.id) which triggered the warning. Optional:
   * set only if the warning is related to a specific post action, fully
   * normalized in the user_warnings Prisma schema.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * If applicable, the comment (comments.id) for which this warning was
   * issued. Optional: only set if the infraction targeted a comment. This
   * maintains strict normalization—no redundant comment data is stored.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Textual rationale as entered by the moderator for why this warning was
   * issued. Enforces the business rule for transparency and evidence: all
   * moderation warnings require a documented reason (user_warnings.reason).
   */
  reason: string;

  /**
   * Timestamp for when this warning was issued (user_warnings.created_at).
   * Fulfills the requirement for moderation workflow auditability.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IUserWarning {
  /**
   * Request object for searching, filtering, paginating lists of user
   * warnings for moderation workflows.
   *
   * All fields directly correspond to normalized columns in the user_warnings
   * schema, and are referenced in requirements for audit, escalation, and
   * evidence tracking.
   */
  export type IRequest = {
    /**
     * Target user's unique ID being warned (referenced by
     * user_warnings.user_id).
     */
    user_id?: string & tags.Format<"uuid">;

    /** The moderator issuing or reviewing the warning. */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Reason text included in the warning; supports filter-by-reason on
     * dashboard.
     */
    reason?: string;

    /**
     * If set, filters by warnings linked to a specific post ID; see
     * user_warnings.post_id.
     */
    post_id?: string & tags.Format<"uuid">;

    /** If set, filters by warnings linked to a comment ID (optional). */
    comment_id?: string & tags.Format<"uuid">;

    /** Earliest issue time for warnings in search. */
    created_at?: string & tags.Format<"date-time">;

    /**
     * Sort order for listing, e.g., '-created_at'. Paginated ascending or
     * descending.
     */
    sort?: string;

    /** Paging: page number. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Paging: number of warnings per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Model for creating a new user warning, as required by moderation control
   * and audit workflow. References target user, moderator, and rationale.
   * Optional links to specific post/comment enable granular evidence
   * linkage.
   */
  export type ICreate = {
    /** UUID of the user to warn. Required. Must reference a valid user. */
    user_id: string & tags.Format<"uuid">;

    /** UUID of the moderator creating the warning. Required. */
    moderator_id: string & tags.Format<"uuid">;

    /** Optional. UUID of a post sparking the warning. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Optional. UUID of a comment sparking the warning. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Full text rationale for the warning. Required as per moderation
     * transparency/policy.
     */
    reason: string;
  };

  /**
   * Update model for a user warning. Allows revision of reason or content
   * links during moderation workflows—auditable field changes only (IDs
   * typically remain constant).
   */
  export type IUpdate = {
    /**
     * (Optional) New or revised rationale for the warning, if clarification
     * is needed during moderation review.
     */
    reason?: string;

    /**
     * (Optional) Update the reference of related post incurring this
     * warning.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * (Optional) Update the reference of related comment incurring this
     * warning.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;
  };
}

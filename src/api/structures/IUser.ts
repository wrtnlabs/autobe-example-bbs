import { tags } from "typia";

import { IUserRole } from "./IUserRole";
import { IPost } from "./IPost";
import { IComment } from "./IComment";
import { IVote } from "./IVote";

/**
 * Full user entity, as per users Prisma schema. Contains all non-confidential
 * account info and relations.
 *
 * Detailed per-table and per-field documentation referenced from schema.
 * Represents user profiles for detail pages and admin/mod tools.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUser = {
  /**
   * Unique internal user ID (users.id). Used system-wide to link all user
   * objects, references, and foreign keys.
   *
   * Required; generated upon account creation and immutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key to user_roles.id; denotes the active permission set (member,
   * moderator, admin, etc).
   *
   * Required at creation; determines access, moderation, and board
   * capabilities.
   */
  user_role_id: string & tags.Format<"uuid">;

  /**
   * Unique public display name; visible to all, and referenced in discussion,
   * voting, and moderation.
   *
   * Database-enforced as unique.
   */
  username: string;

  /**
   * User's email address. Used for login and communication.
   *
   * Never displayed publicly. Must be unique.
   */
  email: string & tags.Format<"email">;

  /**
   * Free-form user biography/self-description.
   *
   * Optional, enhances social context on the board.
   */
  bio?: string | null;

  /**
   * Account creation datetime (with timezone). Used for auditing, ordering,
   * and admin reporting.
   *
   * Immutable.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Most recent profile update timestamp for this user.
   *
   * Updated whenever profile fields are changed.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Current account status (active, suspended, banned, etc.).
   *
   * Enforced per moderation/business rule policies.
   */
  status: string;
  role: IUserRole;

  /**
   * Array of summaries for posts authored by the user (board threads or
   * articles).
   */
  posts?: IPost.ISummary[];

  /** List of summaries for comments made by this user. */
  comments?: IComment.ISummary[];

  /** Summary array of votes cast by the user on posts/comments. */
  votes?: IVote.ISummary[];
};
export namespace IUser {
  /**
   * User list request/filter parameters, supporting pagination, search, and
   * filtering by role or status.
   *
   * Implements board requirements around user management and moderation.
   * Based on database and business rules from Core.users and relevant API
   * operation specs.
   */
  export type IRequest = {
    /**
     * Page number for user list pagination. Optional field, aligns with
     * standard best practices for paginated APIs.
     *
     * Used to retrieve a specific page of user data. Default follows the
     * IPage IRequest definition.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Number of users per page (for pagination). Optional, defaults to 100
     * if unspecified as per IPage specification.
     *
     * Restricts how many user records are returned in each page.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Filter by user role (user_roles.id) to return users with a specific
     * role (e.g., member, moderator, administrator).
     *
     * Helps admins/moderators filter and locate users of a particular type
     * or permission set.
     */
    role?: string & tags.Format<"uuid">;

    /**
     * Filter users by account status (e.g., 'active', 'suspended',
     * 'banned').
     *
     * Enables moderation and administrative user management by quickly
     * finding users in specific states.
     */
    status?: string;

    /**
     * Search string, matches username or email in user list queries.
     *
     * Supports quick filtering of users when searching by identifying
     * fields; case-insensitive partial match.
     */
    search?: string;
  };

  /**
   * Concise user summary as returned in user listing responses. Hides
   * sensitive fields.
   *
   * Includes only public profile, role summary, and status info. Used in
   * paginated user lists and admin/member lookup features.
   */
  export type ISummary = {
    /**
     * User's unique identifier (UUID).
     *
     * Referenced from users.id in the database, required for user profile
     * lookups.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Public username (displayed in the board and visible to all users).
     *
     * Unique and required; serves as the user's main identifier for
     * discussions, voting, and moderation.
     */
    username: string;

    /**
     * Optional user biography; a short self-description or interests
     * section.
     *
     * May be empty; helps other members know basic info about the user.
     */
    bio?: string | null;
    role: IUserRole.ISummary;

    /**
     * Current user account status (e.g., 'active', 'suspended', 'banned').
     *
     * Reflects moderation, login eligibility, and enforcement of platform
     * rules.
     */
    status: string;
  };

  /**
   * Request body schema for new user registration/account creation.
   *
   * All required/optional fields per users model. Password is accepted as
   * clear text but is hashed internally.
   */
  export type ICreate = {
    /**
     * Role assignment for new user; must match user_roles.id. Required at
     * registration. E.g., 'member', 'moderator', or 'administrator'.
     */
    user_role_id: string & tags.Format<"uuid">;

    /**
     * New user's unique public display name. Required, must be unique,
     * visible on the board.
     */
    username: string;

    /**
     * New user's email address. Required for registration, must be unique,
     * never public.
     */
    email: string & tags.Format<"email">;

    /** Optional user bio/about section. May be empty upon registration. */
    bio?: string | null;

    /**
     * User password, plain text at registration. Required; will be securely
     * hashed before storage. Never returned by API.
     */
    password: string;

    /**
     * Initial status for user: normally 'active', but admin can specify
     * e.g., 'pending', 'suspended'.
     */
    status: string;
  };

  /**
   * Request body for updating an existing user profile/account.
   *
   * Only fields supplied are updated; all are optional. Password change is
   * NOT handled here.
   */
  export type IUpdate = {
    /**
     * (Optional) Role update for user. Admin/moderator action only. Must
     * match an existing user_roles.id.
     */
    user_role_id?: string & tags.Format<"uuid">;

    /**
     * (Optional) Update to user's public display name. Must be unique if
     * updated.
     */
    username?: string;

    /**
     * (Optional) Update to user's email address. Uniqueness required if
     * changed.
     */
    email?: string & tags.Format<"email">;

    /** (Optional) Update to bio/about me field. */
    bio?: string | null;

    /** (Optional) Modify user account status (active, suspended, etc.). */
    status?: string;

    /** Update timestamp; automatically set by the server on update. */
    updated_at?: string & tags.Format<"date-time">;
  };

  /**
   * Response for user deletion operation. Contains minimal identifying and
   * audit info.
   *
   * Does not reveal sensitive user fields.
   */
  export type IDeleteResponse = {
    /**
     * ID of user deleted or marked for deletion. Used for reference in
     * audit trails and deletion confirmations.
     */
    id?: string & tags.Format<"uuid">;

    /**
     * Status message (e.g., 'deleted', 'suspended', etc.) after
     * deletion/disable action.
     */
    status?: string;
  };
}

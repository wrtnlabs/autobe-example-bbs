import { tags } from "typia";

/**
 * Model representation of a user ban event as found in
 * discussion_board_user_ban table.
 *
 * All atomic, auditable fields are present, providing reference linkage to
 * subject, moderator, moderation action (optional), rationale, and relevant
 * timestamps. Mapped directly from the normalized Prisma schema design.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUserBan = {
  /**
   * The unique ID for the ban record (discussion_board_user_ban.id).
   *
   * Used as a stable, auditable reference throughout all ban management
   * operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the user being banned.
   *
   * FK constraint per the discussion_board_user entity in Prisma.
   */
  subject_user_id: string & tags.Format<"uuid">;

  /**
   * Moderator's unique ID (discussion_board_moderator.id).
   *
   * Links the ban event to an authorized enforcement actor.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * Refers to the moderation action record for which this ban is a direct or
   * indirect outcome. Used for audit, escalation review, or rollback.
   */
  related_action_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Explicit reason for ban. Two to three sentences or policy code; appears
   * in audit trail and, optionally, user notification.
   */
  ban_reason: string;

  /**
   * The timestamp when the ban was enacted (ISO 8601).
   *
   * Support for audit/replay and compliance records.
   */
  banned_at: string & tags.Format<"date-time">;

  /**
   * Set if the ban is temporary or has been revoked/lifted. Contains removal
   * date/time or null for permanent bans. Used by appeals, review dashboards,
   * and moderation audits.
   */
  ban_lifted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardUserBan {
  /**
   * Search/pagination request for user ban records (discussion_board_user_ban
   * table).
   *
   * May combine user, moderator, reason string, and temporal fields.
   * Pagination fields are optional.
   */
  export type IRequest = {
    /**
     * The user who is the subject of the ban (discussion_board_user.id).
     *
     * Filter for historical ban review or subject-driven searches.
     */
    subject_user_id?: string & tags.Format<"uuid">;

    /**
     * The moderator who issued the ban (discussion_board_moderator.id).
     *
     * Analytics, review, or trend analysis by staff issuer.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Filter bans by free-text reason string (full or partial search).
     *
     * Searchable for reporting or audit trails.
     */
    ban_reason?: string;

    /**
     * Start of date range for ban events (inclusive). ISO 8601 string.
     *
     * For temporal filtering on ban issue date.
     */
    banned_from?: string & tags.Format<"date-time">;

    /**
     * End of filter window for bans (inclusive). ISO 8601.
     *
     * Search for bans issued before/after specific dates.
     */
    banned_to?: string & tags.Format<"date-time">;

    /**
     * Filter only currently active (true) or historical (false) bans.
     *
     * Calculates if ban_lifted_at is null or in the future (application
     * logic, not directly persisted field).
     */
    ban_active?: boolean;

    /** The page number for pagination (optional, default 1). */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** The number of results per page (optional, default 20). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Arguments for creating a new user ban event (discussion_board_user_ban).
   * For moderation enforcement, appeals, or compliance documentation.
   */
  export type ICreate = {
    /**
     * The user to be banned (discussion_board_user.id). Required upon
     * creation.
     */
    subject_user_id: string & tags.Format<"uuid">;

    /** The issuing moderator's UUID (discussion_board_moderator.id). */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * Link to the underlying moderation action; may be null if ban is an
     * initial incident.
     */
    related_action_id?: (string & tags.Format<"uuid">) | null;

    /**
     * A statement of the explicit reason for the ban. Must be clear and
     * policy-compliant.
     */
    ban_reason: string;

    /** The exact timestamp of ban initiation (ISO 8601). */
    banned_at: string & tags.Format<"date-time">;

    /**
     * If set, specifies the time when the ban will expire or was lifted
     * (nullable for permanent bans).
     */
    ban_lifted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Updation model for user ban recordsâ€”permits updating moderator
   * assignment, escalation link, rationale, or temporal ban end state. Used
   * for appeals, dispute resolution, or correction of record.
   */
  export type IUpdate = {
    /**
     * Updated moderator assigned to this ban record (permits
     * transfer/correction of enforcement responsibility).
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Updated moderation action association; corrects audit trail linkage
     * if required.
     */
    related_action_id?: (string & tags.Format<"uuid">) | null;

    /** Update or correct rationale for this ban event. */
    ban_reason?: string;

    /**
     * Update (or set) ban end/revocation timestamp. Null if still
     * permanent.
     */
    ban_lifted_at?: (string & tags.Format<"date-time">) | null;
  };
}

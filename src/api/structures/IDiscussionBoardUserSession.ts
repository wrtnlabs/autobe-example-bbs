import { tags } from "typia";

/**
 * Tracked session information for an authenticated user or guest. Used for all
 * token-based authentication, analytics, session management, and forced
 * logout/audit operations. Matches policy as described in Actors Prisma
 * schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUserSession = {
  /**
   * Unique identifier for this user/guest session, system assigned. (Prisma:
   * @id @db.Uuid)
   */
  id: string & tags.Format<"uuid">;

  /**
   * Type of actor/session this record represents
   * (admin/moderator/member/guest). Used for filtering, audit, and feature
   * gating (Prisma: actor_type)
   */
  actor_type: string;

  /**
   * Unique identifier for the actor/user/guest for this session. This
   * corresponds to user_identifier, moderator_id, or session_identifier,
   * depending on actor_type. (Prisma: actor_identifier)
   */
  actor_identifier: string;

  /**
   * Opaque session token associated with this session record (eg JWT, UUID,
   * cookie secret). Used for authentication, tracing, and forced logout
   * (Prisma: session_token, @unique)
   */
  session_token: string;

  /**
   * Timestamp marking session creation/start. Used for analytics, session
   * expiration logic (Prisma: created_at, @db.Timestamptz)
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when session will expire and require renewal/reauthentication.
   * (Prisma: expires_at, @db.Timestamptz)
   */
  expires_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating early/forced session termination (logout,
   * revocation, timeout). Null if active. Used for audit, compliance, and
   * forced logouts (Prisma: terminated_at, nullable)
   */
  terminated_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardUserSession {
  /**
   * Filter/search controls for tracking user/guest sessions (across Actors).
   * Allows for filtering, pagination, and advanced analytics/audit.
   */
  export type IRequest = {
    /**
     * Page number for pagination (zero- or one-based per API). Optional;
     * null for first page.
     */
    page?: (number & tags.Type<"int32">) | null;

    /** Number of records to return per page; defaults to 100 when omitted. */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Filter to search for sessions by actor type (admin, moderator,
     * member, guest). May be an enumeration in API, stored as string in
     * schema.
     */
    actor_type?: string | null;

    /**
     * Filter by actor_identifier value (platform user/session id per actor
     * type). Permits tracing session scope/ownership.
     */
    actor_identifier?: string | null;

    /**
     * When true, restricts to active (not terminated/expired) session
     * records. False returns all records. Null disables this filter.
     */
    active_only?: boolean | null;

    /**
     * Search/filter for a specific session token value. Used in session
     * tracking, forced logout, and audit events.
     */
    session_token?: string | null;
  };

  /**
   * Request body for creating a new user or guest session in the discussion
   * board authentication system. All fields are required to establish a
   * proper session entry aligned with Prisma schema for persistent login and
   * traceability.
   */
  export type ICreate = {
    /**
     * The type of actor (admin, moderator, member, or guest) for whom the
     * session is created. This property determines session scoping for
     * authentication and role-based authorization. Must match a role
     * present in the system.
     */
    actor_type: string;

    /**
     * The unique identifier for the actor (e.g., user_identifier for
     * admin/moderator/member or session_identifier for guest). This string
     * links the session to the specific entity in its corresponding actor
     * table.
     */
    actor_identifier: string;

    /**
     * An opaque, unique session token (e.g., JWT, UUID, or secure random
     * string) used for authentication and persistent session tracking.
     */
    session_token: string;

    /**
     * ISO 8601 UTC timestamp when the session is created. Used for audit
     * and session lifecycle analytics.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * ISO 8601 UTC timestamp when the session is scheduled to expire.
     * Controls auto-logout and session lifecycle.
     */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for updating a user/guest session record. Only the fields
   * explicitly listed in the schema may be patched: expires_at,
   * terminated_at.
   */
  export type IUpdate = {
    /**
     * The new ISO 8601 UTC expiry time for the session. Used for prolonging
     * or curtailing the session lifespan.
     */
    expires_at?: string & tags.Format<"date-time">;

    /**
     * ISO 8601 UTC timestamp marking when the session was explicitly
     * terminated (e.g., logout, timeout, forced revoke). Null indicates
     * session still active; set to ISO timestamp to mark session as
     * closed.
     */
    terminated_at?: string & tags.Format<"date-time">;
  };
}

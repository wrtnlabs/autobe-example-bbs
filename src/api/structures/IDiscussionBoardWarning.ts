import { tags } from "typia";

/**
 * Represents a warning record as found in the discussion_board_warning table.
 *
 * Includes all atomic, auditable fields related to warning issue events, with
 * full references to issuer and subject user. Aligns directly with the Prisma
 * schema definition.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardWarning = {
  /**
   * The unique identifier of this warning record (discussion_board_warning.id
   * in Prisma DB).
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the user receiving the warning.
   *
   * Reference: Prisma 'subject_user_id' column; FKs to
   * discussion_board_user.id.
   */
  subject_user_id: string & tags.Format<"uuid">;

  /**
   * The UUID of the moderator who issued the warning.
   *
   * Reference: Prisma 'moderator_id' column; FKs to
   * discussion_board_moderator.id.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * Links to the moderation action that prompted this warning. Null if not
   * applicable. Enforces audit and resolution trails.
   *
   * Reference: Prisma 'related_action_id' column; FKs to
   * discussion_board_moderation_action.id.
   */
  related_action_id?: (string & tags.Format<"uuid">) | null;

  /**
   * The stated reason for this warning. Shown in notifications and audit
   * logs.
   *
   * Reference: Prisma 'warning_reason' column.
   */
  warning_reason: string;

  /**
   * Date/time when the warning was issued (ISO 8601 format).
   *
   * Reference: Prisma 'created_at' column.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardWarning {
  /**
   * Request type for searching, filtering, and paginating warning records in
   * the discussion_board_warning table.
   *
   * May include target user, moderator, warning reason, and date ranges, as
   * well as standard pagination fields.
   */
  export type IRequest = {
    /**
     * The user (discussion_board_user_id) who received the warnings. Used
     * to filter warning history for a specific user.
     *
     * Prisma schema: discussion_board_warning, 'subject_user_id'.
     */
    subject_user_id?: string & tags.Format<"uuid">;

    /**
     * The moderator (discussion_board_moderator_id) who issued the
     * warnings. Used for filtering by issuer.
     *
     * Prisma schema: discussion_board_warning, 'moderator_id'.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Filter warnings containing this reason text (full or partial search
     * allowed). Used for analytics and review workflows.
     *
     * Prisma schema: discussion_board_warning, 'warning_reason'.
     */
    warning_reason?: string;

    /**
     * Start of date range for filtering warnings (inclusive). ISO 8601
     * timestamp string.
     *
     * Used for reporting and audit trails.
     *
     * Not directly in Prisma, but maps to
     * discussion_board_warning.created_at (GTE filter logic).
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * End of date range for filtering warnings (inclusive). ISO 8601
     * timestamp string.
     *
     * Not directly in Prisma, maps to discussion_board_warning.created_at
     * (LTE filter logic).
     */
    created_to?: string & tags.Format<"date-time">;

    /** The page number for pagination. Optional; defaults to 1 if omitted. */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** The number of records per page for pagination. Optional. */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Request body structure for creating a new warning record
   * (discussion_board_warning table).
   *
   * Required fields are subject user, moderator, and reason string. Alignment
   * enforced against the Prisma DB definition.
   */
  export type ICreate = {
    /**
     * The user receiving the warning. Must reference
     * discussion_board_user.id.
     *
     * Required for warning creation.
     */
    subject_user_id: string & tags.Format<"uuid">;

    /**
     * The moderator creating/applying the warning. Must reference
     * discussion_board_moderator.id.
     */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * Linkage to moderation action prompting warning, or null if none. Used
     * for transparent audit linkage.
     */
    related_action_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The explicit reason for this warning. Shown to subject user and in
     * logs.
     */
    warning_reason: string;
  };

  /**
   * Structure for updating mutable properties of a warning record
   * (discussion_board_warning table).
   *
   * Allows update of moderator, related moderation action linkage, or the
   * warning reason. Used for audits, appeals, or moderation history
   * corrections.
   */
  export type IUpdate = {
    /**
     * The moderator who issued this warning. May be updated for correction
     * or reassignment (discussion_board_moderator.id).
     *
     * Reference: Prisma 'moderator_id'.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Updates the linked moderation action if correction or audit update is
     * needed. Prisma 'related_action_id'.
     */
    related_action_id?: (string & tags.Format<"uuid">) | null;

    /**
     * New or corrected reason for the warning.
     *
     * Reference: Prisma 'warning_reason'.
     */
    warning_reason?: string;
  };
}

import { tags } from "typia";

/**
 * Represents a category for classifying threads and posts in the discussion
 * board system. This schema implements the requirements for organizing
 * discussions by topic areas (e.g., 'Politics', 'Economics').
 *
 * It strictly follows 3NF design principles in the database and serves as a
 * core navigation point within the UI and for supporting search/filter
 * workflows. All fields are atomic and correspond directly to columns in the
 * discussion_board_categories table as defined in the Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardCategory = {
  /**
   * UUID primary key uniquely identifying this category record. Used as the
   * global reference for category operations, joining with other
   * tables/entities.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique, human-readable category label (e.g., 'Economics'). This field is
   * mandatory and must be unique within the site.
   */
  name: string;

  /**
   * Optional text that defines the purpose or scope of this category.
   * Supports usability, accessibility, and richer UX. May be null if not
   * set.
   */
  description?: string | null;

  /**
   * Timestamp of when this category was created. Used for audits,
   * chronological sorting, and admin review.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update to this category record. Tracks recent
   * changes for audit and UI context.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. If set, this record is marked deleted and not
   * shown in most lists. Required for reversibility and compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardCategory {
  /**
   * Advanced filter/search criteria for listing or locating categories in the
   * discussion board system.
   *
   * All major fields support GET/search list requirements for admin and user
   * pathways. Maps directly to Prisma's `discussion_board_categories` atomic
   * columns.
   */
  export type IRequest = {
    /**
     * Category name filter (exact or partial match search).
     *
     * Maps to `discussion_board_categories.name`. Used for advanced
     * search/selector UIs and content authoring workflows.
     */
    name?: string | null;

    /**
     * Limit results to categories created after this time.
     *
     * For audit/compliance reporting.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Limit category search to those created before this date.
     *
     * Audit and admin reporting workflows leverage this for lifecycle
     * management.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /** Page number for pagination, defaults to 1. */
    page?: (number & tags.Type<"int32">) | null;

    /** Number of records to return per page, subject to API constraints. */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Request body for creating a new Discussion Board Category. Implements
   * required and optional fields as needed by the board taxonomy expansion
   * features and admin controls.
   *
   * The schema validates uniqueness and existence of the category name, and
   * allows descriptive text to accompany the new category. Used from admin
   * backend or possibly in advanced moderator workflows.
   */
  export type ICreate = {
    /**
     * New category's unique name (must not conflict with existing
     * categories). Required.
     */
    name: string;

    /**
     * Optional description helping distinguish what is included in this
     * category. May be omitted or null.
     */
    description?: string | null;
  };

  /**
   * Request body for updating an existing Discussion Board Category. Enables
   * editors/admins to change category attributes (such as name, description)
   * while observing uniqueness and audit constraints.
   *
   * Soft-delete is managed separately (not here). Update operation requires
   * only name and/or description (no id change).
   */
  export type IUpdate = {
    /**
     * New value for the category name (must remain unique). Optionalâ€”only
     * supply if changing.
     */
    name?: string;

    /**
     * New description for the category; supports explanation, editorial
     * notes, or more detail. May be null to clear existing value.
     */
    description?: string | null;
  };
}

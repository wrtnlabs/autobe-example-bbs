import { tags } from "typia";

/**
 * Full record of a moderation action as described by the Prisma schema for
 * 'discussion_board_moderation_actions'. Contains actor references, content
 * targets, action labeling, and metadata for audit and compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardModerationAction = {
  /**
   * Primary Key. Unique identifier for each moderation action event in
   * 'discussion_board_moderation_actions'.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Moderator actor's UUID if the action was performed by a moderator.
   * Nullable, refers to 'discussion_board_moderators'.
   */
  actor_moderator_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Admin actor's UUID if the action was performed by an admin. Nullable,
   * refers to 'discussion_board_admins'.
   */
  actor_admin_id?: (string & tags.Format<"uuid">) | null;

  /**
   * UUID of the post being moderated. Nullable, for polymorphic action
   * target. Foreign key.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * UUID of the comment being moderated. Nullable, for polymorphic action
   * target. Foreign key.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * If action directly relates to a report, this field links to
   * 'discussion_board_reports'. Nullable.
   */
  report_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Nature/type of moderation action performed (e.g., 'delete', 'edit',
   * 'warn', 'ban'). Free-form string, as required by business logic.
   */
  action_type: string;

  /**
   * Additional details (eg, reason, moderator notes, evidence). Allows for
   * context about the moderation action taken. Nullable/text.
   */
  action_details?: string | null;

  /**
   * Timestamp when moderation action was performed. System managed field for
   * audit/log sequencing.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardModerationAction {
  /**
   * Request structure for searching or paginating discussion board moderation
   * actions. Allows filtering by actors, targets, action type, and date
   * range.
   */
  export type IRequest = {
    /** Page number for pagination (1-based index). Optional. */
    page?: (number & tags.Type<"int32">) | null;

    /** Maximum records per page. Used for pagination of search results. */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Moderator actor's UUID for filtering actions taken by a specific
     * moderator. Reference: 'actor_moderator_id' in
     * 'discussion_board_moderation_actions'.
     */
    actor_moderator_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Admin actor's UUID for filtering actions performed by a particular
     * admin. Reference: 'actor_admin_id' in
     * 'discussion_board_moderation_actions'.
     */
    actor_admin_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Post UUID for searching moderation actions regarding a specific post.
     * Matches 'post_id' column.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Comment UUID for filtering moderation actions on a specific comment.
     * Matches 'comment_id' column.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Report UUID for filtering moderation actions related to a particular
     * report.
     */
    report_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Type of action performed (e.g., 'delete', 'edit', 'warn', 'ban'). Can
     * be used to filter moderation actions by type.
     */
    action_type?: string | null;

    /**
     * Start datetime boundary for filtering actions. Use with
     * 'created_at_to' for date range search.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /**
     * End datetime boundary for filtering actions. Used together with
     * 'created_at_from'.
     */
    created_at_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Structure for creating a new moderation action in the discussion board.
   * Accepts required and optional fields for target references, actor, and
   * metadata. Excludes PK/id and created_at, which are generated by the
   * system. Refer to Prisma schema for field details.
   */
  export type ICreate = {
    /**
     * Moderator actor's UUID for whom is creating the action. Must be
     * supplied or null; mutually exclusive with actor_admin_id.
     */
    actor_moderator_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Admin actor's UUID for whom is creating the action. Must be supplied
     * or null; mutually exclusive with actor_moderator_id.
     */
    actor_admin_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Post UUID that is the target of the moderation action; nullable if
     * action targets a comment.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Comment UUID that is the target of the moderation action; nullable if
     * action targets a post.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Report UUID if the action is associated with a report; nullable
     * otherwise.
     */
    report_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Description of the action (e.g., 'delete', 'edit', 'warn'). Business
     * logic will validate allowed action types.
     */
    action_type: string;

    /**
     * Additional data, such as evidence, notes, or links to further
     * context. Nullable.
     */
    action_details?: string | null;
  };

  /**
   * Business update form for a given moderation action record. Enables
   * updating of actor, target, type, or additional context fields. Excludes
   * immutable fields such as PK/id/created_at, and restricted by business
   * policies depending on audit or workflow state. Maps to
   * discussion_board_moderation_actions.
   */
  export type IUpdate = {
    /**
     * If updating the responsible moderator for the action. Usually null or
     * not set.
     */
    actor_moderator_id?: (string & tags.Format<"uuid">) | null;

    /**
     * If updating the responsible admin for the action. Usually null or not
     * set.
     */
    actor_admin_id?: (string & tags.Format<"uuid">) | null;

    /** Update the post target of the action, if business scenario requires. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Update the comment target, if relevant. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Update the related report, if applicable. */
    report_id?: (string & tags.Format<"uuid">) | null;

    /** Update the action type, if business logic permits. */
    action_type?: string | null;

    /** Update details or moderator notes for the moderation action. */
    action_details?: string | null;
  };

  /**
   * Summary of a moderation action for audit/overview listings. At minimum,
   * includes ID and optional actor type for filtering.
   */
  export type ISummary = {
    /** Unique UUID for the moderation action */
    id: string & tags.Format<"uuid">;

    /** Type of actor (moderator/admin) */
    actor_type?: string | null;
  };
}

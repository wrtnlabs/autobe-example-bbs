import { tags } from "typia";

/**
 * Represents a Vote as defined in the votes table: one record for each
 * upvote/downvote action on a post or comment. Covers voter ID, target (post or
 * comment), value (+1/-1), and creation timestamp. Fully aligned with
 * requirements analysis and business logic for
 * single-vote-per-user-per-content.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IVote = {
  /** Primary Key. Unique identifier for each vote record (votes.id). */
  id: string & tags.Format<"uuid">;

  /**
   * The ID of the user casting the vote (votes.user_id), referencing users
   * table for author.
   */
  user_id: string & tags.Format<"uuid">;

  /** The voted post's ID (votes.post_id). Mutually exclusive with comment_id. */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * The voted comment's ID (votes.comment_id). Mutually exclusive with
   * post_id.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Value of the vote (+1 for upvote, -1 for downvote). Aggregated to compute
   * content rankings.
   */
  value: number & tags.Type<"int32">;

  /** Timestamp of when the vote was created (votes.created_at). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IVote {
  /**
   * Filtering, pagination, and sorting criteria for votes listing requests,
   * following the votes table business logic and related requirements.
   *
   * Filters support querying by voter, target post, or comment, with support
   * for pagination and sorting. Business rules enforce only mutual
   * exclusivity between postId/commentId (never both set).
   */
  export type IRequest = {
    /**
     * Unique identifier of the user who cast the vote. Used for filtering
     * votes by a specific voter (see votes.user_id in schema and ERD).
     */
    userId?: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the post that received the vote (see
     * votes.post_id). Mutually exclusive with commentId.
     */
    postId?: (string & tags.Format<"uuid">) | null;

    /**
     * Unique identifier of the comment that received the vote (see
     * votes.comment_id). Mutually exclusive with postId.
     */
    commentId?: (string & tags.Format<"uuid">) | null;

    /** Starting index for pagination (default 0). */
    offset?: number &
      tags.Type<"int32"> &
      tags.Default<0> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Maximum number of records to return per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<20> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Sorting field or order (default 'created_at:desc'). */
    sort?: string;
  };

  /**
   * Object for creating a new vote as per voting business rules:
   *
   * - User_id: registered voter
   * - Value: +1 (upvote) or -1 (downvote)
   * - Target: must specify either post_id or comment_id (never both) Enforces
   *   one vote per user/content as described in requirements.
   */
  export type ICreate = {
    /**
     * ID of the user casting the vote. References the users table; ensures
     * only registered users can vote.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Vote value: +1 or -1 as per business requirements. Used for up/down
     * voting of posts/comments.
     */
    value: number & tags.Type<"int32">;

    /**
     * Target post's ID, if voting on a post. Mutually exclusive with
     * comment_id.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Target comment's ID, if voting on a comment. Mutually exclusive with
     * post_id.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Object for updating existing votes, specifically editing the vote value
   * (from +1 to -1, etc.).
   *
   * Does not allow changing the vote target (post_id/comment_id); supports
   * audit and business logic for corrections.
   */
  export type IUpdate = {
    /**
     * The new vote value. Allows changing an upvote to downvote (or vice
     * versa), strictly for existing votes per business rules.
     */
    value: number & tags.Type<"int32">;
  };

  /**
   * Delete operation result for a vote record. Returns deleted vote's ID,
   * deletion status, and optional result message, as required by business
   * logic and for user/admin confirmation.
   */
  export type IDeleteResult = {
    /** ID of the vote record that was deleted. */
    id: string & tags.Format<"uuid">;

    /** Indicates if the vote was successfully deleted. */
    deleted: boolean;

    /** A human-readable confirmation message about the delete operation. */
    message?: string;
  };

  /**
   * Summary of a Vote for paginated/result lists, not including creation date
   * but identifying all main relationships and value.
   */
  export type ISummary = {
    /** Unique identifier for the vote. */
    id: string & tags.Format<"uuid">;

    /** Voter's user ID. */
    user_id: string & tags.Format<"uuid">;

    /** Target post. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Target comment. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Vote value (+1 or -1). */
    value: number & tags.Type<"int32">;
  };
}

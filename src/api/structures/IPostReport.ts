import { tags } from "typia";

/**
 * A user report about a post in the political/economic discussion board.
 *
 * Reflects flagged content flow requirement, enables moderation audit trail,
 * and supports status transitions through the moderation lifecycle.
 *
 * Schema and fields are strictly mapped to the post_reports table in the Prisma
 * DB schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPostReport = {
  /**
   * Primary key of post_reports record. Unique per report and never changes.
   *
   * References {@link post_reports.id} in Prisma.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The user ID of the report's creator. Foreign key to users.id.
   *
   * Per schema, only registered users may report.
   */
  reporter_id: string & tags.Format<"uuid">;

  /**
   * Foreign key for reported post (posts.id).
   *
   * Guaranteed unique per report; required by schema.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Reason given for the report (atomic value, e.g., 'spam').
   *
   * Drawn from Prisma post_reports.reason.
   */
  reason: string;

  /**
   * Current status in moderation workflow: 'pending', 'resolved',
   * 'dismissed', etc.
   *
   * Enforced in the moderation system, cited in requirements and schema.
   */
  status: string;

  /**
   * Timestamp when the report was filed.
   *
   * From Prisma post_reports.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the report was resolved/dismissed (nullable).
   *
   * Can be null if pending; from Prisma post_reports.resolved_at.
   */
  resolved_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IPostReport {
  /**
   * Request structure for searching, filtering, and paginating post report
   * records.
   *
   * Allows moderator or admin UIs to filter by post, reporter, status,
   * reason, and sort/paginate accordingly.
   *
   * Defined according to audit, moderation, and evidence requirements.
   */
  export type IRequest = {
    /**
     * The unique identifier of the post being reported. Reference to the
     * posts table.
     *
     * According to the Prisma schema, each report is attached to a post.
     * Used by moderators to filter or search reports per post.
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the user who filed the report against a
     * post.
     *
     * References the users table and is necessary for user-driven
     * moderation workflows.
     */
    reporter_id?: string & tags.Format<"uuid">;

    /**
     * Status of the report: e.g., 'pending', 'resolved', or 'dismissed'.
     *
     * Allows filtering in moderator dashboards. Business logic as per
     * prisma schema.
     */
    status?: string;

    /**
     * Text reason entered by user for the report (e.g., 'spam',
     * 'harassment'). Partial match filtering supported.
     *
     * From the PostReport business requirements.
     */
    reason?: string;

    /** Earliest creation date for filtering. Optional, ISO8601 format. */
    created_at?: string & tags.Format<"date-time">;

    /** Latest resolution date for filtering (optional). ISO8601 formatted. */
    resolved_at?: string & tags.Format<"date-time">;

    /** Pagination: which page to retrieve. Default 1. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Pagination: number of records per page. Default 20. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Sort order (e.g., '-created_at', 'reason asc'). */
    sort?: string;
  };

  /**
   * Request schema for submitting a new post report to moderation.
   *
   * Mandatory for user-driven flag/report functionality in compliance with
   * audit workflow. Tracks evidence for all flagged content as per PRISMA and
   * requirements documentation.
   */
  export type ICreate = {
    /** The user ID making the report. */
    reporter_id: string & tags.Format<"uuid">;

    /** The post being reported. */
    post_id: string & tags.Format<"uuid">;

    /** Reason for reporting; required by moderation business rules. */
    reason: string;
  };

  /**
   * Update request for moderator/admin actions on reports, e.g., marking as
   * resolved, clarifying reason, updating evidence status.
   *
   * Handles status transitions and audit compliance for post reports as per
   * the post_reports table.
   */
  export type IUpdate = {
    /** (Optional) Update the report reason text. */
    reason?: string;

    /**
     * (Optional) Update status, e.g., to resolved or dismissed.
     *
     * Allowed values per moderation policy.
     */
    status?: string;

    /** (Optional) Set resolution timestamp when closing the report. */
    resolved_at?: (string & tags.Format<"date-time">) | null;
  };
}

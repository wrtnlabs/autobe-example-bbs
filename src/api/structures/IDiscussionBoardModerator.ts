import { tags } from "typia";

import { IDiscussionBoardMember } from "./IDiscussionBoardMember";

/**
 * Represents a single moderator assignment. Connects a member with moderator
 * privileges, including metadata about assignment and revocation.
 *
 * This schema aggregates the columns from the discussion_board_moderators table
 * and populates related member data as needed for admin and audit views. All
 * field descriptions reference the Prisma schema and requirements analysis.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardModerator = {
  /**
   * Unique identifier for the moderator assignment
   * (discussion_board_moderators.id)
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key linking to discussion_board_members.id (target member with
   * moderation privileges).
   */
  member_id: string & tags.Format<"uuid">;

  /** When this member was assigned moderator role. */
  assigned_at: string & tags.Format<"date-time">;

  /** Timestamp when moderator role was revoked (null if currently active). */
  revoked_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Expanded detail for the member holding this moderator assignment.
   * Populated for management/admin views.
   */
  member?: IDiscussionBoardMember;
};
export namespace IDiscussionBoardModerator {
  /**
   * Object for filtering and paginating moderator records. Used for admin
   * search panels or advanced audit dashboards for role management.
   *
   * This type supports advanced filtering/search: by status (active/revoked),
   * time window, related member info, etc.
   */
  export type IRequest = {
    /** Page number for pagination. Default 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Number of records per page (default 20, max 100). */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;

    /** If true, only returns active (not revoked) moderators. */
    active_only?: boolean;

    /** Return moderators assigned after this timestamp. */
    assigned_after?: string & tags.Format<"date-time">;

    /** Return moderators assigned before this timestamp. */
    assigned_before?: string & tags.Format<"date-time">;

    /**
     * Filter moderators whose linked member username matches this pattern
     * (partial match).
     */
    username?: string;
  };

  /**
   * Request body for creating a new moderator role assignment. Used by admin
   * interface when escalating a member to moderator status. Only requires
   * member_id; other fields set on creation.
   */
  export type ICreate = {
    /** The ID (UUID) of the member to assign as moderator. */
    member_id: string & tags.Format<"uuid">;
  };

  /**
   * Request body for updating moderator assignment. Used for soft-revocation,
   * appending admin notes, or context fields if workflow is extended.
   *
   * By default, only 'revoked_at' may be set for revocation.
   */
  export type IUpdate = {
    /**
     * Timestamp to set when revoking the moderator role. Set to the current
     * date-time when removing privileges.
     */
    revoked_at: (string & tags.Format<"date-time">) | null;
  };
}

import { tags } from "typia";

/**
 * Forum category object representing a major topic or section in the board
 * structure.
 *
 * Each category is an atomic entity as per Prisma with fields for unique name,
 * description, and time-based audit info. Used for organizing threads,
 * navigation, and content discovery in both user and admin UIs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICategory = {
  /**
   * Unique identifier for the category, primary key of the record in the
   * database.
   *
   * Directly from the categories Prisma model, used for lookup, update, and
   * all reference links elsewhere.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Display name of the category. Must be unique across all categories.
   *
   * Directly maps to categories.name and is used for UI navigation,
   * filtering, and management. Refer to Prisma: 'Stores the display name for
   * the category.'
   */
  name: string;

  /**
   * Optional plain text description giving more context about the category's
   * coverage.
   *
   * Maps to categories.description. Enables admins to clarify purpose,
   * topics, or scope for this category.
   */
  description?: string | null;

  /**
   * Timestamp this category was created. Used for auditing, ordering, and
   * when showing 'since' in UIs.
   *
   * From categories.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp this category was most recently updated. Audit/log field
   * correlated with moderation actions or admin edits.
   *
   * From categories.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If non-null, this category has been soft-deleted (retired for new
   * threads, but still shown for audit/history).
   *
   * Enforces retention and audit per requirements. Maps to
   * categories.deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICategory {
  /**
   * Payload for category search/list endpoint. Follows atomic fields from
   * categories table in Prisma model docs. Powers admin/mod search/browse and
   * general filtering UI.
   */
  export type IRequest = {
    /**
     * String match (or partial) for filtering/searching categories. Derived
     * from categories.name, for navigation or admin curation.
     */
    name?: string;

    /**
     * Only categories created after this ISO8601 UTC date-time are
     * included. Based on categories.created_atâ€”used for
     * auditing/analytics.
     */
    created_after?: string & tags.Format<"date-time">;

    /**
     * Only categories created before this ISO8601 UTC date-time are
     * included. Used for admin and reporting.
     */
    created_before?: string & tags.Format<"date-time">;

    /**
     * If true, include categories with deleted_at set (soft-deleted) for
     * admin view. Default false/exclude.
     */
    include_deleted?: boolean;

    /** Pagination page number. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Number of records per page (default 100 limit). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Request schema for creating a new forum category.
   *
   * Represents the atomic data needed to define a unique category, adhering
   * to normalization and business rules. Used by admin/mod controller UIs.
   */
  export type ICreate = {
    /**
     * New category name. Must be unique and clear to users, as enforced by
     * the categories table constraint.
     *
     * Used as the label in navigation and assignment.
     */
    name: string;

    /**
     * Optional description to explain category purpose and coverage for
     * users and moderators. Can be left empty.
     */
    description?: string | null;
  };

  /**
   * Schema for updating an existing category. Only atomic fields are present,
   * and any can be omitted if not being changed.
   *
   * Used in admin/moderator UI dialogs and by category update endpoints.
   */
  export type IUpdate = {
    /**
     * New name for the category, if being changed. Must remain unique among
     * all categories.
     *
     * Directly updates categories.name.
     */
    name?: string;

    /**
     * Updated description for the category, if provided. Explains or
     * clarifies what belongs here.
     *
     * Directly updates categories.description.
     */
    description?: string | null;
  };
}

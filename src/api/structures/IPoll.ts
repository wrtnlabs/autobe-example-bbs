import { tags } from "typia";

import { IThreadsPostsPollOption } from "./IThreadsPostsPollOption";

/**
 * Poll entity describing a single polling event attached to a user post or
 * thread in the discussion board. Records the poll's question and lifecycle
 * (open, close times), and enforces one poll per post (Prisma 1:1
 * relationship).
 *
 * Referenced from the `polls` table in the ThreadsPosts namespace. Provides
 * atomic, auditable poll creation, scheduling, and association with posts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPoll = {
  /**
   * The unique identifier for this poll. Used as the primary key in the polls
   * table.
   *
   * Prisma: polls.id
   *
   * Atomic, audit-critical for tracking poll definitions and results.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier for the post that this poll is attached to. Ensures
   * one-to-one relationship with posts for poll association.
   *
   * Prisma: polls.post_id
   *
   * Linked on creation—prevents duplicate polls on one post.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * The question presented to the users participating in the poll. Central
   * element for poll interaction and thread context.
   *
   * Prisma: polls.question
   *
   * Directly displayed to users in forum interface.
   */
  question: string;

  /**
   * Start date/time for poll voting. Prevents early voting and manages
   * business logic for open period.
   *
   * Prisma: polls.start_at
   *
   * Used for poll scheduling and public availability.
   */
  start_at: string & tags.Format<"date-time">;

  /**
   * End date/time for poll voting. Null if poll is open-ended. Controls poll
   * closure for compliance and tallying.
   *
   * Prisma: polls.end_at
   *
   * Nullable to allow for perpetual polls.
   */
  end_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IPoll {
  /**
   * Request object for paginated/filter search of polls in the system (Prisma
   * polls table, poll querying requirements). Used by admins/mods or feature
   * UIs showing active, closed, or history of polls.
   *
   * Supports searching for polls by post, question keyword, time window, or
   * status.
   */
  export type IRequest = {
    /** Limit query to polls belonging to this post (polls.post_id). */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Keyword filter for poll question (partial match allowed, supports
     * search UX).
     */
    question?: string;

    /** Return only polls that opened after this time. */
    open_after?: string & tags.Format<"date-time">;

    /** Return only polls that closed before (or null if open-ended). */
    closed_before?: string & tags.Format<"date-time">;

    /** Which page of results to return for pagination. */
    page?: number & tags.Type<"int32">;

    /** How many results per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Request schema for creating a new poll. Combines poll entity data and an
   * array of poll option definitions, enforcing 1:1 post association and
   * voting answer options.
   *
   * Payload for POST /threadsPosts/polls, matching atomic structure and
   * business rules.
   */
  export type ICreate = {
    /**
     * ID of the post to which the poll is to be attached during creation.
     * Must be unique per poll for post enforcement.
     *
     * Prisma: polls.post_id
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * The poll question entered at creation. A required field.
     *
     * Prisma: polls.question
     */
    question: string;

    /**
     * Poll open time. Submission disallowed before this moment.
     *
     * Prisma: polls.start_at
     */
    start_at: string & tags.Format<"date-time">;

    /**
     * Poll close time. Optional—if null, the poll runs indefinitely.
     *
     * Prisma: polls.end_at
     */
    end_at?: (string & tags.Format<"date-time">) | null;

    /**
     * An array of new poll option definitions, one for each allowed answer.
     * Not in the `polls` table, stored in `poll_options`. Used to define
     * answer choices when creating the poll.
     *
     * Prisma: poll_options (separate table).
     */
    poll_options: IThreadsPostsPollOption.ICreate[];
  };
}

import { tags } from "typia";

/**
 * Represents a permanent ban action for a user, as defined by business
 * moderation rules and the bans Prisma table. Each ban is atomic, traceable,
 * and persists for compliance, audit, and appeals. Permanent bans enforce the
 * strictest form of user removal from the system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IBan = {
  /**
   * Unique identifier for this ban record (bans.id, PK). Used throughout
   * moderation, audit, and appeal flows.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User being banned (bans.user_id). References users.id and allows joins to
   * display user information.
   */
  user_id: string & tags.Format<"uuid">;

  /** Moderator/admin applying the ban (bans.moderator_id). */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * Full-text explanation of the ban. Required for audit, appeals, and
   * dispute resolution (bans.reason).
   */
  reason: string;

  /**
   * Ban issuance date (bans.created_at). Atomic and required; used for
   * lifetime/permanence/enforcement.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IBan {
  /**
   * Faceted search/pagination schema for listing permanent user bans (bans
   * table). Supports advanced moderation workflow and appeals review.
   */
  export type IRequest = {
    /** Limit search to bans on a specific user. Optional. */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Limit search to bans administered by a specific moderator/admin.
     * Optional.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /** Text query for ban reasons. */
    reason_q?: string;

    /** Only show bans created after this datetime. Optional. */
    created_from?: string & tags.Format<"date-time">;

    /** Only show bans created before this datetime. Optional. */
    created_to?: string & tags.Format<"date-time">;

    /** Pagination page number. */
    page?: number & tags.Type<"int32">;

    /** Max number of records per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Payload for creating a new permanent user ban (bans table). Only
   * admins/moderators can initiate. References banned user, issuing
   * moderator, and explanation per audit/business requirements.
   */
  export type ICreate = {
    /** ID of user to be banned (permanent removal). References users table. */
    user_id: string & tags.Format<"uuid">;

    /** Moderator/admin enforcing ban; required. */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * Justification for the permanent ban. Required; kept for records and
     * appeal review.
     */
    reason: string;
  };

  /**
   * This type models fields that can be changed in an existing ban record.
   * Referenced from the bans table (Moderation), it supports moderation
   * audits, appeals, or additional annotation by admins. Only select fields
   * are mutable; attempts to change user_id or created_at should be blocked.
   *
   * Ensures precise audit trails and compliance with platform discipline
   * escalation/fairness rules.
   */
  export type IUpdate = {
    /**
     * The justification for the update of an existing ban record, providing
     * transparent rationale for ban maintenance. Based on the bans table's
     * 'reason' column in the Prisma schema, it supports clarity and audit
     * trail in line with moderation documentation.
     *
     * For example: 'Appeal granted, reduced severity' or 'Additional
     * evidence provided.' Moderators/admins use this to annotate or change
     * procedural notes.
     */
    reason: string;

    /**
     * The unique identifier of the moderator or admin updating the ban,
     * following the bans table foreign key to users.id. Ensures
     * auditability, records who altered the banâ€”essential for dispute
     * resolution and security. Value must reference an existing user
     * account with moderation privileges.
     *
     * Per business rules: Only certain roles can make updates, and actions
     * should be logged in moderation_logs for review.
     */
    moderator_id: string & tags.Format<"uuid">;
  };
}

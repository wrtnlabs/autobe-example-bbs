import { tags } from "typia";

/**
 * 토론 스레드/포스트에서 콘텐츠 분류를 위한 태그 객체입니다.
 *
 * 태그명, 설명, 생성/수정일자, 논리삭제 일시 등의 모든 discussion_board_thread_tag 컬럼이 매핑되며, Prisma
 * DB의 3NF 요건을 엄밀히 반영합니다.
 *
 * 예시: "이코노미", "정치", "법률"과 같은 구분 기능을 위해 사용됩니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardThreadTag = {
  /**
   * 태그 고유 식별자입니다. discussion_board_thread_tag의 primary key.
   *
   * 토론 내 태그의 일관성, 참조, 관리에 핵심적으로 사용됩니다.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 사람이 보는 태그의 이름(식별자). 반드시 유일하며, DB에서 중복 불가로 설정되어 있습니다.
   *
   * 검색, 필터, 자동완성 등에 필수적으로 활용됩니다.
   */
  name: string;

  /**
   * 태그의 요약 설명. UI 툴팁, 상세 검색, 컨텍스트 노출 등에 사용.
   *
   * 공란/미기입 허용.
   */
  description?: string | null;

  /**
   * 태그가 최초로 생성된 시각(ISO 8601).
   *
   * 분석, 최신순 정렬, 생성일별 그룹핑 등에 활용.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * 마지막 정보 수정 시각입니다.
   *
   * 버전관리나 관리툴에 표시 목적.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * 해당 태그의 soft delete(논리 삭제) 시각.
   *
   * 태그 숨김/아카이브, 감사 추적 등에 사용.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardThreadTag {
  /**
   * Thread_tag(토론 태그) 목록/검색 요청용 파라미터 스키마입니다.
   *
   * 태그명, 설명, 생성일, 페이지네이션 등 다양한 검색 조건을 reflection하여 리스트와 페이징을 동시 지원합니다. 관리자 UI
   * 및 자동완성, 태그 클라우드, 관리 기능 등에 활용됩니다.
   */
  export type IRequest = {
    /**
     * 검색/필터 대상 태그명. 부분 일치 검색도 지원하며, 정확한 태그 이름 또는 키워드로 조회할 수 있습니다.
     *
     * 예시: "정책", "금융", "regulation" 등.
     */
    name?: string;

    /**
     * 태그 설명에서의 키워드 검색값(옵션), 태그 소개문에 대한 LIKE 검색 등에 사용가능.
     *
     * 주로 관리자 분류, 태그 자세한 성격 파악 등에 이용합니다.
     */
    description?: string;

    /**
     * 태그 생성일 필터(하한선).
     *
     * 해당 날짜 이후 생성된 태그만 반환.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * 태그 생성일 필터(상한선).
     *
     * 이 날짜까지 만들어진 태그만 목록에 포함.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /** 페이지네이션용 페이지 번호. 1부터 시작하며, 값이 없으면 기본 1 적용. */
    page?: number & tags.Type<"int32">;

    /** 1페이지당 최대 반환 레코드 수. 시스템 기본/상한 적용(예: 100). */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * 새 discussion_board_thread_tag 레코드를 만들기 위한 입력 스키마입니다.
   *
   * 필수값(이름)과 옵션(설명)만을 받아 신규 태그로 생성합니다.
   */
  export type ICreate = {
    /**
     * 신규 생성할 태그의 이름. DB 중복 불가, 필수.
     *
     * 자동완성 및 분류 최상위에 노출되는 레이블입니다.
     */
    name: string;

    /**
     * 태그 설명, 상세 내용, 배경 등. 필수 아님.
     *
     * 관리자 설명, 도구팁 등에 사용.
     */
    description?: string | null;
  };

  /**
   * 기존 태그 객체의 일부(이름, 설명)를 수정할 때 사용하는 스키마입니다.
   *
   * 두 값 모두 optional. 통상 description(설명) 변경에서 많이 활용됩니다.
   */
  export type IUpdate = {
    /**
     * 태그명 변경시 입력. 중복 금지 정책.
     *
     * 공통적으로 unique해야 하며, 이미 사용 중인 태그명으로 변경 시 오류 발생.
     */
    name?: string;

    /**
     * 태그 설명(툴팁/상세) 정보 수정.
     *
     * 비워둘 수 있습니다.
     */
    description?: string | null;
  };
}

import { tags } from "typia";

import { IPage } from "./IPage";

/**
 * 개별 신고 상세 레코드. 게시물/댓글에 대한 신고 내용, 사유 및 처리 상태를 포함.
 *
 * Prisma discussion_board_report 테이블 구조 및 정책 설명을 반영.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardReport = {
  /**
   * 신고 레코드 고유 식별자(UUID).
   *
   * Prisma discussion_board_report.id 컬럼 참조.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 신고자 UUID. (신고를 제출한 사용자)
   *
   * Prisma discussion_board_report.reporting_user_id
   */
  reporting_user_id: string & tags.Format<"uuid">;

  /** 신고 처리 담당 중재자 UUID. (처리 전에는 null) */
  moderator_id?: (string & tags.Format<"uuid">) | null;

  /** 신고당한 게시글 UUID. */
  reported_post_id?: (string & tags.Format<"uuid">) | null;

  /** 신고당한 댓글 UUID. */
  reported_comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * 신고 사유 (정책 위반 분류, 예: 'hate speech', 'spam')
   *
   * 입력은 옵션으로, 실제 신고 시 사용자 선택/입력.
   */
  reason: string;

  /**
   * 신고 처리 상태(예: 'pending', 'in_review', 'resolved', 'dismissed')
   *
   * 정책상 enum 처리 권고.
   */
  status: string;

  /** 신고 접수 시각 (ISO 8601) */
  created_at: string & tags.Format<"date-time">;

  /** 신고가 처리(해결/종결)된 시각(선택) */
  resolved_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardReport {
  /**
   * 신고 조회/검색 및 페이징을 위한 복합 검색 조건 요청 바디.
   *
   * 신고자, 담당자, 신고대상(게시글/댓글), 사유, 상태 등 다수 필터 지원.
   *
   * Prisma discussion_board_report 구조 및 정책을 참조하여 설계.
   */
  export type IRequest = {
    /**
     * 필터를 위한 신고 고유 식별자. (선택)
     *
     * Prisma discussion_board_report.id 참조.
     */
    id?: (string & tags.Format<"uuid">) | null;

    /**
     * 신고한 사용자의 UUID. (선택)
     *
     * Prisma discussion_board_report.reporting_user_id
     */
    reporting_user_id?: (string & tags.Format<"uuid">) | null;

    /** 담당 중재자 UUID. (필터/검색 용) */
    moderator_id?: (string & tags.Format<"uuid">) | null;

    /** 신고된 게시글 UUID. (댓글 신고와 구분) */
    reported_post_id?: (string & tags.Format<"uuid">) | null;

    /** 신고된 댓글 UUID. */
    reported_comment_id?: (string & tags.Format<"uuid">) | null;

    /** 신고 사유. (예: 'hate speech', 'spam' 등) */
    reason?: string | null;

    /** 신고 처리 상태 필터. (예: 'pending', 'resolved') */
    status?: string | null;

    /** 검색 시작 시점(날짜-시간), 신고 생성일 필터. */
    created_at_start?: (string & tags.Format<"date-time">) | null;

    /** 검색 마감 시점(날짜-시간) */
    created_at_end?: (string & tags.Format<"date-time">) | null;

    /** 해결 시각 필터(선택) */
    resolved_at?: (string & tags.Format<"date-time">) | null;
    pagination?: IPage.IRequest;
  };

  /**
   * 신고 등록 요청 스키마. 게시글/댓글 신고 모두 지원하며, 둘 중 하나만 입력이 필수.
   *
   * Prisma discussion_board_report 정책과 입력 검증에 따라 설계.
   */
  export type ICreate = {
    /**
     * 신고자(제출자) UUID. 필수.
     *
     * Prisma discussion_board_report.reporting_user_id
     */
    reporting_user_id: string & tags.Format<"uuid">;

    /** 신고한 게시글의 UUID (댓글 신고와 구분, 해당 없으면 null) */
    reported_post_id?: (string & tags.Format<"uuid">) | null;

    /** 신고된 댓글의 UUID (게시글 신고와 구분, 해당 없으면 null) */
    reported_comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * 신고 사유(정책 위반 분류, 예: '욕설', '홍보', '포르노' 등)
     *
     * 사용자 입력 또는 선택지.
     */
    reason: string;
  };

  /**
   * 신고 상태 및 담당자 수정 등 처리를 위한 요청 바디 (PATCH/PUT에 사용).
   *
   * 처리 담당 지정, 상태 변경, 처리 시각 기록에 사용.
   */
  export type IUpdate = {
    /** (선택) 처리 담당자(중재자) UUID. 처리/담당자 지정에 활용 */
    moderator_id?: (string & tags.Format<"uuid">) | null;

    /** 신고 처리 상태(예: 'in_review', 'resolved', 'dismissed' 등) */
    status?: string;

    /** 신고 처리 완료 시각(선택) */
    resolved_at?: (string & tags.Format<"date-time">) | null;
  };
}

import { tags } from "typia";

/**
 * Entity schema for a moderation report submitted on the discussion board,
 * representing a user-flagged thread, post, or comment. Contains all atomic
 * audit and workflow fields from the 3NF Prisma schema. Used for dashboard
 * review panels, compliance history, and audit trails.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardReport = {
  /**
   * Primary key for the report record. Unique identifier for moderation,
   * audit, or workflow references.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Member UUID who submitted the report (required for audit, notification,
   * and compliance). Enforces traceability as per requirements.
   */
  reporter_member_id: string & tags.Format<"uuid">;

  /**
   * The moderator assigned to review or resolve this report (if any). May be
   * null until assignment/action occurs. Enables escalation workflows.
   */
  moderator_id?: (string & tags.Format<"uuid">) | null;

  /**
   * If report refers to a thread, this is the thread UUID (nullable for other
   * report types).
   */
  thread_id?: (string & tags.Format<"uuid">) | null;

  /** Report's related post UUID if type is post. */
  post_id?: (string & tags.Format<"uuid">) | null;

  /** Report's related comment UUID if type is comment. */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Textual explanation or code for why the item was reported (e.g., 'spam',
   * 'harassment'). Required, not null.
   */
  reason: string;

  /**
   * Workflow status string for this report (e.g.,
   * 'pending','under_review','resolved','dismissed'). Used for dashboard
   * status, compliance, and audit reporting.
   */
  status: string;

  /**
   * Timestamp when the report was filed/submitted. Required. Used for
   * compliance, workload, and history UI.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * If present, the timestamp the report was resolved/closed (may be null for
   * pending/open reports). Used for workflow analytics and audit.
   */
  resolved_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Optional free-text provided by a moderator upon resolving the report,
   * giving additional context or final decisions.
   */
  resolution_notes?: string | null;

  /**
   * If set, the report is considered soft-deleted (hidden from default views
   * but available for compliance audits).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardReport {
  /**
   * Supports searching, filtering, and pagination of reports submitted for
   * moderation on the discussion board. All fields correspond to the Prisma
   * schema for `discussion_board_reports`, enabling advanced querying by any
   * report metadata for compliance, workflow, or UX. Used in admin and
   * moderation panels for efficient triage and review.
   */
  export type IRequest = {
    /**
     * Filter results based on the member who submitted the report (UUID).
     * Enables searching moderator dashboards or member's report history.
     */
    reporter_member_id?: string & tags.Format<"uuid">;

    /**
     * Filter by the assigned or resolving moderator's UUID. Useful for
     * tracking moderation actions, workloads, and compliance reporting.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Filter by the thread (if the report was filed against a thread).
     * Nullable, as reports may target other content types. Used in advanced
     * moderation UX or for resolving status on a particular discussion.
     */
    thread_id?: string & tags.Format<"uuid">;

    /**
     * Filter based on post reports. Nullable, per report content targeting
     * flexibility of platform (may be unpopulated for thread/comment
     * reports).
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Filter for comment-specific reports. Nullable, supporting
     * multi-entity moderation.
     */
    comment_id?: string & tags.Format<"uuid">;

    /**
     * Filter or search for reports by string-matching on the reported
     * reason (e.g., 'spam', 'offensive language'). Used for workload or
     * compliance analytics.
     */
    reason?: string;

    /**
     * Filter based on report status (e.g.,
     * 'pending','resolved','dismissed'). Supports moderation status-driven
     * workflows and audit trails.
     */
    status?: string;

    /**
     * Start datetime for reports included in the query (audit filter, used
     * for dashboards, trend analysis, or reporting UIs).
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * End datetime for reports included (audit/compliance range selection
     * in dashboards, UX etc.).
     */
    created_at_to?: string & tags.Format<"date-time">;

    /**
     * Pagination: The page of results to return (1-based, default 1). Used
     * for managing large report result sets.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Pagination: How many records per page (default subject to
     * config/policy).
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Defines the required/request payload for submitting a new content report
   * for moderator review in the discussion board. Accepts a reference to
   * thread, post, or comment (nullable for only one per report) plus reporter
   * and textual reason. All fields inspired by and mapped to the
   * `discussion_board_reports` Prisma schema ensuring auditability and
   * workflow.
   */
  export type ICreate = {
    /**
     * UUID of the member filing the report. Required for tracking and
     * compliance. Refers to `discussion_board_members.id` in the database.
     */
    reporter_member_id: string & tags.Format<"uuid">;

    /**
     * The UUID of the thread being reported (if the subject is a thread).
     * Nullable for post/comment reports.
     */
    thread_id?: (string & tags.Format<"uuid">) | null;

    /**
     * UUID of the post being reported (when applicable). Nullable for
     * thread/comment reports.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * UUID of the comment being reported (if applicable). Nullable for
     * thread/post reports.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Required string explaining or justifying why the item is being
     * reported (e.g., 'harassment'). Fulfills business and audit compliance
     * requirements from the schema.
     */
    reason: string;
  };

  /**
   * Payload for updating status, assigning moderator, or leaving resolution
   * notes on a report record. Based on the workflow and audit requirements
   * established in requirements analysis and Prisma schema. Makes audit trace
   * and state-machine transitions explicit in the report history.
   */
  export type IUpdate = {
    /**
     * UUID of the moderator assigned or acting on this report. Used for
     * audit, role escalation, and workflow management.
     */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * Status of the report after update (e.g., 'under_review', 'resolved',
     * 'dismissed'). Required for status transitions and audit.
     */
    status: string;

    /**
     * Optional notes clarifying the moderator's decision, required for
     * compliance and notification. Populates `resolution_notes` in the
     * database.
     */
    resolution_notes?: string;
  };
}

import { tags } from "typia";

/**
 * Atomic tag object for labeling, filtering, and search in the board.
 *
 * Each tag entry is a distinct, uniquely named label available for thread
 * assignment or filtering in searches. Fully normalized per schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITag = {
  /**
   * Unique identifier for the tag entry.
   *
   * Primary key field from tags table; used to reference tags in assignments
   * or filtering.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique tag label provided by users or moderators.
   *
   * Used as an atomic label for advanced filtering, search, and moderation
   * assignment across the platform.
   */
  name: string;

  /**
   * Timestamp the tag was added to the system. Used for ordering and
   * dashboard analytics.
   *
   * Directly from tags.created_at.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ITag {
  /**
   * Request schema for searching, filtering, and paginating tags.
   *
   * Supports advanced admin and user workflows for tag browsing, assignment,
   * and dashboard creation.
   */
  export type IRequest = {
    /**
     * Partial or complete tag name to search for.
     *
     * Used in advanced filtering or type-ahead search functions in tag
     * administration and UI assignment forms.
     */
    name?: string;

    /**
     * Lower date bound for tag creation timestamp filter.
     *
     * Returns only tags created on or after this value.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Upper date bound for the tag creation timestamp filter.
     *
     * Returns only tags created before/on this date.
     */
    created_to?: string & tags.Format<"date-time">;

    /**
     * Page number for pagination in results.
     *
     * Standard paging parameter for IPage contract.
     */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Maximum number of results to return per page.
     *
     * Used to control result size and enable client-driven performance
     * tuning.
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Sort order for tags in result (e.g., 'name_asc', 'created_desc').
     *
     * Enables clients to control display order for tag selection and
     * discovery UIs.
     */
    sort?: string;
  };

  /**
   * Request schema for creating a new tag entity.
   *
   * Only the atomic tag name is required; creation metadata is
   * system-managed.
   */
  export type ICreate = {
    /**
     * Name for the new tag. Must be unique.
     *
     * Used as a label for search, filtering, and thread categorization
     * across the site.
     */
    name: string;
  };

  /**
   * Schema for updating an existing tag. Only atomic 'name' field may be
   * replaced; other metadata is managed outside this schema.
   *
   * Used for tag edit UI dialogs and API update endpoints.
   */
  export type IUpdate = {
    /**
     * New or replacement label for the tag. Must be unique among all tags.
     *
     * Updates the tags.name field.
     */
    name?: string;
  };

  /**
   * Standard schema returned by tag deletion endpoints to confirm operation
   * results.
   *
   * Includes the id and human-readable status, as per board moderation
   * requirements.
   */
  export type IDeleteResult = {
    /**
     * The tag id that was deleted.
     *
     * Refers to the atomic tag identifier for auditing and confirmation.
     */
    id?: string & tags.Format<"uuid">;

    /**
     * Human-readable status or result identifier for the deletion
     * operation.
     *
     * E.g., 'deleted', 'not_found', or error string indicating failure
     * mode.
     */
    status?: string;
  };
}

import { tags } from "typia";

/**
 * Atomic representation of a single comment vote record, following strict
 * normalization (3NF) as in the 'comment_votes' table. Each record reflects a
 * unique user's upvote or downvote on a comment, with complete audit
 * information for moderation review and analytics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommentVote = {
  /**
   * Primary key for each comment vote record, uniquely identifying an upvote
   * or downvote as per 'id' in Prisma 'comment_votes'.
   *
   * Atomic, required value used throughout RBAC and moderation workflows.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the comment being voted on. Relates strictly to
   * 'comment_id' in 'comment_votes' table, enforcing referential integrity.
   */
  comment_id: string & tags.Format<"uuid">;

  /**
   * UUID of the user who cast this upvote or downvote. Normalized property
   * per 'voter_id' in Prisma schema.
   *
   * Essential for user vote history and audit.
   */
  voter_id: string & tags.Format<"uuid">;

  /**
   * Atomic boolean indicating whether the vote was an upvote (true) or
   * downvote (false).
   *
   * Directly mapped to 'is_upvote' in 'comment_votes', supporting ranking and
   * moderation logic.
   */
  is_upvote: boolean;

  /**
   * Timestamp of when this vote was cast, supporting chronological sorting
   * and moderation traceability. This is the 'created_at' field of the Prisma
   * table.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommentVote {
  /**
   * Request filtering/search schema for comment votes, representing
   * search/pagination/filter arguments for finding vote records in the
   * 'comment_votes' table. Follows strict normalization principles and aligns
   * with requirements for moderation, analytics, and user review.
   *
   * Each property corresponds either to atomic fields in the Prisma model or
   * to search UI/filter controls in the application layer.
   */
  export type IRequest = {
    /**
     * UUID of the comment to filter votes for. Relates to the 'comment_id'
     * field in the 'comment_votes' table, enabling filtering votes for a
     * particular comment.
     *
     * See moderation and audit requirements; can be null to indicate votes
     * from all comments.
     */
    comment_id?: string & tags.Format<"uuid">;

    /**
     * UUID of the user who cast the vote. Corresponds directly to the
     * 'voter_id' column in the 'comment_votes' table. Allows review of a
     * single user's voting history for compliance or moderation.
     */
    voter_id?: string & tags.Format<"uuid">;

    /**
     * Boolean indicating whether to filter only upvotes (true) or downvotes
     * (false). Follows atomic property normalization. Maps to the
     * 'is_upvote' column in 'comment_votes'.
     */
    is_upvote?: boolean;

    /**
     * Start of the creation date range for the votes to return. Used for
     * filtering by when votes occurred. Not a direct Prisma property, but a
     * search filter aligned with the 'created_at' column.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * End of the creation date range for vote search. Maps to 'created_at'
     * in Prisma model, but here as a filter rather than stored data.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /**
     * Page number for paginated queries. Part of standard pagination—see
     * IPage.IRequest for full description.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Number of vote records per page. Helps restrict results for scalable
     * queries and UIs. See standard IPage.IRequest for explanation.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Sort order for results (e.g., 'created_at desc'). Allows choosing the
     * sorting order in UI panels or moderation dashboards.
     */
    sort?: string;
  };

  /**
   * Request schema for creating a comment vote, matching atomic structure of
   * 'comment_votes' and enforcing unique (comment_id, voter_id) combination
   * rule described in business requirements.
   */
  export type ICreate = {
    /**
     * Target comment's UUID; maps to 'comment_id' foreign key in
     * 'comment_votes'.
     *
     * Required to ensure integrity with comments table.
     */
    comment_id: string & tags.Format<"uuid">;

    /**
     * UUID for the user making the vote. Required for linking vote to a
     * specific user for tracing/auditing.
     */
    voter_id: string & tags.Format<"uuid">;

    /**
     * Indicates whether the new vote is an upvote or downvote. Maps
     * directly to atomic 'is_upvote' boolean in Prisma schema.
     */
    is_upvote: boolean;
  };

  /**
   * Schema for updating an existing comment vote (changing direction up vs.
   * down), enforcing atomicity and auditability. All edits must be strictly
   * logged per moderation requirements.
   */
  export type IUpdate = {
    /**
     * Updated vote direction (true for upvote, false for downvote). Only
     * this atomic field is modifiable per normalization and audit
     * policies.
     */
    is_upvote: boolean;
  };

  /**
   * Confirmation/result object for deleted comment vote records—this signals
   * that the upvote/downvote was removed, and when. Useful for UI feedback
   * and audit trailing.
   */
  export type IDeleteResult = {
    /** UUID of the deleted vote. Matches 'id' in 'comment_votes' table. */
    id: string & tags.Format<"uuid">;

    /**
     * When the vote was deleted (if soft-deletion is used); corresponds to
     * audit and business rules for transparency.
     */
    deleted_at?: string & tags.Format<"date-time">;
  };
}

import { tags } from "typia";

import { IPage } from "./IPage";

/**
 * Represents a unique, normalized role entity as described in the Prisma
 * 'roles' table. Roles provide the structural basis for role-based access
 * control (RBAC) within the platform, governing access and permissions for
 * users throughout the system.
 *
 * Each role defines the set of permissions a user or set of users possess, such
 * as regular user privileges, moderator authority, or administrative control.
 * Roles are the primary means to realize all access level and business rules
 * (see requirement analysis Section 3 and 7) and play a critical part in
 * security and system management workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRole = {
  /**
   * Unique identifier for the role record as described in the 'roles' Prisma
   * schema. Each role within the system, such as user, moderator, or admin,
   * is represented by a unique id.
   *
   * This field is the primary key for the roles table and is required for
   * referencing roles in assignments and for audit purposes.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The name of the role as defined in the 'roles' Prisma schema. This is a
   * unique, non-nullable string, e.g., 'user', 'moderator', or 'admin'.
   *
   * It is strictly enforced by a unique constraint in the database to ensure
   * that each role is distinctly identifiable for role-based access control
   * logic.
   */
  name: string;

  /**
   * A detailed description of what permissions and responsibilities are
   * associated with the role.
   *
   * This information is visible in admin UIs and references the 'description'
   * column and comments in the Prisma schema for roles, ensuring clarity for
   * permission settings and management.
   */
  description: string;
};
export namespace IRole {
  /**
   * 권한/역할(roles) 목록/검색/정렬/페이징 요청 스키마.
   *
   * Roles 테이블 기반으로 이름/설명/생성일 등 주요 컬럼 값으로 필터링할 수 있습니다.
   *
   * 관리자 RBAC UI, 권한 관리 패널 등에 사용됩니다.
   */
  export type IRequest = {
    /** 역할 이름 검색(정확 or 부분). */
    name?: string;

    /** 설명 키워드로 필터링. */
    description?: string;
    pagination?: IPage.IRequest;

    /** 정렬(예: name asc, created_at desc 등) */
    sort?: string;
  };

  /**
   * Payload schema for creating a new role in the platform. Matches the
   * structure and requirements of the Prisma 'roles' table, ensuring all
   * required atomic values (name, description) are validated prior to
   * creation.
   *
   * This type enforces business rules about uniqueness and documentation for
   * each access level, supporting extensible role management in the admin
   * interface.
   */
  export type ICreate = {
    /**
     * The name for the new role. This must be unique and non-empty,
     * enforcing the unique constraint present in the Prisma roles table.
     *
     * Example: 'admin', 'moderator', 'user'. Used throughout the admin UI
     * and APIs for permissions logic.
     */
    name: string;

    /**
     * A comprehensive description of the role's purpose, permissions, and
     * boundaries of authority.
     *
     * Drawn from the Prisma schema's column documentation and expected to
     * be used for administrative reference and help text.
     */
    description: string;
  };

  /**
   * The type for updating a role's atomic data (name, description), matching
   * the updatable, non-primary-key fields of the 'roles' Prisma table.
   *
   * This supports RBAC evolution and ensures that role management remains
   * fully documented and auditable.
   */
  export type IUpdate = {
    /**
     * The updated name for this role, mapped to the 'name' field in the
     * roles Prisma table. Must remain unique if changed.
     *
     * Enables administrators to refine role names as business needs change.
     */
    name?: string;

    /**
     * The updated description for the role, as stored in the roles Prisma
     * 'description' field.
     *
     * Helps keep RBAC logic transparent and understandable when roles
     * evolve over time.
     */
    description?: string;
  };
}

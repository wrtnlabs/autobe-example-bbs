import { tags } from "typia";

/**
 * Atomic notification event from the notifications table, representing a
 * message/alert for a single user. Stores all atomic, non-aggregated event
 * dataâ€”IDs, type, content, references, and timestamps. Used broadly for user
 * alerts, system messages, moderation outcomes, and triggers for notification
 * delivery UX.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotification = {
  /**
   * Unique notification record identifier. Primary key in notifications
   * table. Used to address, mark as read, or delete events.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Recipient user ID, referencing users.id from notifications.user_id FK.
   * Connects notification to a single user's inbox.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Associated post (if the notification concerns a post event). Foreign key
   * to posts.id. Null if not related to a post.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Associated comment (if relevant). Null if not a comment event. Based on
   * notifications.comment_id FK.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Associated poll, for events like poll closure or vote. Nullable. Based on
   * notifications.poll_id FK.
   */
  poll_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Associated moderation action/event, per notifications.moderation_log_id
   * link. Null unless type references moderation outcome.
   */
  moderation_log_id?: (string & tags.Format<"uuid">) | null;

  /**
   * The kind of event: values set by business logic (e.g., 'post_reply',
   * 'system_alert', 'user_warning'). Based on notifications.type. Used to
   * filter and categorize.
   */
  type: string;

  /**
   * Main notification content for user display; set by backend or admin.
   * Based on notifications.message, per Prisma schema.
   */
  message: string;

  /**
   * Indicates if user has marked/read this notification. Directly represents
   * notifications.is_read for UI state management.
   */
  is_read: boolean;

  /**
   * Timestamp when the notification was generated. Used for ordering,
   * pagination, and auditing (notifications.created_at).
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace INotification {
  /**
   * Request body for searching or filtering notifications. Maps to atomic and
   * filterable columns in notifications Prisma schema, including is_read,
   * user_id, type, created_at (date range), and supports pagination. Helps
   * end-users focus on relevant messages or lets admins audit notification
   * flows.
   */
  export type IRequest = {
    /**
     * Filter for notifications belonging to a particular user (user's
     * UUID). Correlates to user_id in notifications table. Used for
     * personal notification lists or admin views.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter; if true, return only read items; if false, unread.
     * Implements notifications table's is_read for notification inbox
     * display, triage, and batching.
     */
    is_read?: boolean;

    /**
     * Optional filter for notification type (e.g., 'post_reply',
     * 'comment_mention', 'system_alert'). Based on notifications.type in
     * Prisma. Used for inbox organization or admin analytics.
     *
     * Valid examples: 'upvote', 'user_warning', 'poll_closed'. Enforced by
     * allowed business notification types.
     */
    type?: string;

    /**
     * Allows filtering for notifications created after a given timestamp
     * (ISO8601 UTC). For recent activity queries. Correlates to
     * notifications.created_at column.
     */
    created_after?: string & tags.Format<"date-time">;

    /**
     * Filter for notifications created before the given timestamp (ISO8601
     * UTC) for historical views or analytics. Based on
     * notifications.created_at.
     */
    created_before?: string & tags.Format<"date-time">;

    /** Pagination parameter. Specifies results page. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Maximum number of records per page (default: 100). To be consistent
     * with IPage.IRequest.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Payload to create a new notification, as required for notification
   * delivery (see notifications schema). Covers all event reference FKs.
   * Backed by atomic event storage, as per DB normalization in notifications
   * entity. Used by backend when sending user/system/moderator alerts.
   */
  export type ICreate = {
    /**
     * User ID to receive the notification (users.id). Required for
     * delivery. Enforced by notifications.user_id FK.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Type/category string for event triggering the notification (must
     * match allowed types, e.g.: 'post_reply', 'upvote'). See
     * notifications.type.
     */
    type: string;

    /**
     * Display message for the end-user (will show in inbox and notification
     * popups). Must be present, per notifications.message column.
     */
    message: string;

    /**
     * If this notification pertains to post activity, the associated post
     * ID (posts.id). See notifications.post_id.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * For comment-level notifications, this is the referenced comment.
     * Nullable.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Relates to poll-specific notifications. Nullable by schema. */
    poll_id?: (string & tags.Format<"uuid">) | null;

    /**
     * For moderation-related notifications, links to the log ID
     * (moderation_logs.id). Nullable.
     */
    moderation_log_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Represents updatable fields in a notification (message or is_read
   * status). Used when users mark as read, or for admin content changes. Maps
   * to allowed updatable notifications columns. Only atomic and safe fields
   * are mutable.
   */
  export type IUpdate = {
    /**
     * Updates the display message for the notification (optional). Derived
     * from notifications.message column, supporting notification content
     * editing (e.g., admin/auto).
     */
    message?: string;

    /**
     * If set, toggles/readmarks the notification for the user. Implements
     * the notifications.is_read property for user state tracking.
     */
    is_read?: boolean;
  };
}

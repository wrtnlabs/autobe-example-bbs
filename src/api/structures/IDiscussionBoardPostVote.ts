import { tags } from "typia";

/**
 * Atomic record representing a single upvote or helpfulness mark for a post;
 * mapped directly from a row in discussion_board_post_vote.
 *
 * Corresponds strictly with all normalized fields required for analytics,
 * feedback reporting, and moderation audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPostVote = {
  /**
   * Primary key, UUID identifier for this vote record. Unique per upvote
   * entry.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID reference to the registered user who cast this vote. Required for
   * validating 1:1 voting constraint and audit compliance.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * UUID of the post which received this vote. Ensures referential and
   * analytic integrity.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * ISO 8601 timestamp indicating when the vote was cast. Used for trend
   * analysis, vote history, and audit trail.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardPostVote {
  /**
   * Filter/search and pagination request contract for listing records from
   * discussion_board_post_vote.
   *
   * Defines full suite of filters for retrieving and aggregating vote data
   * for analytics, moderation, and profile engagement features.
   */
  export type IRequest = {
    /**
     * UUID of the user who cast the upvote/feedback. Used for filtering
     * votes cast by a specific user, for audit/compliance or profile
     * statistics.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * UUID of the post to which the vote applies. Used for filtering votes
     * related to a specific post or to aggregate vote counts for analytics
     * or UI displays.
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Lower bound timestamp for when a vote was cast, used for filtering
     * votes in a given date window for analytics or trend analysis
     * purposes.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound timestamp for when a vote was cast, supporting filtering
     * of votes in a time range for reporting or analysis.
     */
    created_to?: string & tags.Format<"date-time">;

    /**
     * Page number to fetch in paginated vote listings. Defaults to 1 if not
     * specified.
     */
    page?: number & tags.Type<"int32">;

    /**
     * The maximum number of vote records per page for pagination. Controls
     * data volume for UI or analytics. Typical values: 10, 20, 50, etc.
     */
    limit?: number & tags.Type<"int32">;

    /**
     * Sort key for votes (typically only 'created_at'). Drives order of
     * entries in lists or analytics screens.
     */
    sort_by?: "created_at";

    /**
     * Sort direction: 'asc' (ascending) or 'desc' (descending) to control
     * chronological or reverse order.
     */
    sort_order?: "asc" | "desc";
  };

  /**
   * Input contract to create a new post vote (upvote/feedback) in the voting
   * table. Requires user and post references.
   */
  export type ICreate = {
    /**
     * UUID of the user casting the vote. Must be a registered system user,
     * and may only vote once per post per business rules (unique constraint
     * in schema).
     *
     * Business context: Used in analytics, user engagement scoring,
     * moderation.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * UUID of the post being upvoted. Must reference a valid post in the
     * discussion board (discussion_board_post.id).
     *
     * Used for upvoting logic and analytics.
     */
    post_id: string & tags.Format<"uuid">;
  };

  /**
   * Update contract for discussion_board_post_vote records. Typically allows
   * only correction of audit fields (e.g. created_at), not changing core vote
   * relationships.
   */
  export type IUpdate = {
    /**
     * Optionally override the vote creation time (ISO 8601) as allowed by
     * business logic. Used mostly for correction, not standard updates.
     *
     * If omitted, original created_at date is retained.
     */
    created_at?: string & tags.Format<"date-time">;
  };
}

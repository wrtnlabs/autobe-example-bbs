import { tags } from "typia";

/**
 * 학생(AttendanceStudent) 엔티티의 atomic 필드 DTO. Prisma attendance_student 테이블에 맞춘
 * 완전형 상세 정보.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAttendanceStudent = {
  /** 학생 고유 식별자(UUID, PK). */
  id: string & tags.Format<"uuid">;

  /** 소속 학교ID(FK). */
  school_id: string & tags.Format<"uuid">;

  /** 소속 반ID(FK). */
  classroom_id: string & tags.Format<"uuid">;

  /** 부모(보호자)ID(FK, nullable). */
  parent_id?: string & tags.Format<"uuid">;

  /** 학생의 인증 계정ID(FK). */
  auth_account_id: string & tags.Format<"uuid">;

  /** 학생 실명. */
  name: string;

  /** 학생 성별. 'male', 'female' 중 하나. */
  gender: "male" | "female";

  /** 학생 생년월일(ISO8601). */
  birthdate: string & tags.Format<"date-time">;

  /** 등록일시. */
  created_at: string & tags.Format<"date-time">;

  /** 수정일시. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAttendanceStudent {
  /**
   * 학생 목록/검색 등에서 row summary로 사용하는 간결한 요약 정보 타입입니다. 기본 인적 정보 및 연결된 반/학부모의 FK만
   * 표시하며, 상세 정보나 통계를 원할 때는 IAttendanceStudent로 조회합니다.
   */
  export type ISummary = {
    /** 학생 고유 식별자(UUID, PK). attendance_student.id */
    id: string & tags.Format<"uuid">;

    /** 학생 실명. atomic, 부분/전체 검색용 최상위 필드. */
    name: string;

    /** 소속 학급(반) UUID. attendance_classroom.id FK. */
    classroom_id: string & tags.Format<"uuid">;

    /** 학생의 학부모(보호자) UUID(FK). 연결 없으면 null. attendance_parent.id */
    parent_id?: string & tags.Format<"uuid">;

    /** 학생 성별. enum형('male'/'female'), 정책상 두 값만 허용. */
    gender: "male" | "female";
  };

  /**
   * 학생(AttendanceStudent) 목록 요청의 페이징, 검색, 정렬/필터 요청 DTO. attendance_student
   * 테이블의 주요 FK/필드명에 정확히 일치하도록 설계됨. 일반적으로 PATCH /attendance/students 등에서 사용.
   */
  export type IRequest = {
    /** 검색 대상 학생의 소속 학교 식별자(UUID, FK). */
    school_id?: string & tags.Format<"uuid">;

    /** 검색 대상 학생의 소속 반(PK). */
    classroom_id?: string & tags.Format<"uuid">;

    /** 검색 대상 학생의 보호자(부모) 식별자(UUID, FK to attendance_parent.id) */
    parent_id?: string & tags.Format<"uuid">;

    /** 검색용 학생이름(부분/정확 검색). */
    name?: string;

    /** 학생연락처(일부 API 또는 실무용 특화, 필요에 따라 필드 추가). */
    phone?: string;

    /** 페이지 네이션 파라미터. */
    page?: number & tags.Type<"int32">;

    /** 페이지당 아이템 수. */
    limit?: number & tags.Type<"int32">;

    /** 정렬기준 컬럼명. */
    sort_by?: "created_at" | "updated_at";

    /** 정렬 방향. */
    sort_direction?: "asc" | "desc";
  };

  /**
   * 신규 학생(AttendanceStudent) 등록용 DTO. atomic 필드만 기술(모든 값의 중복, FK 제약
   * validation 필요).
   */
  export type ICreate = {
    /** 학생 소속 학교 ID(FK). */
    school_id: string & tags.Format<"uuid">;

    /** 소속 반 ID(FK). */
    classroom_id: string & tags.Format<"uuid">;

    /** 학생 보호자(부모) ID(FK, nullable). */
    parent_id?: string & tags.Format<"uuid">;

    /** 연동 인증계정ID(FK). */
    auth_account_id: string & tags.Format<"uuid">;

    /** 학생 실명(필수). */
    name: string;

    /** 학생 성별(남자:male, 여자:female, 필수). */
    gender: "male" | "female";

    /** 생년월일(필수, ISO8601). */
    birthdate: string & tags.Format<"date-time">;
  };

  /**
   * 학생(AttendanceStudent) 정보 업데이트(전체대체/PUT)용 DTO. 전체필수요소 필드로 atomic,
   * 중복/제약/정합성 검사 필요.
   */
  export type IUpdate = {
    /** 업데이트할 학생 소속 학교 ID(FK). */
    school_id: string & tags.Format<"uuid">;

    /** 수정대상 반 ID(FK). */
    classroom_id: string & tags.Format<"uuid">;

    /** 수정대상 부모/보호자 ID(FK, nullable). */
    parent_id?: string & tags.Format<"uuid">;

    /** 수정/연동 인증계정ID(FK). */
    auth_account_id: string & tags.Format<"uuid">;

    /** 수정할 학생 실명. */
    name: string;

    /** 성별(수정). */
    gender: "male" | "female";

    /** 생년월일. */
    birthdate: string & tags.Format<"date-time">;
  };
}

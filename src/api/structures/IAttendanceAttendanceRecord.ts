import { tags } from "typia";

/**
 * 개별 학생의 출석 기록을 나타내는 엔터티입니다.
 *
 * Prisma 테이블 attendance_attendance_record와 1:1 매핑. 학생별 출석 현황, 대시보드 제공 및 통계,
 * 출석/결석 통보(알림), 이상 탐지, 추가 감사 로그 등 모든 핵심 출석 이벤트 레코드의 기준이 됩니다. 각 컬럼은 atomic하며, 타
 * 테이블(PK, FK)과의 연결을 통해 교사/반/코드 기반 상세 조회가 가능합니다. 다수의 이력, 상태변경, 연관 알림이 별도로 붙을 수
 * 있습니다.
 *
 * 실시간 출결대시보드, 부모/교사/관리자 알림, 추심/이상징후 감지, 통계 대시보드·레포트 등 다양한 서비스 시나리오에 연동됩니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAttendanceAttendanceRecord = {
  /**
   * 출석 기록의 고유 식별자입니다.
   *
   * Prisma: attendance_attendance_record.id. 각 출석 시도(출석, 지각, 결석, 조퇴 등)의
   * PK(UUID)로, 전체 출석·감사 이력의 기준이 됩니다. 시스템 내 유일하며 외부 참조도 사용됩니다.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 출석 대상 학생의 ID입니다.
   *
   * Prisma: attendance_attendance_record.student_id. attendance_student.id를
   * 참조하며, 출석 대시보드/부모-교사 알림 등에 사용됩니다.
   */
  student_id: string & tags.Format<"uuid">;

  /**
   * 본 출석 레코드가 귀속되는 학급(반)의 ID입니다.
   *
   * Prisma: attendance_attendance_record.classroom_id.
   * attendance_classroom.id 참조로 교사, 관리자 대시보드 집계, 자녀반/학급통계 등에 활용됩니다.
   */
  classroom_id: string & tags.Format<"uuid">;

  /**
   * 출석을 개시/관리한 교사 ID입니다.
   *
   * Prisma: attendance_attendance_record.teacher_id. attendance_teacher.id와
   * 연결되어 출석 주체 확인, 감사지원, 통계/알림 송신 등에서 특징적으로 활용됩니다.
   */
  teacher_id: string & tags.Format<"uuid">;

  /**
   * 출석 방식(코드/QR/수기 등) 정보를 담는 출석 방법의 ID입니다.
   *
   * Prisma: attendance_attendance_record.method_id.
   * attendance_attendance_method.id를 참조하며, 방식별 통계/이상감지(수기/자동), 현장 정책에 활용됩니다.
   */
  method_id: string & tags.Format<"uuid">;

  /**
   * 출석코드 기반 출석이면 입력되는 코드의 ID입니다. 미사용시 null.
   *
   * Prisma: attendance_attendance_record.code_id.
   * attendance_attendance_code.id 참조, 부정출석 탐지/코드 감시/감사로그로 연결됩니다.
   */
  code_id?: (string & tags.Format<"uuid">) | null;

  /**
   * 출석 입력 시각(로컬 타임존, ISO8601)입니다.
   *
   * Prisma: attendance_attendance_record.checked_at. 시간 감사, 지각 판정, 부모 알림 전송 등
   * 서비스 핵심 기준이 됩니다.
   */
  checked_at: string & tags.Format<"date-time">;

  /**
   * 출석 결과 상태(예: present, late, absent, leave 등)입니다.
   *
   * Prisma: attendance_attendance_record.status. 서비스는 비즈니스/어플리케이션 단에서
   * 유효성(enum 등) 검사하며, 통계/이상징후 감지, 알림 메시지에도 사용됩니다.
   */
  status: string;

  /**
   * 지각, 결석 등 정상상태가 아닐 때의 사유(메모, 예외사항)입니다.
   *
   * Prisma: attendance_attendance_record.exception_reason. 교사 입력, 부모 소명, 시스템
   * 자동기록 등 예외상황 이력 용도입니다.
   */
  exception_reason?: string | null;
};
export namespace IAttendanceAttendanceRecord {
  /**
   * 출결 이력(복수) 검색·조회·페이징 요청 오브젝트 DTO.
   *
   * 학생/반/교사/코드/기간/상태 등 다양한 필드 필터 조합 지원.
   */
  export type IRequest = {
    /** 출석 이력 검색/조회할 학생 식별자(UUID) */
    student_id?: string & tags.Format<"uuid">;

    /** 출석 이력 조회 대상(반/강의실) UUID */
    classroom_id?: string & tags.Format<"uuid">;

    /** 담당교사/출결 등록자 UUID, 검색옵션 */
    teacher_id?: string & tags.Format<"uuid">;

    /** 출결 방식(UUID), code/manual 등 필터링 옵션 */
    method_id?: string & tags.Format<"uuid">;

    /** 출석 상태(present, absent, late, leave 등) - 문자열 상태 */
    status?: string;

    /** 출석 코드별 필터(UUID, optional) */
    code_id?: string & tags.Format<"uuid">;

    /** 조회시작시각(검색 기간시작, ISO8601) */
    start_at?: string & tags.Format<"date-time">;

    /** 검색종료(기간 끝, ISO8601) */
    end_at?: string & tags.Format<"date-time">;

    /** 페이지번호(1-base, optional) */
    page?: number & tags.Type<"int32">;

    /** 페이지당 반환 건수(기본 20, 최대100) */
    limit?: number & tags.Type<"int32">;

    /** 정렬 필드/기준(checked_at 등) */
    sort?: string;

    /** 정렬순서 asc/desc */
    order?: string;
  };

  /**
   * 출석(출결) 레코드 신규 등록 요청 타입입니다.
   *
   * Prisma attendance_attendance_record 신규생성에 필요한 필수 atomic 값만 포함하며, 출결코드,
   * 방식, 시간, 상태, 예외사유 입력까지 지원합니다.
   *
   * 비즈니스 규칙: (student, class, checked_at) 조합은 유니크, status는 정합성(enum/from FE
   * validation)이 요구됩니다.
   */
  export type ICreate = {
    /** 출석 대상 학생의 ID. attendance_student.id로 연결. */
    student_id: string & tags.Format<"uuid">;

    /** 해당 출석 기록의 학급(반) ID. attendance_classroom.id 참조. */
    classroom_id: string & tags.Format<"uuid">;

    /** 해당 출석을 기록한(개시한) 교사 ID. attendance_teacher.id. */
    teacher_id: string & tags.Format<"uuid">;

    /** 출석 입력 방식의 ID. attendance_attendance_method.id 참조. */
    method_id: string & tags.Format<"uuid">;

    /** 코드 기반 출석일 경우의 출석코드 ID. null 허용. */
    code_id?: (string & tags.Format<"uuid">) | null;

    /** 출석 입력 타임스탬프(ISO8601). */
    checked_at: string & tags.Format<"date-time">;

    /** 출석 결과 상태(enum/비즈니스 validation 대상, 예: present, late, absent 등). */
    status: string;

    /** 예외 발생시(지각/결석 사유 등) free text. */
    exception_reason?: string | null;
  };

  /**
   * 기존 출석 레코드(atomic 1개 단위)의 전체 수정/갱신용 요청 타입입니다.
   *
   * Prisma attendance_attendance_record 테이블의 full 정보 중 수정 가능한 항목만 포함. (PK/id는
   * path-param) status, time, 예외사유, 방식 등도 대체 가능합니다.
   *
   * Soft delete가 아니라 전체 교체형입니다.
   */
  export type IUpdate = {
    /** 출석 대상 학생의 ID. attendance_student.id로 연결. */
    student_id: string & tags.Format<"uuid">;

    /** 해당 출석 기록의 학급(반) ID. attendance_classroom.id 참조. */
    classroom_id: string & tags.Format<"uuid">;

    /** 해당 출석을 기록한(개시한) 교사 ID. attendance_teacher.id. */
    teacher_id: string & tags.Format<"uuid">;

    /** 출석 입력 방식의 ID. attendance_attendance_method.id 참조. */
    method_id: string & tags.Format<"uuid">;

    /** 코드 기반 출석일 경우의 출석코드 ID. null 허용. */
    code_id?: (string & tags.Format<"uuid">) | null;

    /** 출석 입력 타임스탬프(ISO8601). */
    checked_at: string & tags.Format<"date-time">;

    /** 출석 결과 상태(enum/비즈니스 validation 대상, 예: present, late, absent 등). */
    status: string;

    /** 예외 발생시(지각/결석 사유 등) free text. */
    exception_reason?: string | null;
  };
}

import { tags } from "typia";

/**
 * Discussion board section entity. Each section organizes a set of threads
 * under a parent channel (see ERD/Prisma). This type aligns with forum
 * subdivision design and supports both user and admin-side browsing, filtering,
 * and management.
 *
 * Fully normalized with all atomic fields, descriptive guidance, and audit
 * fields, as required. All properties reflect strict DB normalization, RBAC
 * access, and compliance needs as documented in the specs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSection = {
  /**
   * Primary Key. Unique section identifier (UUID). Used as the reference for
   * all section-level operations and relations.
   *
   * This value links the section to thread/post entities and supports audit,
   * navigation, and management workflows. Ensures entity-level uniqueness and
   * is referenced throughout the system for reliable access, as stated in the
   * Prisma schema and ERD.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the parent Channel's id from
   * discussion_board_channels. Associates this section with a parent channel,
   * enforcing a 1:N relationship at the schema/database level.
   *
   * Used to organize sections within higher-level channels (e.g.,
   * 'Legislation' under 'Politics'). This is required and non-null; the
   * platform logic demands that every section is attached to a valid channel,
   * as described in system navigation and business rules.
   */
  discussion_board_channel_id: string & tags.Format<"uuid">;

  /**
   * Unique section code within a channel. Used for admin and routing
   * scenarios (e.g., 'legis', 'markets'). Must be unique per channel, helping
   * to enable clean URLs and business logic lookups.
   *
   * Enforces section uniqueness at the code level, avoiding ambiguity and
   * making programmatic access smoother across the site. See admin and system
   * design requirements.
   */
  code: string;

  /**
   * Section name. User-facing, atomic label for forum organization (e.g.,
   * 'Legislation'). This value is shown to users in the UI and enables
   * filtering/search functionalities.
   *
   * Ensures an accessible, normalized display layer and supports both user
   * and admin workflows.
   */
  name: string;

  /**
   * Section description, human-readable text providing context and detail for
   * users. Nullable â€“ can be omitted for terse forums, or completed for
   * improved UX/discoverability.
   *
   * Used in listings, search, and admin interfaces to guide users and support
   * richer content navigation, as called for in the requirements analysis.
   */
  description?: string | null;

  /**
   * Section creation timestamp. Used for auditing, sorting, and admin review.
   * Records atomic event for compliance and platform metrics.
   *
   * Referenced in system logs and analytics panels as required by audit,
   * traceability, and reporting features.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the last modification to the section. Used for system
   * logging and compliance, enabling sorting by update recency and reflective
   * display of the latest site status.
   *
   * Supports audit trails and UI freshness signals.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for the section. Null if the section is active;
   * otherwise, set when deleted. Used for audit and regulatory compliance.
   *
   * Allows reversible moderation actions and aligns with audit trail
   * requirements per the business logic.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardSection {
  /**
   * Request body type for retrieving/filtering section/forum list
   * (discussion_board_sections). Used for advanced admin UIs or for user
   * search. Optional fields allow per-channel/subforum retrieval and search.
   */
  export type IRequest = {
    /** Page number for pagination. Optional; positive integer if set. */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Number of results to return per page. Optional; handled by backend
     * defaults if omitted.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Optional filter: show only sections belonging to a particular channel
     * (references discussion_board_channels.id).
     *
     * Used for displaying all sections in a channel for UI navigation or
     * admin tooling.
     */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional section code filter (e.g., 'legis', 'markets'). Used for
     * searching by section code in admin/public tools.
     */
    code?: string | null;

    /** Optional full/partial section name filter for listing or searching. */
    name?: string | null;

    /**
     * Optional section description filter (display-admin or search/audit
     * use).
     */
    description?: string | null;
  };

  /**
   * Create-request type for adding a new section/forum to the board. All
   * fields, defaults, and validation requirements are inherited from the ERD
   * and requirements analysis.
   *
   * Use for admin-side creation, enforcing channel linkage, uniqueness, and
   * normalization requirements. Allows optional descriptive field per
   * business/UX needs.
   */
  export type ICreate = {
    /**
     * Foreign key for channel. Required to indicate under which channel the
     * new section will be created. Must match an active channel's id.
     *
     * Key for organizing the forum's hierarchy and ensuring valid
     * parentage.
     */
    discussion_board_channel_id: string & tags.Format<"uuid">;

    /**
     * Section code (unique within channel). Used by system for
     * identify/routing purposes. Must not duplicate existing section codes
     * in the same channel.
     *
     * Enforces atomic and clean site organization per admin/business needs.
     */
    code: string;

    /**
     * New section name, user-facing label (e.g., 'Debate', 'Economics').
     * Required for navigation and UX context.
     */
    name: string;

    /**
     * Optional. Human-facing section description to clarify the type of
     * discussions belonging to this section. Supports advanced search,
     * listing, and discoverability. May be omitted if brevity preferred.
     */
    description?: string | null;
  };

  /**
   * Update-request type for patching a section/forum record. Supports admin
   * UI and batch-modification logic for forum curation, taxonomic changes, or
   * compliance-driven edits.
   *
   * Ensures only atomic, updatable properties are exposed. Follows strict DB
   * normalization and audit patterns as per platform design.
   */
  export type IUpdate = {
    /**
     * Update code (must remain unique within parent channel). Renaming may
     * be restricted depending on business logic. Used in system routing and
     * admin interfaces.
     *
     * Supports admin-side edit/management workflows and auditability.
     */
    code: string;

    /**
     * Section name update to reflect re-organization, rebranding, or
     * clarity for end-users. Required for display/UI accuracy and audit
     * accumulations.
     */
    name: string;

    /**
     * Update to section description for improved context, search utility,
     * and UX support. Optional; omit or null to clear description.
     */
    description?: string | null;
  };
}

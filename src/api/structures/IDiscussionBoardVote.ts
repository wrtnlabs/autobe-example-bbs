import { tags } from "typia";

/**
 * Represents a single vote within the discussion board.
 *
 * Follows the structure of `discussion_board_votes` and includes all atomic,
 * audit-relevant fields. Each vote references a voter, a type, and may point to
 * a thread, post, or comment. Timestamps support compliance and analytics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardVote = {
  /**
   * Unique identifier for this vote record.
   *
   * Primary key from `discussion_board_votes.id`. Used for all audit, update,
   * and retrieval operations. Immutable after creation.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the voting member.
   *
   * Foreign key to Members (`discussion_board_votes.voter_id`). Indicates
   * which member cast the vote, supports enforcement of business logic,
   * analytics, and visibility policies.
   */
  voter_id: string & tags.Format<"uuid">;

  /**
   * UUID representing the specific vote type.
   *
   * Foreign key to Vote Types (`discussion_board_votes.vote_type_id`).
   * Dictates whether the vote is an 'upvote', 'downvote', 'like', etc.
   */
  vote_type_id: string & tags.Format<"uuid">;

  /**
   * Thread being voted on (if applicable).
   *
   * Points to `discussion_board_votes.thread_id`. Optional, as not all votes
   * are about threads – some may be on posts or comments (
   */
  thread_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Post being voted on (if applicable).
   *
   * References `discussion_board_votes.post_id`. Used where votes can be
   * associated with posts directly (e.g., replies/answers).
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Comment being voted on – optional.
   *
   * References `discussion_board_votes.comment_id`.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * When vote was first created.
   *
   * Chronological timestamp for audit trails and analytics. Required by
   * security policy and to satisfy traceability needs.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * When the vote was last updated (such as in correcting a misvote).
   *
   * Tracks edit events (rare), as required by audit policy.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardVote {
  /**
   * Request object used to query votes with advanced filtering, pagination,
   * and search.
   *
   * Supports querying by multiple identifiers, time-windows, and pagination
   * controls to allow moderators/admins to efficiently search or report on
   * votes. Fully supports the Prisma schema (`discussion_board_votes`) and
   * aligns with audit and reporting requirements.
   */
  export type IRequest = {
    /**
     * The UUID of the member (voter) whose votes are being queried.
     *
     * Maps to `discussion_board_votes.voter_id`. Used to filter for
     * specific user's votes. Supports moderation auditing and displays
     * user's vote history in profile views.
     */
    voter_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The UUID of the vote type for query filtering.
     *
     * Maps to `discussion_board_votes.vote_type_id`. Enables filtering
     * votes by type (e.g., only 'upvote' or only 'downvote'). Used in
     * analytics and moderation investigations.
     */
    vote_type_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The thread UUID to filter votes on a specific thread.
     *
     * Maps to `discussion_board_votes.thread_id`. Use this to search for
     * votes attached to a particular thread, or aggregate counts for that
     * discussion.
     */
    thread_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The post UUID to filter votes attached to a specific post.
     *
     * Maps to `discussion_board_votes.post_id`.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The comment UUID to filter votes related to a comment.
     *
     * Maps to `discussion_board_votes.comment_id`.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter votes created after this date-time.
     *
     * Enables time-window analytics and compliance review. ISO
     * 8601-formatted.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Filter votes created before this date-time.
     *
     * ISO 8601 format, supports time-based data retrieval and reporting.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /** Page number for paginated responses. */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Page size for paginated responses. Defaults to admin or API-set
     * values if null.
     */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Request object to create a new vote (upvote/downvote/like/etc) for
   * discussion board content.
   *
   * Must indicate a vote type and point to a valid content object (thread,
   * post, or comment), as enforced by the business rules captured in the
   * Prisma schema and requirements.
   */
  export type ICreate = {
    /**
     * Vote type (e.g., upvote/downvote/like).
     *
     * Required, references `discussion_board_vote_types.id`.
     */
    vote_type_id: string & tags.Format<"uuid">;

    /**
     * Thread to vote on (optional).
     *
     * Points to `discussion_board_threads.id`. Only one of thread_id,
     * post_id, or comment_id should be specified per vote to avoid
     * ambiguity.
     */
    thread_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Post to vote on (optional).
     *
     * Points to `discussion_board_posts.id`. Used for votes attached
     * directly to a post (e.g., reply to an answer).
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Comment to vote on (optional).
     *
     * Points to `discussion_board_comments.id`. Used for supporting
     * comment-level votes and moderation workflows.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Allows user (or admin) to update an existing vote entry, such as
   * correcting a misselected reaction type.
   *
   * Updates must be logged for compliance purposes.
   */
  export type IUpdate = {
    /**
     * Vote type (e.g., switch upvote to downvote).
     *
     * UUID from `discussion_board_vote_types.id`. Allows correction of
     * reaction (change type but not content object).
     */
    vote_type_id?: (string & tags.Format<"uuid">) | null;
  };
}

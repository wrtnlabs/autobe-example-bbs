import { tags } from "typia";

/**
 * A single record from discussion_board_comment_reply, representing
 * nested/threaded reply to a parent comment on a post.
 *
 * Properties and descriptions align with Prisma schema and business
 * documentation for full audit, 3NF normalization, and moderation compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardCommentReply = {
  /**
   * Primary key. Unique identifier for the comment reply.
   *
   * References: id field in discussion_board_comment_reply. Maintains entity
   * uniqueness and referential integrity.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the parent comment (discussion_board_comment).
   *
   * Associates reply to the specific comment. 3NF compliance by not repeating
   * parent comment data.
   */
  parent_comment_id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the registered user who authored the reply.
   *
   * Supports user attribution and permission checks.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Text body of the reply. Supports rich text depending on frontend/editor.
   *
   * Atomic content, not computed or derived. See
   * discussion_board_comment_reply.content.
   */
  content: string;

  /**
   * ISO 8601 timestamp for when this reply was created.
   *
   * Supports sorting, analytics, and regulatory audit fields.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * ISO 8601 timestamp of the last update to this reply.
   *
   * Null if never edited. Enables edit history and compliance investigation.
   */
  updated_at?: (string & tags.Format<"date-time">) | null;

  /**
   * ISO 8601 timestamp representing soft deletion or moderation action.
   *
   * Null unless deleted—preserves audit history and rollback options.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardCommentReply {
  /**
   * Request contract for listing, searching, or filtering comment-reply
   * records from the discussion_board_comment_reply table.
   *
   * Contains query, filter, and pagination options for retrieving reply
   * objects, enabling flexible moderation review, analytics, or UI displays.
   *
   * Each property is documented based on the corresponding column or query
   * field in the Prisma schema. This type ensures that all search/filter
   * operations strictly reference normalized fields.
   */
  export type IRequest = {
    /**
     * The unique identifier (UUID) of the parent comment to which this
     * reply belongs. This property allows filtering or searching for
     * replies under a specific comment and supports advanced listing of
     * discussion threads. Directly references the primary key of the
     * discussion_board_comment table.
     *
     * Business context: Used for queries, audits, UI display for
     * threaded/nested comment views.
     */
    parent_comment_id?: string & tags.Format<"uuid">;

    /**
     * The unique identifier (UUID) of the user who authored the comment
     * reply. This property supports filtering replies by a particular user,
     * typically for audit purposes, moderation, or user profile views.
     *
     * Business context: Ensures proper attribution and supports permission
     * checks for listing, editing, or deleting replies.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Optional search string to filter replies based on their content. Uses
     * full-text/trigram search for efficiency when searching by keywords or
     * phrases within replies.
     *
     * Business context: Supports moderator review, analytics filtering, or
     * advanced UI search features.
     */
    content_search?: string;

    /**
     * Lower bound timestamp (ISO 8601) for when the reply was created.
     * Enables range queries for filtering comment replies within specific
     * periods. Optional filter.
     *
     * Business context: Used in analytics, moderation time windows, or
     * reporting tools.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound timestamp (ISO 8601) for when the reply was created.
     * Enables range queries for filtering comment replies within specific
     * periods. Optional filter.
     *
     * Business context: Used in analytics, moderation time windows, or
     * reporting tools.
     */
    created_to?: string & tags.Format<"date-time">;

    /**
     * Page number for paginated reply searches. Used to navigate through
     * multiple pages of result sets in user interfaces or tools. Defaults
     * to 1 if not specified.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Maximum number of records to return per page in paginated listings of
     * comment replies. Used to control data volume. Typical values: 10, 20,
     * 50, 100, etc.
     */
    limit?: number & tags.Type<"int32">;

    /**
     * Field to sort or order the replies—typically 'created_at' or
     * 'updated_at'. Used for user-driven control of reply order in lists or
     * UIs.
     */
    sort_by?: "created_at" | "updated_at";

    /**
     * Direction of sort: 'asc' (ascending) or 'desc' (descending).
     * Determines chronological order in listings.
     */
    sort_order?: "asc" | "desc";
  };

  /**
   * Contract for creating a new comment-reply in
   * discussion_board_comment_reply.
   *
   * Includes all required atomic fields needed for new reply creation, as
   * enforced in business and moderation workflows. Every property maps 1:1 to
   * a column in the normalized schema.
   */
  export type ICreate = {
    /**
     * Foreign key referencing the parent comment to which this reply will
     * be attached.
     *
     * Referentially Integrity: Must exist in discussion_board_comment. See
     * discussion_board_comment_reply.parent_comment_id.
     */
    parent_comment_id: string & tags.Format<"uuid">;

    /**
     * Foreign key referencing the user creating the reply. Must be an
     * active, registered user authorized to reply.
     *
     * See discussion_board_comment_reply.user_id.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Content body of the reply. Supports formatting, links, and inline
     * mentions as described in requirements.
     *
     * Atomic, required for reply creation. See
     * discussion_board_comment_reply.content.
     */
    content: string;
  };

  /**
   * Contract for editing or updating an existing comment-reply record by ID
   * in discussion_board_comment_reply.
   *
   * Defines only fields that are mutable post-creation, respecting business
   * and moderation constraints.
   */
  export type IUpdate = {
    /**
     * Updated body or text for the reply. Only editable by author or
     * moderator, and subject to moderation/workflow requirements in the
     * business domain.
     *
     * Corresponds to discussion_board_comment_reply.content. If omitted,
     * content remains unchanged.
     */
    content?: string;
  };
}

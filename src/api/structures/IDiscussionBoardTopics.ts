import { tags } from "typia";

/**
 * Full topic entity as returned by detail endpoints or creation. Includes all
 * topic metadata and primary relations but not populated references. This type
 * maps 1:1 to Prisma's discussion_board_topics schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardTopics = {
  /**
   * Unique identifier for this discussion topic - primary key from the
   * discussion_board_topics schema.
   */
  id: string & tags.Format<"uuid">;

  /** Displayable title of the topic. */
  title: string;

  /** Optional detailed summary, rules, or introduction for the topic. */
  description?: string | null;

  /**
   * If true, the topic is featured/pinned; only admins/moderators may set
   * this state.
   */
  pinned: boolean;

  /** If true, the topic is not accepting new threads/posts (locked state). */
  closed: boolean;

  /** Timestamp of initial topic creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of most recent topic update. */
  updated_at: string & tags.Format<"date-time">;

  /** Reference to the category to which this topic belongs. */
  discussion_board_category_id: string & tags.Format<"uuid">;

  /** The member who created the topic (internal reference for audit). */
  creator_member_id: string & tags.Format<"uuid">;
};
export namespace IDiscussionBoardTopics {
  /**
   * A summary-level object representing minimal details for a topic. Used
   * primarily in topic list/index pages, this omits deep relational data but
   * enables fast UI rendering.
   */
  export type ISummary = {
    /**
     * Unique identifier for the discussion topic. Matches the id field in
     * discussion_board_topics.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The visible title for the topic, used in headings and list
     * navigation.
     */
    title: string;

    /** Short summary, guidelines, or details about the topic. Optional. */
    description?: string | null;

    /**
     * Indicates if the topic is currently pinned by staff (true =
     * sticky/featured at top of list).
     */
    pinned: boolean;

    /**
     * Indicates if the topic is closed for new threads/posts (true = locked
     * for activity).
     */
    closed: boolean;

    /** ISO 8601 timestamp when the topic was created. */
    created_at: string & tags.Format<"date-time">;

    /** ISO 8601 timestamp of last update to topic record. */
    updated_at: string & tags.Format<"date-time">;

    /** Reference to the parent category's UUID id. */
    discussion_board_category_id: string & tags.Format<"uuid">;
  };

  /**
   * Request query for searching/filtering/sorting discussion topics. Allows
   * filtering by category, title (partial), pinned/closed state, date ranges,
   * as well as setting pagination and sort order.
   */
  export type IRequest = {
    /**
     * If specified, filters topics to those within the referenced category
     * (by UUID).
     */
    category_id?: (string & tags.Format<"uuid">) | null;

    /**
     * If specified, partial or case-insensitive match filter on topic title
     * (trgm-index accelerated).
     */
    title?: string | null;

    /** If specified, filters for only pinned or non-pinned topics. */
    pinned?: boolean | null;

    /** If specified, filters only for open or closed topics. */
    closed?: boolean | null;

    /**
     * If specified, only topics created after this timestamp will be
     * returned.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * If specified, only topics created before this timestamp will be
     * returned.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /**
     * If specified, only topics updated after this timestamp will be
     * returned.
     */
    updated_from?: (string & tags.Format<"date-time">) | null;

    /**
     * If specified, only topics updated before this timestamp will be
     * returned.
     */
    updated_to?: (string & tags.Format<"date-time">) | null;

    /** Page number for paginated result set. Optional. */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** Number of records per page (pagination). Optional. Defaults to 100. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** Sort field. Accepts one of: created_at, updated_at, title. */
    sort?: "created_at" | "updated_at" | "title" | null;

    /** Sort order (ascending or descending). */
    order?: "asc" | "desc" | null;
  };

  /**
   * Request body for creating a new topic. Requires title, category, and
   * state flags. creator_member_id is excluded as it is provided by
   * authenticated context. No creator_id/user_id accepted in request -
   * security principle enforced.
   */
  export type ICreate = {
    /**
     * Displayable title for the topic. Must be unique within the selected
     * category.
     */
    title: string;

    /** Optional summary or introductory text for the topic. */
    description?: string | null;

    /**
     * Whether the topic is pinned (featured) on creation. Only settable by
     * moderation roles.
     */
    pinned: boolean;

    /**
     * Whether the topic is closed for new participation. Only allowed by
     * moderation roles.
     */
    closed: boolean;

    /**
     * The UUID of the category in which the topic is created (reference to
     * the parent category).
     */
    discussion_board_category_id: string & tags.Format<"uuid">;
  };

  /**
   * Request body for updating a topic. All fields optional, but at least one
   * should be present; PK/topicId is path param, not body. Fields follow
   * direct mapping to topic object and enforce schema's security on
   * modifiable fields.
   */
  export type IUpdate = {
    /** If provided, the new/updated displayable title for the topic. */
    title?: string | null;

    /** If provided, new summary/rules/description. */
    description?: string | null;

    /** If provided, updates the pinned state for the topic. */
    pinned?: boolean | null;

    /** If provided, updates the closed/not-accepting state for the topic. */
    closed?: boolean | null;

    /**
     * If provided, updates the UUID reference to parent category for this
     * topic.
     */
    discussion_board_category_id?: (string & tags.Format<"uuid">) | null;
  };
}

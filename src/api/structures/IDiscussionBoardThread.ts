import { tags } from "typia";

/**
 * Represents a discussion thread (the highest level posting unit) in the
 * discussion board system. Directly maps to the 'discussion_board_threads'
 * Prisma table and the OpenAPI operation for thread entities.
 *
 * Includes all required metadata for auditing, display, navigation, filtering,
 * and compliance with moderation requirements. Relationships: author/member,
 * category, attached posts/comments; supports moderation status, pinning, and
 * closure.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardThread = {
  /**
   * Primary Key. Unique identifier for a thread in the discussion board.
   * Referenced in all thread-related operations, relationships, and displays.
   * Sourced from the Prisma DB schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the member who created the thread. Foreign key to
   * 'discussion_board_members.id'. Used for association and filtering in the
   * UI and API.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * ID of the category to which this thread belongs. Foreign key to
   * 'discussion_board_categories.id'. Used for content taxonomy, filtering,
   * and category-specific features.
   */
  discussion_board_category_id: string & tags.Format<"uuid">;

  /**
   * Title of the thread, as posted by the user. Must be non-null and respects
   * the business logic for required length and content validation. Keywords
   * here support full-text search and access via OpenAPI.
   */
  title: string;

  /**
   * Initial content or body of the thread (opening post). Provides the
   * starting context for the thread's discussion. Not null, may support
   * markdown or rich text per supporting configuration.
   */
  body: string;

  /**
   * Flag indicating whether this thread is currently pinned by a
   * moderator/admin. Pinned threads are sorted/featured for visibility as
   * outlined in requirements (moderation tools).
   */
  is_pinned: boolean;

  /**
   * Flag indicating if the thread has been closed (no further posts or
   * comments allowed, moderation-only edits permitted). Implements moderation
   * feature as supported in business requirements.
   */
  is_closed: boolean;

  /**
   * Timestamp of thread creation, in ISO 8601 format. Used for audit,
   * display, and sorting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of latest update to this thread's metadata/content. Used for UI
   * freshness indicators and moderation logs.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (ISO 8601), as required by moderation/business
   * requirements. Null if the thread is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardThread {
  /**
   * Advanced filter/search and pagination object for querying threads. Used
   * for all main thread list/search UIs (public, member, admin, mod). Fields
   * align with 3NF thread entity and business filters described in
   * requirements.
   *
   * Allows queries like search by keywords, category, creator, status,
   * pinned/closed, created_at (date) window. Pagination controls are
   * standardized.
   */
  export type IRequest = {
    /** Page number for pagination. Default 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Results per page (default 20, max 100). */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;

    /**
     * Filter for threads whose title contains this substring (e.g., keyword
     * search).
     */
    title?: string;

    /**
     * Filter by category of thread (foreign key to
     * discussion_board_categories).
     */
    category_id?: string & tags.Format<"uuid">;

    /** Filter by creator/author of the thread (member uuid). */
    member_id?: string & tags.Format<"uuid">;

    /** If present, filter thread results by their 'pinned' status. */
    is_pinned?: boolean;

    /** If present, filter by 'closed' status. */
    is_closed?: boolean;

    /** Return threads created or updated after this timestamp. */
    created_after?: string & tags.Format<"date-time">;

    /** Return threads created or updated before this timestamp. */
    created_before?: string & tags.Format<"date-time">;
  };

  /**
   * Request payload type for creating a new thread in the discussion board
   * system. Corresponds to the POST operation for thread creation per
   * OpenAPI, and includes all mandatory fields for instantiating a
   * 'discussion_board_threads' record.
   *
   * References member and category as foreign keys. Enforces business logic
   * via OpenAPI validation and backend rules.
   */
  export type ICreate = {
    /**
     * ID of the member creating the thread. MUST be a valid, active member.
     * Tied to the authenticated user's account context in the business
     * logic.
     */
    discussion_board_member_id: string & tags.Format<"uuid">;

    /**
     * ID of the category under which the thread is being created. Must
     * reference an existing and active category.
     */
    discussion_board_category_id: string & tags.Format<"uuid">;

    /**
     * Thread title, required. Must be unique within the category per
     * business rule, within length and content limits.
     */
    title: string;

    /**
     * Content/body of the thread. Rich text (may support markdown) per
     * configuration. Required.
     */
    body: string;
  };

  /**
   * Request body for updating a discussion thread (partial update semantics).
   *
   * Any supplied field will be updated; omitted fields remain unchanged.
   * Enforces business rules for editability (who can pin/close/edit, etc). No
   * required fieldsâ€”supports PATCH semantics for updates as per OpenAPI.
   */
  export type IUpdate = {
    /**
     * Thread title (for edits/updates). Must comply with business
     * validation on length/content/uniqueness in category, if updated.
     */
    title?: string;

    /**
     * Body/content of the thread (can be edited by owner/moderator).
     * Supports content policies.
     */
    body?: string;

    /** Set true to pin the thread (admin/moderator only). */
    is_pinned?: boolean;

    /**
     * Set true to close (lock) further posting/comments (admin/moderator or
     * owner on their own threads as permitted).
     */
    is_closed?: boolean;
  };
}

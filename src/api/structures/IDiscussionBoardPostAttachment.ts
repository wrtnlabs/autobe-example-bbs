import { tags } from "typia";

import { IPage } from "./IPage";

/**
 * Persistent attachment entity for a file uploaded to a discussion board post.
 *
 * This schema describes all properties of a file attached to a specific post on
 * the discussion board. Used in detail views, edit/update APIs, and audit
 * scenarios. Fields include:
 *
 * - Id (UUID): Unique primary key for the attachment record.
 * - Discussion_board_post_id (UUID): Post to which this file is attached (as
 *   foreign key reference).
 * - Uploader_member_id (UUID): Member uploading the file (foreign key to member).
 * - File_uri (string): Direct URI for file retrieval from storage.
 * - File_name (string): Name of file as uploaded by the user.
 * - Mime_type (string): MIME/format string of the file.
 * - Uploaded_at (DateTime): Creation timestamp (set on upload).
 *
 * This schema is fully aligned with the Prisma schema and includes all fields
 * except those intended only for system-internal use or soft-deleted states
 * (which do not exist for attachments). Use this for single-object APIs: GET,
 * PUT, POST, etc.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPostAttachment = {
  /** Unique primary key of the attachment record. */
  id: string & tags.Format<"uuid">;

  /** ID (UUID) of the post to which the attachment belongs (foreign key). */
  discussion_board_post_id: string & tags.Format<"uuid">;

  /** ID (UUID) of the member who uploaded the file (foreign key). */
  uploader_member_id: string & tags.Format<"uuid">;

  /** Storage URI where file can be fetched/downloaded (external or CDN link). */
  file_uri: string;

  /**
   * Original file name as provided by user for the upload (plain text, not
   * path).
   */
  file_name: string;

  /** File content MIME type, e.g., 'image/jpeg', 'application/pdf', etc. */
  mime_type: string;

  /** Timestamp (ISO 8601 UTC) for when file was uploaded. */
  uploaded_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardPostAttachment {
  /**
   * Summary object for a single discussion board post attachment.
   *
   * Contains essential metadata fields about a file attached to a post.
   * Intended for list or preview contexts, so non-essential fields or large
   * binary data are omitted. Fields include:
   *
   * - Id (UUID): Primary key for the attachment record.
   * - Discussion_board_post_id (UUID): The parent post to which this file is
   *   attached.
   * - Uploader_member_id (UUID): Which board member uploaded this file
   *   (audit/compliance reference).
   * - File_uri (string): URI (link) for retrieving or previewing the file.
   * - File_name (string): The original file name presented to the user on
   *   upload.
   * - Mime_type (string): File format (e.g., 'image/png').
   * - Uploaded_at (DateTime): Timestamp for when the file was added.
   *
   * These are sufficient to show a basic overview (list row, card, media
   * preview, download link) in board UIs or moderation dashboards.
   */
  export type ISummary = {
    /** Primary key of the attachment (UUID). */
    id: string & tags.Format<"uuid">;

    /** UUID referencing the post this file is attached to. */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /** UUID of the board member who uploaded this file (audit reference). */
    uploader_member_id: string & tags.Format<"uuid">;

    /**
     * URI or public link for downloading or previewing the file. File
     * storage is external (CDN, S3, etc).
     */
    file_uri: string;

    /** Original user-selected file name. */
    file_name: string;

    /** File MIME type (e.g., 'image/png', 'application/pdf'). */
    mime_type: string;

    /** Timestamp for when the attachment was uploaded (ISO 8601 UTC). */
    uploaded_at: string & tags.Format<"date-time">;
  };

  /**
   * Request object for advanced searching/filtering of file attachments for
   * discussion board posts. Used where pagination, uploader/member or file
   * type filters, and file name substring search is needed. Utilizes Prisma
   * schema for attachments.
   */
  export type IRequest = {
    /**
     * FK of the parent post (discussion_board_posts.id) whose attachments
     * are being searched/paged.
     */
    discussion_board_post_id?: string & tags.Format<"uuid">;

    /**
     * Filter to only attachments uploaded by a specific member
     * (discussion_board_members.id). Optional, only used if present.
     */
    uploader_member_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Text search for filename substring (case-insensitive, partial match
     * via trgm index). Optional, null for unfiltered.
     */
    file_name?: string | null;

    /**
     * Restrict returned attachments to those of specified MIME type (e.g.
     * 'image/png'). Optional.
     *
     * Null (default) to show all types.
     */
    mime_type?: string | null;

    /**
     * Return only attachments uploaded at or after this timestamp (ISO 8601
     * format, includes boundary). Optional.
     */
    uploadedFrom?: string & tags.Format<"date-time">;

    /**
     * Return only attachments uploaded at or before this timestamp (ISO
     * 8601 format, includes boundary). Optional.
     */
    uploadedTo?: string & tags.Format<"date-time">;
    pagination?: IPage.IRequest;
  };

  /**
   * Request schema for creating a new post attachment record
   * (discussion_board_post_attachments).
   *
   * All fields (except for ID and uploaded_at, which are system-generated)
   * must be provided by the client in POST requests. Required fields:
   *
   * - Discussion_board_post_id: Parent post's UUID
   * - Uploader_member_id: UUID of member uploading (supplied by backend from
   *   user context)
   * - File_uri: Storage URI for uploaded file
   * - File_name: Original name for file
   * - Mime_type: File content type
   *
   * The system sets uploaded_at automatically. No ID is included in the
   * request, as system assigns this.
   */
  export type ICreate = {
    /** ID (UUID) of the post to attach the file to */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /** ID (UUID) for member uploading the file (from user session/context) */
    uploader_member_id: string & tags.Format<"uuid">;

    /** URI for the file in permanent storage (e.g., S3, CDN link, etc) */
    file_uri: string;

    /** Original file name selected by user. */
    file_name: string;

    /** MIME/content type of the uploaded file. */
    mime_type: string;
  };

  /**
   * Request schema for updating metadata of an existing post attachment
   * record. This is used for PATCH/PUT where mutable fields (file_name,
   * file_uri, mime_type) may be altered. The record is identified via primary
   * key path or parameter, so no ID is included. Fields:
   *
   * - File_name (string, optional): Updated file name
   * - File_uri (string, optional): Updated storage location if file has
   *   moved/been replaced
   * - Mime_type (string, optional): Update for file type if correction needed
   *
   * All properties are optional; only the supplied fields are updated. No ID,
   * uploaded_at, or foreign key changes allowed (per schema and business
   * rules).
   */
  export type IUpdate = {
    /** Optional: New file name for attachment (can update existing name) */
    file_name?: string;

    /** Optional: Updated URI/location of file if re-uploaded or moved */
    file_uri?: string;

    /** Optional: Correction to MIME/file type metadata */
    mime_type?: string;

    /** Optional: Correction to uploader member ID, for admin/audit scenarios */
    uploader_member_id?: string & tags.Format<"uuid">;
  };
}

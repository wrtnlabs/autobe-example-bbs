import { tags } from "typia";

/**
 * Entity schema for a single poll option as defined in poll_options table. Used
 * for voting UI and poll editing. Each record corresponds to an answer choice,
 * linked to a poll by poll_id.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IThreadsPostsPollOption = {
  /**
   * Unique ID for this poll option. Primary key for poll_options table.
   *
   * Prisma: poll_options.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * The poll this option belongs to (foreign key).
   *
   * Prisma: poll_options.poll_id
   */
  poll_id: string & tags.Format<"uuid">;

  /**
   * Text shown to voters representing the choice/option for the poll.
   *
   * Prisma: poll_options.title
   */
  title: string;

  /**
   * Ordering of this option in the poll (UI display).
   *
   * Prisma: poll_options.sequence
   */
  sequence: number & tags.Type<"int32">;
};
export namespace IThreadsPostsPollOption {
  /**
   * Search/query parameters for listing poll options. Provides filtering by
   * poll, text search, and pagination for scalable UI lists.
   *
   * Applies to retrieving options with PATCH /threadsPosts/pollOptions.
   */
  export type IRequest = {
    /**
     * Filter options by poll. Returns all assigned options for specified
     * poll id.
     *
     * Prisma: poll_options.poll_id
     */
    poll_id?: string & tags.Format<"uuid">;

    /**
     * Optionally filter by title (option label). Enables searching for
     * specific answers.
     *
     * Prisma: poll_options.title
     */
    title?: string;

    /**
     * Filter poll options by their display order in the poll.
     *
     * Prisma: poll_options.sequence
     */
    sequence?: number & tags.Type<"int32">;

    /**
     * Pagination page (starts at 1).
     *
     * Standard for pageable APIs.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Items per page. Default and maximum values controlled for
     * performance.
     *
     * Standard for pageable APIs.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Payload for creating a poll option in a poll, atomic inputs only. Used in
   * poll create workflows or polling editor admin forms.
   *
   * Matches poll_options model and validation rules.
   */
  export type ICreate = {
    /**
     * Target poll for the new option. Must exist in polls table.
     *
     * Prisma: poll_options.poll_id
     */
    poll_id: string & tags.Format<"uuid">;

    /**
     * Poll option label text.
     *
     * Prisma: poll_options.title
     */
    title: string;

    /**
     * Order/display position of this option.
     *
     * Prisma: poll_options.sequence
     */
    sequence: number & tags.Type<"int32">;
  };

  /**
   * Schema for updating atomic poll option values. Enables admin or permitted
   * user to modify label or order for voting.
   *
   * PATCH/PUT on /threadsPosts/pollOptions/{id}.
   */
  export type IUpdate = {
    /**
     * Amended poll option label for admin edit or corrections.
     *
     * Prisma: poll_options.title
     */
    title?: string;

    /**
     * Re-ordered display index for this poll option.
     *
     * Prisma: poll_options.sequence
     */
    sequence?: number & tags.Type<"int32">;
  };
}

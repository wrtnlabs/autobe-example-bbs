import { tags } from "typia";

/**
 * 투표 유형 개체 스키마. 시스템의 모든 가능한 투표(추천/비추천/공감 등) 유형을 정의하는 마스터 데이터 엔티티입니다.
 *
 * Prisma discussion_board_vote_types 테이블과 주석을 기반으로, 실제 투표 생성시 참조됩니다. 코드, 이름은
 * 반드시 고유하며, 설명은 옵션입니다. 생성 및 갱신 정보는 감사, 정책 관리, UI 표시, 통계 분석 등에 활용됩니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardVoteType = {
  /** 투표 유형 고유 식별자. Prisma discussion_board_vote_types.id 컬럼 설명 참조. */
  id: string & tags.Format<"uuid">;

  /**
   * 투표 유형 시스템 코드. (예: 'upvote', 'downvote', 'like' 등). Prisma
   * discussion_board_vote_types.code 컬럼.
   *
   * API/클라이언트는 고정 코드값으로 투표 유형을 식별하며, 동일값이 중복될 수 없습니다.
   */
  code: string;

  /**
   * 투표 유형의 사용자-facing 명칭. 예: 'Upvote', '좋아요'. Prisma
   * discussion_board_vote_types.name 컬럼 설명 일치.
   */
  name: string;

  /**
   * 해당 투표 유형의 추가 설명. 관리자/기획을 위한 문장 등. Prisma
   * discussion_board_vote_types.description 컬럼 참조.
   *
   * 생략 가능. 예: '긍정 투표임을 나타냄.'
   */
  description?: string | null;

  /**
   * 투표 유형 생성일시. ISO 8601 포맷. Prisma discussion_board_vote_types.created_at
   * 주석/컬럼 활용.
   *
   * 관리 도구, 정렬, 통계 등에 사용됩니다.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * 최근 업데이트 일시. Prisma discussion_board_vote_types.updated_at 컬럼 설명 참조.
   *
   * 투표 유형 갱신, 정책 반영 변동 시 활용 및 감사로그에 첨부.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardVoteType {
  /**
   * 투표 유형 리스트/검색 API의 요청 파라미터 구조입니다.
   *
   * Prisma discussion_board_vote_types 테이블 구조 및 컬럼별 제약/작성 규칙을 따르고, 관리자/모더레이터
   * UI, 필터링, 통계/집계등에 활용할 수 있습니다. 각 필드는 선택(Option)이며, 생략 시 전체 리스트를 반환합니다.
   */
  export type IRequest = {
    /**
     * 투표 유형 기본 코드(예: 'upvote', 'downvote' 등. Prisma
     * discussion_board_vote_types.code 컬럼).
     *
     * 검색, 필터 시 이 값으로 투표 타입 종류를 한정할 때 사용합니다.
     */
    code?: string;

    /**
     * 투표 유형의 한글/영문 명칭(예: 'Upvote', 'Downvote' 등). 부분 일치 검색 시 활용.
     *
     * Prisma discussion_board_vote_types.name 컬럼 주석 참조.
     */
    name?: string;

    /** 생성 시점 필터: 해당 시각 이후 생성된 투표타입만 반환. ISO 8601. */
    created_from?: string & tags.Format<"date-time">;

    /** 생성 시점 필터: 해당 시각 이전 생성된 투표타입만 반환. ISO 8601. */
    created_to?: string & tags.Format<"date-time">;

    /** 페이지 번호(페이지네이션 적용 시 1기준 혹은 0기준 명시 필요). */
    page?: number & tags.Type<"int32">;

    /** 페이지 당 데이터 개수(기본값 20~100) */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * 투표 유형 신규 등록 요청 구조입니다. 투표 코드, 이름, 설명(옵션)을 명확히 지정해야 하며, 시스템은 코드/이름의 중복을
   * 허용하지 않습니다.
   *
   * 투표 타입의 추가/변경 이벤트는 관리자 화면, 정책 관리 등에 반영되며, 실제 생성시 audit trail 및 메타 정보를
   * 남깁니다.
   */
  export type ICreate = {
    /**
     * 신규 투표 유형 코드. 유니크. 예: 'upvote', 'dislike', 'neutral' 등. Prisma
     * discussion_board_vote_types.code 컬럼과 일치.
     *
     * 프로그래매틱 단축키 및 정책 전파시 사용.
     */
    code: string;

    /**
     * 노출명(한글/영문 혼용 가능). 예: '공감', '비공감', 'Like', 'Dislike'. Prisma
     * discussion_board_vote_types.name 컬럼 설명 일치.
     */
    name: string;

    /**
     * 관리자 등 내부 정책 공유 목적의 투표 유형 설명. Prisma
     * discussion_board_vote_types.description 컬럼 참조.
     *
     * 필수 아님.
     */
    description?: string | null;
  };

  /**
   * Update object for an existing vote type in the discussion board.
   *
   * Matches updatable fields from `discussion_board_vote_types` (code, name,
   * description), supporting admin-side management of voting/reaction types.
   * All updates are logged for audit, and uniqueness constraints apply.
   *
   * For more, see requirements section on voting features and moderation
   * controls.
   */
  export type IUpdate = {
    /**
     * Unique code for the vote type.
     *
     * Maps to `discussion_board_vote_types.code` in Prisma schema. This
     * code is used for programmatic reference (such as 'upvote' or
     * 'downvote'), and must be unique within the system. Used as a foreign
     * key in the votes table to distinguish different types of reactions.
     * For example: 'upvote', 'downvote', 'like'.
     */
    code: string;

    /**
     * Display name for the vote type.
     *
     * Corresponds to `discussion_board_vote_types.name` in the database.
     * This is the human-friendly label shown in the UI, in email
     * notifications, or analytics dashboards. For example: 'Upvote',
     * 'Downvote', 'Like'. This must also be unique and descriptive to
     * prevent confusion among users.
     */
    name: string;

    /**
     * Description of this vote type.
     *
     * Maps to `discussion_board_vote_types.description` in Prisma schema.
     * This is intended for admin and developer reference, and may be
     * surfaced in configuration screens or API documentation. Helps clarify
     * the meaning or intended use of the vote type. Example: 'Indicates a
     * positive endorsement of the post by a member.' This field is optional
     * and can be null.
     */
    description?: string | null;
  };
}

import { tags } from "typia";

/**
 * 이상 출결(비정상 출석) 탐지/처리 기록 엔터티.
 *
 * - 각 필드는 attendance_stats_abnormal_log 테이블 3NF 필수 컬럼에 정확하게 대응.
 * - 관리/교사용 대시보드, 이상 탐지, 감사 사례별 내역 상세 조회에 사용.
 * - 처리자(admin_id), resolved_at 등은 handling이 없는 경우 null 허용.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAttendanceStatsAbnormalLog = {
  /** PK(UUID). attendance_stats_abnormal_log.id. 각 이상 징후(이벤트)의 고유 식별자입니다. */
  id: string & tags.Format<"uuid">;

  /**
   * 대상 attendance_attendance_record의 FK(UUID). 어떤 출결 기록에 연결된 이상 로그인지 직접 매핑.
   * 3NF
   */
  attendance_record_id: string & tags.Format<"uuid">;

  /** 학생 FK(UUID). 해당 이상 행동의 주체. attendance_student.id와 매핑. */
  student_id: string & tags.Format<"uuid">;

  /** 처리한 관리자(처리자) FK(UUID), 없으면 null. Prisma admin_id 컬럼. */
  admin_id?: (string & tags.Format<"uuid">) | null;

  /** 이상 유형(ex: duplicate, location_mismatch, code_invalid 등). 시스템/교사/관리자가 지정. */
  anomaly_type: string;

  /** 감지 적용된 정책/규칙 태그값. open/close 트리거에도 활용. */
  anomaly_rule: string;

  /** 상태값(open/closed/in_review 등). 관리 대시보드, 미처리/처리완료 구분 UI에도 필수. */
  status: string;

  /** 이상 감지 발생 시각(UTC). Prisma occurred_at. */
  occurred_at: string & tags.Format<"date-time">;

  /** 이상 징후 처리/해결 시각(UTC, null일 수 있음). Prisma resolved_at. */
  resolved_at?: (string & tags.Format<"date-time">) | null;

  /** 로그 생성 시각. Prisma created_at. */
  created_at: string & tags.Format<"date-time">;

  /** 로그 변경/갱신 시각. Prisma updated_at. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAttendanceStatsAbnormalLog {
  /**
   * 이상출결 로그의 패치(검색/리스트) 조건 오브젝트. status/기간/유형/반/학생 등 주요 필터링을 지원함. Prisma
   * attendance_stats_abnormal_log 컬럼 정책에 따름.
   */
  export type IRequest = {
    /** 특정 학생(혹은 전체)으로 필터링할 때 사용. attendance_student FK. */
    student_id?: string & tags.Format<"uuid">;

    /** 특정 반(학급) 기준 검색에 사용. attendance_classroom FK. */
    classroom_id?: string & tags.Format<"uuid">;

    /** 이상 유형(중복출결, 코드오류, 위치불일치 등)으로 필터링. */
    anomaly_type?: string;

    /** 탐지 규칙/내부 알고리즘별로 조건검색(예:location_mismatch, code_invalid 등) */
    anomaly_rule?: string;

    /** Open/closed/in_review 등 상태별 검색. */
    status?: string;

    /** 조회 시작일(YYYY-MM-DD) */
    period_start?: string;

    /** 조회 종료일(YYYY-MM-DD) */
    period_end?: string;

    /** 페이지 넘버 */
    page?: number & tags.Type<"int32">;

    /** 한 페이지 크기 */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * 이상출결 로그 신규 등록용 Create DTO. Prisma attendance_stats_abnormal_log의 생성규칙/컬럼
   * 사용.
   */
  export type ICreate = {
    /** 대상 출결기록(attendance_attendance_record)의 UUID(FK). */
    attendance_record_id: string & tags.Format<"uuid">;

    /** 주체 학생(attendance_student)의 UUID(FK). */
    student_id: string & tags.Format<"uuid">;

    /**
     * 이상 유형 코드. example: 'duplicate', 'proxy', 'late', 'location_mismatch'
     * 등.
     */
    anomaly_type: string;

    /** 적용된 감지 규칙 코드(정책별 하드/소프트 구분링 등). */
    anomaly_rule: string;

    /** 초기 이상 상태. open, in_review, closed 등. */
    status: string;

    /** 이상 감지 이벤트 시각(UTC) */
    occurred_at: string & tags.Format<"date-time">;
  };

  /**
   * 이상출결 로그 상태변경(처리/해제/완료 등) 업데이트에 사용되는 VO. 상태·관리자·해결일/해제로 제한. Prisma
   * attendance_stats_abnormal_log 정책과 1:1 대응.
   */
  export type IUpdate = {
    /** 수정할 상태(open/closed/in_review 등). */
    status?: string;

    /** 처리 관리자 UUID/PK, 없다면 null. */
    admin_id?: (string & tags.Format<"uuid">) | null;

    /** 해결시각(UTC, 해제시 null 허용) */
    resolved_at?: (string & tags.Format<"date-time">) | null;
  };
}

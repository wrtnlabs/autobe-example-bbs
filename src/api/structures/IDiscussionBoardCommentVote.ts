import { tags } from "typia";

/**
 * 댓글 추천(투표) 엔터티. 사용자가 댓글에 남긴 업보트/피드백을 1:1로 기록합니다.
 *
 * Prisma discussion_board_comment_vote 테이블 구조에 기반하며, 댓글별 인기/피드백 집계 등에 이용됩니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardCommentVote = {
  /**
   * 고유 식별자(UUID)로, 각 댓글 추천(투표) 기록을 식별합니다.
   *
   * Prisma discussion_board_comment_vote.id 컬럼의 설명을 참조하세요. 모든 댓글 추천은 고유하며, 투표
   * 내역 추적, 감사, 피드백 분석에 사용됩니다.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 추천(업보트)한 사용자의 UUID입니다.
   *
   * Prisma discussion_board_comment_vote.user_id 컬럼 참조. 특정 사용자가 어느 댓글에 투표했는지
   * 추적하며, 각 사용자-댓글 쌍에 하나만 유지됩니다.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * 추천이 집계된 댓글의 UUID입니다.
   *
   * Prisma discussion_board_comment_vote.comment_id 컬럼 참조. 댓글별 추천/피드백, 인기 댓글
   * 분석에 활용됩니다.
   */
  comment_id: string & tags.Format<"uuid">;

  /**
   * 투표 행위가 일어난 시간(ISO 8601).
   *
   * Prisma discussion_board_comment_vote.created_at 컬럼 참조. 투표 시각, 활동 분석, 추천
   * 피드백 시계열 등에 사용됩니다.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardCommentVote {
  /**
   * Request payload for paginating, filtering, or searching comment vote
   * records (discussion_board_comment_vote).
   *
   * Exposes business-meaningful filters relevant to analytics, moderation,
   * report UIs. All fields reference normalized schema columns and audit
   * requirements.
   */
  export type IRequest = {
    /**
     * UUID of the user who cast or is being filtered for comment votes.
     * Used for profile analytics, moderation, and audit searching
     * scenarios.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * UUID of the comment being filtered against. Supports
     * searching/vote-counting for a particular comment in analytics or UI
     * feedback tools.
     */
    comment_id?: string & tags.Format<"uuid">;

    /**
     * Lower bound (ISO 8601) filter on when a vote was cast; supports
     * analytic time window queries.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound (ISO 8601) filter; retrieves only votes within a
     * particular period for moderation or trend reports.
     */
    created_to?: string & tags.Format<"date-time">;

    /**
     * Page number for paginated search/filter results, enabling navigation
     * in UIs or reports.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Maximum number of vote records to return per page, managing payload
     * volume in API responses.
     */
    limit?: number & tags.Type<"int32">;

    /**
     * Field available for sort, typically only 'created_at'. Indicates
     * order for engagement or analysis.
     */
    sort_by?: "created_at";

    /**
     * Direction of result ordering: 'asc' (earliest first) or 'desc' (most
     * recent first).
     */
    sort_order?: "asc" | "desc";
  };

  /**
   * 댓글 추천/업보트 생성 요청 스키마.
   *
   * 투표행위는 (user_id, comment_id)의 1:1 매칭을 강제합니다.
   */
  export type ICreate = {
    /**
     * 투표(업보트) 행위를 하는 사용자의 UUID입니다. 필수.
     *
     * Prisma discussion_board_comment_vote.user_id 설명을 따릅니다.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * 표적이 되는 댓글의 UUID입니다. 필수.
     *
     * Prisma discussion_board_comment_vote.comment_id 설명을 참조하세요.
     */
    comment_id: string & tags.Format<"uuid">;
  };

  /**
   * 댓글 투표 수정용 요청 스키마.
   *
   * 보통 투표 후 수정은 불허하며(정책상), 추후 확장/감사 정보에 대비해 명시적으로 빈 객체로 둡니다.
   *
   * Prisma discussion_board_comment_vote는 투표 상태 자체는 바뀌지 않음.
   */
  export type IUpdate = {};
}

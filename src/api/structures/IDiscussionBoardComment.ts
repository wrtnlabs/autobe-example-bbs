import { tags } from "typia";

/**
 * Full persistent schema for a single discussion board comment entity.
 *
 * Describes all properties stored for a comment instance. Fields include:
 *
 * - Id (UUID): Unique PK for the comment
 * - Discussion_board_member_id (UUID): Author's PK
 * - Discussion_board_post_id (UUID): Parent post's PK
 * - Content (string): Full text (latest version) of the comment
 * - Is_deleted (boolean): Whether soft deleted
 * - Created_at (DateTime): Timestamp
 * - Updated_at (DateTime): Timestamp
 *
 * Version history and attachments are maintained in separate child tables. Used
 * for detail retrieval, edit, moderation, and audit flows. See also:
 * IDiscussionBoardCommentVersion, IDiscussionBoardCommentAttachment.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardComment = {
  /** Primary key of the comment (UUID). */
  id: string & tags.Format<"uuid">;

  /** Author of the comment (member UUID). */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /** Parent post's UUID to which the comment belongs. */
  discussion_board_post_id: string & tags.Format<"uuid">;

  /** Full content string (markdown/text) of the comment in its latest state. */
  content: string;

  /** Whether comment is currently soft deleted (hidden from ordinary users). */
  is_deleted: boolean;

  /** Created timestamp (UTC/ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp (UTC/ISO 8601). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardComment {
  /**
   * Summary object for a single comment on the discussion board. Used in list
   * or preview endpoints for the discussion_board_comments table.
   *
   * Fields included:
   *
   * - Id (UUID): Primary key
   * - Discussion_board_member_id (UUID): Member who authored the comment
   * - Discussion_board_post_id (UUID): Parent post to which the comment belongs
   * - Content (string): Preview/summary of comment text (may be truncated or
   *   first few words)
   * - Is_deleted (boolean): True if comment is soft-deleted/hidden
   * - Created_at (DateTime): When comment was posted
   * - Updated_at (DateTime): Last modification time
   *
   * Excludes lengthy content, attachment info, or edit/version audit.
   * Intended to power listings, moderation dashboards, or search engine
   * result pages for comment activity.
   */
  export type ISummary = {
    /** Unique identifier for the comment. */
    id: string & tags.Format<"uuid">;

    /** Board member (UUID) who authored the comment. */
    discussion_board_member_id: string & tags.Format<"uuid">;

    /** Parent post (UUID) to which this comment belongs. */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /** Short preview or extracted snippet of comment text. */
    content: string;

    /**
     * Whether the comment is currently soft-deleted (hidden but retained
     * for moderation/audit).
     */
    is_deleted: boolean;

    /** Timestamp for when the comment was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp for when comment was last edited. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Search/filter/pagination request schema for comments listing APIs.
   *
   * This structure allows clients to specify query criteria for finding,
   * sorting, or paginating discussion_board_comments entries across the
   * board. Common properties include:
   *
   * - Member_id (UUID, optional): Filter for all comments authored by a given
   *   member
   * - Post_id (UUID, optional): Limit to comments on a specific post
   * - Is_deleted (boolean, optional): Filter by deleted/non-deleted
   * - Created_at_from / created_at_to (DateTime, optional): Filter by creation
   *   time window
   * - Updated_at_from / updated_at_to (DateTime, optional): Filter by last edit
   *   time window
   * - Content_contains (string, optional): Free-text search or substring
   *   inclusion
   *
   * All properties are optional (except for pagination controls, if used),
   * supporting highly flexible comment retrieval/search. Pagination is
   * supported by parent request structures or through extra properties as
   * needed.
   */
  export type IRequest = {
    /** Filter for comments by a single member (author), if provided. */
    member_id?: string & tags.Format<"uuid">;

    /** Filter for comments on a specific post. */
    post_id?: string & tags.Format<"uuid">;

    /** Filter for deleted (true) or non-deleted (false) comments. */
    is_deleted?: boolean;

    /** Filter for comments created at or after this datetime. */
    created_at_from?: string & tags.Format<"date-time">;

    /** Filter for comments created at or before this datetime. */
    created_at_to?: string & tags.Format<"date-time">;

    /** Filter for comments updated after this datetime. */
    updated_at_from?: string & tags.Format<"date-time">;

    /** Filter for comments updated before this datetime. */
    updated_at_to?: string & tags.Format<"date-time">;

    /** Free-text/substring search in comment content. */
    content_contains?: string;
  };

  /**
   * Request schema for creating a new board comment via API.
   *
   * Client must provide all fields (except for system-managed fields like id,
   * is_deleted, timestamps, which are assigned by the server), and all fields
   * must map to columns in discussion_board_comments. Fields include:
   *
   * - Discussion_board_member_id (UUID): Creator (derived from user session,
   *   not client-supplied!)
   * - Discussion_board_post_id (UUID): Parent post id
   * - Content (string): Body of new comment (markdown or plain text)
   *
   * Is_deleted defaults to false on creation and is set by the server. Client
   * must not send id, created_at, or updated_at fields.
   */
  export type ICreate = {
    /**
     * Authoring member's id, usually set by authentication/session context,
     * not direct user input.
     */
    discussion_board_member_id: string & tags.Format<"uuid">;

    /**
     * Parent post's unique identifier (UUID) to which the comment is
     * attached.
     */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /** Full text of the new comment (markdown/supports styling). */
    content: string;
  };

  /**
   * Request schema for updating a comment. Used in PATCH/PUT APIs to change
   * content or soft-delete state. Fields:
   *
   * - Content (string, optional): Replacement text
   * - Is_deleted (boolean, optional): Change deleted state
   *
   * ID, post/member foreign keys, and audit fields are NOT mutable by the
   * client. Application must validate permission for edits
   * (owner/moderator/admin).
   */
  export type IUpdate = {
    /**
     * Optional: replacement/new text body for the comment, as edited by the
     * user or staff.
     */
    content?: string;

    /** Optional: set true to soft-delete, false to restore or unhide. */
    is_deleted?: boolean;
  };
}

import { tags } from "typia";

/**
 * Comment entity object, as per discussion_board_comment Prisma schema, with
 * complete metadata and all required fields for read, audit, notification, or
 * moderation workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardComment = {
  /**
   * Primary key UUID of this comment entity, uniquely identifying the comment
   * per discussion_board_comment schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the parent post (thread). Used for navigation,
   * filtering, and referential integrity.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Author/user ID (UUID) of the comment. Used for action audit, moderation,
   * and attribution.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Body text of the comment, corresponding to 'content' in the schema. For
   * UI display, moderation, search, and analytics.
   */
  content: string;

  /**
   * Timestamp when the comment was published. Used for ordering, time window
   * audit, discussion history, UI placement.
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp if/when the comment was last updated. Null if never edited. */
  updated_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Timestamp if/when the comment was deleted (soft delete). Null if active.
   * Used for moderation and audit purposes.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardComment {
  /**
   * Comment list/search request type: allows filtering by post, user,
   * content, created timestamp, and supports pagination. Used in
   * admin/moderator comment audits, user dashboards, and thread browsing
   * UIs.
   */
  export type IRequest = {
    /**
     * ID of the post to which comments belong. Used for filtering comments
     * per parent post (discussion_board_comment.post_id).
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * ID of the user (author) who wrote the comment. Used for filtering by
     * author. Optional for user dashboards/admin analytics.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Optional full-text search on comment content. Maps to GIN_TRGM or
     * like operator for advanced moderation UI, user search, or analytics.
     * Not always required, can be used for moderation policies.
     */
    content_query?: string;

    /**
     * Lower bound (inclusive) of creation timestamp range. Filters for
     * time-windowed comment audit. Uses ISO 8601 format.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound (inclusive) of creation timestamp range. Filters for
     * audit ranges, analytics, or dispute windows. Uses ISO 8601 format.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /** Pagination - page number. Null means first/default page. */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /**
     * Pagination - number of records per page. If not specified, server
     * default applies (such as 100).
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;
  };

  /**
   * Input for creating a new comment entry in the system. Used by registered
   * users when replying to posts and by moderation workflows for programmatic
   * insertion. Tied to Prisma schema's required fields for
   * discussion_board_comment.
   */
  export type ICreate = {
    /**
     * ID of the post this comment is to be added to. Must be a valid UUID,
     * required per discussion_board_comment.post_id.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * ID of the author user (discussion_board_user.id), as required in
     * comment creation for moderation, audit, and notification routing.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Full body text of the comment, subject to platform content moderation
     * and length constraints. Maps to discussion_board_comment.content.
     */
    content: string;
  };

  /**
   * Update type used for editing a comment (typically body content only).
   * Only updatable by author, moderator, or admin per business logic and
   * audit policies, mapping to content field in discussion_board_comment.
   */
  export type IUpdate = {
    /**
     * New content body for the comment. Used in edit flows for author or
     * moderator initiated change. Mapped to
     * discussion_board_comment.content.
     */
    content: string;
  };
}

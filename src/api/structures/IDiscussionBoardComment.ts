import { tags } from "typia";

/**
 * Represents a comment entity within the discussion board. Each comment links
 * to a post, an author, and may be threaded via parent_id (nested comment
 * structure).
 *
 * Maps 1:1 to 'discussion_board_comments' table row, including all audit
 * fields, parent linkage, and soft-delete for moderation compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardComment = {
  /** Primary key (UUID) identifying the comment record. */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the parent post associated with this comment. References
   * discussion_board_posts.id.
   */
  discussion_board_post_id: string & tags.Format<"uuid">;

  /**
   * UUID of the parent comment (supports threaded/nested structure). Null if
   * this is a top-level comment.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * ID of the member (author) creating the comment. References
   * discussion_board_members.id.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * Comment content/body. Required, subject to forum/business/content rules;
   * may support rich text/markdown per configuration.
   */
  body: string;

  /**
   * True if the comment has been edited after creation. Used by UI for
   * history/audit cues.
   */
  is_edited: boolean;

  /**
   * Timestamp of comment creation (ISO 8601 format). Used for sorting, audit,
   * and temporal analytics.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to this comment (ISO 8601). Used for
   * moderation/compliance.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp for this comment. Null if active, set if deleted
   * for audit/moderation compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardComment {
  /**
   * Search, filter, and pagination request body for querying comment entities
   * in the discussion board system.
   *
   * Supports flexible filtering for post, author, parent comment, keyword,
   * creation date range, and traditional pagination controls. Used for PATCH
   * /discussionBoard/comments endpoint.
   */
  export type IRequest = {
    /** Filter comments by parent post (discussion_board_post_id). */
    post_id?: string & tags.Format<"uuid">;

    /** Filter comments by member (creator). */
    discussion_board_member_id?: string & tags.Format<"uuid">;

    /**
     * Filter for comments with a specific parent_id (supports
     * threaded/nested comment structures or replies to a comment).
     */
    parent_id?: string & tags.Format<"uuid">;

    /**
     * Full-text search or keyword match against comment body for
     * advanced/analytics queries.
     */
    keyword?: string;

    /** Filter comments where created_at > supplied timestamp. */
    created_after?: string & tags.Format<"date-time">;

    /** Filter comments where created_at < supplied timestamp. */
    created_before?: string & tags.Format<"date-time">;

    /** Requested page number (for pagination, 1-based index). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Number of results per page (pagination limit; enforces admin-set max
     * value).
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;
  };

  /**
   * Defines the request schema for creating a new comment within a discussion
   * board post. All fields reference the `discussion_board_comments` Prisma
   * model and follow its atomic, 3NF-compliant structure. Used by users,
   * mods, or admins to add threaded/nested replies to posts.
   */
  export type ICreate = {
    /**
     * The UUID of the parent post this comment belongs to. Refers to
     * `discussion_board_posts.id`. Required for creating a comment and
     * aligning it to a specific post. Provided per comment creation
     * business rule.
     *
     * Fulfills audit, thread, and nesting requirements as designed in the
     * Prisma schema.
     */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /**
     * The UUID of the parent comment (supports comment threading/nesting).
     * If null, the comment is at the root of the post. Maps to
     * `discussion_board_comments.parent_id` in the schema.
     *
     * Supports complex discourse with multi-level replies.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The main content of the comment (required). Implements the atomic
     * comment content as specified in the Prisma schema.
     *
     * Used for threaded conversation, moderation, audit, and user
     * engagement.
     */
    body: string;
  };

  /**
   * Defines the payload for updating (editing) a comment in the discussion
   * board. Based on the `discussion_board_comments` Prisma schema, supporting
   * business requirements for user content modification and audit. At
   * minimum, a new comment body is required. The `is_edited` flag is set to
   * reflect that an update has occurred.
   */
  export type IUpdate = {
    /**
     * Updated content of the comment. Required for content changes; must be
     * a string representing the new (edited) text for the comment.
     *
     * This business field allows explanation or correction after initial
     * comment creation. Fulfills comment-editing and auditing requirements
     * from the Prisma schema.
     */
    body: string;

    /**
     * Tracks whether the comment has been edited after initial creation.
     * Used to fulfill audit, user trust, and moderation transparency
     * requirements.
     *
     * Maps to the `is_edited` column in the `discussion_board_comments`
     * schema.
     */
    is_edited?: boolean;
  };
}

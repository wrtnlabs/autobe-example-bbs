import { tags } from "typia";

/**
 * Full thread object for retrieval, creation confirmation, or update. Maps 1:1
 * to Prisma schema and audit references, includes all metadata fields but not
 * posts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardThreads = {
  /** UUID identifier for thread. */
  id: string & tags.Format<"uuid">;

  /** Title of the thread for display and search indexing. */
  title: string;

  /** ISO 8601 timestamp of thread creation. */
  created_at: string & tags.Format<"date-time">;

  /** ISO 8601 timestamp of last update. */
  updated_at: string & tags.Format<"date-time">;

  /** Parent topic's PK to which thread belongs. */
  discussion_board_topic_id: string & tags.Format<"uuid">;

  /** Member who created the thread (internal ref/audit). */
  creator_member_id: string & tags.Format<"uuid">;
};
export namespace IDiscussionBoardThreads {
  /**
   * Summary of a thread for listing threads under a topic, omitting posts or
   * full creator detail for performance.
   */
  export type ISummary = {
    /** Primary key/UUID for thread. */
    id: string & tags.Format<"uuid">;

    /** Displayable title of the thread. */
    title: string;

    /** When thread was created. */
    created_at: string & tags.Format<"date-time">;

    /** When thread was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Parent topic reference (UUID PK). */
    discussion_board_topic_id: string & tags.Format<"uuid">;
  };

  /**
   * Advanced search/filter/pagination query for browsing threads under a
   * topic or for admin audit.
   */
  export type IRequest = {
    /** If specified, only threads under this topic are returned. */
    topic_id?: (string & tags.Format<"uuid">) | null;

    /** If specified, partial match for thread title using trgm search. */
    title?: string | null;

    /** Include only threads created after this date. */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** Include only threads created before this date. */
    created_to?: (string & tags.Format<"date-time">) | null;

    /** Include only threads updated after this date. */
    updated_from?: (string & tags.Format<"date-time">) | null;

    /** Include only threads updated before this date. */
    updated_to?: (string & tags.Format<"date-time">) | null;

    /** Page to retrieve. */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** Records per page (optional, defaults to 100). */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** Field to sort by. Supported: created_at, updated_at, title. */
    sort?: "created_at" | "updated_at" | "title" | null;

    /** Sort order: asc or desc. */
    order?: "asc" | "desc" | null;
  };

  /**
   * Request body to create a new thread under an existing topic. Creator is
   * implied by session/context, not present in request object (SECURITY:
   * never accept user_id from client).
   */
  export type ICreate = {
    /** Title for the thread. Must be unique within the parent topic. */
    title: string;
  };

  /**
   * Request body to update a thread's title. Only the title is editable - all
   * other changes require separate endpoints or privileges. Null means no
   * update.
   */
  export type IUpdate = {
    /**
     * If provided, new displayable title for the thread (must be unique in
     * topic).
     */
    title?: string | null;
  };
}

import { tags } from "typia";

/**
 * A registered user core entity. Implements business logic for user
 * registration, login, account lifecycle, moderation. Per discussion_board_user
 * Prisma model, all fields normalized. Excludes password_hash for security;
 * only referenceable in internal logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUser = {
  /**
   * Unique identifier for the user. Primary key of discussion_board_user
   * table. Referenced in all user relations. 3NF enforced.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique display and mention name. Used for on-site display, at-mentions,
   * and account navigation. Uniqueness required.
   */
  username: string;

  /**
   * User's registration and notification address. Unique per user. Stored
   * only as a unique identifier, not for marketing per privacy rules.
   */
  email: string & tags.Format<"email">;

  /**
   * Indicates whether the account is currently active. Used in onboarding,
   * moderation, ban logic, and as a filter for account actions.
   */
  is_active: boolean;

  /**
   * ISO 8601 timestamp when user was created. Used for audit trails,
   * analytics, and onboarding reports.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * ISO 8601 timestamp when user was last updated, e.g., for profile edits,
   * moderation actions, or credential changes.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. If null, user is active; if set, user is
   * deactivated for moderation, GDPR, or account closure. Used for compliance
   * and reversible moderation.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardUser {
  /**
   * User search/filter request body for PATCH /discussionBoard/users. Follows
   * pagination/filter/search contracts. Based on discussion_board_user
   * schema, matches business context, role-based access, and 3NF
   * normalization.
   */
  export type IRequest = {
    /**
     * Page number to retrieve. Supports pagination for large user lists.
     * Follows IPage.IRequest standard for consistency.
     */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Maximum number of results per page. Supports paginated user listing
     * in accordance with board requirements and IPage.IRequest.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Filter users by exact or partial username match. Used in admin
     * search, analytics, and bulk moderation UI. Index applies.
     */
    username?: string | null;

    /**
     * Filter by user email. Used for audits, queries, or registration
     * conflict resolution. Uniqueness enforced.
     */
    email?: (string & tags.Format<"email">) | null;

    /**
     * Filter for active/inactive account status. For admin dashboards,
     * onboarding flows, or maintenance checks.
     */
    is_active?: boolean | null;

    /**
     * Lower bound for filtering by creation date. Used in analytics and
     * account trend reports.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Upper bound for filtering by creation date. Used to set range limits
     * in user listing, export, or analytic reports.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /**
     * Search for users by soft-delete status (null/true/false). Used for
     * GDPR audit, restoration, or compliance enumeration.
     */
    deleted?: boolean | null;
  };

  /**
   * Input contract for new user registration or admin-initiated creation.
   * Enforces all DB constraints on discussion_board_user—username/email
   * uniqueness, password security, and policy-driven status.
   */
  export type ICreate = {
    /**
     * Chosen unique username for identity and mentions. Must pass
     * uniqueness checks before insert.
     */
    username: string;

    /**
     * Unique, valid email for registration and notifications. Used for
     * identification throughout the board.
     */
    email: string & tags.Format<"email">;

    /**
     * One-way hashed user password. Presentation layer must hash before
     * submission—never stored or transmitted in cleartext, strictly for
     * secure authentication.
     */
    password_hash: string;

    /**
     * Account activation state at creation. Set true for immediate
     * enabling, false for pre-activation flow by admin/policy.
     */
    is_active: boolean;
  };

  /**
   * Payload for updating user core fields. Only updatable fields are included
   * (username, email, is_active). Used in user-driven or moderated updates.
   * Password change uses separate endpoint for security.
   */
  export type IUpdate = {
    /**
     * New username (if updating). Must remain unique; enforced on update.
     * Used in profile management or admin correction.
     */
    username?: string;

    /**
     * New email, must be unique; subject to email verification on update.
     * Used for profile self-management and admin correction.
     */
    email?: string & tags.Format<"email">;

    /**
     * Change account status (e.g. activate/deactivate). Used for
     * moderation, admin actions, or onboarding process. If set to false,
     * triggers account freeze/disable rules.
     */
    is_active?: boolean;
  };
}

import { tags } from "typia";

import { IPage } from "./IPage";

/**
 * A version/snapshot of a post's body as stored in the
 * discussion_board_post_versions table. Encodes one step in a post's edit
 * history; provides immutable content at a specific timestamp and identifies
 * the editor.
 *
 * This object allows for audit, rollback, or display of revision history.
 * Follows the Prisma schema strictly; supplemental business fields are not
 * included. For moderation settings, see additional compliance documentation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPostVersion = {
  /**
   * Unique identifier for the individual post version
   * (discussion_board_post_versions.id, PK).
   */
  id: string & tags.Format<"uuid">;

  /**
   * FK to post whose this is a version/snapshot for
   * (discussion_board_posts.id).
   */
  discussion_board_post_id: string & tags.Format<"uuid">;

  /**
   * Member ID (FK discussion_board_members.id) of the editor who created this
   * version. Used for role/audit purposes.
   */
  editor_member_id: string & tags.Format<"uuid">;

  /**
   * Monotonically increasing integer identifier for the sequential version.
   * Starts at 1 for original post, increments by 1 for each subsequent edit.
   */
  version: number & tags.Type<"int32">;

  /**
   * Full post content snapshot for this version as it was at creation
   * (markdown/text).
   */
  body: string;

  /**
   * Timestamp in ISO 8601 format for creation of this post version; immutable
   * after insert.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardPostVersion {
  /**
   * Advanced search and filtering criteria for post version records. Supports
   * queries by editor, time window, content substring, or version number
   * range. Used in PATCH endpoints for audit/history tools and moderation
   * UIs.
   */
  export type IRequest = {
    /**
     * Limits search to versions for this specified post. Required for
     * context scoping.
     */
    discussion_board_post_id?: string & tags.Format<"uuid">;

    /**
     * Restrict to versions created (edited) by a specific board member (FK
     * to discussion_board_members.id).
     *
     * Optional, for filtering to a single editor's changes.
     */
    editor_member_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Lower bound of version number for filtering (inclusive). Omits
     * versions below this; optional.
     */
    versionFrom?: number & tags.Type<"int32">;

    /**
     * Upper bound of version number for filtering (inclusive). Version
     * numbers above this are omitted; optional.
     */
    versionTo?: number & tags.Type<"int32">;

    /**
     * Filter by substring (trgm search) present in snapshot body. Optional,
     * used for moderation/audit search.
     *
     * Null for unfiltered.
     */
    contentSubstring?: string | null;

    /**
     * Only include post version events created at or after this timestamp
     * (ISO 8601); optional.
     */
    createdFrom?: string & tags.Format<"date-time">;

    /**
     * Only include post version events created at or before this timestamp
     * (ISO 8601); optional.
     */
    createdTo?: string & tags.Format<"date-time">;
    pagination?: IPage.IRequest;
  };

  /**
   * Schema for creating a new version snapshot for a post (edit/revise). Used
   * during edit flow for post history tracking. Fields are subset of post
   * version schema: references original post, provides new snapshot body, and
   * acting editor member (never accepted from client but attached by
   * backend).
   *
   * See append/edit requirements for version sequence rules. Version and
   * created_at are auto-incremented and not provided by client.
   */
  export type ICreate = {
    /**
     * Post (FK discussion_board_posts.id) to which this version record is
     * attached.
     */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /** The full new body/content of the post as edited by the user. */
    body: string;
  };

  /**
   * Schema for updating/editing an existing post version. Generally only
   * allowed for moderation compliance cases; not typical for members.
   *
   * Permits editing the body (snapshot content) or (by admin) potentially
   * re-attributing the editor. All other fields are immutable. Used by
   * PATCH/PUT endpoints for revision correction.
   */
  export type IUpdate = {
    /**
     * Sets a replacement snapshot for the body content in this version
     * record.
     */
    body?: string;

    /**
     * With admin-level access, can re-attach a version to a different
     * editor (rare compliance-only use case).
     */
    editor_member_id?: (string & tags.Format<"uuid">) | null;
  };
}

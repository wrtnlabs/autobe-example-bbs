import { tags } from "typia";

/**
 * Single record for global site settings according to the Prisma
 * 'site_settings' table. Contains all atomic, required properties for site
 * configuration, branding, compliance, and enablement of feature toggles.
 *
 * References: Prisma schema comments and technical requirements in business
 * docs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISiteSetting = {
  /**
   * Primary key/unique identifier for this site settings record.
   *
   * References the site_settings table PK in the schema, for audit and
   * referencing.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The branded, human-readable name of the discussion board.
   *
   * Displayed throughout user UI. Required per branding and configuration
   * rules; unique in the database.
   */
  site_name: string;

  /**
   * The default language code for the board (e.g., 'en-US').
   *
   * Supports internationalization and accessibility features. Normalized as
   * atomic, non-derived value as per schema.
   */
  default_language: string;

  /**
   * URL linking to the community rules or platform guidelines.
   *
   * Fulfills transparency and compliance requirements. Required per technical
   * and business documentation.
   */
  guidelines_url: string;

  /**
   * Optional URL to the logo/image for site branding and theming.
   *
   * Included in the board header/footer. Nullable, as logo is optional per
   * enhancement roadmap.
   */
  branding_logo_url?: string;

  /**
   * Serialized JSON data representing feature toggles and site-wide options.
   *
   * Atomic string as required for extensible/centralized config. Interpreted
   * by frontend/admin tools for enabling/disabling board features.
   */
  features_json: string;

  /**
   * Timestamp for when this configuration was created.
   *
   * Audit and history tracking as demanded by technical and business
   * compliance.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the most recent update to this settings record.
   *
   * Provides auditability and reference during configuration management.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ISiteSetting {
  /**
   * Request/query structure for retrieving site settings records. Enables
   * filtering by various atomic fields, date range (for audit/history), and
   * supports pagination. Used in admin management, config change review, and
   * compliance tools in accordance with business and technical requirements.
   */
  export type IRequest = {
    /**
     * Optional query filter for the site name.
     *
     * Used in admin UIs for searching particular platform settings by
     * human-readable name. String match or partial filtering applied.
     */
    site_name?: string;

    /**
     * Optional filter for the platform's default language. E.g., 'en-US'.
     *
     * Used for search or audit review. Implemented in UI filters and
     * backend search logic.
     */
    default_language?: string;

    /**
     * (Optional) Filter for site settings created after this datetime.
     *
     * Used in audit systems or admin dashboards to inspect recent changes
     * or configuration history.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * (Optional) Filter for site settings created before this datetime.
     *
     * Complements created_at_from to implement date-range queries in audit
     * trails.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /**
     * Page number for pagination controls.
     *
     * Used in admin dashboards and audit tools for browsing configuration
     * history. Defaults specified in IPage.IRequest.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Number of records per page, for pagination.
     *
     * Helps optimize queries for large datasets of configuration changes.
     * Defaults and restrictions defined in standard paging conventions.
     */
    limit?: number & tags.Type<"int32">;
  };
}

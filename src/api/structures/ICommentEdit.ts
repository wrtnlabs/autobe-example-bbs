import { tags } from "typia";

/**
 * Atomic record of a single versioned edit of a comment, as stored in the
 * `comment_edits` table.
 *
 * Each record represents a complete snapshot at the moment of editing,
 * supporting full audit, rollback, and moderation workflows as detailed in
 * requirements and ERD.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommentEdit = {
  /**
   * The unique identifier of the comment edit snapshot.
   *
   * Primary key. Used for audit, rollback, or dispute resolution.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The comment ID this edit belongs to (`comment_edits.comment_id`).
   *
   * Maintains versioned edit linkage/traceability.
   */
  comment_id: string & tags.Format<"uuid">;

  /**
   * ID of the user who made this edit (`comment_edits.editor_id`).
   *
   * Used to trace edit authorship for moderation/business logic.
   */
  editor_id: string & tags.Format<"uuid">;

  /**
   * Full text body of the comment at the time of edit, as stored in
   * `comment_edits.body`.
   *
   * Reflects true historical content for evidence and audit.
   */
  body: string;

  /**
   * Optional annotation/reason describing why the edit was performed
   * (`comment_edits.edit_reason`).
   *
   * Used by users or moderators to explain content changes. Can be null.
   */
  edit_reason?: string | null;

  /**
   * Timestamp when this edit snapshot was created
   * (`comment_edits.created_at`).
   *
   * Supports auditability and compliance with moderation standards.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommentEdit {
  /**
   * Search, filtering, and pagination container for retrieving comment edit
   * history.
   *
   * Fulfills business and audit requirements for tracking content change
   * history, as described in the platform documentation and `comment_edits`
   * table in ERD.
   */
  export type IRequest = {
    /**
     * ID of the comment to search or filter edits for
     * (`comment_edits.comment_id`).
     *
     * Supports per-comment edit history workflows, as required in
     * moderation and audit documentation. Example:
     * 'f01g2345-hi67-j890-k123-456lmnopq789'.
     */
    comment_id?: string & tags.Format<"uuid">;

    /**
     * User ID of the edit author (`comment_edits.editor_id`).
     *
     * Finds edit history created by the given user. Used for user history
     * or admin review.
     */
    editor_id?: string & tags.Format<"uuid">;

    /**
     * Filter for edits created after a given date/time.
     *
     * Used for filtering edit histories within audit time windows.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Filter for edits created before a given date/time.
     *
     * Bounds the query for targeted audit review or content moderation.
     */
    created_to?: string & tags.Format<"date-time">;

    /** Page number of paged results (default: 1). */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Maximum records per page (default: 100).
     *
     * Controls API response size for large query sets.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.Maximum<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Request body for creating a new snapshot/version of a comment edit as per
   * the `comment_edits` table definition.
   *
   * All fields are atomic and strictly required for audit, history tracking,
   * and compliance.
   */
  export type ICreate = {
    /**
     * The unique ID of the comment being edited
     * (`comment_edits.comment_id`).
     *
     * Links the edit to the parent comment for audit trail and history.
     */
    comment_id: string & tags.Format<"uuid">;

    /**
     * The user ID who performed this edit (`comment_edits.editor_id`).
     *
     * Enforces accountability in compliance with moderation policy.
     */
    editor_id: string & tags.Format<"uuid">;

    /**
     * The full comment text at this revision, as entered by the editor.
     *
     * Must pass business rules for content. Represents the version at time
     * of edit.
     */
    body: string;

    /**
     * Optional annotation/rationale for the edit
     * (`comment_edits.edit_reason`).
     *
     * May be used for self-explanation or for moderation notes. Can be
     * null.
     */
    edit_reason?: string | null;
  };

  /**
   * Request body for updating the text or annotation of an existing comment
   * edit snapshot in the `comment_edits` table.
   *
   * Enforces the audit/history preservation business rules while allowing
   * legitimate content changes.
   */
  export type IUpdate = {
    /**
     * The new content for the comment edit snapshot.
     *
     * Used to correct, update, or revise the snapshot for compliance or
     * evidence tracking.
     */
    body: string;

    /**
     * Updated annotation or reason for this edit.
     *
     * Allows updating rationale/explanation of edit, as required for
     * audit/moderation workflows.
     */
    edit_reason?: string | null;
  };
}

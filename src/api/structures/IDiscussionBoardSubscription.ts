import { tags } from "typia";

/**
 * Full persistent object for a discussion board subscription in the DB.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSubscription = {
  /** Primary key of this subscription entry. */
  id: string & tags.Format<"uuid">;

  /**
   * Member user subscribing to notifications; references
   * discussion_board_members.id.
   */
  subscriber_id: string & tags.Format<"uuid">;

  /** Type of subscription target (use 'topic' or 'thread'). */
  target_type: string;

  /** UUID of the thread or topic this subscription refers to. */
  target_id: string & tags.Format<"uuid">;

  /**
   * Delivery method for this subscription's notifications (e.g., 'email',
   * 'in-app').
   */
  notification_method: string;

  /** Is the subscription currently active/enabled for notifications? */
  is_active: boolean;

  /** Date this subscription was created and enabled. */
  subscribed_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardSubscription {
  /**
   * Summary record for a single discussion board subscription as seen in
   * lists or overviews.
   */
  export type ISummary = {
    /**
     * Primary key UUID for the subscription record.
     *
     * Unique identifier for each subscription in
     * discussion_board_subscriptions.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the member who owns this subscription.
     *
     * References discussion_board_members.id.
     */
    subscriber_id: string & tags.Format<"uuid">;

    /**
     * Type of target entity being subscribed to. Should be either 'topic'
     * or 'thread'.
     *
     * Enables polymorphic subscriptions.
     *
     * This is always required.
     */
    target_type: string;

    /** UUID of the entity this subscription targets (topic or thread). */
    target_id: string & tags.Format<"uuid">;

    /**
     * The preferred delivery method for this subscription (e.g., 'email',
     * 'in-app').
     */
    notification_method: string;

    /**
     * Whether this subscription is currently active.
     *
     * If false, notifications are currently paused.
     *
     * Enforced by the requirements.
     */
    is_active: boolean;

    /**
     * Timestamp when the subscription was created.
     *
     * This is set automatically on creation in
     * discussion_board_subscriptions.
     */
    subscribed_at: string & tags.Format<"date-time">;
  };

  /**
   * Request/search structure to filter, sort, or page through subscriptions.
   *
   * Field structure matches typical filters used in UIs and admin dashboards.
   */
  export type IRequest = {
    /** Filter results to a specific subscriber (member user) by their UUID. */
    subscriber_id?: string & tags.Format<"uuid">;

    /** Target entity type to filter (topic/thread). */
    target_type?: string;

    /** Target UUID for specific entity subscription search. */
    target_id?: string & tags.Format<"uuid">;

    /**
     * Filter by preferred delivery method (e.g., 'email', 'in-app') for
     * this subscription.
     */
    notification_method?: string;

    /** Return only active/inactive subscriptions if specified. */
    is_active?: boolean;

    /** Filter subscriptions created after this timestamp. */
    subscribed_at_from?: string & tags.Format<"date-time">;

    /** Filter subscriptions created before this timestamp. */
    subscribed_at_to?: string & tags.Format<"date-time">;

    /** Page number for pagination (starts at 1). */
    page?: number & tags.Type<"int32">;

    /** Number of records per page (default-100). */
    limit?: number & tags.Type<"int32">;
  };

  /** Request body for creating a new user subscription to a topic or thread. */
  export type ICreate = {
    /**
     * UUID of the subscribing member; references
     * discussion_board_members.id.
     */
    subscriber_id: string & tags.Format<"uuid">;

    /** Type of entity to subscribe to (should be 'topic' or 'thread'). */
    target_type: string;

    /** Target entity's UUID (thread or topic). */
    target_id: string & tags.Format<"uuid">;

    /**
     * Preferred notification delivery method for this subscription (e.g.,
     * 'email', 'in-app').
     */
    notification_method: string;

    /** True if the subscription is active upon creation. */
    is_active: boolean;
  };

  /** Request body to update an existing subscription's editable fields. */
  export type IUpdate = {
    /** Change the delivery method (e.g., switch from 'in-app' to 'email'). */
    notification_method?: string;

    /** Set the subscription as enabled/disabled. */
    is_active?: boolean;

    /** Update target type (uncommon; generally not changed). */
    target_type?: string;

    /** Update the subscribed target's UUID (rare; typically not changed). */
    target_id?: string & tags.Format<"uuid">;
  };
}

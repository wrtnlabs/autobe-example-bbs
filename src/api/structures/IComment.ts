import { tags } from "typia";

/**
 * Normalized atomic comment record, as per `comments` Prisma table and ERD
 * diagrams.
 *
 * All fields are direct mappings of table columns, no derived/aggregate data,
 * fully 3NF. Implements all requirements for comment display, threading, user
 * association, moderation, and auditability.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IComment = {
  /**
   * The unique ID for this comment in the comments table.
   *
   * Primary key; used for direct retrieval, update, or deletion.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the post this comment is attached to (`comments.post_id`).
   *
   * Required to support 1:N relationship structure as shown in ERD/Prisma.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * ID of the user who authored the comment (`comments.author_id`).
   *
   * Supports threading, audit, and moderation requirements.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * ID of the parent comment if this is a reply (`comments.parent_id`).
   *
   * Null for root/top-level comments. Implements nested/threaded discussions
   * as described in requirements and database normalization.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Timestamp when the comment was created (`comments.created_at`).
   *
   * Used for chronological display, audit, and moderation workflows.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp if the comment was (soft-)deleted, or null if active
   * (`comments.deleted_at`).
   *
   * Enforces soft-deletion and data retention/audit policies.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IComment {
  /** 코멘트 요약정보 타입입니다. 게시글별 코멘트 리스트 뷰 등에 쓰입니다. */
  export type ISummary = {
    /** 코멘트 고유 ID (요약용). */
    id: string & tags.Format<"uuid">;

    /** 작성자 ID (요약). */
    author_id: string & tags.Format<"uuid">;

    /** 작성 시각. */
    created_at: string & tags.Format<"date-time">;

    /** 숨김 여부(요약정보). */
    hidden: boolean;
  };

  /**
   * Search, filter, and pagination parameters for comment listing and search
   * APIs.
   *
   * Fulfills requirements for flexible comment discovery and moderation,
   * matching comments table normalization and business logic on user/content
   * management.
   */
  export type IRequest = {
    /**
     * Filter comments by the target post ID (`comments.post_id`).
     *
     * Enables retrieval of all comments related to a specific post, as
     * specified in both the Prisma schema and requirements for threaded
     * discussion. Used in pagination/filtering queries. Example:
     * 'c3b67890-defa-12b3-c456-7890abcdef12'.
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Filter comments by author user ID (`comments.author_id`).
     *
     * Supports searching for all comments made by a particular user. Used
     * in admin, moderation, or profile activity queries. Example:
     * 'd567e890-12ab-34cd-56ef-7890abcdef34'.
     */
    author_id?: string & tags.Format<"uuid">;

    /**
     * Filter for replies to a specific parent comment
     * (`comments.parent_id`).
     *
     * Supports parsing threaded/nested comment structures, as required for
     * front-end UI rendering and in ERD relationships. Example:
     * 'e901f234-56bc-7890-abcd-ef0123456789'.
     */
    parent_id?: string & tags.Format<"uuid">;

    /**
     * Page number for paged retrieval, starting from 1.
     *
     * Supports flexible pagination of large result sets as per standard
     * forum requirements.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Records per page in paged retrieval (default: 100).
     *
     * Allows client-side control of response size for scalability and
     * usability. Must conform to platform defaults and maximums in
     * requirements.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.Maximum<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Field for sorting comment results; one of 'created_at', 'upvotes', or
     * 'downvotes'.
     *
     * Implements advanced filtering and sorting in line with requirements.
     * Used especially in moderation or analytics UIs. Default:
     * 'created_at'.
     */
    sort_by?: "created_at" | "upvotes" | "downvotes";

    /**
     * Sort order (ascending or descending); accepts 'asc' or 'desc'.
     *
     * Allows for chronological or reverse sorting on chosen field.
     */
    sort_order?: "asc" | "desc";
  };

  /**
   * Request body for creating a new comment as per `comments` table
   * definition and business rules.
   *
   * All fields map directly to DB atomic columns, except `body` which is
   * stored separately in the `comment_edits` table via workflow. The creation
   * API also creates an initial comment_edits record for versioning/audit.
   */
  export type ICreate = {
    /**
     * The post's unique ID that this comment is for (`comments.post_id`).
     *
     * Required to create a new comment.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * ID of the user creating the comment (`comments.author_id`).
     *
     * Ensures only registered users can create comments, enforcing platform
     * security and accountability.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * ID of parent comment, if this is a reply/threaded comment
     * (`comments.parent_id`).
     *
     * Null for top-level comments. Supports the business rule of
     * thread/comment nesting.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Textual content of the comment at time of creation.
     *
     * Required field, must comply with minimum character requirements in
     * business rules (not enforced at schema-level, see API validation).
     *
     * No rich formatting per DB normalization.
     */
    body: string;
  };

  /**
   * Request body for updating the content of a comment. This operation
   * creates a new versioned record in `comment_edits` in addition to updating
   * the current comment for auditability, as specified in business
   * requirements and workflow documentation.
   */
  export type IUpdate = {
    /**
     * The new content for the comment body being updated.
     *
     * Updates the associated comment_edits content snapshot as well,
     * maintaining edit history and audit trails. This field must meet
     * business requirements for text content quality and restrictions.
     */
    body: string;
  };
}

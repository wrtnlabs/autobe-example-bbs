import { tags } from "typia";

/**
 * Represents a Comment record, as per the Posts domain comments model and
 * requirements analysis.
 *
 * Includes all primary properties as described in the Prisma schema, with full
 * typing and references to related entities (users, posts, parent comments).
 * Supports auditability, moderation, and business logic for threaded
 * conversations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IComment = {
  /**
   * Primary Key. Unique identifier for each comment (see comments.id in
   * schema).
   *
   * Assigned at creation; required for retrieval, update, and reference by
   * other entities (votes, replies).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Author's {@link users.id}.
   *
   * Stores the user's unique identifier responsible for the comment, using
   * the relationship to users. Enables auditing, author lookup, and
   * permissions checks.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * The ID of the post this comment is attached to ({@link posts.id}).
   *
   * Crucial for associating the comment as a reply to a given post,
   * reflecting business rules and ERD documentation.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Parent comment's {@link comments.id}.
   *
   * Used for nested (threaded) replies. Null for top-level comments. Enables
   * tree-based conversations.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Main text of the comment; user-provided reply content.
   *
   * References the comments.content field; holds message body visible to
   * users.
   */
  content: string;

  /**
   * Timestamp when the comment was first authored (see comments.created_at).
   *
   * Used for chronological ordering, moderation, and audit.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last edit to the comment (see comments.updated_at).
   *
   * Enables edit history, moderation, or user accountability.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp (see comments.deleted_at).
   *
   * Null if not deleted; otherwise contains date/time when marked deleted for
   * moderation/auditing.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IComment {
  /**
   * Defines filtering, pagination, and sorting criteria for retrieving
   * comments. Fields draw directly from the requirements and Prisma comments
   * model.
   *
   * This allows filtering by comments made on a post, by a user, or as
   * replies to a parent, along with keyword search and pagination. Reflects
   * full API and business use cases for comment listing endpoints.
   */
  export type IRequest = {
    /**
     * The unique ID of the target post to which comments should be
     * filtered.
     *
     * Based on the comments table, 'post_id' field links the comment to a
     * particular post for thread-based filtering. Sourced from the business
     * rule: 'Each Comment is linked to a Post.'
     */
    postId?: string & tags.Format<"uuid">;

    /**
     * The unique ID of the user who authored comments.
     *
     * Designed for filtering comments made by a specific user, as
     * referenced in the comments.user_id column.
     */
    userId?: string & tags.Format<"uuid">;

    /**
     * The parent comment's ID, for retrieving or searching nested replies.
     *
     * This relates to the self-referential thread system: filtering for
     * replies to a specific comment.
     */
    parentId?: (string & tags.Format<"uuid">) | null;

    /**
     * A keyword or phrase to search in comment content.
     *
     * Implements full-text search capability as referenced in content field
     * and API description.
     */
    search?: string;

    /**
     * The starting index for pagination.
     *
     * Allows skipping records in list pagination, supporting usability in
     * large thread navigation.
     */
    offset?: number &
      tags.Type<"int32"> &
      tags.Default<0> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Maximum number of records to return per page. Defaults to 20 if not
     * specified.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<20> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Sorting order or field, e.g., 'created_at:desc', 'created_at:asc'.
     *
     * Aligns with thread listing sorting as described in business and API
     * requirements.
     */
    sort?: string;
  };

  /**
   * Object for creating a new comment. Includes required properties for new
   * replies, including references to post, author, and optionally a parent
   * for nested threading. Matches business rules requiring each comment to
   * have an associated user (author) and post, plus the option to nest under
   * another comment.
   */
  export type ICreate = {
    /**
     * User ID (author's identifier). Must reference an existing user.
     * Required to ensure only registered users may comment.
     *
     * Fulfills business rule that only registered users can create
     * comments.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * ID of the post this comment is on. Implements business rule requiring
     * every comment to be attached to a post.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * Parent comment's ID for nested replies. Optional. Enables thread
     * hierarchy as in the business requirements.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Main comment body text. Required; validated for length and content
     * rules by business logic.
     */
    content: string;
  };

  /**
   * Object for updating an existing comment (edit or soft-delete). User or
   * moderator may use this to change content or to mark the comment as
   * deleted.
   *
   * References the comments Prisma model and moderation business rules: only
   * content or soft-delete flag is usually editable.
   */
  export type IUpdate = {
    /**
     * New comment body, if editing. Must meet length/content requirements
     * from business logic.
     */
    content?: string;

    /**
     * Timestamp for marking a comment as deleted (for moderation/audit).
     * Set to current time for 'soft delete,' or null to un-delete if
     * allowed.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Result object for delete operations on comments. Confirms deletion (soft
   * or hard), as required by business rules and audit requirements. Returns
   * the comment ID, deletion status, and optional human-readable message.
   */
  export type IDeleteResult = {
    /** ID of the comment that was deleted. */
    id: string & tags.Format<"uuid">;

    /**
     * Status: true if successfully deleted (soft or hard as per policy),
     * false otherwise.
     */
    deleted: boolean;

    /** A confirmation or informative message about the deletion result. */
    message?: string;
  };

  /**
   * A concise summary type for comments, covering the most important
   * references and metadata for paginated or overview lists.
   */
  export type ISummary = {
    /** Unique identifier for the comment. */
    id: string & tags.Format<"uuid">;

    /** User (author) of the comment. */
    user_id: string & tags.Format<"uuid">;

    /** Parent post for the comment. */
    post_id: string & tags.Format<"uuid">;

    /** Parent comment (if any). */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Timestamp of comment creation. */
    created_at: string & tags.Format<"date-time">;
  };
}

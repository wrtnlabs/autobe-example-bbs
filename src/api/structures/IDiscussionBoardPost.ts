import { tags } from "typia";

/**
 * Represents a post entity under a thread in the discussion board system. Maps
 * to a 'discussion_board_posts' table row, with all required fields for audit,
 * display, and moderation.
 *
 * Key relationships: parent thread (thread_id), author (member_id). Includes
 * all audit and compliance timestamps and a soft-delete field for
 * reversibility.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPost = {
  /**
   * Primary Key. Unique identifier for this post (discussion_board_posts
   * record UUID).
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the thread to which this post belongs
   * (discussion_board_threads.id). Used for relationship navigation.
   */
  discussion_board_thread_id: string & tags.Format<"uuid">;

  /**
   * ID of the member (author) creating this post. Required, references a
   * valid 'discussion_board_members.id'.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * Contenido del post: texto completo, permitido en markdown o texto plano
   * según la configuración del foro. Obligatorio y sujeto a normas de
   * contenido del sistema.
   */
  body: string;

  /**
   * Indica si el contenido ha sido editado después de su creación. Utilizado
   * en interfaces de usuario para mostrar la etiqueta 'editado'.
   */
  is_edited: boolean;

  /**
   * Marca temporal de creación del post. Utilizada para ordenación, auditoría
   * y navegación.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Marca temporal de última actualización de la publicación. Permite
   * seguimiento del historial de ediciones y cumplimiento de requisitos
   * legales.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Marca temporal de borrado suave (soft-delete) para cumplimiento y
   * moderación. Nulo si el post está activo.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPost {
  /**
   * Search, filter, and pagination request for querying discussion board
   * posts.
   *
   * Allows complex filtering by thread, creator, full-text, creation date, or
   * paging controls. Designed as input body for PATCH /discussionBoard/posts
   * as per OpenAPI operation and aligns with IPage pagination conventions.
   */
  export type IRequest = {
    /**
     * Filter posts by their parent thread's UUID
     * (discussion_board_posts.discussion_board_thread_id).
     */
    thread_id?: string & tags.Format<"uuid">;

    /**
     * Filter posts by the creator member's UUID
     * (discussion_board_posts.discussion_board_member_id).
     */
    discussion_board_member_id?: string & tags.Format<"uuid">;

    /**
     * Full-text search keyword filter for post body text (for advanced
     * search, moderation or analytics).
     */
    keyword?: string;

    /** Filter posts where created_at is after this timestamp. */
    created_after?: string & tags.Format<"date-time">;

    /** Filter posts where created_at is before this timestamp. */
    created_before?: string & tags.Format<"date-time">;

    /** Requested page number (1-based indexing). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Maximum number of results per page. Enforced business maximum
     * typically set in admin config.
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;
  };

  /**
   * Request payload for creating a post within a discussion thread. Used as
   * POST body in post creation API, matching OpenAPI and Prisma rules.
   * Requires thread, author, and non-null body content.
   */
  export type ICreate = {
    /**
     * Thread UUID for the post's parent thread. Must exist and be open;
     * validated via business logic.
     */
    discussion_board_thread_id: string & tags.Format<"uuid">;

    /** Author's member UUID; must reference an active, valid member. */
    discussion_board_member_id: string & tags.Format<"uuid">;

    /**
     * Required body content for the post. Length and rules enforced by
     * configuration, may allow markdown/RTE.
     */
    body: string;
  };

  /**
   * Request body for updating a post (PATCH/PUT semantics). All fields
   * optional; non-supplied keys remain unchanged. Used in
   * admin/moderator/member editing flows as per requirements.
   */
  export type IUpdate = {
    /**
     * Updated body/content of the post. Rules and length enforced by
     * business logic/config.
     */
    body?: string;

    /**
     * True if post is being edited. Automatically handled by backend, may
     * be supplied by client for audit compliance.
     */
    is_edited?: boolean;
  };
}

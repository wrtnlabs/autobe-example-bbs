import { tags } from "typia";

import { IPage } from "./IPage";

/**
 * A post entity in the discussion board, as defined in the
 * discussion_board_posts table (Articles domain). Represents an individual
 * contribution within a thread, authored by a member, and structured for direct
 * mapping to the Prisma schema.
 *
 * This schema is used in post retrieval, list, and detail responses. For
 * creation/update, see .ICreate/.IUpdate variants. For responses, all required
 * metadata, author info (by ID reference), timestamps, and safe content fields
 * are included.
 *
 * Sensitive information such as passwords, security tokens, etc. are NEVER
 * included in response objects.
 *
 * See documentation in requirements for allowed API field semantics and
 * role-based field visibility.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPost = {
  /**
   * Unique identifier for the post (discussion_board_posts.id PK). Must be a
   * valid UUID per Prisma table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of parent thread (FK discussion_board_threads.id). Indicates which
   * thread this post belongs to.
   */
  discussion_board_thread_id: string & tags.Format<"uuid">;

  /**
   * ID of board member that authored the post (FK
   * discussion_board_members.id). Field is read-only and never accepted from
   * clients.
   */
  creator_member_id: string & tags.Format<"uuid">;

  /**
   * Body of the post in markdown/text (discussion_board_posts.body). No
   * computation/aggregation, only user input as stored in the schema.
   */
  body: string;

  /**
   * Indicates if this post was edited after creation
   * (discussion_board_posts.is_edited). True for edited posts, false for
   * unedited originals.
   */
  is_edited: boolean;

  /**
   * Timestamp of post creation in ISO 8601 format
   * (discussion_board_posts.created_at).
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update to post (discussion_board_posts.updated_at). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If present, timestamp for when post was soft-deleted
   * (discussion_board_posts.deleted_at). Null for active posts. Only shown to
   * moderators/admins.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPost {
  /**
   * Request structure for advanced searching/filtering of posts. Used in
   * POST/PATCH for server-side search on the discussion_board_posts table.
   *
   * All fields here are optional; only those with values are used for
   * filter/scoping. Keeps adherence to Prisma table's model.
   *
   * Used for advanced thread browsing, moderation views, and analytics.
   *
   * For basic page/query, use IPage.IRequest.
   */
  export type IRequest = {
    /**
     * Thread ID to filter posts by parent thread
     * (discussion_board_thread_id in schema). If provided, restricts search
     * to posts under the specified thread.
     */
    threadId?: string & tags.Format<"uuid">;

    /**
     * Filter by creator member. Returns only posts authored by the
     * specified board member (creator_member_id in schema).
     */
    creatorMemberId?: (string & tags.Format<"uuid">) | null;

    /**
     * If provided, filters posts by their is_edited state. True for posts
     * that have been edited; false for original/unmodified.
     */
    isEdited?: boolean;

    /**
     * Start of creation time window. Only posts created at or after this
     * timestamp are returned.
     */
    createdFrom?: (string & tags.Format<"date-time">) | null;

    /**
     * End of creation time window. Only posts created at or before this
     * timestamp are returned.
     */
    createdTo?: (string & tags.Format<"date-time">) | null;

    /**
     * If true, returns soft-deleted posts only. If false, returns only
     * non-deleted posts. If omitted, both are included.
     */
    deleted?: boolean;

    /**
     * If present, limits results to posts whose body contains this
     * substring (case-insensitive, trgm-indexed in DB). Enables simple
     * full-text search for post content.
     */
    bodySubstring?: string | null;
    pagination?: IPage.IRequest;
  };

  /**
   * Request body for creating a new discussion board post. Corresponds to
   * writable columns from discussion_board_posts schema. Does not include
   * fields auto-computed by system (id, created_at, updated_at) or ownership
   * (creator_member_id is inferred from authentication context).
   *
   * For security, NEVER accept or require creator_member_id from the client.
   * This field is set by the server based on logged-in session.
   *
   * On creation, is_edited is always false and deleted_at is null; only body
   * and parent thread association are required.
   *
   * See requirements for ownership/actor context rules.
   */
  export type ICreate = {
    /**
     * ID of parent thread (discussion_board_threads.id FK). This references
     * the target thread where the new post will be added. Required.
     */
    discussion_board_thread_id: string & tags.Format<"uuid">;

    /**
     * Post content in markdown/plaintext. Required. Must comply with
     * validation for maximum allowed length, non-empty, and formatting as
     * described in business rules.
     */
    body: string;
  };

  /**
   * Request body for updating an existing discussion board post. Contains
   * only fields eligible for client-side update: post body and edit status
   * (is_edited). Ownership and creation fields are immutable and not
   * updatable.
   *
   * See requirements for role-based access and post editing rights.
   * Admins/moderators may update any post; regular members may update only
   * their own posts.
   *
   * Updating deleted_at is not supported by this operation (see erase/delete
   * APIs for soft deletion).
   */
  export type IUpdate = {
    /**
     * New content/body for the post. Optionalâ€”omit if body should remain
     * unchanged. Must comply with post editing validation.
     */
    body?: string;

    /**
     * True to indicate post is edited. System will enforce consistency;
     * client cannot set to false for already-edited posts. Optional.
     */
    is_edited?: boolean;
  };
}

import { tags } from "typia";

/**
 * 게시판의 게시글(글/답글) 핵심 객체입니다.
 *
 * 각 게시글은 토론 스레드에 속하며, 본문, 작성자, 생성/수정일, 정렬/트리 구조(계층형 게시글)를 지원합니다. 정책상
 * soft-delete를 통한 관리와, 댓글/첨부/투표 등의 관계를 대표 객체로써 연결합니다.
 *
 * Prisma schema: discussion_board_post 테이블의 모든 컬럼을 포함하며, 각 컬럼의 도메인 의미와 데이터 관리
 * 목적이 설명되어 있습니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPost = {
  /**
   * 고유 게시글 식별자입니다. discussion_board_post의 기본 키이며, 모든 게시글과 참조 간의 무결성을 보장합니다.
   *
   * UUID 형식이며, 댓글, 투표, 첨부파일 등 게시글에 속하는 항목의 참조 및 추적에 사용됩니다.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 이 게시글이 속한 스레드의 UUID입니다. 必須로서 discussion_board_thread의 참조 무결성을 보장합니다.
   *
   * 게시판 내의 토론 주제(thread)와 연결되어 있으며, 여러 게시글이 하나의 스레드에 속할 수 있습니다.
   */
  thread_id: string & tags.Format<"uuid">;

  /**
   * 이 게시글을 작성한 사용자의 UUID입니다. 必須 필드로 discussion_board_user의 참조 무결성을 보장하며, 게시글의
   * 소유권과 작성자 정보 표시, 권한 부여, 감사 로그 등에 사용됩니다.
   *
   * 회원 게시물, 콘텐츠 권리, 프로필 노출 등에 직결됩니다.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * 답글(계층형 게시글)의 경우 상위(부모) 게시글의 UUID입니다. 기본적으로 null이며, 댓글 트리 구조(답글/재답글)를
   * 지원합니다.
   *
   * 게시글이 독립 글(스레드 최초글)이면 null, 아니면 원글(혹은 맨 위 답글)의 id를 저장합니다.
   */
  parent_post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * 게시글의 내용(본문)입니다. 리치텍스트, 링크, 인용, 이미지 포함 가능(비슷한 마크다운 혹은 HTML과 유사).
   *
   * 비즈니스 규칙상 필수이며, 입력값 개수, 내용 적정성, 스팸 필터링 등이 이 레이어에서 적용됩니다.
   */
  content: string;

  /**
   * 해당 게시글이 생성된 일시 정보로, ISO 8601 timestamp를 사용합니다.
   *
   * 정렬, 감사, 신규글 뱃지 등에 사용됩니다.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * 게시글이 마지막으로 수정된 시각. 게시글 편집 히스토리, 변경 내역 추적 등에 사용됩니다.
   *
   * 수정이 없으면 생성시각과 일치할 수 있습니다.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * 게시글이 삭제/숨김된(soft-deleted) 시각. 삭제 전에는 null.
   *
   * 감사 로그, 복구 기능, 정책적 관리 도구에서 사용됩니다.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPost {
  /**
   * Discussion_board_post 엔티티의 필터, 찾기, 목록 조회, 페이지네이션을 위한 표준 요청 타입입니다. 스레드,
   * 작성자, 부모 포스트, 본문, 생성일 등 다양한 조건으로 검색/필터가 가능합니다.
   */
  export type IRequest = {
    /** 페이지 번호(1-base). 목록 페이징 시 사용. */
    page?: (number & tags.Type<"int32">) | null;

    /** 한 페이지 내 최대 반환 레코드 수. null이면 시스템 기본. */
    limit?: (number & tags.Type<"int32">) | null;

    /** 특정 스레드의 포스트만 조회 시 지정. */
    thread_id?: (string & tags.Format<"uuid">) | null;

    /** 작성자 UUID로 포스트 필터. null이면 무시. */
    author_id?: (string & tags.Format<"uuid">) | null;

    /** 특정 부모 포스트(댓글, 답글 등) 하위만 필터할 경우 지정. null이면 무시. */
    parent_post_id?: (string & tags.Format<"uuid">) | null;

    /** 본문 텍스트 내 키워드/검색어. null이면 전체. */
    content?: string | null;

    /** 포스트 생성일 기준 검색(이상). ISO8601. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** 포스트 생성일 기준 검색(이하). ISO8601. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** 삭제포함여부(soft-delete 포스트). true면 삭제포함. */
    include_deleted?: boolean | null;
  };

  /**
   * 게시글 신규 등록 요청 스키마입니다.
   *
   * Discussion_board_post의 필수 컬럼 중 서버 자동 생성이나 불필요한 값을 제외하고, 실제 API 생성 시점에
   * 클라이언트가 입력해야 하는 값만 포함합니다.
   *
   * 스레드 참조, 작성자, 본문, 부모글(답글시)를 설정하며, 불변성(변경불가) 컬럼은 누락 또는 서버자동처리됩니다.
   */
  export type ICreate = {
    /**
     * 게시글을 생성할 대상 스레드의 UUID입니다. 必須.
     *
     * 정책상 스레드가 존재해야 하며, 없는 스레드일 경우 에러가 발생합니다.
     */
    thread_id: string & tags.Format<"uuid">;

    /**
     * 이 글을 작성하는 유저의 UUID. 必須.
     *
     * 게시글 저작권, 권한 부여, 프로필 연동 등에 반드시 기록됩니다.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * 답글일 경우 부모 게시글의 id입니다. 없으면 null.
     *
     * 트리형 게시판(계층 쓰레드) 지원을 위한 구조. 예시: 답글 작성 - 상위 게시글 id를 지정.
     */
    parent_post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * 게시글 본문(리치텍스트/마크다운 가능). 必須.
     *
     * 포함 내용: 텍스트, URL, 인용, 사진/이미지(첨부는 별도).
     */
    content: string;
  };

  /**
   * 기존 게시글의 일부(주로 본문/부모글 지정)를 수정할 때 사용하는 요청 스키마입니다. 불변 속성(id, author 등)은 포함되지
   * 않습니다.
   *
   * 필드 값 모두 optional로, 일부만 보낼 수도 있습니다. 실무에서는 content(내용) 수정이 90% 이상입니다.
   */
  export type IUpdate = {
    /**
     * 수정할 게시글의 본문입니다. 리치텍스트 포맷 사용.
     *
     * 필수 필드는 아니지만, 내용이 포함되어야 진짜로 본문 수정이 적용됩니다.
     */
    content?: string;

    /**
     * 답글로 전환/수정 시 지정. 없으면 null로 설정해 계층 구조를 변경.
     *
     * 자체 정책에 따라 부모글 제한이 있을 수 있습니다.
     */
    parent_post_id?: (string & tags.Format<"uuid">) | null;
  };
}

import { tags } from "typia";

/**
 * Represents a tag used for categorizing or filtering threads/posts in the
 * discussion board.
 *
 * Supports the core tag taxonomy as described in requirements, linking to
 * content and discoverability features. Includes all atomic, auditable fields
 * from Prisma's `discussion_board_tags`.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardTag = {
  /**
   * The primary key identifying the tag.
   *
   * Maps to `discussion_board_tags.id`. This value should be unique for every
   * tag entity, and is used for linking/disambiguation by APIs and UI.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The primary, unique name for this tag.
   *
   * Correlates with `discussion_board_tags.name` (unique index). Used for
   * searching, displaying, and associating content with tags. Example:
   * 'inflation', 'macroeconomics', 'legislation'.
   */
  name: string;

  /**
   * Optional description detailing the tag's scope/purpose.
   *
   * Matches `discussion_board_tags.description` in Prisma schema. Gives users
   * or admins more context about tag application or preferred usage.
   */
  description?: string | null;

  /** Timestamp when tag was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last modification to this tag. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete time, or null if still active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardTag {
  /**
   * Filter and search request object for retrieving a paginated list of tags
   * from the discussion_board_tags table.
   *
   * Includes search, range, and pagination fields for fine-grained control
   * over listings. Used by both user- and admin-facing tag browsers.
   */
  export type IRequest = {
    /**
     * Filter/search by tag name (supports search-as-you-type).
     *
     * Enables full-text or exact tag name matching; mapped to
     * `discussion_board_tags.name` in the schema.
     */
    name?: string | null;

    /**
     * Filter tags created after this timestamp.
     *
     * Used in audit reporting and analytics dashboards.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Filter tags created before this timestamp.
     *
     * Supports reporting on tag creation activity in a given period.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /** Page number for paginated search results. */
    page?: (number & tags.Type<"int32">) | null;

    /** Number of results per page. */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Request payload for creating a new tag in the system.
   *
   * Requires a unique tag name, option for providing description/context.
   * Matches creation constraints and audit policies in the system.
   */
  export type ICreate = {
    /**
     * The name of the tag to create. Must be unique.
     *
     * Fulfills business logic and schema index on
     * `discussion_board_tags.name`. Example: 'deflation', 'stimulus'.
     */
    name: string;

    /**
     * Optional description giving guidance on tag usage, business context,
     * or preferred semantics.
     *
     * Correlates to `discussion_board_tags.description`. May be leveraged
     * by tag browsers and admin panels.
     */
    description?: string | null;
  };

  /**
   * Update object for modifying tag metadata (name/description) in the
   * system.
   *
   * Allows admins or mods to edit tag taxonomy and maintain clarity on usage
   * or topic coverage. Supports audit trail requirements.
   */
  export type IUpdate = {
    /**
     * The name for this tag after update. Must remain unique.
     *
     * Corresponds with `discussion_board_tags.name` (unique index
     * constraint).
     */
    name?: string | null;

    /**
     * The description for this tag after update. Optional for
     * business-contextual annotation.
     */
    description?: string | null;
  };
}

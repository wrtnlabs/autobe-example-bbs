import { tags } from "typia";

/**
 * Represents a guest entity as per discussion_board_guest schema. Used for
 * displaying or processing guest analytics, audit, or system usage tracking.
 * Contains only atomic guest fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardGuest = {
  /**
   * Primary key for the guest record. Unique identifier for guests, as
   * specified in discussion_board_guest schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional guest session token string, used for tracking and analytics. May
   * be null if not assigned.
   */
  session_token?: string | null;

  /**
   * Timestamp of first observed activity (UTC, ISO 8601 format) for this
   * guest.
   */
  first_seen_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of latest recorded activity (UTC, ISO 8601 format) for this
   * guest.
   */
  last_seen_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardGuest {
  /**
   * Payload for searching and paginating guest records
   * (discussion_board_guest) by admin/system interfaces. Enables filtering by
   * session token, observation windows, and basic pagination. Used for
   * analytics, maintenance, and auditing.
   */
  export type IRequest = {
    /**
     * Filter by guest session token. Optional; can be null to disable
     * session token filtering.
     */
    session_token?: string | null;

    /**
     * Lower boundary for the guest's first seen timestamp (inclusive).
     * Optional; can be null.
     */
    first_seen_at_start?: (string & tags.Format<"date-time">) | null;

    /**
     * Upper boundary for the guest's first seen timestamp (inclusive).
     * Optional; can be null.
     */
    first_seen_at_end?: (string & tags.Format<"date-time">) | null;

    /**
     * Lower boundary for the guest's last seen timestamp (inclusive).
     * Optional; can be null.
     */
    last_seen_at_start?: (string & tags.Format<"date-time">) | null;

    /**
     * Upper boundary for the guest's last seen timestamp (inclusive).
     * Optional; can be null.
     */
    last_seen_at_end?: (string & tags.Format<"date-time">) | null;

    /**
     * Pagination: The page number to fetch (1-based). Optional; default is
     * 1.
     */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Pagination: The maximum number of guest records to return per page.
     * Optional; default is 100.
     */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Payload for creating a new guest record (discussion_board_guest). Can
   * supply a session token for analytic/audit purposes; other fields handled
   * by system.
   */
  export type ICreate = {
    /**
     * Optional guest session token to associate with the new guest. May be
     * omitted/null for standard guest creation.
     */
    session_token?: string | null;
  };

  /**
   * Payload for updating a guest record in the audit/analytics system
   * (discussion_board_guest). Used by system actors to record new activity or
   * track session key changes.
   */
  export type IUpdate = {
    /**
     * Optionally update the guest's session token for analytics or tracking
     * changes. Null disables the session token.
     */
    session_token?: string | null;

    /**
     * Optionally update the last seen timestamp for this guest. May be set
     * to null for certain analytic situations.
     */
    last_seen_at?: (string & tags.Format<"date-time">) | null;
  };
}

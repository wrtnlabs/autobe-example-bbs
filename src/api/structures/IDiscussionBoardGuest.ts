import { tags } from "typia";

/**
 * Guest session entity type, per ERD design and requirements (F01, F06,
 * security audit). All properties are atomic and directly reflect
 * session-tracing columns per strict normalization, audit, and analytics
 * requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardGuest = {
  /**
   * Unique session identifier (UUID). Required. Atomic - enables unambiguous
   * session reference for analytics, trace, or moderation, as described in
   * the ERD and business logic.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Session token (string). Immutable per session. Primary session
   * authentication for guests. Indexed for moderation/abuse tracing.
   */
  session_token: string;

  /**
   * IP address associated with the guest session. Used for abuse
   * investigation, rate limit tracking, and security analytics. May be
   * anonymized per compliance rules.
   */
  ip_address: string;

  /**
   * HTTP user agent string from guest's browser. Null if not sent. Supports
   * device analytics and UI auditing, as described in ERD.
   */
  user_agent?: string | null;

  /**
   * Session start timestamp. Required for audit, analytics, and abuse
   * tracking per specifications.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Expiration time for the session. Used to control session lifetime,
   * restrict abusive re-entry, or meet privacy compliance requirements.
   */
  expires_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardGuest {
  /**
   * Request type for searching, filtering, and paginating guest sessions.
   * Designed for admin, analytics, and system audit interfaces. Fully
   * reflects requirements around discoverability, privacy, and RBAC
   * compliance.
   */
  export type IRequest = {
    /**
     * Filter guests by session token. Optional search feature for admin
     * dashboards and abuse analysis. Enables ID-based guest session
     * lookups.
     *
     * Allows advanced system-level querying per requirements analysis.
     */
    session_token?: string | null;

    /**
     * Search/filter guests by IP address. May be anonymized or hashed for
     * privacy reasons. Useful for localization, abuse tracing, and
     * moderation.
     */
    ip_address?: string | null;

    /**
     * Start of creation date range for filtering guest sessions. Used in
     * time-windowed analytics and abuse/malware investigation flows.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * End of creation date range for filtering guest sessions. Often paired
     * with created_from to bound guest search by event lifetime.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /**
     * Pagination - which page to retrieve. Must be >= 1. Default 1.
     *
     * Standard for UI navigation and performance. Optional; null defaults
     * to first page.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /**
     * Pagination limit - max records per page. Default 20, maximum 100.
     * Used to prevent overload and enable smooth navigation in
     * moderation/analytics UIs.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | null;
  };

  /**
   * Type for creating a new guest session/account. Captures registration
   * details, compliance-traceable metadata, and window of validity as per
   * system/business needs (see F01, security/audit, analytics/enforcement
   * design requirements).
   */
  export type ICreate = {
    /**
     * Unique session token for the guest. Must not collide with any active
     * guest tokens. Required at creation, per DB and system security
     * rules.
     */
    session_token: string;

    /**
     * IP address under which the guest session is registered. Used for
     * tracing and abuse prevention, as required for compliance and
     * moderation.
     */
    ip_address: string;

    /**
     * Optional HTTP user agent string for the guest session. Used for
     * analytics and device-tracking (can be null if unavailable).
     *
     * May be truncated or anonymized for privacy compliance.
     */
    user_agent?: string | null;

    /**
     * Session expiration timestamp. Used to define session validity window
     * for security, abuse, or analytics. Required at creation.
     *
     * Session lifetime must satisfy enforcement policies as described in
     * system requirements.
     */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * Type used for updating guest session entity attributesâ€”audited for abuse
   * controls, session extension, or business logic fixes. All properties are
   * optional and validated by business logic.
   */
  export type IUpdate = {
    /**
     * Updated (or corrected) HTTP user agent for guest session. Nullable,
     * per privacy rules and actual availability. Optional on update.
     */
    user_agent?: string | null;

    /**
     * Update to expiration timestamp for session. Must reflect security
     * business rules (cannot extend maliciously; complies with
     * analytics/audit policy).
     */
    expires_at?: string & tags.Format<"date-time">;
  };
}

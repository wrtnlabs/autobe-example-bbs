import { tags } from "typia";

/**
 * Full moderation log record entity, capturing all atomic fields from the
 * Prisma 'moderation_logs' table. Compliant with all audit, transparency, and
 * business requirements for content/user moderation documentation. Strict
 * primary key, action, and audit fields included as per moderation workflow
 * sections of business rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IModerationLog = {
  /**
   * Unique identifier for the moderation log record. Matches the 'id' column
   * in the moderation_logs table—audit trail primary key.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID for the moderator/admin who performed the action, referencing
   * 'moderator_id' in moderation_logs. Ensures traceability of moderation
   * workforce, as per business rules.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * UUID for the user affected by the moderation action, if applicable
   * (nullable). Corresponds to 'target_user_id' in moderation_logs.
   */
  target_user_id?: string & tags.Format<"uuid">;

  /**
   * Post ID associated with the moderation act, if relevant (nullable).
   * Relates to 'post_id' in moderation_logs for content actions.
   */
  post_id?: string & tags.Format<"uuid">;

  /**
   * Comment ID associated with moderation (nullable), reflecting moderation
   * of specific discussion content.
   */
  comment_id?: string & tags.Format<"uuid">;

  /**
   * Type of moderation action performed (e.g., post_removal, user_warned,
   * suspension, ban, reinstatement, etc). Implements transparency and audit
   * policy. 'action_type' in moderation_logs.
   */
  action_type: string;

  /**
   * Moderator's rationale for this action. Maintains required documentation
   * for transparency and auditability of all moderation events.
   */
  reason: string;

  /**
   * Timestamp when the moderation action occurred (audit, time window
   * analytics, etc). Directly aligned to 'created_at' in moderation_logs.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IModerationLog {
  /**
   * Schema for searching/filtering, and paginating moderation log records,
   * supporting advanced filter controls and pagination in admin UIs. Each
   * field maps to atomic fields in the moderation_logs schema or to
   * filtering/sorting capabilities needed for analytics. Strictly follows
   * business/audit rule documentation for moderation transparency.
   */
  export type IRequest = {
    /**
     * Type of moderation action to filter (e.g., post_removal,
     * user_warned), relating to the atomic 'action_type' in the
     * moderation_logs schema.
     */
    action_type?: string;

    /**
     * Filter by the moderator (user) who performed the action. Aligned with
     * 'moderator_id' field in moderation_logs.
     */
    moderator_id?: string & tags.Format<"uuid">;

    /**
     * Filter for actions targeting a specific user. Corresponds to the
     * nullable 'target_user_id' column in moderation_logs.
     */
    target_user_id?: string & tags.Format<"uuid">;

    /**
     * ID of the post involved in the moderation action. Aligns to the
     * nullable 'post_id' in moderation_logs for post-related events.
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * ID of the comment involved in moderation. References the 'comment_id'
     * in moderation_logs table.
     */
    comment_id?: string & tags.Format<"uuid">;

    /**
     * Start datetime for filtering moderation logs by action occurrence.
     * Not a physical Prisma field but used for search UI.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * End datetime for filtering moderation action occurrence. Shows logs
     * up to this time boundary.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /**
     * Page number for paginated listing (default 1). Used in moderation
     * analytics/UI panels.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Number of log records per page. Controls paging size for scalable
     * moderation log access.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Sort order for results (e.g., 'created_at desc'). For moderator
     * dashboards and audit log UIs.
     */
    sort?: string;
  };

  /**
   * Schema for creating/moderation log audit events, tracing moderation
   * actions as required for role-based access, transparency, appeal, and
   * analytics per the 'moderation_logs' table and requirements
   * documentation.
   */
  export type ICreate = {
    /**
     * Moderator/admin performing the moderation, per 'moderator_id' in
     * moderation_logs. Actions must always be linked to a specific user for
     * accountability.
     */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * User being moderated (if user-targeted action), mapped to
     * 'target_user_id' field in moderation_logs. Nullable for
     * post/comment-only actions.
     */
    target_user_id?: string & tags.Format<"uuid">;

    /**
     * Post targeted by this moderation action, nullable per audits in
     * moderation_logs.
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Comment affected by this moderation action, nullable in
     * moderation_logs.
     */
    comment_id?: string & tags.Format<"uuid">;

    /**
     * Atomic string indicating type of action (e.g., removal, warning,
     * ban). All must be auditable per moderation workflow.
     */
    action_type: string;

    /**
     * Description of why the action was taken (rationale, evidence, etc),
     * supporting audits per moderation policies.
     */
    reason: string;
  };

  /**
   * Schema for updating a moderation log event's justification (reason). For
   * audit trail consistency, most other fields are not mutable per moderation
   * best practices.
   */
  export type IUpdate = {
    /**
     * Changes or clarifies the rationale for the moderation action. Only
     * this field is modifiable for audit compliance and integrity of event
     * history.
     */
    reason: string;
  };

  /**
   * Confirmation/result object after deleting a moderation log record. Used
   * for audit trail and transparency feedback per moderation, appeals, or
   * admin dashboard activity.
   */
  export type IDeleteResult = {
    /**
     * UUID of the deleted moderation log entry—audit trail of deletion
     * action itself.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Timestamp when the moderation log record was deleted. Ensures
     * auditability, compliance, and effectiveness of moderation event
     * removal workflows.
     */
    deleted_at?: string & tags.Format<"date-time">;
  };
}

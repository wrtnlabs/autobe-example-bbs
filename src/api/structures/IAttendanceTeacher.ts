import { tags } from "typia";

/**
 * 교사(Teacher) 엔터티 전체 atomic 필드 DTO. attendance_teacher 테이블의 모든 주요 컬럼을 포함하며,
 * 인증/조직/이력/식별자/연락 정보를 모두 명확하게 객체화합니다.
 *
 * 시스템의 역할 기반권한 체계, 감사, 대시보드에서 사용자별 drill-down 정보 활용시 사용. 관련된 모든 API 응답/데이터
 * 오브젝트의 근간.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAttendanceTeacher = {
  /** 고유 교사 식별자(UUID). attendance_teacher.id 의 PK. 시스템 전반의 FK, 감사로그의 anchor. */
  id: string & tags.Format<"uuid">;

  /** 소속 학교 식별자. attendance_school.id 를 참조하는 FK. 3NF에 따라 school 필드 상호참조. */
  school_id: string & tags.Format<"uuid">;

  /** 해당 교사의 인증계정 고유 ID (attendance_auth_account.id). 역할별 분리된 인증 모델/연동 필드. */
  auth_account_id: string & tags.Format<"uuid">;

  /** 교사 이름 (최대 길이/실명 확인 등은 UI/비지니스 규칙에 따름). */
  name: string;

  /** 교사 이메일(고유/연락/계정용). 유니크 제약 필수. */
  email: string & tags.Format<"email">;

  /** 교사 전화번호. SMS/비상연락 목적. */
  phone: string;

  /** 생성일시(ISO8601). 레코드 최초 등록 및 감사로그 추적용. */
  created_at: string & tags.Format<"date-time">;

  /** 수정일시(ISO8601). 정보 업데이트/감사 기록용. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAttendanceTeacher {
  /**
   * 교사 리스트 뷰/검색 결과 등에 사용하는 요약형 DTO입니다. Atomic 필드(이름, 이메일, 소속 학교, 등록일 등)만
   * 포함하며, 상세 보기에서는 IAttendanceTeacher를 사용합니다. 주로 PATCH /attendance/teachers,
   * 리스트 응답 등에서 data[] 엔트리로 사용됩니다.
   */
  export type ISummary = {
    /** 교사 고유 식별자(UUID). attendance_teacher.id의 PK. 모든 참조에서 사용되는 anchor 값. */
    id: string & tags.Format<"uuid">;

    /** 교사 이름. atomic, 원자적 실명 필드로 검색 대시보드, 알림 등에서 주로 사용. */
    name: string;

    /** 교사 이메일(로그인/알림/연락용). 유니크 제약 필드로 리스트/검색 최상위 기준. */
    email: string & tags.Format<"email">;

    /** 교사의 소속 학교ID(UUID, FK). attendance_school.id 참조. */
    school_id: string & tags.Format<"uuid">;

    /** 계정 생성(등록)일시. 관리 대시보드, 감사, 목록에서 필수 표기. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * 교사 목록/검색에 사용되는 쿼리 및 페이징, 정렬, 필터 옵션 객체입니다.
   *
   * Prisma attendance_teacher 및 관리대시보드 기획서/요구서에서 리스트 검색에 사용되는 주요 파라미터들을 모두
   * 포함합니다. 각 필드는 atomic하며, 고유 식별자, 텍스트 부분 검색, 페이징(Page/Limit), 정렬(sort_by,
   * sort_direction) 등 UI와 API의 표준 검색 기능 명세와 정확히 일치해야 합니다.
   *
   * 이 타입은 일반적으로 PATCH /attendance/teachers 등에서 requestBody로 사용됩니다.
   */
  export type IRequest = {
    /**
     * 검색하려는 교사의 소속 학교 식별자(UUID). 해당 학교에 소속된 교사만 조회할 때 사용합니다.
     *
     * Prisma attendance_teacher.school_id 칼럼 주석 기반: '학교(참조)' - 엄격한 3NF, 필수,
     * attendance_school 테이블의 FK.
     *
     * 일반적으로 관리자/교장/상위 감독자 등은 여러 학교간 조회를 허용할 수 있으며, 필수값 아님.
     */
    school_id?: string & tags.Format<"uuid">;

    /**
     * 교사 이름을 검색할 때 사용하는 텍스트 문자열. 부분일치(Like) 검색 지원.
     *
     * Prisma attendance_teacher.name 칼럼 주석 기반: '교사 이름' - 원자적, 규칙대로 저장.
     *
     * 목적: 대시보드/리스트에서 이름 기준으로 교사를 검색하는 용도.
     */
    name?: string;

    /**
     * 교사 이메일을 검색/필터링할 때 사용하는 필드입니다. 유니크 제약, 부분검색 가능.
     *
     * Prisma attendance_teacher.email 칼럼 주석 기반: '이메일' - 고유, 연락처.
     */
    email?: string & tags.Format<"email">;

    /**
     * 페이지 번호 (기본값: 1). 페이징 기능을 위한 파라미터.
     *
     * IPage.IRequest 참조. 1부터 시작, 음수 불가.
     */
    page?: number & tags.Type<"int32">;

    /**
     * 페이지 당 반환 레코드 수 (예: 50). 페이징 기능을 위한 파라미터.
     *
     * IPage.IRequest 참조. 일반적으로 100 이하 권장.
     */
    limit?: number & tags.Type<"int32">;

    /**
     * 정렬 기준이 되는 교사 테이블 필드. (예: created_at=생성일, updated_at=수정일)
     *
     * 테이블 실 컬럼 기준으로만 지정 가능. 미지정시 기본값은 created_at.
     */
    sort_by?: "created_at" | "updated_at";

    /**
     * 정렬 방향(asc=오름차순, desc=내림차순). 기본값은 desc.
     *
     * 정렬 필드(sort_by)와 합쳐서 사용.
     */
    sort_direction?: "asc" | "desc";
  };

  /**
   * 신규 교사(Teacher) 엔터티 생성요청 DTO. attendance_teacher 테이블의 PK/id는 응답 전용이며, 생성
   * 시에는 school_id, auth_account_id, name, email, phone 을 반드시 제공해야 함.
   *
   * 중복 이메일, 잘못된 참조(FK)에 대한 서버단 validation이 필요합니다. 모든 필드는 atomic, 조합 없이 독립적으로
   * 의미를 가져야 하며, 생성 후 반환되는 결과는 IAttendanceTeacher 엔티티 전체와 일치합니다.
   */
  export type ICreate = {
    /** 등록할 교사의 소속 학교 식별자 (attendance_school.id FK). 필수. */
    school_id: string & tags.Format<"uuid">;

    /** 연동할 인증 계정의 고유ID (attendance_auth_account.id). 필수. */
    auth_account_id: string & tags.Format<"uuid">;

    /** 교사 이름. 필수. */
    name: string;

    /** 교사 이메일(고유, 필수). */
    email: string & tags.Format<"email">;

    /** 교사 전화번호(필수). */
    phone: string;
  };

  /**
   * 교사 엔터티 전체 업데이트(대체/PUT) 요청 DTO. attendance_teacher의 주요 필드를 모두 전달해야 하며
   * 보안/조직/역할 정책상 무결성 규칙 및 유니크/제약조건이 서버단 validation필수입니다. 모든 필드는 atomic하게 단일
   * 값만 취급되어야 하며, 부분 수정 Patch가 아니라, 전체 교사 정보를 덮어쓰는 사용(Full Replacement)입니다.
   */
  export type IUpdate = {
    /** 업데이트 대상 교사의 소속 학교ID (attendance_school.id). */
    school_id: string & tags.Format<"uuid">;

    /** 수정/연결 대상 인증계정 ID (attendance_auth_account.id). */
    auth_account_id: string & tags.Format<"uuid">;

    /** 수정할 교사 이름. */
    name: string;

    /** 수정할 이메일(고유). */
    email: string & tags.Format<"email">;

    /** 수정할 전화번호. */
    phone: string;
  };
}

import { tags } from "typia";

/**
 * A complete notification delivery record as stored in
 * discussion_board_notification.
 *
 * Contains identifiers, delivery details, message, read status, and audit
 * timestamps. Essential for notification UIs and user panels.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardNotification = {
  /**
   * Unique identifier for the notification record, as defined in
   * discussion_board_notification.id.
   *
   * This is a UUID conforming to standard identifier format for tracking
   * notification delivery.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the user who received this notification.
   *
   * Implements the link between the notification and its recipient, as in
   * discussion_board_notification.discussion_board_user_id. Must correspond
   * to an existing user ID.
   */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /**
   * Classification for the notification event: e.g., 'reply', 'mention',
   * 'moderation', etc.
   *
   * This field describes the business event or trigger for the notification
   * and is essential for routing and presentation.
   */
  type: string;

  /**
   * Short summary for the notification, used as the pop-up header or in the
   * notification list.
   *
   * Extracted from discussion_board_notification.title, always a concise
   * human-readable message.
   */
  title: string;

  /** Full message body of the notification, providing user-readable details. */
  body: string;

  /**
   * Read/unread status of the notification (as per
   * discussion_board_notification.is_read).
   *
   * Indicates whether the recipient has already viewed this notification.
   */
  is_read: boolean;

  /**
   * Timestamp (ISO8601) when the notification was created and sent.
   *
   * Directly from discussion_board_notification.created_at, used for
   * notification ordering and audit trail.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp for the notification, or null if still active.
   *
   * If set, indicates the notification is soft deleted and should not be
   * shown to the user except in audit contexts.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardNotification {
  /**
   * Filter/search/pagination request structure for user notifications as
   * found in discussion_board_notification Prisma entity. Enables advanced
   * delivery filtering, audit workflows, and UI targeting.
   */
  export type IRequest = {
    /**
     * The target user for notifications (discussion_board_user.id) to
     * filter or search notification events.
     */
    discussion_board_user_id?: string & tags.Format<"uuid">;

    /**
     * Class/type of notification event (e.g., reply, mention, moderation,
     * etc.). Used for UI filtering and analytics.
     */
    type?: string;

    /**
     * Text search for notification titles, allowing filtering by subject
     * line (partial search enabled).
     */
    title?: string;

    /**
     * Text search for notification body/content (useful for notification
     * audit workflows or keyword filtering).
     */
    body?: string;

    /**
     * Filter for notifications by read/unread status (true for those marked
     * as read, false for unread). Useful for inbox/focus workflows.
     */
    is_read?: boolean;

    /** Begin date/time filter for notification creation (ISO 8601). */
    created_from?: string & tags.Format<"date-time">;

    /** End date/time filter. */
    created_to?: string & tags.Format<"date-time">;

    /** Page number for pagination (default: 1). */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Number of results per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * The payload required to create a new notification record for a user.
   *
   * This closely matches the discussion_board_notification fields as
   * described in the DB schema—uniquely identifying the recipient,
   * notification class, subject, and content body, along with an initial read
   * state.
   */
  export type ICreate = {
    /**
     * ID of the user who will receive this notification. Must match a
     * registered user in discussion_board_user.
     *
     * Required for proper delivery and audit.
     */
    discussion_board_user_id: string & tags.Format<"uuid">;

    /**
     * Business classification for this notification (e.g., 'reply',
     * 'mention', 'moderation', etc).
     *
     * Used for routing and display.
     */
    type: string;

    /** Title/subject of the notification for in-app and UI alerts. */
    title: string;

    /** Main message content for the notification body. */
    body: string;

    /**
     * Initial read status for the notification. Typically false on creation
     * unless backfilled.
     */
    is_read: boolean;
  };

  /**
   * Payload for updating mutable fields of a notification—supports changing
   * the title, body, or read/unread state for a user.
   *
   * No identifier is needed here, as the update is scoped by endpoint
   * parameters.
   */
  export type IUpdate = {
    /** Optional new title for the notification. */
    title?: string;

    /** Optional new content for the notification message body. */
    body?: string;

    /**
     * Boolean indicating if the notification has been read. Setting this
     * field to true marks as read.
     */
    is_read?: boolean;
  };
}

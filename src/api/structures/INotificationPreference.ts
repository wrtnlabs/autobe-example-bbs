import { tags } from "typia";

/**
 * Atomic notification type preference record from notification_preferences
 * table. Specifies settings for each notification kind as assigned for a given
 * user. Each is unique per (user, type) combo. Used for granular notification
 * control.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationPreference = {
  /**
   * Unique identifier (PK) of the notification preference record. Based on
   * notification_preferences.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's ID (owner). Mandatory, pointing to users.id in
   * notification_preferences table.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Notification category/type (e.g., 'post_reply', 'comment_mention'). Based
   * on notification_preferences.type column. Must match backend/business
   * rules.
   */
  type: string;

  /**
   * Flag indicating if user wants to receive this notification type (see
   * notification_preferences.enabled column).
   */
  enabled: boolean;
};
export namespace INotificationPreference {
  /**
   * Request to list, filter, or search notification preference settings. Maps
   * to notification_preferences table (user/type/enabled), as per Prisma
   * comments. Supports self-management UI and admin audit.
   */
  export type IRequest = {
    /**
     * Owner of the preference (users.id). Allows search/filter preferences
     * for a particular userâ€”for admin or user self-management.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Notification type/category to filter preferences by (matches
     * notifications.type, e.g., 'post_reply').
     */
    type?: string;

    /**
     * True for preferences that allow this notification, false for
     * disabled. Maps to notification_preferences.enabled.
     */
    enabled?: boolean;

    /** Page number for pagination. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Number of results per page (default 100). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Payload to create a user notification preference, per
   * notification_preferences table: what notification, for whom, and
   * enable/disable flag. Used for onboarding and self-service control UI.
   */
  export type ICreate = {
    /**
     * User's ID (users.id) who owns this preference; foreign key in
     * notification_preferences.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Notification event type for this preference (e.g., 'upvote',
     * 'system_alert').
     */
    type: string;

    /**
     * Enables/disables this notification type for the user; atomic value
     * (true/false only).
     */
    enabled: boolean;
  };

  /**
   * Fields of a notification preference that may be changed after creation,
   * e.g., enable or disable notification class for user, or type correction.
   * Only atomic fields present in notification_preferences DB.
   */
  export type IUpdate = {
    /**
     * If updating the type of notification (rare, may imply migration or
     * correction). See notification_preferences.type.
     */
    type?: string;

    /**
     * Update to enabled/disabled flag. See
     * notification_preferences.enabled.
     */
    enabled?: boolean;
  };
}

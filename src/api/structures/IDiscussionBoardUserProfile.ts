import { tags } from "typia";

/**
 * Normalized user profile record per discussion_board_user_profile Prisma
 * model. Holds profile enrichment fields, with strict separation from core user
 * auth info for GDPR and modular design.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUserProfile = {
  /**
   * Unique identifier for profile record. PK of
   * discussion_board_user_profile. Joins user for display and enrichment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * FK to core user entity. Ensures strict 1:1 relationship between user and
   * profile per unique index.
   */
  user_id: string & tags.Format<"uuid">;

  /** Custom display alias for user. Optional, but supports search/enrichment. */
  display_name?: string | null;

  /** User biography text, if any. Used for display and analytics. Optional. */
  bio?: string | null;

  /**
   * URI/link to user's avatar/profile image. Optional, validated as URI
   * string; can be internal/external link. Supports upload review and GDPR
   * removal.
   */
  profile_picture_uri?: string | null;

  /** Record creation datetime. Used for audit, onboarding, and history. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to this profile. Enables change tracking and
   * analytics.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardUserProfile {
  /**
   * Request container for profile search/filter/pagination, used in PATCH
   * /discussionBoard/userProfiles. Directly references
   * discussion_board_user_profile schema with 3NF atomic fields. Standard
   * IPage.IRequest style pagination.
   */
  export type IRequest = {
    /**
     * Pagination parameter: page number as in IPage.IRequest contract. For
     * listing user profiles in pages.
     */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Max number of records per page as in IPage.IRequest. Used for bulk
     * listing or analytics.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Display name for filter/search operations. Supports text search
     * (gin_trgm index) for leaderboards, showcase, or moderation.
     */
    display_name?: string | null;

    /**
     * Filter/query for users with matching or non-empty biographies. Used
     * for directory enrichment, audits, or custom discovery workflows.
     */
    bio?: string | null;

    /**
     * Query by avatar/profile image URI content. Used for upload review,
     * analytics, or profile completeness.
     */
    profile_picture_uri?: string | null;
  };

  /**
   * Payload for creating a new user profile record, per
   * discussion_board_user_profile. Only user_id required; other fields
   * optional. Creation imposes uniqueness of user_id for 1:1 constraint.
   */
  export type ICreate = {
    /**
     * FK to core user entity. Enforced as unique per user. Ties profile to
     * account.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Display alias for user (optional). Shown in UIs, search, and
     * analytics if provided.
     */
    display_name?: string | null;

    /** User bio content (optional). For self-presentation/discovery. */
    bio?: string | null;

    /**
     * Profile avatar (optional). URI string, file or web link. Can be
     * blank/null.
     */
    profile_picture_uri?: string | null;
  };

  /**
   * Payload for updating a user profile's display_name, bio, or avatar link.
   * Follows GDPR principlesâ€”blank/null disables/removes a field.
   */
  export type IUpdate = {
    /** New display name to set (nullable for removal). */
    display_name?: string | null;

    /** Updated biography text (nullable for removal). */
    bio?: string | null;

    /** New avatar image URI (nullable to remove image/ref). */
    profile_picture_uri?: string | null;
  };
}

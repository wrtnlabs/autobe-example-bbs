import { tags } from "typia";

/**
 * Schema for an attachment entity in the discussion board. All fields
 * correspond to atomic, non-derived properties as described in the Prisma
 * schema. Attachment can be linked to either a post or comment but not both.
 * Also includes audit fields for compliance and moderation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAttachment = {
  /**
   * Unique identifier (UUID) for the attachment. Primary key in the
   * attachments table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * If present, the attachment is linked to the specified post. Optional
   * (nullable) if attached to a comment instead. Corresponds to
   * `discussion_board_post_id` from the Prisma schema.
   */
  discussion_board_post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * If present, the attachment is linked to the specified comment. Optional
   * (nullable); mutually exclusive with post_id. Refers to
   * `discussion_board_comment_id` from the Prisma schema.
   */
  discussion_board_comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * The UUID of the member who uploaded the file. Foreign key to the members
   * table. Enforces ownership, displaying attribution and supporting audit.
   */
  discussion_board_member_id: string & tags.Format<"uuid">;

  /**
   * Original filename of the uploaded attachment. String as provided by the
   * uploading user.
   */
  file_name: string;

  /**
   * Location URI (relative or full) for retrieving/downloading the file
   * (e.g., S3/CDN path). Defined in the `file_uri` column in the Prisma
   * schema.
   */
  file_uri: string;

  /**
   * MIME type of the file, e.g., 'application/pdf', 'image/png'. Stored
   * atomic type for compliance and content serving.
   */
  content_type: string;

  /**
   * Unique hash fingerprint of the attachment's binary content (e.g.,
   * SHA-256). Ensures integrity, used for deduplication and audit.
   */
  content_hash: string;

  /**
   * Upload timestamp of the attachment, in ISO-8601/RFC3339 format. Used for
   * chronological queries, history, and moderation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * If set, the attachment is considered soft-deleted and not shown in
   * standard queries. Adds reversibility for moderation, compliance, and undo
   * workflows.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardAttachment {
  /**
   * Request schema for searching, filtering, and paginating discussion board
   * attachments (files). Provides filtering by metadata fields (filename,
   * uploader, date range, parent post/comment), with full support for
   * advanced search in admin/moderator tools and user-facing attachment
   * explorers. Corresponds to business rules defined in the requirements
   * documentation and Prisma schema.
   */
  export type IRequest = {
    /**
     * Filter/search criterion: Name of the file attachment, used for
     * full-text querying and matching against attachment records. Maps to
     * `file_name` from attachments schema.
     */
    file_name?: string;

    /**
     * Filter by MIME type of the attachment (e.g., 'application/pdf',
     * 'image/png'). Maps to `content_type` in the attachments schema.
     */
    content_type?: string;

    /**
     * Filter by the UUID of the related post to which the attachment
     * belongs. Corresponds to `discussion_board_post_id` in the attachments
     * table.
     */
    discussion_board_post_id?: string & tags.Format<"uuid">;

    /**
     * Filter by the UUID of the related comment (if attached to a comment).
     * Corresponds to `discussion_board_comment_id` in the attachments
     * table.
     */
    discussion_board_comment_id?: string & tags.Format<"uuid">;

    /**
     * Filter by the UUID of the member who uploaded the attachment. Links
     * to `discussion_board_members.id`.
     */
    discussion_board_member_id?: string & tags.Format<"uuid">;

    /**
     * Start of date-time range for created_at. Used for filtering
     * attachments by when they were uploaded (inclusive).
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * End of date-time range for created_at. Used for filtering attachments
     * by before/after time window.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /**
     * If true, include only soft-deleted attachments; if false, only
     * non-deleted. Supports compliance, audit, or moderation search.
     */
    deleted?: boolean;

    /**
     * Pagination: Page number for paginated queries. Optional; 1-based.
     * Default is 1.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Pagination: Maximum records per page. Default subject to
     * configuration.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Request schema for uploading a new file attachment for a post or comment
   * on the discussion board. At least one of `discussion_board_post_id` or
   * `discussion_board_comment_id` must be present and non-null. Additional
   * required fields follow the Prisma definition of atomic storage and file
   * traceability.
   */
  export type ICreate = {
    /**
     * UUID of the post being attached to. Optional, mutually exclusive with
     * comment_id. Ensures attachment is only ever linked to a single object
     * (post or comment) per 3NF normalization.
     */
    discussion_board_post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * UUID of the comment being attached to. Optional, mutually exclusive
     * with post_id. Used for supporting attachment uploads within comment
     * threads.
     */
    discussion_board_comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Original file name for the uploaded attachment (max length enforced
     * at 80,000 per Prisma type). Required.
     */
    file_name: string;

    /**
     * Location or path to the uploaded file. Must be a valid URI where the
     * uploaded file can be accessed (e.g., S3, CDN). Required for every
     * attachment record.
     */
    file_uri: string;

    /**
     * MIME type of the attachment for file-handling logic (e.g.,
     * 'application/pdf', 'image/png'). Required for allowing proper content
     * display and file validation.
     */
    content_type: string;

    /**
     * Hash/fingerprint for file deduplication (e.g., SHA-256). Required at
     * upload to prevent redundant files and ensure auditability.
     */
    content_hash: string;
  };

  /**
   * Defines the update payload schema for modifying metadata of an existing
   * attachment record. Only file metadata is modifiable; file content or
   * content hash remains immutable by design for integrity. All fields are
   * passed to update only those properties allowed by business rules and
   * platform policy.
   */
  export type IUpdate = {
    /**
     * Updated (or corrected) file name for the attachment. For metadata
     * maintenance, file discovery, or clarity in UI.
     */
    file_name?: string;

    /**
     * Optionally provide a new URI to the file resource. Useful for file
     * moves, updates, or storage repairs.
     */
    file_uri?: string;

    /** Optionally provide a new or corrected MIME type. */
    content_type?: string;
  };
}

import { tags } from "typia";

/**
 * Metadata record for an uploaded attachment (discussion_board_attachment).
 *
 * Includes file/info required for display or download, plus audit and deletion
 * status.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAttachment = {
  /** Unique UUID for this attachment metadata record. */
  id: string & tags.Format<"uuid">;

  /** UUID of the user who uploaded the file. */
  uploaded_by_user_id: string & tags.Format<"uuid">;

  /**
   * Full URI or URL to the file in storage (e.g., CDN, S3 link).
   *
   * Must be unique per schema.
   */
  file_url: string;

  /** Human-readable uploaded file name. */
  file_name: string;

  /** MIME type for the file—describes content for client rendering. */
  mime_type: string;

  /** Upload timestamp for the attachment. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp if attachment was soft-deleted, else null (attachment is
   * active).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardAttachment {
  /**
   * Request structure for paginated, filtered, or searched attachment
   * listings from discussion_board_attachment.
   *
   * Allows searching by uploader, file name/type, and paging info.
   */
  export type IRequest = {
    /** Optional filter for searching attachments by uploading user's UUID. */
    uploaded_by_user_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter for file name search in attachments.
     *
     * Supports substring or exact name matching.
     */
    file_name?: string;

    /**
     * Optional MIME type filter to list/filter attachments of a given file
     * content type.
     */
    mime_type?: string;

    /**
     * Filter: limit results to attachments uploaded at or after this
     * timestamp.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * Filter: limit results to attachments uploaded at or before this
     * timestamp.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /** Page number for paginated results. */
    page?: number & tags.Type<"int32">;

    /** Number of records to be returned per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * 첨부파일 새 메타데이터 레코드 생성에 사용되는 타입입니다.
   *
   * Prisma discussion_board_attachment 테이블의 atomic 필드만 포함하며, 업로더 구분, 파일 접근
   * URI, 파일명 및 포멧을 구체적으로 기술해야 합니다.
   *
   * 이 타입은 클라이언트에서 파일 업로드 후 서버에 파일 정보를 등록할 때 사용합니다.
   *
   * 모든 필드는 Prisma 스키마에 기재된 제약조건을 따라야 하며, file_url은 유일해야 합니다. 업로더 UUID, 파일
   * path, 파일명, MIME타입 작성이 필수입니다.
   */
  export type ICreate = {
    /**
     * 유저가 업로드한 첨부파일의 업로더 UUID입니다.
     *
     * Prisma schema 컬럼 'uploaded_by_user_id'를 기반으로 하며, 첨부파일 메타데이터가 반드시 어떤
     * 사용자에게 속해야 함을 의미합니다. 예시: 'dde0c1b6-adde-40f6-b624-f61d438d1951'
     *
     * 이 필드는 중복 첨부파일 검증 및 소유권 로직에 활용됩니다.
     */
    uploaded_by_user_id: string & tags.Format<"uuid">;

    /**
     * 업로드된 파일의 절대 URI 또는 접근 가능한 URL입니다.
     *
     * Prisma schema의 'file_url'에 해당하며, 시스템에서 첨부파일을 식별하고 접근하기 위한 기본 식별자 역할을
     * 합니다.
     *
     * 예: 'https://cdn.example.com/uploads/example.png'
     */
    file_url: string & tags.MaxLength<80000>;

    /**
     * 업로드할 때 사용자가 지정한 원본 파일명입니다.
     *
     * Prisma schema 컬럼 'file_name'으로, 사용자에게 표시되는 파일명이나 다운로드시의 기본명으로 사용합니다.
     *
     * 예: '2025_discussion_stats.xlsx'
     */
    file_name: string;

    /**
     * 파일의 Content-Type(MIME)입니다.
     *
     * Prisma 컬럼의 'mime_type'에서 따옴. 서버/클라이언트 모두에서 렌더링 및 미리보기 지원을 위해 필요합니다.
     *
     * 예: 'image/png', 'application/pdf'
     */
    mime_type: string;
  };

  /**
   * 첨부파일 메타데이터의 일부(파일명, 포맷 등)를 수정할 때 사용하는 타입입니다.
   *
   * Prisma 스키마의 discussion_board_attachment에 준하며, 파일 URL과 업로더는 절대 변경되지 않습니다.
   * 파일명 및 MIME타입만 변경 가능합니다.
   */
  export type IUpdate = {
    /**
     * 새 파일명으로 수정 시 지정할 수 있는 값입니다.
     *
     * 예: 이전 값이 '예산표.pdf'에서 '2025_예산_공약.pdf'로 변경
     */
    file_name?: string;

    /**
     * 파일의 Content-Type(MIME)으로, 수정시 지정할 수 있는 값입니다.
     *
     * 예: 'image/jpeg', 'application/pdf'
     */
    mime_type?: string;
  };
}

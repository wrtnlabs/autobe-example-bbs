import { tags } from "typia";

/**
 * Forum subcategory snapshot entity: immutable point-in-time record of all
 * subcategory settings for rollback and audit compliance.
 *
 * Mapped directly to discussion_board_forum_subcategory_snapshot in Prisma
 * schema and reflecting requirements for regulatory and moderation audit
 * reporting.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardForumSubcategorySnapshot = {
  /**
   * Unique identifier for the forum subcategory snapshot record.
   *
   * Primary key as defined in Prisma's
   * discussion_board_forum_subcategory_snapshot.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID linking to the parent forum subcategory of this snapshot.
   *
   * Required for clear lineage and rollback, as found in schema's
   * forum_subcategory_id.
   */
  forum_subcategory_id: string & tags.Format<"uuid">;

  /**
   * UUID of the user who initiated or approved this snapshot record.
   *
   * Provides full audit trace of moderator/admin impact as described by the
   * schema.
   */
  created_by_id: string & tags.Format<"uuid">;

  /**
   * Snapshot label for subcategory at change time.
   *
   * Same as the 'name' in current forum subcategory, but as frozen at
   * snapshot. Used for UI display, audit, rollback, and investigation.
   */
  name: string;

  /**
   * Snapshot of the subcategory description, if present in this audit point.
   * Nullable if no description at snapshot event.
   */
  description?: string | null;

  /**
   * The exact timestamp (ISO 8601) for when this snapshot record was created,
   * i.e., when the corresponding subcategory was updated or rolled back.
   *
   * Atomic, required for audit and rollback.
   */
  snapshot_created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardForumSubcategorySnapshot {
  /**
   * Search filter and pagination request for forum subcategory snapshot
   * history.
   *
   * Used by admin/moderator audit dashboards to browse changes, rollback
   * points, and compliance timelines, referencing
   * discussion_board_forum_subcategory_snapshot table and matching business
   * requirements for audit and rollback support.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) for the subcategory whose snapshots are
     * being retrieved or filtered.
     *
     * Mapped to 'forum_subcategory_id' in the
     * discussion_board_forum_subcategory_snapshot table in Prisma schema.
     * Use to fetch or filter change history for a specific board
     * subcategory.
     */
    forum_subcategory_id: string & tags.Format<"uuid">;

    /**
     * UUID of the user who created the subcategory snapshot. Used for
     * filtering or auditing moderator actions. Nullable or omitted if not
     * filtering by user.
     */
    created_by_id?: string & tags.Format<"uuid">;

    /**
     * Beginning of snapshot-created time window (inclusive).
     *
     * For audit or compliance search to retrieve subcategory snapshot
     * records modified after this instant.
     *
     * Format: ISO 8601 date-time string.
     */
    snapshot_created_at_from?: string & tags.Format<"date-time">;

    /**
     * End of snapshot-created time window (inclusive).
     *
     * For audit or compliance search to retrieve subcategory snapshot
     * records modified before this instant.
     *
     * Format: ISO 8601 date-time string.
     */
    snapshot_created_at_to?: string & tags.Format<"date-time">;

    /**
     * Pagination - page number requested (1-based). If null, default page 1
     * is returned.
     */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /**
     * Pagination: number of records per page returned. If null/undefined,
     * server default (such as 100) is used.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;
  };

  /**
   * Input type for creating a new forum subcategory snapshot entry. Used in
   * moderation workflows for audit, rollback, and compliance records. Mapped
   * directly to Prisma schema table
   * discussion_board_forum_subcategory_snapshot.
   */
  export type ICreate = {
    /**
     * UUID for original parent subcategory of this snapshot record. Foreign
     * key as in Prisma's forum_subcategory_id.
     */
    forum_subcategory_id: string & tags.Format<"uuid">;

    /** Moderator/admin/user UUID creating/submitting this snapshot. */
    created_by_id: string & tags.Format<"uuid">;

    /**
     * Name of the subcategory at this point in history. Audit field for
     * rollback.
     */
    name: string;

    /** Description at snapshot creation (nullable if not set). */
    description?: string | null;

    /**
     * Timestamp the snapshot is captured at (ISO 8601). Safe default: time
     * of mutation, but can be manually overriden for correction.
     */
    snapshot_created_at: string & tags.Format<"date-time">;
  };

  /**
   * Update type for forum subcategory snapshot. Should only permit changes
   * for legal/audit correction or compliance, not for normal mutation.
   */
  export type IUpdate = {
    /**
     * Optionaly update the subcategory associated with this snapshot
     * (UUID).
     *
     * Required in rare audit/compliance corrections only; should otherwise
     * remain immutable.
     */
    forum_subcategory_id?: string & tags.Format<"uuid">;

    /**
     * Correction for moderator/admin user reference. Used only for rare
     * corrections, otherwise should not be mutated.
     */
    created_by_id?: string & tags.Format<"uuid">;

    /**
     * Fix/correct the name in a snapshot for audit/rollback only.
     * Ordinarily immutable.
     */
    name?: string;

    /**
     * Correction value for description content or for legal compliance
     * edits.
     */
    description?: string | null;

    /** Rare correction for timestamp (ISO 8601). */
    snapshot_created_at?: string & tags.Format<"date-time">;
  };
}

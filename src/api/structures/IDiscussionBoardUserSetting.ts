import { tags } from "typia";

/**
 * The full persistent record for user notification and preference settings in
 * discussion_board_user_setting.
 *
 * Includes all notification flags, theme info, and timestamps. Essential for
 * profile/personalization UIs and user audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUserSetting = {
  /** Unique UUID identifier for the user setting record. */
  id: string & tags.Format<"uuid">;

  /** Foreign key reference to the user whose settings are stored here. */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /** Flag: true if email notifications are enabled for this user. */
  notification_email_enabled: boolean;

  /** Flag: true if in-app notifications are enabled for this user. */
  notification_in_app_enabled: boolean;

  /** Optional string indicating user-chosen UI theme (e.g., 'dark', 'light'). */
  theme_preference?: string | null;

  /**
   * Optional user interface language/locale selection, e.g., 'en', 'ko', as a
   * string.
   */
  language_preference?: string | null;

  /** Timestamp when the record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last modification to this settings record. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardUserSetting {
  /**
   * Request/query structure for paginated user settings list/search endpoint.
   *
   * Allows filtering by user id, notification preference flags, UI theme,
   * language, and standard pagination fields.
   */
  export type IRequest = {
    /**
     * Reference to the user for whom settings are requested.
     *
     * Atomic foreign key to discussion_board_user, for filtering by user in
     * searches.
     */
    discussion_board_user_id?: string & tags.Format<"uuid">;

    /**
     * Filter for email notification opt-in/out state.
     *
     * If specified, results will be limited to users with this flag set to
     * the given value.
     */
    notification_email_enabled?: boolean;

    /**
     * Filter for in-app notification opt-in/out state.
     *
     * Used to narrow search results by user engagement settings.
     */
    notification_in_app_enabled?: boolean;

    /**
     * Optional filter for user theme selection (e.g., 'light', 'dark').
     *
     * Applies UI preference filter in searches.
     */
    theme_preference?: string;

    /**
     * Optional filter for interface language preference (e.g., 'en', 'ko').
     *
     * Restricts search results to a given language.
     */
    language_preference?: string;

    /**
     * Request page number for paginated results.
     *
     * Zero-based or one-based index per API spec.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Requested page size (maximum records per page).
     *
     * Used for pagination, often defaults to 100.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Payload for creating a new user settings record. Must include user FK and
   * notification flags; theme/language are optional.
   */
  export type ICreate = {
    /** UUID of the user for whom settings are being created. */
    discussion_board_user_id: string & tags.Format<"uuid">;

    /** Opt-in/out for email notifications upon creation. */
    notification_email_enabled: boolean;

    /** Opt-in/out for in-app notifications upon creation. */
    notification_in_app_enabled: boolean;

    /**
     * Initial UI theme selection for the user, such as 'light', 'dark', or
     * null.
     */
    theme_preference?: string | null;

    /** Initial UI language/locale preference, such as 'en', 'ko', or null. */
    language_preference?: string | null;
  };

  /**
   * Update payload for user settings recordâ€”allows modifications of
   * notification/email flags, theme, and language preference.
   */
  export type IUpdate = {
    /** Update flag for notification via email. */
    notification_email_enabled?: boolean;

    /** Update flag for use of in-app notifications. */
    notification_in_app_enabled?: boolean;

    /** Updated UI theme ('dark', 'light', or null). */
    theme_preference?: string | null;

    /** Updated language/locale for UI, or null for default. */
    language_preference?: string | null;
  };
}

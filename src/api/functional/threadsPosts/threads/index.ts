import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IThread } from "../../../structures/IThread";
import { IPageIThread } from "../../../structures/IPageIThread";

/**
 * Create a new thread in ThreadsPosts.threads.
 *
 * This API endpoint allows registered users to create a new discussion thread
 * under a specified category, with optional tags. The request body includes the
 * thread title, category ID, and initial tag assignments. The creator is set to
 * the authenticated user.
 *
 * Upon creation, the system must validate category existence, uniqueness of the
 * title within the category, and appropriate permissions. The creation
 * timestamp and other metadata are set by the system. Newly created threads are
 * not locked or pinned by default. Successful operation returns the created
 * thread data. Audit logging of thread creation, including user ID and IP
 * address, supports transparency. Related APIs include update, list, and delete
 * endpoints for threads.
 *
 * @param props.body Data required for creating a new thread.
 * @path /threadsPosts/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Data required for creating a new thread. */
    body: IThread.ICreate;
  };
  export type Body = IThread.ICreate;
  export type Response = IThread;

  export const METADATA = {
    method: "POST",
    path: "/threadsPosts/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/threads";
  export const random = (g?: Partial<typia.IRandomGenerator>): IThread =>
    typia.random<IThread>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search threads with pagination from the ThreadsPosts.threads table.
 *
 * This endpoint retrieves a paginated and optionally filtered list of
 * discussion threads. It supports advanced query features such as keyword
 * search, category and tag filters, sorting (by date, votes, etc.), and
 * pagination controls.
 *
 * Threads are the main grouping unit for posts and discussions, each associated
 * with a category and set of tags. The response should include basic thread
 * information (ID, title, category, pinned/locked status, created/updated time)
 * as well as metadata for client pagination.
 *
 * Security: Even unauthenticated users may view thread lists, but hidden or
 * deleted threads should be omitted or filtered according to user role and soft
 * deletion status. Moderation status may affect visibility. Validation logic
 * includes enforcing page size limits. This operation is closely coordinated
 * with thread detail, create, and update operations.
 *
 * @param props.body Query parameters for thread search, filter, and pagination.
 * @path /threadsPosts/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Query parameters for thread search, filter, and pagination. */
    body: IThread.IRequest;
  };
  export type Body = IThread.IRequest;
  export type Response = IPageIThread.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/threadsPosts/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/threads";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIThread.ISummary => typia.random<IPageIThread.ISummary>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details of a thread from ThreadsPosts.threads by ID.
 *
 * This endpoint returns detailed information about a single forum thread,
 * including its metadata (title, creator, category, tags, locked/pinned status,
 * creation/update timestamps), as well as thread-level moderation or status
 * details.
 *
 * Moderation status (locked, pinned, hidden) is included, and the threadâ€™s
 * association with tags and category is also returned. The endpoint validates
 * thread existence and returns an error if not found or if access is disallowed
 * due to deletion or user permissions. Soft-deleted threads are not returned to
 * regular users, and audit logs should track access for moderation purposes.
 *
 * @param props.id Unique identifier of the thread to fetch.
 * @path /threadsPosts/threads/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the thread to fetch. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IThread;

  export const METADATA = {
    method: "GET",
    path: "/threadsPosts/threads/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/threads/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IThread =>
    typia.random<IThread>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update thread information in ThreadsPosts.threads by ID.
 *
 * This endpoint allows authorized users (thread owners, moderators, or
 * administrators) to update a thread's information. Updatable fields include
 * the thread's title, category, tags, and moderation flags (locked, pinned).
 * Only certain updates (like pinned/locked status) require moderator/admin
 * permissions.
 *
 * The operation checks thread existence, validates all update fields, and
 * maintains audit trails. Attempting to update a non-existent or unauthorized
 * thread should yield an appropriate error. The update timestamp is
 * automatically set, and soft-deleted threads cannot be updated. This endpoint
 * is related to thread creation, deletion, and list APIs.
 *
 * @param props.id Unique identifier of the thread to update.
 * @param props.body Fields to update for the thread.
 * @path /threadsPosts/threads/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the thread to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the thread. */
    body: IThread.IUpdate;
  };
  export type Body = IThread.IUpdate;
  export type Response = IThread;

  export const METADATA = {
    method: "PUT",
    path: "/threadsPosts/threads/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/threadsPosts/threads/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IThread =>
    typia.random<IThread>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete (soft-delete) a thread from ThreadsPosts.threads by ID.
 *
 * Deletes (soft-deletes) a thread, marking it as inactive and omitting it from
 * standard queries. Only authorized users (thread owners, moderators, admins)
 * may perform this operation. The thread and all associated posts/comments are
 * preserved for audit and moderation but are no longer visible to regular
 * users.
 *
 * Attempting to delete a non-existent or already deleted thread should return
 * an error. Deletion actions are logged, and dependent entities should be
 * handled according to business rules. Soft-deleted threads can potentially be
 * restored by admin actions. This operation complements thread create, update,
 * and list APIs.
 *
 * @param props.id Unique identifier of the thread to delete.
 * @path /threadsPosts/threads/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the thread to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/threadsPosts/threads/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/threads/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

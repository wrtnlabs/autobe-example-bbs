import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPostEdit } from "../../../structures/IPostEdit";
import { IPageIPostEdit } from "../../../structures/IPageIPostEdit";
import { IDeleteConfirmation } from "../../../structures/IDeleteConfirmation";

/**
 * Create a new post edit snapshot in the 'post_edits' table after editing
 * content.
 *
 * This 'post' operation inserts a new row in the 'post_edits' table to
 * represent a snapshot/version of a post after it is edited. According to the
 * schema, this must include the current title, body, the ID of the user
 * performing the edit (author or moderator), the post ID, a reason for the
 * edit, and the editor's IP address. Success returns the stored record for
 * immediate confirmation and UI update. On validation error (e.g., missing
 * fields, auth failure) returns an error. Access control must ensure only the
 * post owner, a moderator, or an admin can create an edit history. This
 * endpoint is closely linked with post update workflows, where every in-place
 * edit is accompanied by such a snapshot for evidentiary and roll-back
 * reasons.
 *
 * @param props.body Information for the new post edit snapshot, including post
 *   ID, new content, editor, and reason for the edit.
 * @path /threadsPosts/postEdits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Information for the new post edit snapshot, including post ID, new
     * content, editor, and reason for the edit.
     */
    body: IPostEdit.ICreate;
  };
  export type Body = IPostEdit.ICreate;
  export type Response = IPostEdit;

  export const METADATA = {
    method: "POST",
    path: "/threadsPosts/postEdits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/postEdits";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPostEdit =>
    typia.random<IPostEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search post edit snapshots from ThreadsPosts.post_edits.
 *
 * Returns a list of versioned post edit snapshots for audit trail,
 * transparency, or moderation. Each post edit record links to the post, user
 * (editor), edit reason, content, and timestamp. Supports searching and
 * filtering by post ID, editor, date range, or keyword.
 *
 * This endpoint is most useful for moderators, admins, or the post owner to
 * view edit history, investigate moderation events, or restore content.
 * Pagination, filtering, and security policies are enforced to protect privacy
 * and control access. Related endpoints: post detail, update, and audit APIs.
 *
 * @param props.body Search, filter, and pagination parameters for post edit
 *   history.
 * @path /threadsPosts/postEdits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter, and pagination parameters for post edit history. */
    body: IPostEdit.IRequest;
  };
  export type Body = IPostEdit.IRequest;
  export type Response = IPageIPostEdit;

  export const METADATA = {
    method: "PATCH",
    path: "/threadsPosts/postEdits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/postEdits";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIPostEdit =>
    typia.random<IPageIPostEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve detailed information about a specific post edit snapshot from the
 * 'post_edits' table by unique ID.
 *
 * This 'get' operation returns the full details of a specific post edit record
 * from the 'post_edits' table, identified by its unique ID parameter. According
 * to the schema, each post edit captures a complete snapshot of the post's
 * title and body at a specific revision point, along with the editor's ID
 * (which may be the author or a moderator) and timestamp. This is essential for
 * audit trails and supports transparency, permitting the board to resolve
 * disputes over what was changed and why. Sensitive because it could expose
 * moderation actions or sensitive edit history, the endpoint should be
 * restricted to authorized users (e.g., the original author, moderators, or
 * admins per business rules). Returns null or an error if the record does not
 * exist or the user is unauthorized. This endpoint is related to the overall
 * post edit workflow: edits are created with the POST operation, and histories
 * are fetched with this GET; full post histories may require aggregation at the
 * thread or post level via related APIs.
 *
 * @param props.id The unique identifier of the post edit snapshot to retrieve.
 * @path /threadsPosts/postEdits/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The unique identifier of the post edit snapshot to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPostEdit;

  export const METADATA = {
    method: "GET",
    path: "/threadsPosts/postEdits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/postEdits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IPostEdit =>
    typia.random<IPostEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update the metadata or annotation of an existing post edit snapshot in the
 * 'post_edits' table.
 *
 * This 'put' operation updates properties of a specific post edit snapshot
 * identified by its ID. Business rules may restrict fields that can
 * changeâ€”usually only admin or moderator correction of edit reason or metadata.
 * Editing the core content or title post-factum is rare and only allowed for
 * compliance/audit fixes. Returns the updated record if successful, error
 * otherwise. Authorization checks are critical here, as normal users should not
 * amend edit history. This operation is related to the transparency and
 * moderation logs, ensuring every update is itself tracked. If a post edit is
 * changed, this should trigger additional logs/notifications for compliance.
 *
 * @param props.id The unique identifier of the post edit snapshot to update.
 * @param props.body Updated information for the specific post edit snapshot.
 *   Only certain fields may be modified per business rules (e.g., edit
 *   reason).
 * @path /threadsPosts/postEdits/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The unique identifier of the post edit snapshot to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Updated information for the specific post edit snapshot. Only certain
     * fields may be modified per business rules (e.g., edit reason).
     */
    body: IPostEdit.IUpdate;
  };
  export type Body = IPostEdit.IUpdate;
  export type Response = IPostEdit;

  export const METADATA = {
    method: "PUT",
    path: "/threadsPosts/postEdits/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/threadsPosts/postEdits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IPostEdit =>
    typia.random<IPostEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a specific post edit snapshot by ID from the 'post_edits' table
 * (admin-only or compliance).
 *
 * This 'delete' operation removes a specific post edit record by ID from the
 * 'post_edits' table. In accordance with audit and compliance needs, true
 * deletion should be disabled for most roles and reserved for admin/system
 * actions such as compliance erasure requests. Normally, all edit histories
 * should be retained; actual implementation may soft-delete the record or mark
 * it as inaccessible except to compliance officers. Related to the larger post
 * and moderation audit trailâ€”deletions should themselves be logged as
 * moderation events. Returns confirmation or error. Strong approval and logging
 * flows must be enforced for this action.
 *
 * @param props.id The unique identifier of the post edit snapshot to delete.
 * @path /threadsPosts/postEdits/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** The unique identifier of the post edit snapshot to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDeleteConfirmation;

  export const METADATA = {
    method: "DELETE",
    path: "/threadsPosts/postEdits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/postEdits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IDeleteConfirmation => typia.random<IDeleteConfirmation>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

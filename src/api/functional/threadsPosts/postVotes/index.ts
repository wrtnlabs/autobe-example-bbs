import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPostVote } from "../../../structures/IPostVote";
import { IPageIPostVote } from "../../../structures/IPageIPostVote";
import { IDeleteConfirmation } from "../../../structures/IDeleteConfirmation";

/**
 * Create a new post vote record (upvote or downvote) in the 'post_votes' table
 * for a given post/user.
 *
 * This 'post' operation inserts a new record into the 'post_votes' table,
 * capturing the user's voting action (upvote/downvote). Must provide target
 * post, user, vote type, and time. Business rules: a user may only have one
 * active vote per post—this is enforced at API and schema (unique index).
 * Success returns vote record. Authorization required to verify user is logged
 * in and eligible to vote. Creates or updates post reputation metrics. Related
 * to PATCH (list), GET (review specific vote), PUT (update vote), and DELETE
 * (remove vote).
 *
 * @param props.body Parameters to create a new post vote, including post ID,
 *   user ID, vote type, etc.
 * @path /threadsPosts/postVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Parameters to create a new post vote, including post ID, user ID,
     * vote type, etc.
     */
    body: IPostVote.ICreate;
  };
  export type Body = IPostVote.ICreate;
  export type Response = IPostVote;

  export const METADATA = {
    method: "POST",
    path: "/threadsPosts/postVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/postVotes";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPostVote =>
    typia.random<IPostVote>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List or search post vote records (upvotes/downvotes) from 'post_votes' with
 * filtering, pagination, and sorting.
 *
 * This 'patch' operation receives a request body with criteria for searching or
 * filtering records in the 'post_votes' table. Useful for moderator/admin
 * review, analytics, or for users in their profile history. Filters could
 * include vote type (up/down), user, post, range of dates, etc. Result is
 * paginated and may include totals or breakdowns. Authorization is required as
 * this exposes voting behavior. This is related to vote creation (POST),
 * specific vote review (GET), or removal (DELETE).
 *
 * @param props.body Criteria for searching post vote records (e.g., userId,
 *   postId, isUpvote, pagination, sorting).
 * @path /threadsPosts/postVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Criteria for searching post vote records (e.g., userId, postId,
     * isUpvote, pagination, sorting).
     */
    body: IPostVote.IRequest;
  };
  export type Body = IPostVote.IRequest;
  export type Response = IPageIPostVote;

  export const METADATA = {
    method: "PATCH",
    path: "/threadsPosts/postVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/postVotes";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIPostVote =>
    typia.random<IPageIPostVote>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve details about a specific post vote from the 'post_votes' table by
 * unique ID.
 *
 * This 'get' operation fetches one post vote record from the 'post_votes' table
 * by unique ID. Per schema, this includes the voting user, target post, vote
 * type (up or down), and timestamp. Access to this endpoint may be restricted
 * to admins, moderators, or the user themselves—ordinary users shouldn't see
 * others' votes except in aggregate. Returns vote details or error if not found
 * or unauthorized. Linked to overall vote management: vote listing (PATCH),
 * vote creation (POST), vote updates (PUT), and removals (DELETE).
 *
 * @param props.id The unique identifier of the post vote record to retrieve.
 * @path /threadsPosts/postVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The unique identifier of the post vote record to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPostVote;

  export const METADATA = {
    method: "GET",
    path: "/threadsPosts/postVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/postVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IPostVote =>
    typia.random<IPostVote>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an existing post vote (upvote⇆downvote) by unique ID in the
 * 'post_votes' table.
 *
 * This 'put' operation updates an existing post vote record, identified by ID.
 * Exposes ability to change vote type (upvote↔downvote) or correct data
 * (timestamp) as needed. Access should be limited to the original voting user,
 * or moderator/admin for special cases. Upvote/downvote is an atomic boolean
 * (per schema). Returns updated vote or error. Linked with PATCH (list), GET
 * (details), POST (create), DELETE (remove). Edits are uncommon; normally,
 * users retract/recast votes rather than update in place.
 *
 * @param props.id The unique identifier of the post vote record to update.
 * @param props.body Fields of the post vote to update (typically is_upvote or
 *   timestamp).
 * @path /threadsPosts/postVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The unique identifier of the post vote record to update. */
    id: string & tags.Format<"uuid">;

    /** Fields of the post vote to update (typically is_upvote or timestamp). */
    body: IPostVote.IUpdate;
  };
  export type Body = IPostVote.IUpdate;
  export type Response = IPostVote;

  export const METADATA = {
    method: "PUT",
    path: "/threadsPosts/postVotes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/threadsPosts/postVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IPostVote =>
    typia.random<IPostVote>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a post upvote/downvote from 'post_votes' by unique ID (user,
 * moderator, or admin).
 *
 * This 'delete' operation removes a post vote record by unique ID from the
 * 'post_votes' table. Typically allowed only by the voting user, or
 * moderator/admin for management and fraud prevention. Returns deletion
 * confirmation, error otherwise. Logging of deletion events is important for
 * vote integrity and site trust. Related to all other post vote APIs: PATCH
 * (list), GET (inspect), POST (create), PUT (edit).
 *
 * @param props.id The unique identifier of the post vote to delete.
 * @path /threadsPosts/postVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** The unique identifier of the post vote to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDeleteConfirmation;

  export const METADATA = {
    method: "DELETE",
    path: "/threadsPosts/postVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/postVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IDeleteConfirmation => typia.random<IDeleteConfirmation>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IThreadsPostsPollVote } from "../../../structures/IThreadsPostsPollVote";
import { IPageIThreadsPostsPollVote } from "../../../structures/IPageIThreadsPostsPollVote";

/**
 * Create a new poll vote (threadsPosts/poll_votes table).
 *
 * POST /threadsPosts/pollVotes allows a registered user to submit a vote on a
 * poll using the 'poll_votes' Prisma schema. The request body is
 * IThreadsPostsPollVote.ICreate, which should include poll_id, poll_option_id,
 * and user_id (typically inferred from authentication/token).
 *
 * Business logic ensures only one vote per user per pollâ€”the operation checks
 * for duplicates and rejects if one exists. Voting is only allowed when the
 * poll is open (date logic), and results may be hidden until the poll closes
 * per requirements. The created vote record is returned upon success.
 *
 * Security: Only registered users can vote. The endpoint validates poll and
 * option existence and user permissions.
 *
 * @param props.body Details of the poll vote (poll_id, poll_option_id,
 *   user_id).
 * @path /threadsPosts/pollVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details of the poll vote (poll_id, poll_option_id, user_id). */
    body: IThreadsPostsPollVote.ICreate;
  };
  export type Body = IThreadsPostsPollVote.ICreate;
  export type Response = IThreadsPostsPollVote;

  export const METADATA = {
    method: "POST",
    path: "/threadsPosts/pollVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/pollVotes";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IThreadsPostsPollVote => typia.random<IThreadsPostsPollVote>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Advanced search/filter over poll votes (threadsPosts/poll_votes table).
 *
 * PATCH /threadsPosts/pollVotes searches poll_votes records, returning paged
 * results structured by the IPageIThreadsPostsPollVote type. Filtering can
 * include poll_id, user_id, or poll_option_id. The endpoint is read-only and
 * accessible to authorized users, typically poll owners, moderators, or system
 * admins.
 *
 * Performance: Indexing and pagination ensure efficient responses for large
 * polls. Filters are validated for type and access (e.g., only authorized users
 * can see details for non-public polls).
 *
 * Related endpoints cover creation (voting), update (changing/vetoing vote),
 * retrieval (GET by id), and deletion (removing a vote).
 *
 * @param props.body Parameters for searching, filtering, and paginating poll
 *   votes.
 * @path /threadsPosts/pollVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Parameters for searching, filtering, and paginating poll votes. */
    body: IThreadsPostsPollVote.IRequest;
  };
  export type Body = IThreadsPostsPollVote.IRequest;
  export type Response = IPageIThreadsPostsPollVote;

  export const METADATA = {
    method: "PATCH",
    path: "/threadsPosts/pollVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/threadsPosts/pollVotes";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIThreadsPostsPollVote => typia.random<IPageIThreadsPostsPollVote>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific poll vote (threadsPosts/poll_votes table).
 *
 * GET /threadsPosts/pollVotes/{id} returns the poll vote object from the
 * 'poll_votes' Prisma schema that matches the given {id}. This includes details
 * such as poll_id, poll_option_id, user_id, and creation time. Generally,
 * access is restricted to the user who voted, poll moderators, or system
 * admins.
 *
 * Validation ensures the given id is a valid UUID and that the vote exists. An
 * error is returned if not found or inaccessible. Related operations can list
 * (PATCH), create (POST), update (PUT), or delete poll votes.
 *
 * @param props.id Unique identifier of the poll vote to retrieve
 * @path /threadsPosts/pollVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the poll vote to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IThreadsPostsPollVote;

  export const METADATA = {
    method: "GET",
    path: "/threadsPosts/pollVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/pollVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IThreadsPostsPollVote => typia.random<IThreadsPostsPollVote>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a poll vote (threadsPosts/poll_votes table).
 *
 * PUT /threadsPosts/pollVotes/{id} updates a single poll vote, identified by
 * its id in the 'poll_votes' Prisma table. The update can change
 * poll_option_id. Only the original voter may modify their vote, and only while
 * the poll remains open.
 *
 * Validations ensure a user does not create multiple votes per poll and that
 * poll and option IDs remain consistent. Attempts to update after the poll has
 * closed or by unauthorized users are rejected. For audit, each change may be
 * logged (beyond immediate vote update).
 *
 * Related endpoints: PATCH for searching, POST for new votes, GET for
 * retrieval, DELETE for removal of a vote.
 *
 * @param props.id Unique identifier of the poll vote to update
 * @param props.body Fields to update for the poll vote (poll_option_id).
 * @path /threadsPosts/pollVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the poll vote to update */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the poll vote (poll_option_id). */
    body: IThreadsPostsPollVote.IUpdate;
  };
  export type Body = IThreadsPostsPollVote.IUpdate;
  export type Response = IThreadsPostsPollVote;

  export const METADATA = {
    method: "PUT",
    path: "/threadsPosts/pollVotes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/threadsPosts/pollVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IThreadsPostsPollVote => typia.random<IThreadsPostsPollVote>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a poll vote (threadsPosts/poll_votes table).
 *
 * DELETE /threadsPosts/pollVotes/{id} removes a poll vote record in the
 * 'poll_votes' table, targeting the id provided. The operation is only
 * permitted for the original voter, ensuring no double voting per poll.
 * Deletion is not possible after the poll closes. The endpoint provides a
 * confirmation or metadata about the deleted vote.
 *
 * Security & workflow: All actions are audit logged for transparency. Attempts
 * to delete a vote by a user who is not the voter or after the poll closes fail
 * gracefully with a clear error message. Related endpoints support vote
 * creation, update, and batch search.
 *
 * @param props.id Unique identifier of the poll vote to delete
 * @path /threadsPosts/pollVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the poll vote to delete */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IThreadsPostsPollVote;

  export const METADATA = {
    method: "DELETE",
    path: "/threadsPosts/pollVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/threadsPosts/pollVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IThreadsPostsPollVote => typia.random<IThreadsPostsPollVote>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

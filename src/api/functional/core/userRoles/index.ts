import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserRole } from "../../../structures/IUserRole";
import { IPageIUserRole } from "../../../structures/IPageIUserRole";

/**
 * Create a new user role (core.userRoles table).
 *
 * Creates a new user role based on the schema structure, with fields for name
 * (label) and description. Enforces the uniqueness of the role name and ensures
 * all required information is provided, following the comments and requirements
 * detailed in the Prisma schema.
 *
 * Intended for administrator setup or customization of new permission levels.
 * Errors are sent in case of duplicate names, missing fields, or insufficient
 * permissions. Successful creation returns the new user role record, suitable
 * for immediate assignment to users.
 *
 * Related endpoints: list (PATCH), single GET, update (PUT), and delete
 * (DELETE) for user roles.
 *
 * @param props.body New user role details, including name and description.
 * @path /core/userRoles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** New user role details, including name and description. */
    body: IUserRole.ICreate;
  };
  export type Body = IUserRole.ICreate;
  export type Response = IUserRole;

  export const METADATA = {
    method: "POST",
    path: "/core/userRoles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/core/userRoles";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserRole =>
    typia.random<IUserRole>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and filter user roles (core.userRoles table).
 *
 * This operation returns a paginated list of user roles available to assign, as
 * defined by the user_roles model. Roles govern permissions across the board
 * (e.g., member, moderator, administrator). Designed for use in registration
 * processes, admin dashboards, or role management panels, enabling filtering by
 * role name or description and ordering of results.
 *
 * Data returned is defined strictly by the Prisma model and schema comments.
 * This operation is auditable and respects business constraints on who may
 * view/assign roles. Related endpoints: single role GET, create (POST), update
 * (PUT), and delete (DELETE).
 *
 * Error cases (e.g., forbidden access) are handled with appropriate status
 * codes. Pagination and search parameters maximize usability and efficiency,
 * especially for large deployments with custom roles.
 *
 * @param props.body Filter, search, and pagination info for user roles listing.
 * @path /core/userRoles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filter, search, and pagination info for user roles listing. */
    body: IUserRole.IRequest;
  };
  export type Body = IUserRole.IRequest;
  export type Response = IPageIUserRole;

  export const METADATA = {
    method: "PATCH",
    path: "/core/userRoles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/core/userRoles";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIUserRole =>
    typia.random<IPageIUserRole>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a single user role's details (core.userRoles table).
 *
 * Retrieves all details for a single user role, specified by ID. Used in admin
 * panels to display all properties of a role, or in account registration to
 * inform users about the meaning and permissions of each role (as described in
 * schema comments: name, description, etc).
 *
 * Respects all business rules regarding role assignment and application.
 * Related endpoints: list (PATCH), creation (POST), update (PUT), delete
 * (DELETE). Errors for missing roles or unauthorized actions are handled
 * gracefully, with clear messaging.
 *
 * @param props.id Target role's ID (UUID).
 * @path /core/userRoles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target role's ID (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserRole;

  export const METADATA = {
    method: "GET",
    path: "/core/userRoles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/core/userRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserRole =>
    typia.random<IUserRole>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Edit label/description for a user role (core.userRoles table).
 *
 * Updates an existing user role's properties (name and/or description).
 * Uniqueness of the name is enforced by Prisma schema rules. Typical in systems
 * where additional roles/policies are introduced or for correcting role
 * definitions.
 *
 * Only administrators are permitted to update roles. Change history is tracked
 * and any update is reflected in audit fields. Related endpoints: detail GET,
 * list PATCH, creation POST, and deletion DELETE for user roles.
 *
 * Any errors due to duplicates, forbidden edits, or missing records generate
 * suitable error codes in response. Endpoint matches structure and intentions
 * described in requirements and schema comments.
 *
 * @param props.id Target role's ID (UUID).
 * @param props.body New values for user role fields (name/description).
 * @path /core/userRoles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target role's ID (UUID). */
    id: string & tags.Format<"uuid">;

    /** New values for user role fields (name/description). */
    body: IUserRole.IUpdate;
  };
  export type Body = IUserRole.IUpdate;
  export type Response = IUserRole;

  export const METADATA = {
    method: "PUT",
    path: "/core/userRoles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/core/userRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserRole =>
    typia.random<IUserRole>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a user role from the system (core.userRoles table).
 *
 * Deletes a user role identified by its ID. Enforces business and schema rules
 * about which roles can be deleted (e.g., prevents deletion of critical roles
 * if protected by business logic). If the role is in use (referenced by users),
 * operation will fail with a clear error message.
 *
 * Administrative rights are required. Detailed audit trails are maintained for
 * changes. Related endpoints: create (POST), list (PATCH), update (PUT), detail
 * (GET). All operations match Prisma schema and requirements. Appropriate
 * handling is provided for not found, forbidden, or dependency errors.
 *
 * @param props.id Target role's ID (UUID).
 * @path /core/userRoles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target role's ID (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserRole.IDeleteResponse;

  export const METADATA = {
    method: "DELETE",
    path: "/core/userRoles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/core/userRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IUserRole.IDeleteResponse => typia.random<IUserRole.IDeleteResponse>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

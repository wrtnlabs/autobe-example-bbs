import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotification } from "../../../structures/INotification";
import { IPageINotification } from "../../../structures/IPageINotification";

/**
 * Create a new notification event for a user (notifications table).
 *
 * A POST request creates one notification entry, sending a message of specified
 * type to a user (or the system itself). Request body must contain recipient
 * user ID, notification message, type, and any event references. Input is
 * validated for data correctness and user existence. Only privileged users or
 * the system may create notifications for other users, while users generally
 * cannot create their own notification rows. Audits and system messages are
 * logged for traceability. This endpoint is mainly used alongside PATCH
 * (listing) and GET (reading) notification operations.
 *
 * @param props.body All required message, user, and type information for
 *   creating the notification event.
 * @path /notifications/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * All required message, user, and type information for creating the
     * notification event.
     */
    body: INotification.ICreate;
  };
  export type Body = INotification.ICreate;
  export type Response = INotification;

  export const METADATA = {
    method: "POST",
    path: "/notifications/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notifications/notifications";
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List or search user notifications (notifications table).
 *
 * A PATCH request returns a paginated list of notification events for the
 * requesting user (or admins reviewing others' notifications). The request body
 * specifies filters for type, is_read status, associated entities, or time
 * intervals. Pagination controls offset/page and limit per request. Only the
 * owner or permitted roles may access each user's notification events. This
 * endpoint is used in conjunction with POST (to create/test notifications) and
 * GET (to fetch a single notification detail).
 *
 * @param props.body Search/paging/filtering parameters for retrieving
 *   notifications.
 * @path /notifications/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search/paging/filtering parameters for retrieving notifications. */
    body: INotification.IRequest;
  };
  export type Body = INotification.IRequest;
  export type Response = IPageINotification;

  export const METADATA = {
    method: "PATCH",
    path: "/notifications/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notifications/notifications";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageINotification => typia.random<IPageINotification>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a specific notification event (notifications table).
 *
 * This GET operation delivers all available atomic data for a single
 * notification record given its ID. Security ensures only the recipient or
 * privileged users may view the entry. The endpoint validates the notification
 * exists and that the requester is authorized. If found, it returns all message
 * metadata, event references (post, comment, poll, moderation log), type,
 * message, read status, and timestamps. Related endpoints: PATCH (for
 * notification lists), POST (for push/manual notification generation).
 *
 * @param props.id The unique identifier for the notification to retrieve.
 * @path /notifications/notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The unique identifier for the notification to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotification;

  export const METADATA = {
    method: "GET",
    path: "/notifications/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notifications/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an individual notification by ID in the 'notifications' table.
 *
 * This operation allows a user to update a specific notification record, such
 * as marking it as read after viewing or amending associated data (e.g.,
 * message, type). The 'notifications' table is central for tracking delivery
 * and read status of all notifications for the platform (see notification
 * delivery requirements).
 *
 * Permission checks ensure that only the owner (the notification's recipient)
 * can update their own notifications. Attempts to update notifications
 * belonging to other users should result in a permissions error. Every update
 * triggers schema validationâ€”e.g., ensuring 'is_read' is a boolean. All updates
 * are recorded with audit information (who made the change, timestamp) for
 * compliance with transparency and security requirements (see privacy and
 * business rule sections).
 *
 * The notification update operation is commonly paired with client polling or
 * user interface actions such as "clear notifications" or "mark all as read".
 * Related notification endpoints include retrieving (GET), creating
 * (POST/system), and deleting (DELETE) notifications.
 *
 * Error scenarios include not found (invalid id), permission denied, and
 * malformed update data.
 *
 * @param props.id Unique identifier of the notification to update.
 * @param props.body New values for the notification record (e.g., is_read).
 * @path /notifications/notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the notification to update. */
    id: string & tags.Format<"uuid">;

    /** New values for the notification record (e.g., is_read). */
    body: INotification.IUpdate;
  };
  export type Body = INotification.IUpdate;
  export type Response = INotification;

  export const METADATA = {
    method: "PUT",
    path: "/notifications/notifications/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notifications/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a notification by ID from the 'notifications' table.
 *
 * Allows a user to permanently delete (not just mark as read/unread) a specific
 * notification from their personal notification list. The underlying
 * 'notifications' table enforces full audit/ownershipâ€”the operation must check
 * that only the recipient can delete their own notifications.
 *
 * Once deleted, the notification record is removed and will no longer appear in
 * user views. This supports user control over their notification history,
 * aligning with privacy and data management principles outlined in the
 * requirements.
 *
 * All deletes must be strictly checked for permission (ownership), and proper
 * logging/auditing of the deletion event is required. Edge cases include
 * attempting to delete a non-existent notification or one that doesn't belong
 * to the requester, resulting in appropriate errors (404 Not Found, 403
 * Forbidden).
 *
 * @param props.id Unique identifier of the notification to delete.
 * @path /notifications/notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the notification to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notifications/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notifications/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPost } from "../../../structures/IPost";
import { IPageIPost } from "../../../structures/IPageIPost";

/**
 * Create a new post (Posts.posts).
 *
 * Allows a user to create a new post by providing required information such as
 * category, title, and content. The new post is assigned to the authoring user
 * and is inserted into the database. Creation may be subject to moderation or
 * review depending on platform policies.
 *
 * Input validation includes ensuring a valid category reference, unique/valid
 * title, and legitimate content (length, formatting). On success, the API
 * returns the full details of the created post, including assigned UUID,
 * timestamps, and author/category references.
 *
 * Error cases include missing/invalid data, attempts to create a post in
 * non-existent category, or by unauthorized/blocked users. Related endpoints:
 * list/search (PATCH), get (GET), update (PUT), delete (DELETE); plus comment
 * APIs.
 *
 * @param props.body All information required for new post: categoryId, title,
 *   content.
 * @path /posts/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** All information required for new post: categoryId, title, content. */
    body: IPost.ICreate;
  };
  export type Body = IPost.ICreate;
  export type Response = IPost;

  export const METADATA = {
    method: "POST",
    path: "/posts/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/posts/posts";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPost =>
    typia.random<IPost>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search posts (Posts.posts).
 *
 * This API operation returns a list of posts (discussion threads or articles)
 * with full support for filtering by category, author, or keywords, as well as
 * sorting and pagination. Non-admin users typically see only non-deleted,
 * non-archived posts, while administrators may have visibility into all post
 * states. Standard search validation is performed for page, pageSize, and sort
 * field inputs.
 *
 * The endpoint supports community browsing, category threads, author-centric
 * feeds, and search result pages. It also includes support for keyword-based
 * full-text search on titles and content. Additional metadata such as comment
 * and vote counts may be included per business requirements. Error handling
 * addresses invalid filters, missing results, or backend errors.
 *
 * Related to post retrieval (GET), post creation (POST), update (PUT), and
 * delete (DELETE) endpoints, as well as comment and vote-related APIs.
 *
 * @param props.body Criteria for searching, paging, and sorting posts.
 * @path /posts/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Criteria for searching, paging, and sorting posts. */
    body: IPost.IRequest;
  };
  export type Body = IPost.IRequest;
  export type Response = IPageIPost;

  export const METADATA = {
    method: "PATCH",
    path: "/posts/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/posts/posts";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIPost =>
    typia.random<IPageIPost>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve specific post by ID (Posts.posts).
 *
 * Retrieves full details of a single post, identified by its unique ID. Returns
 * all fields visible to the viewing user, such as title, content, author
 * reference, category reference, creation and update times, etc. Admin users
 * may access deleted posts if required, while normal users only see active
 * posts.
 *
 * This API is the primary source of detail for displaying or editing a
 * discussion post. It validates the UUID input, and returns a 404 or permission
 * error if the post does not exist or the user lacks rights.
 *
 * Related endpoints: post list/search (PATCH), create (POST), update (PUT),
 * delete (DELETE). Also supports comment and voting APIs.
 *
 * @param props.id Unique ID of the target post
 * @path /posts/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the target post */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPost;

  export const METADATA = {
    method: "GET",
    path: "/posts/posts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/posts/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IPost =>
    typia.random<IPost>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a post by ID (Posts.posts).
 *
 * Updates an existing post, referenced by its unique ID. Input may update
 * title, content, and/or category reference. Only the author or an
 * administrator/moderator may perform this operation. All updates are validated
 * for required structure, content, and permission.
 *
 * Partial updates retain other fields unchanged. History tracking is enabled
 * via timestamps. Changing category may have restrictions if the post has live
 * comments. On success, returns updated post data; on failure, returns
 * validation or permission errors.
 *
 * Related endpoints: get, list/search, create, delete for posts. This endpoint
 * supports editing discussion threads after posting.
 *
 * @param props.id Unique ID of the target post
 * @param props.body Fields to update for post (title, content, category).
 * @path /posts/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique ID of the target post */
    id: string & tags.Format<"uuid">;

    /** Fields to update for post (title, content, category). */
    body: IPost.IUpdate;
  };
  export type Body = IPost.IUpdate;
  export type Response = IPost;

  export const METADATA = {
    method: "PUT",
    path: "/posts/posts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/posts/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IPost =>
    typia.random<IPost>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a post by ID (Posts.posts).
 *
 * Deletes (or marks as deleted) a post record by its ID. Standard
 * implementation is soft-deletion: post remains in database for moderation and
 * audit but is removed from normal views and feeds. Only the original author,
 * admin, or moderator can perform deletion. Attempts to delete posts with
 * active comments or votes may be subject to business rule restrictions or
 * warnings.
 *
 * All delete actions are logged. The response provides confirmation or error.
 * Related endpoints: create, get, update, and list/search for posts. Deletion
 * cascades may apply to comments and votes as policy dictates.
 *
 * @param props.id Unique ID of the target post
 * @path /posts/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique ID of the target post */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IPost.IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/posts/posts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/posts/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPost.IDeleteResult => typia.random<IPost.IDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

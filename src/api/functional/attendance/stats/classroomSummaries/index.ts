import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttendanceStatsClassroomSummary } from "../../../../structures/IAttendanceStatsClassroomSummary";
import { IPageIAttendanceStatsClassroomSummary } from "../../../../structures/IPageIAttendanceStatsClassroomSummary";

/**
 * Create a new classroom summary stats record
 * (attendance_stats_classroom_summary).
 *
 * This endpoint creates a new classroom summary statistics record within the
 * attendance_stats_classroom_summary table for the provided classroom, school,
 * and period.
 *
 * Only admins or teachers with privileges for the target classroom are allowed
 * to use this endpoint. All required aggregation/statistics fields must be
 * populated to satisfy integrity (present, late, absent, early_leave counts).
 * The endpoint validates uniqueness (no duplicate (classroom_id, period_start,
 * period_end)), and ensures that the referenced classroom and school exist.
 * Audit logs are generated automatically to record the creation for
 * compliance.
 *
 * Field validation is performed for period range, counts, and primary key
 * uniqueness. Endpoint returns the full created summary statistics row,
 * including record id.
 *
 * @param props.connection
 * @param props.body Data required to create a new classroom summary statistics
 *   record.
 * @path /attendance/stats/classroomSummaries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Data required to create a new classroom summary statistics record. */
    body: IAttendanceStatsClassroomSummary.ICreate;
  };
  export type Body = IAttendanceStatsClassroomSummary.ICreate;
  export type Response = IAttendanceStatsClassroomSummary;

  export const METADATA = {
    method: "POST",
    path: "/attendance/stats/classroomSummaries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/stats/classroomSummaries";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStatsClassroomSummary =>
    typia.random<IAttendanceStatsClassroomSummary>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List classroom summary stats with advanced filter/search
 * (attendance_stats_classroom_summary).
 *
 * This endpoint returns a filtered list of classroom summary statistics records
 * from the attendance_stats_classroom_summary table.
 *
 * Supports advanced dashboard and reporting use cases: API clients may
 * search/filter by school, classroom, period, or sort by total stats (present,
 * late, absent, early_leave). Pagination options may be provided in the request
 * body. Only authorized admin or teacher users can query class-level summary
 * stats.
 *
 * Validation ensures search parameters are well-formed and fall within the
 * allowed range of classroom/periods. If the request body is absent or empty,
 * returns the default most recent period summaries for all classrooms available
 * to the user. Results are suitable for rendering bulk dashboards or exporting
 * to CSV as per admin/teacher requirements.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for retrieving classroom
 *   summary stats records.
 * @path /attendance/stats/classroomSummaries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Search and filter parameters for retrieving classroom summary stats
     * records.
     */
    body: IAttendanceStatsClassroomSummary.IRequest;
  };
  export type Body = IAttendanceStatsClassroomSummary.IRequest;
  export type Response = IPageIAttendanceStatsClassroomSummary;

  export const METADATA = {
    method: "PATCH",
    path: "/attendance/stats/classroomSummaries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/stats/classroomSummaries";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAttendanceStatsClassroomSummary =>
    typia.random<IPageIAttendanceStatsClassroomSummary>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get detailed classroom summary statistics record
 * (attendance_stats_classroom_summary).
 *
 * This endpoint retrieves the full record for a specific classroom summary
 * statistics row from the attendance_stats_classroom_summary table by primary
 * key (UUID).
 *
 * Access is restricted to authorized admin or teacher roles. All summary data
 * (present, late, absent, early_leave counts) for the time period is returned.
 * The endpoint supports error return for not found or forbidden (e.g., if the
 * user does not have privileges for the classroom).
 *
 * Complies with dashboard requirements for period detail view; downstream
 * systems may use this data for deeper analytics or exporting. Audit logs
 * record every access to support regulatory compliance and monitoring.
 *
 * @param props.connection
 * @param props.id UUID of the classroom summary statistics record to retrieve.
 * @path /attendance/stats/classroomSummaries/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of the classroom summary statistics record to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceStatsClassroomSummary;

  export const METADATA = {
    method: "GET",
    path: "/attendance/stats/classroomSummaries/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/stats/classroomSummaries/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStatsClassroomSummary =>
    typia.random<IAttendanceStatsClassroomSummary>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an existing classroom summary stats record
 * (attendance_stats_classroom_summary).
 *
 * This endpoint updates an existing classroom summary stats record for a given
 * id in the attendance_stats_classroom_summary table.
 *
 * Only users with admin or teacher privileges may perform the update, and every
 * operation must be logged to an audit log (including before/after images if
 * required by business logic). Integrity is maintained by ensuring that any
 * updated values remain within valid constraints, e.g.,
 * present+late+absent+early_leave cannot exceed total student-days for the
 * period; period range validation is enforced.
 *
 * If the classroom or period is altered, the endpoint checks for unique
 * constraint violations and referential integrity with classroom/school
 * records. Return value is the entire updated stats record for rendering
 * summary dashboard updates/managing further exports.
 *
 * @param props.connection
 * @param props.id UUID of the classroom summary stats record to update.
 * @param props.body Fields to update in the classroom summary stats record.
 * @path /attendance/stats/classroomSummaries/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** UUID of the classroom summary stats record to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update in the classroom summary stats record. */
    body: IAttendanceStatsClassroomSummary.IUpdate;
  };
  export type Body = IAttendanceStatsClassroomSummary.IUpdate;
  export type Response = IAttendanceStatsClassroomSummary;

  export const METADATA = {
    method: "PUT",
    path: "/attendance/stats/classroomSummaries/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/attendance/stats/classroomSummaries/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStatsClassroomSummary =>
    typia.random<IAttendanceStatsClassroomSummary>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a classroom summary stats record (attendance_stats_classroom_summary).
 *
 * This endpoint deletes a classroom summary statistics record from the
 * attendance_stats_classroom_summary table for the specified id.
 *
 * Action is restricted to admin or teachers. Deletion events are logged in the
 * audit log for compliance (actor, action, result) and to support investigative
 * or troubleshooting workflows. If deleting the summary would violate
 * referential integrity (e.g., referenced by dash/report), action is blocked.
 * Returns status 204/empty success on successful deletion.
 *
 * Hard or soft delete is managed per application policy; this spec only
 * describes physical delete from canonical store.
 *
 * @param props.connection
 * @param props.id UUID of the classroom summary stats record to delete.
 * @path /attendance/stats/classroomSummaries/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of the classroom summary stats record to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/attendance/stats/classroomSummaries/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/stats/classroomSummaries/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

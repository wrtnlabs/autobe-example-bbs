import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttendanceAccessLog } from "../../../structures/IAttendanceAccessLog";
import { IPageIAttendanceAccessLog } from "../../../structures/IPageIAttendanceAccessLog";

/**
 * Insert a new access log event (attendance_access_log table).
 *
 * This endpoint allows the attendance system (or admins/tools) to create an
 * explicit access log event. Typical use cases include logging dashboard
 * accesses, sensitive data views, or user/session activities in compliance with
 * audit policy. Required parameters include user/account (teacher_id,
 * student_id, etc.), classroom (if applicable), ip address, user agent, device
 * id, and exact event timestamp. Audit requirements mandate that all accesses
 * of sensitive data or system pages be logged and immutable. This API creates a
 * single record in attendance_access_log and returns confirmation or error as
 * appropriate. The table is append-only for audit integrity. Only system actors
 * or applications with auditor/admin rights should have write access. Related
 * endpoints: patch for search, get for detail, put for update, delete for
 * removal.
 *
 * @param props.connection
 * @param props.body Information for the new access log event (user/session,
 *   context, device info).
 * @path /attendance/accessLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Information for the new access log event (user/session, context,
     * device info).
     */
    body: IAttendanceAccessLog.ICreate;
  };
  export type Body = IAttendanceAccessLog.ICreate;
  export type Response = IAttendanceAccessLog;

  export const METADATA = {
    method: "POST",
    path: "/attendance/accessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/accessLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceAccessLog => typia.random<IAttendanceAccessLog>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search and paginate attendance access logs (attendance_access_log table).
 *
 * This API allows authorized users (typically administrators or auditors) to
 * search and retrieve a paginated list of access log entries, each representing
 * a single access event to the attendance system. Filters can include user role
 * (teacher, student, admin, parent), date intervals, classroom, IP address, and
 * other log attributes. The attendance_access_log table records who accessed
 * what, from where (user agent, IP), and when. This is critical for operational
 * monitoring, security audits, and legal compliance. Result pagination,
 * sorting, and advanced search are supported for efficient log review. Related
 * endpoints include access log detail/retrieval, creation for system actions,
 * update, and deletion. The list retrieval is a patch since complex search
 * criteria can be submitted in the request body.
 *
 * @param props.connection
 * @param props.body Filter/search parameters for access logs, including
 *   pagination, date range, actor info, and search keywords.
 * @path /attendance/accessLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filter/search parameters for access logs, including pagination, date
     * range, actor info, and search keywords.
     */
    body: IAttendanceAccessLog.IRequest;
  };
  export type Body = IAttendanceAccessLog.IRequest;
  export type Response = IPageIAttendanceAccessLog;

  export const METADATA = {
    method: "PATCH",
    path: "/attendance/accessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/accessLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAttendanceAccessLog => typia.random<IPageIAttendanceAccessLog>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve single attendance access log detail by id (attendance_access_log
 * table).
 *
 * This API returns all the details of a single access log event (login,
 * page/dashboard access, etc.) given its unique log id. Entries in
 * attendance_access_log provide a permanent audit trail of access actions,
 * including the user (teacher, admin, student, parent), affected classroom,
 * user agent, ip address, and exact timestamp for the event. This endpoint is
 * used in investigations, compliance review, and granular audit reporting. The
 * endpoint is designed for read-only retrieval of existing logs and does not
 * permit modification or deletion.
 *
 * @param props.connection
 * @param props.id Unique id of the access log entry to retrieve
 * @path /attendance/accessLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique id of the access log entry to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceAccessLog;

  export const METADATA = {
    method: "GET",
    path: "/attendance/accessLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/accessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceAccessLog => typia.random<IAttendanceAccessLog>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a specific access log event's details (attendance_access_log table).
 *
 * This API allows authorized actors (typically the system or privileged
 * administrators) to update an existing access log event by id. Usage should be
 * minimal due to audit record integrity, but possible in limited situations
 * such as device info corrections, IP updates, or adding user agent data. All
 * updates must themselves be logged for audit trail purposes. Endpoint modifies
 * atomic attributes for the selected log record. If the record does not exist,
 * a not-found error is returned. Only system or audit actors can update.
 * Related endpoints: patch for search, get for detail, post for creation,
 * delete for removal.
 *
 * @param props.connection
 * @param props.id Unique identifier of the access log entry to update.
 * @param props.body Fields and values to update for the access log entry.
 * @path /attendance/accessLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the access log entry to update. */
    id: string & tags.Format<"uuid">;

    /** Fields and values to update for the access log entry. */
    body: IAttendanceAccessLog.IUpdate;
  };
  export type Body = IAttendanceAccessLog.IUpdate;
  export type Response = IAttendanceAccessLog;

  export const METADATA = {
    method: "PUT",
    path: "/attendance/accessLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/attendance/accessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceAccessLog => typia.random<IAttendanceAccessLog>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a specific access log record (attendance_access_log table) by id.
 *
 * This endpoint deletes a specific access log event. The requestor must have
 * appropriate authority (auditor, compliance admin). Used rarely, as logs are
 * generally append-only for legal compliance, but necessary for cases such as
 * data subject requests, retention expiry, or redaction. Deletion is permanent
 * and should itself be logged. Related endpoints: patch for search, get for
 * detail, post for creation, put for update.
 *
 * @param props.connection
 * @param props.id Unique identifier for the access log entry to delete.
 * @path /attendance/accessLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier for the access log entry to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/attendance/accessLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/accessLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

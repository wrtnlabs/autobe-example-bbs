import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttendanceStudent } from "../../../structures/IAttendanceStudent";
import { IPageAttendanceStudent } from "../../../structures/IPageAttendanceStudent";

/**
 * Create new student (attendance_student) record.
 *
 * Creates new student profile in attendance_student: school_id (required FK),
 * classroom_id (required), parent_id (optional), auth_account_id (required),
 * name, gender, birthdate. Ensures each student has unique auth_account, and
 * parent links are validated. On duplicate auth_account or other FK error,
 * returns 409 or 422. Only admin or teacher may create students. On success,
 * full student object returned.
 *
 * @param props.connection
 * @param props.body Student data for creation (enrollment/register)
 * @path /attendance/students
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Student data for creation (enrollment/register) */
    body: IAttendanceStudent.ICreate;
  };
  export type Body = IAttendanceStudent.ICreate;
  export type Response = IAttendanceStudent;

  export const METADATA = {
    method: "POST",
    path: "/attendance/students",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/students";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStudent => typia.random<IAttendanceStudent>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Paginated, searchable student list (attendance_student).
 *
 * Lists students using paginated/search/filter parameters. Accepts school_id,
 * parent_id, classroom_id, and search term (name or email/phone), with
 * limit/offset and sorting for dashboard or parent view. Parent role is
 * restricted to their own children. Teachers and admins see students in their
 * class/school. Handles authorization. Pagination must be supported (limit,
 * offset/next page), and search by relevant fields enabled. Related:
 * create/update/delete endpoints for students. Response: array of students plus
 * pagination block.
 *
 * @param props.connection
 * @param props.body Student query parameters (pagination, search, filter)
 * @path /attendance/students
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Student query parameters (pagination, search, filter) */
    body: IAttendanceStudent.IRequest;
  };
  export type Body = IAttendanceStudent.IRequest;
  export type Response = IPageAttendanceStudent;

  export const METADATA = {
    method: "PATCH",
    path: "/attendance/students",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/students";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageAttendanceStudent => typia.random<IPageAttendanceStudent>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get single student (attendance_student) by id.
 *
 * Returns core information for a given student by attendance_student.id (UUID
 * PK). Includes profile, parent, classroom info. Only accessible by
 * admin/teacher/parent role (parent can only see own child). If record is
 * missing, 404 error. Disallows cross-organization access (school_id match
 * enforced except admin). Related: patch for list, post for new registration,
 * put for update, delete for removal.
 *
 * @param props.connection
 * @param props.id Attendance student id (UUID PK) to fetch
 * @path /attendance/students/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Attendance student id (UUID PK) to fetch */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceStudent;

  export const METADATA = {
    method: "GET",
    path: "/attendance/students/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/students/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStudent => typia.random<IAttendanceStudent>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Replace a student (attendance_student) by id.
 *
 * Replaces student record with provided data by id (UUID PK). Accepts all
 * teacher-operable fields: school_id, classroom_id, parent_id, auth_account_id,
 * name, gender, birthdate. Validates all FKs and uniqueness constraints
 * (auth_account). Authorization restricted to admins/teachers only, and school
 * org constraint enforced. On success, returns updated student record. Errors:
 * 404 (not found), 409 (conflict), 403 (forbidden).
 *
 * @param props.connection
 * @param props.id Attendance student id to update (UUID PK)
 * @param props.body Student replacement data (all core fields)
 * @path /attendance/students/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Attendance student id to update (UUID PK) */
    id: string & tags.Format<"uuid">;

    /** Student replacement data (all core fields) */
    body: IAttendanceStudent.IUpdate;
  };
  export type Body = IAttendanceStudent.IUpdate;
  export type Response = IAttendanceStudent;

  export const METADATA = {
    method: "PUT",
    path: "/attendance/students/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/attendance/students/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStudent => typia.random<IAttendanceStudent>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a student record (attendance_student) by id.
 *
 * Deletes attendance_student record by id. Only admin or relevant teacher can
 * perform. Checks for classroom/parent/attendance history dependencies.
 * Deletion may be soft (mark inactive) or hard per policy. On success, returns
 * deleted entity as confirmation (or null). Error for not found, or conflict if
 * not allowed due to data links. Related endpoints: student post/patch/put.
 *
 * @param props.connection
 * @param props.id Attendance student id to delete (UUID PK)
 * @path /attendance/students/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Attendance student id to delete (UUID PK) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceStudent;

  export const METADATA = {
    method: "DELETE",
    path: "/attendance/students/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/students/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceStudent => typia.random<IAttendanceStudent>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

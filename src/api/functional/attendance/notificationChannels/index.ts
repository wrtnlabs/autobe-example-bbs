import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttendanceNotificationChannel } from "../../../structures/IAttendanceNotificationChannel";
import { IPageIAttendanceNotificationChannel } from "../../../structures/IPageIAttendanceNotificationChannel";

/**
 * Create a new notification channel route (attendance_notification_channel).
 *
 * This API allows the authenticated user (or admin on their behalf) to create a
 * new delivery route entry for notification preferences in the
 * attendance_notification_channel table. The request body contains required
 * atomic fields: student_id, channel_type (such as app_push, sms, email),
 * is_enabled boolean, and preference_order integer; parent_id may be set if a
 * guardian profile is being created or updated. All provided FKs are validated
 * for existence/ownership, and a unique constraint on (student_id, parent_id,
 * channel_type) is enforced. Typical use cases include new account onboarding
 * (auto-create app/SMS), parent granting SMS authorization, or school
 * administrator provisioning default contact routes. Errors returned include
 * privilege errors (for users trying to create channels for others), invalid
 * FKs, or uniqueness violations. On success, the fully normalized channel entry
 * is returned for immediate use in settings UIs or confirmation modals.
 *
 * @param props.connection
 * @param props.body Atomic parameters for channel creation (association, type,
 *   enable, order).
 * @path /attendance/notificationChannels
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Atomic parameters for channel creation (association, type, enable,
     * order).
     */
    body: IAttendanceNotificationChannel.ICreate;
  };
  export type Body = IAttendanceNotificationChannel.ICreate;
  export type Response = IAttendanceNotificationChannel;

  export const METADATA = {
    method: "POST",
    path: "/attendance/notificationChannels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/notificationChannels";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceNotificationChannel =>
    typia.random<IAttendanceNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search notification channel settings (attendance_notification_channel).
 *
 * This API retrieves a list of notification channel configurations as stored in
 * attendance_notification_channel for a user's accessible scope (their own
 * settings for parents/students; class/school for admin; their children's
 * channels for parent). The client may supply search parameters (channel_type,
 * status/is_enabled, preference_order filter, student_id or parent_id), and
 * results must be paginated and sortable. All returned channel records contain
 * only normalized atomic data (presented ID fields for FK bound entities,
 * enable state, channel type, and preference order). The endpoint strictly
 * limits access to only authorized records based on the role and authenticated
 * user. Used for profile and delivery settings UIs, troubleshooting
 * notification issues, and bulk analytics. Returns standard page metadata
 * (total count, current page, total pages, etc.) and list of matching channel
 * records.
 *
 * @param props.connection
 * @param props.body Query/search parameters, paging, and filters for
 *   notification channels.
 * @path /attendance/notificationChannels
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Query/search parameters, paging, and filters for notification
     * channels.
     */
    body: IAttendanceNotificationChannel.IRequest;
  };
  export type Body = IAttendanceNotificationChannel.IRequest;
  export type Response = IPageIAttendanceNotificationChannel;

  export const METADATA = {
    method: "PATCH",
    path: "/attendance/notificationChannels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/notificationChannels";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAttendanceNotificationChannel =>
    typia.random<IPageIAttendanceNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a specific notification channel by ID
 * (attendance_notification_channel).
 *
 * This API retrieves a single attendance notification channel by its unique
 * identifier, as found in the attendance_notification_channel table. It returns
 * the atomic, normalized settings for channel delivery for the target
 * student/parent association, including channel type (push/SMS/email),
 * enable/disable state, and order of preference. Access is limited such that
 * students or their parents can only read their own channel records; admins or
 * school officials may fetch by global ID to support troubleshooting, settings
 * editing, or compliance audits. Errors returned include not found, permission
 * denied, and referential integrity errors for ID mismatches.
 *
 * @param props.connection
 * @param props.id Target notification channel's unique identifier (UUID).
 * @path /attendance/notificationChannels/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target notification channel's unique identifier (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceNotificationChannel;

  export const METADATA = {
    method: "GET",
    path: "/attendance/notificationChannels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/notificationChannels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceNotificationChannel =>
    typia.random<IAttendanceNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a notification channel's details (attendance_notification_channel).
 *
 * This API allows modification of the atomic details of a notification channel
 * delivery route, keyed by its UUID. The user submits a payload
 * (IAttendanceNotificationChannel.IUpdate) that may include new values for
 * is_enabled, channel_type, or preference_order, as well as an updated
 * parent_id if the parental guardian association changes. The role and
 * ownership of the user is always checked to limit the scope only to settings
 * the user can edit (own/student profile, own child for parents, or by admin).
 * Constraints on FK integrity, unique keys (student+channel+parent), and
 * allowed channel_type are enforced. Errors are returned for privilege
 * violations, business logic errors, or referential integrity issues. Updates
 * are audit-logged for regulatory compliance. The response always contains the
 * up-to-date, fully atomic and normalized entry for the notification channel.
 *
 * @param props.connection
 * @param props.id Target notification channel route's unique identifier (UUID)
 *   to update.
 * @param props.body Fields for channel update (atomic, only allowed fields).
 * @path /attendance/notificationChannels/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /**
     * Target notification channel route's unique identifier (UUID) to
     * update.
     */
    id: string & tags.Format<"uuid">;

    /** Fields for channel update (atomic, only allowed fields). */
    body: IAttendanceNotificationChannel.IUpdate;
  };
  export type Body = IAttendanceNotificationChannel.IUpdate;
  export type Response = IAttendanceNotificationChannel;

  export const METADATA = {
    method: "PUT",
    path: "/attendance/notificationChannels/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/attendance/notificationChannels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceNotificationChannel =>
    typia.random<IAttendanceNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a notification channel setting by ID
 * (attendance_notification_channel).
 *
 * This endpoint deletes a specific notification channel (by UUID) for a
 * student/parent. Used to remove an unwanted or invalid delivery route for
 * push, SMS, or email (for instance, after phone loss, app uninstalled, or
 * contact detail changed). Strict referential and business logic constraints
 * enforced: only admins or the channel owner (student/parent) may delete. The
 * deletion is either soft (mark as inactive) or hard (FK permitting), depending
 * on policy and presence of dependent notification history records. Errors
 * include not found, FK constraint failure, or privilege errors. All deletions
 * are logged for compliance/audit. On success, the endpoint returns a status or
 * the deleted record snapshot (can be used for undo purposes or client UI
 * update).
 *
 * @param props.connection
 * @param props.id Target notification channel's unique UUID to remove.
 * @path /attendance/notificationChannels/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target notification channel's unique UUID to remove. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceNotificationChannel.IDeleteResponse;

  export const METADATA = {
    method: "DELETE",
    path: "/attendance/notificationChannels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/notificationChannels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceNotificationChannel.IDeleteResponse =>
    typia.random<IAttendanceNotificationChannel.IDeleteResponse>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

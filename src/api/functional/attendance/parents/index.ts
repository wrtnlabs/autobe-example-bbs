import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttendanceParent } from "../../../structures/IAttendanceParent";
import { IPageAttendanceParent } from "../../../structures/IPageAttendanceParent";

/**
 * Attendance_parent 엔터티 신규 생성(회원가입) API.
 *
 * Attendance_parent 테이블의 신규 학부모(보호자) 회원 생성 API입니다. 필수 입력값(인증 계정 ID, 이름, 이메일,
 * 연락처)을 JSON 오브젝트로 받고, 등록 성공 시 생성된 attendance_parent 오브젝트가 반환됩니다. 생성 시 유니크
 * 제약(이메일, auth_account_id) 위반시 409 에러 반환, 사업적 보안정책(본인 인증 등)은 별도 엔드포인트와 분리하여 본
 * API는 정보 등록/응답까지만 제공합니다.
 *
 * @param props.connection
 * @param props.body 학부모 회원 생성 요청 오브젝트
 * @path /attendance/parents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** 학부모 회원 생성 요청 오브젝트 */
    body: IAttendanceParent.ICreate;
  };
  export type Body = IAttendanceParent.ICreate;
  export type Response = IAttendanceParent;

  export const METADATA = {
    method: "POST",
    path: "/attendance/parents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/parents";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceParent => typia.random<IAttendanceParent>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Paginated/search for parent/guardian list (attendance_parent).
 *
 * Returns paginated, filtered list of parent/guardian entities. Input: school
 * filter, name, email/phone search, child(student) lookup, pagination/sort.
 * Only admin role may query full list; teachers may query parents of their
 * students only. Parents may not call this. Handles data privacy: restricts
 * sensitive info if caller is teacher and not admin. Related endpoints: post
 * for registration, patch for batch/advanced search, get for detail.
 *
 * @param props.connection
 * @param props.body Parent/guardian search and list filter query
 * @path /attendance/parents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Parent/guardian search and list filter query */
    body: IAttendanceParent.IRequest;
  };
  export type Body = IAttendanceParent.IRequest;
  export type Response = IPageAttendanceParent;

  export const METADATA = {
    method: "PATCH",
    path: "/attendance/parents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/parents";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageAttendanceParent => typia.random<IPageAttendanceParent>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Attendance_parent 테이블의 부모 상세 정보 반환 API.
 *
 * 이 API는 attendance_parent 테이블의 주요 필드와 참조관계(학생 정보 등)를 상세하게 반환합니다. 개인정보 보호를 위해
 * 호출자의 인증/권한을 체크해야 하며, 본인의 정보 또는 관리자로 인증된 경우에만 응답이 반환됩니다. 개인정보 제공에 따른 보호, 이력관리,
 * 감사로그 등 서비스 정책을 철저히 반영합니다.
 *
 * @param props.connection
 * @param props.id 상세 정보를 조회할 대상 부모(학부모)의 UUID, attendance_parent 엔터티의 PK
 * @path /attendance/parents/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** 상세 정보를 조회할 대상 부모(학부모)의 UUID, attendance_parent 엔터티의 PK */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceParent;

  export const METADATA = {
    method: "GET",
    path: "/attendance/parents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/parents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceParent => typia.random<IAttendanceParent>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Attendance_parent 엔터티 정보 수정 API.
 *
 * 특정 attendance_parent(학부모)의 개인정보(이름, 메일, 연락처 등)를 JSON 오브젝트로 부분/전체 수정합니다. 요청자는
 * 본인 또는 권한 있는 관리자여야 하며, 민감정보 접근 이력은 감사 로그에 자동 기록해야 합니다. 성공 시 업데이트된
 * attendance_parent 오브젝트가 반환됩니다.
 *
 * @param props.connection
 * @param props.id 수정 대상 부모(학부모) UUID (Primary Key)
 * @param props.body 수정할 학부모 정보 오브젝트
 * @path /attendance/parents/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** 수정 대상 부모(학부모) UUID (Primary Key) */
    id: string & tags.Format<"uuid">;

    /** 수정할 학부모 정보 오브젝트 */
    body: IAttendanceParent.IUpdate;
  };
  export type Body = IAttendanceParent.IUpdate;
  export type Response = IAttendanceParent;

  export const METADATA = {
    method: "PUT",
    path: "/attendance/parents/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/attendance/parents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceParent => typia.random<IAttendanceParent>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Attendance_parent 엔터티 삭제(탈퇴) API.
 *
 * Attendance_parent(학부모/보호자) 엔터티의 삭제(탈퇴) API입니다. 인증된 본인 또는 관리자만이 호출 가능하며, 실제
 * 요구에 따라 soft delete(논리삭제) 또는 완전 삭제 지원이 필요합니다. 연관 데이터/자녀 매핑/알림 이력등의 트랜잭션 처리 지정
 * 필요. 성공 시 삭제 완료 응답 또는 삭제된 attendance_parent object 혹은 204 No Content가 반환됩니다.
 *
 * @param props.connection
 * @param props.id 삭제/탈퇴할 부모(학부모)의 UUID (Primary Key)
 * @path /attendance/parents/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** 삭제/탈퇴할 부모(학부모)의 UUID (Primary Key) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceParent;

  export const METADATA = {
    method: "DELETE",
    path: "/attendance/parents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/parents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceParent => typia.random<IAttendanceParent>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

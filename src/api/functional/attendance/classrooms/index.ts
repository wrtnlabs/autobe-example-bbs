import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttendanceClassroom } from "../../../structures/IAttendanceClassroom";
import { IPageIAttendanceClassroom } from "../../../structures/IPageIAttendanceClassroom";
import { IDeleteResult } from "../../../structures/IDeleteResult";

/**
 * Create a new classroom (attendance_classroom table).
 *
 * Adds a new classroom to the system, as managed by the attendance_classroom
 * table. Input must include a valid school_id, teacher_id, unique classroom
 * name for that school, and grade level. Only admin or teacher users can access
 * this operation, with authentication via bearer token. The service enforces
 * all key constraints and uniqueness within the given school. On success, the
 * complete classroom record, including its assigned ID and audit timestamps, is
 * returned. This endpoint is integral to onboarding new classes and enabling
 * teacher dashboard configuration or grade/year transitions. Input errors, FK
 * violations, or uniqueness conflicts are returned with detailed error
 * responses.
 *
 * @param props.connection
 * @param props.body Classroom creation data (school, teacher, name, grade).
 * @path /attendance/classrooms
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Classroom creation data (school, teacher, name, grade). */
    body: IAttendanceClassroom.ICreate;
  };
  export type Body = IAttendanceClassroom.ICreate;
  export type Response = IAttendanceClassroom;

  export const METADATA = {
    method: "POST",
    path: "/attendance/classrooms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/classrooms";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceClassroom => typia.random<IAttendanceClassroom>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search classrooms (attendance_classroom table).
 *
 * Returns a list of classrooms based on search, filter, and pagination
 * parameters. The underlying attendance_classroom table is atomic and
 * normalized, so this endpoint may filter by school, teacher, grade level, or
 * other search criteria. Input supports page size, page number/offset, and sort
 * options. Only information directly from the attendance_classroom table and
 * valid reference lookups is returnedâ€”no derived statistics. Accessible to
 * teachers and admins with appropriate roles, enforced via bearer token
 * authentication. The endpoint enables frontends to build listing UI, such as
 * classroom directories and management panels. Supports error handling for
 * out-of-bounds pages or invalid filters.
 *
 * @param props.connection
 * @param props.body Search, filter and pagination info for classroom list.
 * @path /attendance/classrooms
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter and pagination info for classroom list. */
    body: IAttendanceClassroom.IRequest;
  };
  export type Body = IAttendanceClassroom.IRequest;
  export type Response = IPageIAttendanceClassroom;

  export const METADATA = {
    method: "PATCH",
    path: "/attendance/classrooms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attendance/classrooms";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAttendanceClassroom => typia.random<IPageIAttendanceClassroom>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific classroom by ID (attendance_classroom table).
 *
 * Gets the complete record for a single classroom using its unique ID (primary
 * key in attendance_classroom). This operation is accessible to authorized
 * users with either teacher or admin privileges, secured by bearer token
 * authentication. The endpoint strictly returns only atomic classroom fields
 * (ID, name, grade, school reference, teacher reference, etc.) and does not
 * include embedded lists of students or derived data. Intended for use cases
 * such as class editor panels, teacher dashboards, and context lookups for
 * classroom detail screens. Errors are returned for invalid IDs or access
 * denied situations. Use this endpoint for detail views or update flows in the
 * frontend UI.
 *
 * @param props.connection
 * @param props.id Target classroom's unique ID
 * @path /attendance/classrooms/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target classroom's unique ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAttendanceClassroom;

  export const METADATA = {
    method: "GET",
    path: "/attendance/classrooms/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/classrooms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceClassroom => typia.random<IAttendanceClassroom>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a classroom (attendance_classroom table).
 *
 * Modifies the name, lead teacher, or grade of a classroom, referenced by its
 * unique ID. Only users with teacher or admin roles are permitted, enforced by
 * bearer authentication. The service checks all FKs (school_id, teacher_id),
 * ensures the intended name remains unique within its school, and rejects
 * updates violating business or DB constraints. A successful update returns the
 * new state of the classroom entity. All updates are logged for audit trail,
 * supporting rollbacks and change history. Use for year transitions, teacher
 * reassignments, or error corrections. Returns error if FK not found or
 * constraints are violated.
 *
 * @param props.connection
 * @param props.id Target classroom's unique ID
 * @param props.body Classroom update data (name, teacher, grade, etc).
 * @path /attendance/classrooms/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target classroom's unique ID */
    id: string & tags.Format<"uuid">;

    /** Classroom update data (name, teacher, grade, etc). */
    body: IAttendanceClassroom.IUpdate;
  };
  export type Body = IAttendanceClassroom.IUpdate;
  export type Response = IAttendanceClassroom;

  export const METADATA = {
    method: "PUT",
    path: "/attendance/classrooms/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/attendance/classrooms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttendanceClassroom => typia.random<IAttendanceClassroom>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a classroom (attendance_classroom table).
 *
 * Removes a classroom identified by its unique ID (from attendance_classroom
 * table). Only admin or teacher accounts with sufficient privileges may perform
 * this operation, which is authenticated with a bearer token. Before deletion,
 * the service must ensure that referential constraints are respected. If
 * permitted by system policy, associated records (such as attendance or
 * students) may be reassigned or deleted as well. The operation logs all events
 * in the audit log table for transparency and compliance. Upon success, the
 * endpoint returns confirmation; otherwise, it delivers detailed errors
 * explaining why deletion is not possible (such as FK violation or policy
 * restriction).
 *
 * @param props.connection
 * @param props.id Target classroom's unique ID
 * @path /attendance/classrooms/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target classroom's unique ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/attendance/classrooms/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/attendance/classrooms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IDeleteResult =>
    typia.random<IDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

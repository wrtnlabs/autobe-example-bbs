import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICategory } from "../../../structures/ICategory";
import { IPageICategory } from "../../../structures/IPageICategory";

/**
 * Create a new category in the 'categories' table.
 *
 * Creates a new category record, with required fields such as name,
 * description, and metadata. The system enforces unique name constraints and
 * checks permissions (admin/moderator only by requirements).
 *
 * Validation checks include non-empty name, appropriate character sets, and
 * uniqueness. Audit fields record the creator and timestamps. Categories
 * created become available for thread assignment forum-wide. Error states cover
 * invalid/duplicate name, permission failures, and system errors. This
 * operation is paired with patch (list/search), get (details), put (update),
 * and delete (remove) for comprehensive category management.
 *
 * @param props.body Details required to create a new category (name,
 *   description, etc.).
 * @path /categoriesTags/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details required to create a new category (name, description, etc.). */
    body: ICategory.ICreate;
  };
  export type Body = ICategory.ICreate;
  export type Response = ICategory;

  export const METADATA = {
    method: "POST",
    path: "/categoriesTags/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/categoriesTags/categories";
  export const random = (g?: Partial<typia.IRandomGenerator>): ICategory =>
    typia.random<ICategory>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search, filter, and paginate categories from the 'categories' table.
 *
 * This endpoint lets clients (users, admins, moderators) list all categories
 * available on the platform for threads. Each category, such as 'Politics' or
 * 'Economics', is stored in the 'categories' Prisma table. Supported filters
 * include searching by category name (partial match), status (active/archived),
 * and sorting by create/update date.
 *
 * Pagination is supported for scalability, especially when many categories are
 * present. Access control is enforced (e.g., only admins/moderators can view
 * archived/deleted categories). This endpoint is central for navigation,
 * discovery, and category management. Related endpoints include GET (details),
 * POST (create), PUT (update), DELETE (remove) for categories.
 *
 * @param props.body Search criteria, pagination, and sorting options for
 *   categories.
 * @path /categoriesTags/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search criteria, pagination, and sorting options for categories. */
    body: ICategory.IRequest;
  };
  export type Body = ICategory.IRequest;
  export type Response = IPageICategory;

  export const METADATA = {
    method: "PATCH",
    path: "/categoriesTags/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/categoriesTags/categories";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageICategory =>
    typia.random<IPageICategory>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details of a category by ID from the 'categories' table.
 *
 * Retrieves a specific category record, including name, description,
 * creation/update timestamps, and soft-delete status. Security restrictions may
 * limit access to non-archived categories (for regular users). Admins and
 * moderators may see all states. If the requested ID doesn't exist or is not
 * accessible due to permissions, appropriate errors will be returned (404 or
 * 403).
 *
 * This endpoint allows detailed inspection for settings, UI, or admin
 * configuration and complements patch (list/search), post (create), put
 * (update), and delete (remove) endpoints for category management.
 *
 * @param props.id Category unique identifier.
 * @path /categoriesTags/categories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Category unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICategory;

  export const METADATA = {
    method: "GET",
    path: "/categoriesTags/categories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/categoriesTags/categories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICategory =>
    typia.random<ICategory>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a category by ID in the 'categories' table.
 *
 * Updates an existing category record, changing attributes like name,
 * description, or status. Restricted to moderators/admins; regular users have
 * no access. Unique name constraints are validated; audit trail records last
 * modifier/time. Edits are reflected immediately across the platform for
 * navigation and thread assignment.
 *
 * Paired endpoints: patch for listing, get for detail, post for creating,
 * delete for removing categories. Errors include not found, permission denied,
 * duplicate name, or invalid data.
 *
 * @param props.id Category unique identifier.
 * @param props.body Fields to update for the category.
 * @path /categoriesTags/categories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Category unique identifier. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the category. */
    body: ICategory.IUpdate;
  };
  export type Body = ICategory.IUpdate;
  export type Response = ICategory;

  export const METADATA = {
    method: "PUT",
    path: "/categoriesTags/categories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/categoriesTags/categories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICategory =>
    typia.random<ICategory>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a category by ID from the 'categories' table.
 *
 * Deletes a category by unique ID, removing it from active assignment for
 * threads. Per requirements and schema documentation, the operation is
 * soft-delete (marks deleted_at for audit/evidence). Associated threads are
 * retained but will no longer be assignable to the deleted category.
 *
 * Security checks ensure only elevated roles (admins, mods) can perform
 * deletions; proper logging and error handling apply. Related endpoints: patch
 * (list/search), get (details), post (create), put (update).
 *
 * @param props.id Category unique identifier.
 * @path /categoriesTags/categories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Category unique identifier. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/categoriesTags/categories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/categoriesTags/categories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdministrator } from "../../../structures/IDiscussionBoardAdministrator";
import { IPageIDiscussionBoardAdministrator } from "../../../structures/IPageIDiscussionBoardAdministrator";

/**
 * Assign administrator role to member (create discussion_board_administrators).
 *
 * This endpoint lets system administrators assign the administrator role to a
 * member, granting managerial privileges. Request body must include member ID,
 * rationale/context (optional). Duplicates (user is already admin) yield an
 * error. Successful assignments link the admin record to the member, fill
 * assigned_at, and may dispatch onboarding notifications. Assignment is
 * reflected in all audit trails and UI dashboards. The full admin-member
 * relationship object is returned, including history and reversible status. Use
 * for RBAC management, role escalation, and compliance workflows. All attempts
 * and assignments are logged per audit policy.
 *
 * @param props.connection
 * @param props.body Administrator assignment information (member ID,
 *   rationale/context).
 * @path /discussionBoard/administrators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Administrator assignment information (member ID, rationale/context). */
    body: IDiscussionBoardAdministrator.ICreate;
  };
  export type Body = IDiscussionBoardAdministrator.ICreate;
  export type Response = IDiscussionBoardAdministrator;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/administrators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/administrators";
  export const random = (): IDiscussionBoardAdministrator =>
    typia.random<IDiscussionBoardAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search all administrator assignments (discussion_board_administrators)
 * with filtering/pagination.
 *
 * Retrieve a paginated, filtered list of all administrator assignments. Filters
 * may include status (active/revoked), time-window, or member-related fields
 * for audit and UI display. Administrators can use the listing for role
 * management, board oversight, and compliance tracking. Full member linkage is
 * included for each returned administrator, allowing resolution to the
 * constituent user account and all relevant assignment fields. Pagination
 * supported with default/supplied page size and offset. If no results, returns
 * an empty array. Only accessible by administrator role. Input validation
 * applies for filters/pagination parameters. Used for admin dashboards, audit
 * logs, and compliance overviews.
 *
 * @param props.connection
 * @param props.body Filters, search, and pagination data for administrator
 *   list.
 * @path /discussionBoard/administrators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filters, search, and pagination data for administrator list. */
    body: IDiscussionBoardAdministrator.IRequest;
  };
  export type Body = IDiscussionBoardAdministrator.IRequest;
  export type Response = IPageIDiscussionBoardAdministrator;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/administrators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/administrators";
  export const random = (): IPageIDiscussionBoardAdministrator =>
    typia.random<IPageIDiscussionBoardAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get administrator assignment/details (discussion_board_administrators) by ID.
 *
 * Administrators use this endpoint to fetch details of an administrator
 * assignment, including the associated member's account data. Useful for
 * internal audit, compliance, or management panels. The endpoint
 * cross-references membership status, assignment, and revocation history. The
 * result object includes the admin record, member profile, timestamps. If the
 * admin record is deactivated, this is reflected in the status. The operation
 * is strictly RBAC-protected to prevent unauthorized discovery. Attempts to
 * access non-existent IDs return 404 errors, with all access/actions logged for
 * audit compliance.
 *
 * @param props.connection
 * @param props.id Target administrator assignment ID (UUID).
 * @path /discussionBoard/administrators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target administrator assignment ID (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAdministrator;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/administrators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/administrators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAdministrator =>
    typia.random<IDiscussionBoardAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update/revoke administrator assignment (discussion_board_administrators) by
 * ID.
 *
 * This endpoint enables system administrators to update an administrator role
 * assignmentâ€”such as revoking privileges, updating administrative
 * notes/context, or reactivating an admin after a cooldown. The operation also
 * manages transitions between statuses (active/revoked). If revoking, the
 * revoked_at field is set, and the assignment becomes non-active in RBAC. The
 * response shows the full admin assignment, member, and updated state. Attempts
 * to update a non-existent, already revoked/deleted, or unauthorized assignment
 * return errors. Operations are restricted to administrator role and must be
 * fully logged.
 *
 * @param props.connection
 * @param props.id Target administrator assignment ID (UUID) to update.
 * @param props.body Administrator assignment update data (fields allowed by
 *   business rules).
 * @path /discussionBoard/administrators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target administrator assignment ID (UUID) to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator assignment update data (fields allowed by business
     * rules).
     */
    body: IDiscussionBoardAdministrator.IUpdate;
  };
  export type Body = IDiscussionBoardAdministrator.IUpdate;
  export type Response = IDiscussionBoardAdministrator;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/administrators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/administrators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAdministrator =>
    typia.random<IDiscussionBoardAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (revoke/remove) administrator assignment
 * (discussion_board_administrators) by ID.
 *
 * When called, this endpoint revokes and soft-deletes the specified
 * administrator assignment. Sets appropriate fields (revoked_at, deleted_at)
 * and disables admin role in RBAC. Audit/history are fully preserved in the
 * database. The action is only RBAC-available to current administrators. No
 * direct effect on the linked member, unless deleted separately. Attempts
 * against non-existent allocations or double-deletes yield errors. The endpoint
 * supports audit dashboards and management workflows, returning 204 on
 * successful soft-delete, or a suitable error otherwise. Action triggers event
 * logs and notifications as part of compliance sourc
 *
 * @param props.connection
 * @param props.id Target administrator assignment ID (UUID) to revoke/delete.
 * @path /discussionBoard/administrators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target administrator assignment ID (UUID) to revoke/delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/administrators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/administrators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

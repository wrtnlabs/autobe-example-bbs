import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardWarning } from "../../../structures/IDiscussionBoardWarning";
import { IPageIDiscussionBoardWarning } from "../../../structures/IPageIDiscussionBoardWarning";

/**
 * Create a new warning record in the discussion_board_warning table.
 *
 * This API endpoint enables staff to issue a formal warning to a user. Each
 * warning must specify the subject user, issuing moderator, the warning reason,
 * and records the issuance time. It is designed as a transparent and auditable
 * workflow, supporting future escalation logic (such as moving from warning to
 * ban after repeated offenses). The creation of a warning triggers relevant
 * notifications and can optionally reference related moderation actions for
 * full traceability. Proper validation is enforced for user roles and foreign
 * key integrity. Error handling is included for invalid users or authorization
 * issues. Closely related endpoints include viewing, editing, and deleting
 * warnings, as well as user ban and moderation event logs.
 *
 * @param props.connection
 * @param props.body Details for creating a warning record, referencing the
 *   subject user, moderator, reason, and any related moderation action.
 * @path /discussionBoard/warnings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Details for creating a warning record, referencing the subject user,
     * moderator, reason, and any related moderation action.
     */
    body: IDiscussionBoardWarning.ICreate;
  };
  export type Body = IDiscussionBoardWarning.ICreate;
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/warnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/warnings";
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter warnings issued to users (discussion_board_warning table).
 *
 * This operations supports listing, filtering, and paginating warning records
 * based on criteria such as target user, moderator, reason, or time range.
 * Directly references the normalized warning records in
 * discussion_board_warning, used for audit, escalation handling, or moderation
 * analytics. Business rules enforce moderator/admin access. Used together with
 * detail and update endpoints for full warning workflow control.
 *
 * @param props.connection
 * @param props.body Search/filter/pagination data to find warnings by
 *   moderator, subject, date, or reason
 * @path /discussionBoard/warnings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Search/filter/pagination data to find warnings by moderator, subject,
     * date, or reason
     */
    body: IDiscussionBoardWarning.IRequest;
  };
  export type Body = IDiscussionBoardWarning.IRequest;
  export type Response = IPageIDiscussionBoardWarning;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/warnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/warnings";
  export const random = (): IPageIDiscussionBoardWarning =>
    typia.random<IPageIDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific warning record from the discussion_board_warning table by ID.
 *
 * This endpoint enables retrieval of a specific warning record using its unique
 * ID field, referencing the discussion_board_warning schema. It is commonly
 * used for auditing, displaying the reason and timestamp, and showing which
 * moderator issued the warning. Access may be restricted to the warned user,
 * moderators, or administrators, depending on role-based permissions. The
 * endpoint validates the existence of the warning and properly handles not
 * found errors, ensuring clear responses in line with moderation transparency
 * policies described in the requirements documentation. Related endpoints
 * include creation and update operations for warning records, as well as audit
 * logging endpoints for moderation actions.
 *
 * @param props.connection
 * @param props.id Warning record's unique identifier (UUID).
 * @path /discussionBoard/warnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Warning record's unique identifier (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/warnings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/warnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific warning record in the discussion_board_warning table by ID.
 *
 * This endpoint updates the information of a warning record identified by its
 * ID. Typical use cases include correcting the warning reason, amending
 * involved moderator, or associating the warning record with an updated
 * moderation action. It checks for proper authorization and ensures all
 * business and validation rules regarding warning updates are enforced, such as
 * only allowing changes before further escalation actions occur. Related
 * endpoints are create (POST), retrieve (GET), and delete operations for
 * warnings, as well as audit logs for moderation actions and warnings.
 *
 * @param props.connection
 * @param props.id Warning record's unique identifier (UUID).
 * @param props.body Information to update in the warning record.
 * @path /discussionBoard/warnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Warning record's unique identifier (UUID). */
    id: string & tags.Format<"uuid">;

    /** Information to update in the warning record. */
    body: IDiscussionBoardWarning.IUpdate;
  };
  export type Body = IDiscussionBoardWarning.IUpdate;
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/warnings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/warnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific warning record by ID (soft delete, discussion_board_warning
 * table).
 *
 * This endpoint allows for the deletion (typically soft delete) of a warning
 * record, given its unique ID. Permissions checks are enforced so that only
 * appropriate moderators or administrators can delete warning records. The
 * deletion maintains audit compliance by not physically removing records but
 * instead marking them as deleted. Related functionality includes appeal
 * workflows, as well as account recovery in the case of a reversed moderation
 * decision. This method complements warning creation and update endpoints and
 * is linked in the moderation action trail for system transparency.
 *
 * @param props.connection
 * @param props.id Warning record's unique identifier (UUID).
 * @path /discussionBoard/warnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Warning record's unique identifier (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/warnings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/warnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

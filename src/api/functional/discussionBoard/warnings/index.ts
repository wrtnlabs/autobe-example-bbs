import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardWarning } from "../../../structures/IDiscussionBoardWarning";
import { IPageIDiscussionBoardWarning } from "../../../structures/IPageIDiscussionBoardWarning";

/**
 * Create a new user warning (discussion_board_warnings table).
 *
 * Enables a moderator or administrator to create a new warning for a member,
 * specifying moderator, warning type, message, and expiration. Entry is
 * persisted as immutable record for escalation purposes.
 *
 * Creation is audited and only possible by authorized roles as enforced by
 * middleware and application logic. All relationships and status are validated
 * during creation.
 *
 * @param props.connection
 * @param props.body Details of the warning to create.
 * @path /discussionBoard/warnings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details of the warning to create. */
    body: IDiscussionBoardWarning.ICreate;
  };
  export type Body = IDiscussionBoardWarning.ICreate;
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/warnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/warnings";
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of user warnings (discussion_board_warnings table).
 *
 * Retrieves a searchable and paged list of user warnings issued by moderators.
 * Allows filtering by member, moderator, type, timeframe, or expiration.
 * Primarily used by moderators and administrators for escalation, trend
 * analysis, and policy compliance.
 *
 * Linked to the discussion_board_warnings schema in Prisma. Enforces search and
 * filtering criteria, returning only authorized details and respecting soft
 * deletion and expiry states.
 *
 * Authorization required for access, with all actions logged.
 *
 * @param props.connection
 * @param props.body Filtering and pagination settings for warning entries.
 * @path /discussionBoard/warnings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering and pagination settings for warning entries. */
    body: IDiscussionBoardWarning.IRequest;
  };
  export type Body = IDiscussionBoardWarning.IRequest;
  export type Response = IPageIDiscussionBoardWarning;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/warnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/warnings";
  export const random = (): IPageIDiscussionBoardWarning =>
    typia.random<IPageIDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific user warning by ID (discussion_board_warnings table).
 *
 * Fetches details for a single user warning record, including moderator,
 * member, warning type, message, timestamps, and expiration. Used by moderators
 * and administrators to review warning status and take action.
 *
 * References the discussion_board_warnings entity per Prisma schema. Access is
 * restricted and all accesses are logged per security policy.
 *
 * @param props.connection
 * @param props.id Unique identifier of the warning entry to retrieve.
 * @path /discussionBoard/warnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the warning entry to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/warnings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/warnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a user warning by ID (discussion_board_warnings table).
 *
 * Permits a moderator or administrator to update any non-protected field of a
 * warning record, such as message or expiration time. Use case: expiring a
 * warning early or clarifying warning rationale. Requires record UUID for
 * identification and applies full audit rules as per non-functional
 * requirements.
 *
 * Update event is itself logged for compliance. Access and actions are
 * permission-checked and controlled based on the operator's role.
 *
 * @param props.connection
 * @param props.id Unique identifier of the warning entry to update.
 * @param props.body Fields to update in the warning entry.
 * @path /discussionBoard/warnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the warning entry to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update in the warning entry. */
    body: IDiscussionBoardWarning.IUpdate;
  };
  export type Body = IDiscussionBoardWarning.IUpdate;
  export type Response = IDiscussionBoardWarning;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/warnings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/warnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardWarning =>
    typia.random<IDiscussionBoardWarning>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user warning by ID (discussion_board_warnings table).
 *
 * Allows a moderator or administrator to soft-delete a user warning entry,
 * supporting audit and compliance requirements (records remain for historical
 * reference unless erased). Requires record UUID; deletion is logged and access
 * checked.
 *
 * Mistakenly deleted or expired warnings can be recovered administratively.
 * Attempts to delete without permission or for non-existent entries will result
 * in an error response.
 *
 * @param props.connection
 * @param props.id Unique identifier of the warning entry to delete.
 * @path /discussionBoard/warnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the warning entry to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardWarning.IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/warnings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/warnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardWarning.IDeleteResult =>
    typia.random<IDiscussionBoardWarning.IDeleteResult>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

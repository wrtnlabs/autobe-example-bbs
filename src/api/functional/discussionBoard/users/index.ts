import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardUser } from "../../../structures/IDiscussionBoardUser";
import { IPageIDiscussionBoardUser } from "../../../structures/IPageIDiscussionBoardUser";
import { IOperationStatus } from "../../../structures/IOperationStatus";

/**
 * Register a new user (discussion_board_user), enforcing uniqueness and secure
 * credential storage.
 *
 * The POST /discussionBoard/users endpoint handles the registration of new
 * users, creating a new entry in 'discussion_board_user'. Registration requires
 * unique username and email, with password provided as a properly pre-hashed
 * value by the presentation layer, which is never stored or transmitted in
 * plaintext. Upon registration, is_active can default as enabled or require
 * separate activation, depending on system policy. Creation and update
 * timestamps are recorded automatically, and soft deletion status starts as
 * null.
 *
 * Request body follows the 'ICreate' input contract, ensuring all database
 * integrity constraints (unique username/email, required fields, secure
 * password hash). Response includes all created user details except the
 * password hash (never exposed), aligning with privacy and security standards.
 *
 * Upon success, user profile and role assignment endpoints can be used to
 * further configure the account. Error handling covers conflict (duplicate
 * username/email), invalid input data, and potential RBAC restrictions.
 *
 * @param props.connection
 * @param props.body User registration input details.
 * @path /discussionBoard/users
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** User registration input details. */
    body: IDiscussionBoardUser.ICreate;
  };
  export type Body = IDiscussionBoardUser.ICreate;
  export type Response = IDiscussionBoardUser;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/users";
  export const random = (): IDiscussionBoardUser =>
    typia.random<IDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and filter user accounts using the discussion_board_user table,
 * supporting advanced search/pagination.
 *
 * The PATCH /discussionBoard/users endpoint enables the retrieval of a
 * paginated, filtered, and sorted list of user core records
 * ('discussion_board_user'), fulfilling the requirements for user management
 * found in core functionality and administrative business needs.
 *
 * It references the 'discussion_board_user' Prisma table, allowing for queries
 * based on a user's username, email, activation status, creation/update
 * timestamps, and soft deletion status. Administrators and moderators typically
 * use this endpoint to perform user account audits, trend analysis, and
 * onboarding checks.
 *
 * Security is critical and this endpoint should be restricted to users with
 * adequate administrative or moderation privileges, reflecting RBAC (Role-Based
 * Access Control) policies defined in policy docs. Use cases include finding
 * users by specific criteria, supporting mass actions via user selection, and
 * auditing platform growth.
 *
 * Expected request validation covers pagination (page, size), text search
 * (username, email), boolean filtering (is_active), temporal queries
 * (created_at, updated_at ranges), and status. Error handling includes improper
 * query structure, unauthorized access, and invalid filter values.
 *
 * Interoperates with the user creation, read, update, and delete endpoints, and
 * may be referenced after bulk moderation operations or role changes.
 *
 * @param props.connection
 * @param props.body User search and pagination criteria for listing users.
 * @path /discussionBoard/users
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** User search and pagination criteria for listing users. */
    body: IDiscussionBoardUser.IRequest;
  };
  export type Body = IDiscussionBoardUser.IRequest;
  export type Response = IPageIDiscussionBoardUser;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/users";
  export const random = (): IPageIDiscussionBoardUser =>
    typia.random<IPageIDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed core user account for specific id from discussion_board_user.
 *
 * The GET /discussionBoard/users/{id} endpoint retrieves the detailed profile
 * of an individual user from the 'discussion_board_user' Prisma table, matching
 * the supplied UUID path parameter.
 *
 * This endpoint delivers atomic details required for administrative review,
 * profile inspection, and user detail display, such as username, email, account
 * status, timestamps, and soft deletion status. Password hashes are omitted by
 * security policy. Only users with sufficient privileges (admins, possibly
 * moderators) can access this endpoint.
 *
 * Validation covers correct UUID format for user id, with error handling for
 * not found and unauthorized access cases. The endpoint's output may serve as
 * source data for user details in admin UI or user audit logs.
 *
 * Tightly collaborates with endpoints for user update, delete, and audit trail
 * features.
 *
 * @param props.connection
 * @param props.id The UUID of the user to fetch.
 * @path /discussionBoard/users/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The UUID of the user to fetch. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardUser;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardUser =>
    typia.random<IDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing user's core record (discussion_board_user) by id.
 *
 * The PUT /discussionBoard/users/{id} endpoint modifies an existing user's core
 * data fields (discussion_board_user), identified by the UUID path parameter.
 *
 * Permissable updates include display username (if unique), email (if unique),
 * and status information, never direct password manipulation (separate flow is
 * enforced for password change for security). The endpoint enforces all needed
 * uniqueness and consistency checks, updating timestamps to reflect
 * modification. Only authorized users (admin/moderator or the user themselves,
 * depending on role policy) may update most fields.
 *
 * Request must follow the IUpdate contract schema, with careful validation.
 * Errors cover not-found, unauthorized, and validation failures (format,
 * conflict). On success, the updated user object is returned for display or
 * audit.
 *
 * Related endpoints: change password, update profile, and audit logging
 * operations.
 *
 * @param props.connection
 * @param props.id Target user's UUID.
 * @param props.body User update data (excluding password).
 * @path /discussionBoard/users/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target user's UUID. */
    id: string & tags.Format<"uuid">;

    /** User update data (excluding password). */
    body: IDiscussionBoardUser.IUpdate;
  };
  export type Body = IDiscussionBoardUser.IUpdate;
  export type Response = IDiscussionBoardUser;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/users/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardUser =>
    typia.random<IDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete/disable a user by id (soft delete, GDPR compliance) in
 * discussion_board_user.
 *
 * The DELETE /discussionBoard/users/{id} endpoint implements user account
 * deletion/deactivation, setting deleted_at and updating is_active in the
 * discussion_board_user table for the specified UUID.
 *
 * This is a soft delete—user records remain for audit but are marked inactive
 * and timestamped for historical/compliance purposes. It supports both
 * administrative actions and (policy-dependent) user-requested deletion. User
 * cannot be deleted if referential integrity would be compromised (e.g., if
 * they own visible content unless cascading is allowed).
 *
 * Authorization enforced: Only admins/moderators can delete user accounts
 * barring explicit self-deletion policy. Validation checks UUID exists, access
 * rights, and referential safety. Errors are raised if referential violations
 * may occur, user is not found, or permissions are lacking.
 *
 * Success response is empty body or object indicating operation status, never
 * direct user record payload. Related endpoints handle content reassignment or
 * anonymization as needed.
 *
 * @param props.connection
 * @param props.id UUID of the user to delete/disable.
 * @path /discussionBoard/users/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of the user to delete/disable. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOperationStatus;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IOperationStatus =>
    typia.random<IOperationStatus>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardReport } from "../../../structures/IDiscussionBoardReport";
import { IPageIDiscussionBoardReport } from "../../../structures/IPageIDiscussionBoardReport";

/**
 * Create new moderation report (flag content for review)
 * (discussion_board_reports).
 *
 * Allows authenticated members to submit a new content report for a thread,
 * post, or comment, providing the reason and target. This populates the
 * discussion_board_reports table for follow-up by moderation personnel. On
 * submission, workflow state (status field) is set to pending, timestamps are
 * captured, and notifications may be triggered for moderators. Reporting system
 * enforces prevention of duplicate/report-spam or harassment by validation
 * logic. Appropriate error handling must be included for failed references or
 * duplicate reports.
 *
 * @param props.connection
 * @param props.body The report submission data including reporter ID, content
 *   reference, and reason.
 * @path /discussionBoard/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * The report submission data including reporter ID, content reference,
     * and reason.
     */
    body: IDiscussionBoardReport.ICreate;
  };
  export type Body = IDiscussionBoardReport.ICreate;
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/reports";
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/list moderation reports (discussion_board_reports).
 *
 * Returns a paginated result-set of report entries matching the provided
 * search/filter criteria, mapped to the discussion_board_reports entity. Search
 * fields include reporter, moderator, thread/post/comment link, status, dates,
 * and reason. Supports moderator dash, admin audit, and reporter self-review.
 * Security controls must restrict visibility to authorized user roles
 * (mods/admins/reporters).
 *
 * @param props.connection
 * @param props.body Search filter and pagination for moderation reports
 *   listing.
 * @path /discussionBoard/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search filter and pagination for moderation reports listing. */
    body: IDiscussionBoardReport.IRequest;
  };
  export type Body = IDiscussionBoardReport.IRequest;
  export type Response = IPageIDiscussionBoardReport;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/reports";
  export const random = (): IPageIDiscussionBoardReport =>
    typia.random<IPageIDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single moderation report by UUID (discussion_board_reports).
 *
 * Fetches complete details of a moderation report by its unique UUID. Includes
 * reporter details, target content references (thread/post/comment), status,
 * and moderation workflow progress (notes, timestamps, etc). Controls access so
 * only moderators, admins, or the original reporter may access full report
 * data. Relates to further actions like resolving/dismissing a report. Response
 * is a full report object.
 *
 * @param props.connection
 * @param props.id Unique identifier (UUID) of the report to retrieve.
 * @path /discussionBoard/reports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier (UUID) of the report to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Edit/update moderation report (discussion_board_reports).
 *
 * Updates the details of an existing moderation report by its unique UUID,
 * which may include status transitions, moderator assignment, resolution notes,
 * etc. Attribute updates must follow moderation workflow policy (e.g., only
 * moderators can resolve reports, only reporters can withdraw their own). On
 * change, updated fields are recorded, and appropriate audit/compliance events
 * are triggered. Endpoint references the discussion_board_reports table for
 * source of truth. Used in moderator dashboards as well as appeal flows for
 * reporters.
 *
 * @param props.connection
 * @param props.id The UUID of the report to update.
 * @param props.body Fields to be updated for the report, such as status or
 *   resolution notes.
 * @path /discussionBoard/reports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The UUID of the report to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Fields to be updated for the report, such as status or resolution
     * notes.
     */
    body: IDiscussionBoardReport.IUpdate;
  };
  export type Body = IDiscussionBoardReport.IUpdate;
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/reports/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a moderation report by UUID (discussion_board_reports).
 *
 * Marks a moderation report as deleted (soft deletion) using its unique UUID.
 * Sets deleted_at timestamp, hiding the report from standard listings while
 * preserving it for audit/compliance retrieval. This is allowed for report
 * owner, responsible moderator, or administration as per policy. Records action
 * for audit trails and, if applicable, notifies relevant users of removal.
 * Already-deleted records yield conflict or not-modified responses.
 *
 * @param props.connection
 * @param props.id UUID of the report to delete.
 * @path /discussionBoard/reports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of the report to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

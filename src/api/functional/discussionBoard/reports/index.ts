import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardReport } from "../../../structures/IDiscussionBoardReport";
import { IPageIDiscussionBoardReport } from "../../../structures/IPageIDiscussionBoardReport";

/**
 * Create a new content report (discussion_board_report table).
 *
 * This API operation is invoked by registered users to create a report alleging
 * rule violations by a post or comment. It ensures the payload (reason, target
 * post or comment, any additional context) meets business validation rules. On
 * receipt, the report is inserted into discussion_board_report, triggering
 * notifications for moderators and audit logging. Supports the initial step in
 * the report/moderation workflow, and must validate that the reporter is
 * authenticated and input conforms to expected targets. Fails if the referenced
 * content does not exist or the user lacks permission. Audit trail compliance
 * is recommended.
 *
 * @param props.connection
 * @param props.body Report details (target post/comment, reason, reporter)
 * @path /discussionBoard/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Report details (target post/comment, reason, reporter) */
    body: IDiscussionBoardReport.ICreate;
  };
  export type Body = IDiscussionBoardReport.ICreate;
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/reports";
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter reports on posts/comments (discussion_board_report table).
 *
 * Retrieves a list of reports based on complex filter criteria, such as report
 * status (e.g., pending, resolved), reported content type, reporting user, or
 * moderation assignment. Pagination and sorting may be included via the request
 * body structure. The API supports moderation workflows for reviewing,
 * triaging, or bulk assessing reports. It refers directly to the
 * discussion_board_report schema, which captures user-generated reports for
 * moderation. Used together with detail/retrieve and update endpoints for
 * complete report lifecycle management. Only accessible to users with
 * moderation privileges.
 *
 * @param props.connection
 * @param props.body Filtering, pagination, and search parameters for filtering
 *   reports
 * @path /discussionBoard/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering, pagination, and search parameters for filtering reports */
    body: IDiscussionBoardReport.IRequest;
  };
  export type Body = IDiscussionBoardReport.IRequest;
  export type Response = IPageIDiscussionBoardReport;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/reports";
  export const random = (): IPageIDiscussionBoardReport =>
    typia.random<IPageIDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific content report (discussion_board_report table).
 *
 * This API operation fetches all available detail for a specific report
 * regarding reported posts or comments in the discussion board. Lookup is
 * performed by UUID primary key provided as a path parameter. This endpoint
 * supports auditability and transparency mandates for trust-building
 * moderation, referencing the discussion_board_report schema. It is commonly
 * called after listing/searching reports to resolve or respond to user reports.
 * Only accessible by users with adequate privileges (moderator/admin roles).
 *
 * @param props.connection
 * @param props.id Unique identifier for the report (UUID)
 * @path /discussionBoard/reports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier for the report (UUID) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific content report (discussion_board_report table).
 *
 * Moderators or admins update a reported item with resolution status, outcome
 * notes, or to assign moderators. The update modifies the record in
 * discussion_board_report and triggers associated workflow steps, such as
 * notifications or status changes for the reported user. Handles
 * permission/validation in line with moderation escalation policies. Failures
 * or forbidden status changes must return errors and be auditable.
 *
 * @param props.connection
 * @param props.id Unique identifier of the report to update (UUID)
 * @param props.body Fields to update (status, notes, moderator assignment,
 *   etc.)
 * @path /discussionBoard/reports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the report to update (UUID) */
    id: string & tags.Format<"uuid">;

    /** Fields to update (status, notes, moderator assignment, etc.) */
    body: IDiscussionBoardReport.IUpdate;
  };
  export type Body = IDiscussionBoardReport.IUpdate;
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/reports/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft/hard) a content report by its ID (discussion_board_report
 * table).
 *
 * This API operation allows authorized personnel to delete a report from the
 * moderation queue. Permission checks are enforced, and the operation may
 * perform a soft or hard delete as dictated by policy and the schema's
 * requirements. Input is the report's UUID as the path parameter. Handles audit
 * logging and failure response if report does not exist or permissions are
 * insufficient. Related moderation actions and histories should be preserved
 * for integrity.
 *
 * @param props.connection
 * @param props.id ID of the report to delete (UUID)
 * @path /discussionBoard/reports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the report to delete (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/reports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

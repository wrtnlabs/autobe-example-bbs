import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdmin } from "../../../structures/IDiscussionBoardAdmin";
import { IPageIDiscussionBoardAdmin } from "../../../structures/IPageIDiscussionBoardAdmin";

/**
 * Creates a new admin record for a user (discussion_board_admin table).
 *
 * This endpoint creates a new admin record in the discussion_board_admin table.
 * Admin creation requires the target user to already be assigned the 'admin'
 * role in the role_assignment table, ensuring consistency with access controls
 * outlined in the requirements analysis. The creation request must specify the
 * user_id, elevation_reason, notes, and assignment date, and may specify a
 * future revocation date.
 *
 * The operation is logged for audit, with related endpoints for admin update
 * (PUT), get (GET), delete (DELETE), and list (PATCH). Only users with the
 * admin role have permission. Error handling includes existing admin records,
 * missing user, or inconsistent role assignments.
 *
 * @param props.connection
 * @param props.body Information required to create an admin record, including
 *   user assignment and metadata.
 * @path /discussionBoard/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Information required to create an admin record, including user
     * assignment and metadata.
     */
    body: IDiscussionBoardAdmin.ICreate;
  };
  export type Body = IDiscussionBoardAdmin.ICreate;
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admins";
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Lists and searches admin records (discussion_board_admin table) with
 * pagination and filtering.
 *
 * This endpoint lists admin users from the discussion_board_admin table,
 * returning a paginated, filterable set of current and historical admin
 * metadata. The PATCH method enables complex search parameters via the request
 * body for audits, compliance checking, and assignment review. Results may be
 * filtered by status (active/revoked), assignment or revocation datetime
 * ranges, and administrator notes for context.
 *
 * All returned data strictly corresponds to admin entities and tracks elevation
 * reason, notes, assignment period, and status. Only authorized users
 * (typically staff or moderators) are permitted. Errors include invalid search
 * parameters or authorization failure. Related endpoints include admin
 * creation, update, get, and delete.
 *
 * @param props.connection
 * @param props.body Search/filter criteria for admin listing, including status,
 *   assignment date, and free text.
 * @path /discussionBoard/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Search/filter criteria for admin listing, including status,
     * assignment date, and free text.
     */
    body: IDiscussionBoardAdmin.IRequest;
  };
  export type Body = IDiscussionBoardAdmin.IRequest;
  export type Response = IPageIDiscussionBoardAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admins";
  export const random = (): IPageIDiscussionBoardAdmin =>
    typia.random<IPageIDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieves a specific admin record by ID (discussion_board_admin table).
 *
 * This endpoint retrieves a single admin record from the discussion_board_admin
 * table, identified by the record's UUID. It returns all normalized metadata
 * for the admin, including the referenced user, elevation reason, notes,
 * assignment date, and revocation date if applicable. This read-only operation
 * is permitted for authorized admin or moderator users seeking to view current
 * or historical admin assignments and details.
 *
 * Related endpoints include admin listing (PATCH), creation (POST), update
 * (PUT), and delete (DELETE). Path parameter 'id' must be a valid UUID. Errors
 * include record not found or permission denied.
 *
 * @param props.connection
 * @param props.id The ID of the admin record to retrieve.
 * @path /discussionBoard/admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The ID of the admin record to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Updates an admin record by ID (discussion_board_admin table).
 *
 * This endpoint updates specific fields of an existing admin record, identified
 * by its UUID, as defined in the discussion_board_admin table. Permitted
 * updates include changing the elevation_reason, notes, or revocation date. The
 * path parameter 'id' must be a valid UUID. Updating user_id or the initial
 * assigned_at is strictly forbidden to maintain audit and compliance
 * integrity.
 *
 * The update operation is logged and must be performed by an authenticated
 * admin. Related endpoints: admin create (POST), read (GET), delete (DELETE),
 * and filtered list (PATCH). Errors: admin not found, invalid updates, or
 * permission denied.
 *
 * @param props.connection
 * @param props.id The ID of the admin record to update.
 * @param props.body Fields to update for the admin record (notes,
 *   elevation_reason, revoked_at).
 * @path /discussionBoard/admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The ID of the admin record to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Fields to update for the admin record (notes, elevation_reason,
     * revoked_at).
     */
    body: IDiscussionBoardAdmin.IUpdate;
  };
  export type Body = IDiscussionBoardAdmin.IUpdate;
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Deletes an admin record by ID (discussion_board_admin table).
 *
 * The delete API operation removes an admin record, identified by its UUID,
 * from the discussion_board_admin table. This operation is used to revoke admin
 * privileges and clean up historical metadata no longer needed for audit or
 * compliance. The path parameter 'id' is validated as a UUID. Only
 * authenticated admin-level users may perform deletions.
 *
 * The API ensures that deletions do not violate audit or compliance
 * requirements, and all actions are logged accordingly. Related operations:
 * create (POST), get (GET), update (PUT), and list (PATCH). Errors: record not
 * found, active admin restriction, or permission denied.
 *
 * @param props.connection
 * @param props.id The ID of the admin record to delete.
 * @path /discussionBoard/admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** The ID of the admin record to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

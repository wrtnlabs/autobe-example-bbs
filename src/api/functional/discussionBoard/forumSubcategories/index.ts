import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardForumSubcategory } from "../../../structures/IDiscussionBoardForumSubcategory";
import { IPageDiscussionBoardForumSubcategory } from "../../../structures/IPageDiscussionBoardForumSubcategory";

/**
 * Create a new forum subcategory (discussion_board_forum_subcategory).
 *
 * This POST operation allows authorized users (typically admins or moderators)
 * to create a new forum subcategory, supporting organizational requirements for
 * hierarchical topic management in the discussion board. The request body maps
 * to 'IDiscussionBoardForumSubcategory.ICreate' and must include referenced
 * forum_category_id, subcategory name, and optional description. The operation
 * enforces normalization and referential integrity by ensuring the
 * 'forum_category_id' exists and the subcategory name is unique within its
 * parent. On success, the operation returns the created subcategory record,
 * including audit info. Validation errors (e.g., duplicate name, missing
 * category) result in suitable errors. Business logic follows the Prisma
 * schema's design for atomic, normalized values and audit timestamps.
 *
 * @param props.connection
 * @param props.body Data for creating a new forum subcategory
 * @path /discussionBoard/forumSubcategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Data for creating a new forum subcategory */
    body: IDiscussionBoardForumSubcategory.ICreate;
  };
  export type Body = IDiscussionBoardForumSubcategory.ICreate;
  export type Response = IDiscussionBoardForumSubcategory;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/forumSubcategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/forumSubcategories";
  export const random = (): IDiscussionBoardForumSubcategory =>
    typia.random<IDiscussionBoardForumSubcategory>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter forum subcategories in discussion_board_forum_subcategory.
 *
 * This endpoint queries the discussion_board_forum_subcategory table and
 * returns a paginated list suitable for powering UI navigation, analytics, or
 * administrative subcategory management. Filters may apply to category ID,
 * name, or creation/updated timestamps. Output is pageable and filterable via
 * the request body, and the response uses IPageDiscussionBoardForumSubcategory
 * schema. Related endpoints exist to create, update, read, or delete individual
 * subcategories.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination info for listing forum
 *   subcategories
 * @path /discussionBoard/forumSubcategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering, search, and pagination info for listing forum
     * subcategories
     */
    body: IDiscussionBoardForumSubcategory.IRequest;
  };
  export type Body = IDiscussionBoardForumSubcategory.IRequest;
  export type Response = IPageDiscussionBoardForumSubcategory;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/forumSubcategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/forumSubcategories";
  export const random = (): IPageDiscussionBoardForumSubcategory =>
    typia.random<IPageDiscussionBoardForumSubcategory>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific forum subcategory
 * (discussion_board_forum_subcategory) by ID.
 *
 * This GET operation provides a detailed view of a single forum subcategory, as
 * defined in the 'discussion_board_forum_subcategory' Prisma table. Each
 * subcategory is uniquely identified by its 'id' (UUID), which must be provided
 * as a path parameter. The API retrieves the metadata of the forum subcategory,
 * including its parent category relationship, name, description, and timestamps
 * for audit and UI display. The endpoint is protected by standard role-based
 * access controls, such that only authorized users, moderators, or admins can
 * retrieve subcategory details. The operation follows Prisma schema best
 * practices: atomic values, soft-delete handling (nullable timestamps), and
 * referential integrity, guaranteeing consistent and reliable data throughout
 * the forum structure. If the specified subcategory is not found, the API
 * returns an appropriate error (such as 404 Not Found).
 *
 * @param props.connection
 * @param props.id The UUID of the forum subcategory to retrieve.
 * @path /discussionBoard/forumSubcategories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The UUID of the forum subcategory to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardForumSubcategory;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/forumSubcategories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/forumSubcategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardForumSubcategory =>
    typia.random<IDiscussionBoardForumSubcategory>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a forum subcategory (discussion_board_forum_subcategory) by ID.
 *
 * This PUT operation enables modification of forum subcategory details, such as
 * name, description, or forum_category_id. The endpoint is mapped to the
 * 'discussion_board_forum_subcategory' entity, with the target subcategory
 * identified by the 'id' path parameter. The request body
 * ('IDiscussionBoardForumSubcategory.IUpdate') contains only changed fields or
 * a full replacement set, following domain update best practices (atomicity,
 * referential integrity, and audit timestamping). Authorization is enforced;
 * unauthorized attempts will yield errors. Upon success, the response delivers
 * the updated subcategory object for consumption in moderator/admin panels or
 * configuration UIs. The operation guarantees correspondence with the latest
 * normalized schema state.
 *
 * @param props.connection
 * @param props.id UUID of the forum subcategory to update.
 * @param props.body New data for the forum subcategory.
 * @path /discussionBoard/forumSubcategories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** UUID of the forum subcategory to update. */
    id: string & tags.Format<"uuid">;

    /** New data for the forum subcategory. */
    body: IDiscussionBoardForumSubcategory.IUpdate;
  };
  export type Body = IDiscussionBoardForumSubcategory.IUpdate;
  export type Response = IDiscussionBoardForumSubcategory;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/forumSubcategories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/forumSubcategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardForumSubcategory =>
    typia.random<IDiscussionBoardForumSubcategory>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a forum subcategory (discussion_board_forum_subcategory) by ID.
 *
 * This DELETE operation authorizes moderators or administrators to remove a
 * subcategory from the forum structure. Path parameter 'id' identifies the
 * subcategory; the system checks for any dependent child threads prior to
 * deletion, returning errors if deletion is blocked by business logic. Deletion
 * is typically a soft-delete (sets 'deleted_at'), complying with auditability
 * requirements. Operation adheres strictly to the Prisma schema for normalized
 * entity handling, ensuring referential integrity. After successful deletion,
 * the response confirms the change, providing either the now-deleted entity or
 * a minimal confirmation object, per response contract.
 *
 * @param props.connection
 * @param props.id UUID of the forum subcategory to delete.
 * @path /discussionBoard/forumSubcategories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of the forum subcategory to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardForumSubcategory;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/forumSubcategories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/forumSubcategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardForumSubcategory =>
    typia.random<IDiscussionBoardForumSubcategory>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

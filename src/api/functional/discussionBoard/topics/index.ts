import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardTopics } from "../../../structures/IPageIDiscussionBoardTopics";
import { IDiscussionBoardTopics } from "../../../structures/IDiscussionBoardTopics";
export * as threads from "./threads";

/**
 * List discussion board topics with basic info for browsing
 * (discussion_board_topics).
 *
 * Fetches a paginated list of active topics on the discussion board, including
 * their related categories and creator member information. This operation is
 * available to all users, including guests (read-only), as it enables open
 * browsing of public discussion topics per the requirements analysis.
 *
 * Each item in the response summarizes a topic: its title, optional
 * description, pinned/closed flags, creation/update timestamps, and the
 * associated category. The underlying table is discussion_board_topics, joined
 * with discussion_board_categories for hierarchical browsing, and
 * discussion_board_members for audit trails.
 *
 * Security: As this endpoint is view-only and exposes public content, no
 * authentication or special permissions are required. Only topics intended for
 * participation (not deleted, not in restricted categories) are visible. Error
 * handling returns a paginated empty set if no topics exist. Use in combination
 * with /topics/{topicId} for full topic detail or to drill into threads under a
 * specific topic.
 *
 * Concurrency and consistency are managed at the database level; paginated
 * results may change as new topics are added or existing ones updated or
 * closed.
 *
 * @param props.connection
 * @path /discussionBoard/topics
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardTopics.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/topics",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/topics";
  export const random = (): IPageIDiscussionBoardTopics.ISummary =>
    typia.random<IPageIDiscussionBoardTopics.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Search and filter topics on the discussion board with advanced criteria
 * (discussion_board_topics).
 *
 * Searches and retrieves discussion topics on the board using complex filters
 * such as category, pinned or closed status, date ranges, and text queries.
 * This operation allows both guests and authenticated users to discover topics
 * by more advanced criteria than simple listing.
 *
 * The search functionality is based on the discussion_board_topics table,
 * integrating joins to category and member tables for rich filtering and
 * faceted experiences. Pagination and sorting are fully supported.
 *
 * Security: As with the basic listing, no specific authentication is required
 * to search public topics. Sensitive or restricted categories remain excluded
 * from the public result set. The request body specifies filter and sort
 * criteria, and the paged result contains summary topic information. Used
 * jointly with GET /topics for initial load and GET /topics/{topicId} for
 * detail.
 *
 * Returns a paginated, filtered list, or an empty array if no results match the
 * query.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for topic lookup (category,
 *   title, status, paging, etc).
 * @path /discussionBoard/topics
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search and filter parameters for topic lookup (category, title,
     * status, paging, etc).
     */
    body: IDiscussionBoardTopics.IRequest;
  };
  export type Body = IDiscussionBoardTopics.IRequest;
  export type Response = IPageIDiscussionBoardTopics.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/topics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/topics";
  export const random = (): IPageIDiscussionBoardTopics.ISummary =>
    typia.random<IPageIDiscussionBoardTopics.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed data for a specific discussion topic
 * (discussion_board_topics).
 *
 * Fetches the complete details of a specified topic by its unique identifier.
 * This is the entry point for accessing a topic's full content, metadata, and
 * relationshipsâ€”not just the summary provided in list or search operations.
 *
 * The underlying table is discussion_board_topics, with joins to its category
 * and creator member for full traceability. The response includes all key
 * attributes: title, description, pinned/closed flags, timestamps, category ID,
 * and creator ID. Used as the basis for loading child threads and posts, and
 * for rendering detailed UIs.
 *
 * Accessible to guests/members for open topics, subject to general visibility
 * rules. If the topic does not exist or access is restricted, an appropriate
 * error or null response is returned. Use together with /topics and
 * /topics/{topicId}/threads for full board navigation.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) of the topic to retrieve.
 * @path /discussionBoard/topics/:topicId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the topic to retrieve. */
    topicId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardTopics;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/topics/:topicId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): IDiscussionBoardTopics =>
    typia.random<IDiscussionBoardTopics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

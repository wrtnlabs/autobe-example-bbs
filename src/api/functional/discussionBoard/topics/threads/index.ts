import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardThreads } from "../../../../structures/IPageIDiscussionBoardThreads";
import { IDiscussionBoardThreads } from "../../../../structures/IDiscussionBoardThreads";

/**
 * List threads under a topic for browsing (discussion_board_threads).
 *
 * Fetches all threads associated with a given topic. Results include all
 * summary-level thread data: thread IDs, titles, creator members, and
 * timestamps of creation/update. Presentation is paginated for scalability on
 * active boards.
 *
 * Underlying data is drawn from discussion_board_threads, joined by topic ID to
 * filter the set. Only threads visible in the referenced topic (not deleted,
 * per cascade) are returned. This operation enables guests and members to
 * browse thread lists and serves as a base for further detail retrieval via
 * /topics/{topicId}/threads/{threadId}.
 *
 * No authentication is required for public thread navigation. Errors occur if
 * topic ID is invalid, with an empty result or error message per handler logic.
 * Useful for UI drill-down and thread activity displays.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) for the parent topic.
 * @path /discussionBoard/topics/:topicId/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier (UUID) for the parent topic. */
    topicId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIDiscussionBoardThreads.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/topics/:topicId/threads",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/topics/${encodeURIComponent(props.topicId ?? "null")}/threads`;
  export const random = (): IPageIDiscussionBoardThreads.ISummary =>
    typia.random<IPageIDiscussionBoardThreads.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and filter threads under a topic (discussion_board_threads).
 *
 * Search and filter threads within a particular topic using specific criteria
 * such as title, creator, or creation/update range. Supports advanced filtering
 * UI in thread listing contexts. Guests and authenticated users may use this
 * operation for navigating or drilling down large topics.
 *
 * The search draws from discussion_board_threads, constrained to those under
 * the referenced topic, with all filter and pagination logic run server-side.
 * Results are paginated as defined by the client request. No sensitive data is
 * disclosed; only summary records are returned.
 *
 * No special authorization is required. Used in UI when browsing or searching
 * the threads of a topic. For thread creation or detail, see related
 * endpoints.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) of the parent topic.
 * @param props.body Search and pagination parameters for thread discovery
 *   within a topic.
 * @path /discussionBoard/topics/:topicId/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Unique identifier (UUID) of the parent topic. */
    topicId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for thread discovery within a topic. */
    body: IDiscussionBoardThreads.IRequest;
  };
  export type Body = IDiscussionBoardThreads.IRequest;
  export type Response = IPageIDiscussionBoardThreads.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/topics/:topicId/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/topics/${encodeURIComponent(props.topicId ?? "null")}/threads`;
  export const random = (): IPageIDiscussionBoardThreads.ISummary =>
    typia.random<IPageIDiscussionBoardThreads.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full detail of a thread within a topic (discussion_board_threads).
 *
 * Fetches the detailed data for a specific thread under a topic, using both
 * topic and thread UUIDs. Returns complete information: title, creator,
 * timestamps, and all top-level attributes. This is a drilldown endpoint meant
 * for detailed thread pages in the UI.
 *
 * References discussion_board_threads, joined with topic and creator member.
 * Response includes only the matching thread; errors are returned for not found
 * or inconsistent parent/child IDs.
 *
 * Accessible by guests and all authenticated users for open topics. For child
 * entities (posts/comments) use lower-level endpoints not described here.
 * Returns a null or error response for invalid or unauthorized access.
 *
 * @param props.connection
 * @param props.topicId Unique UUID for parent topic.
 * @param props.threadId Unique UUID for the thread to fetch.
 * @path /discussionBoard/topics/:topicId/threads/:threadId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID for parent topic. */
    topicId: string & tags.Format<"uuid">;

    /** Unique UUID for the thread to fetch. */
    threadId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardThreads;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/topics/:topicId/threads/:threadId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/topics/${encodeURIComponent(props.topicId ?? "null")}/threads/${encodeURIComponent(props.threadId ?? "null")}`;
  export const random = (): IDiscussionBoardThreads =>
    typia.random<IDiscussionBoardThreads>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.param("threadId")(() => typia.assert(props.threadId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAttachment } from "../../../structures/IDiscussionBoardAttachment";
import { IPageIDiscussionBoardAttachment } from "../../../structures/IPageIDiscussionBoardAttachment";

/**
 * Create a new discussion_board_attachment metadata record.
 *
 * Creates a new attachment metadata record in the discussion_board_attachment
 * table. This operation is invoked when users upload images, PDFs, or other
 * supported files to their comments/posts. Only authenticated users can upload,
 * and each attachment must be linked to a valid user. Uploaded files must
 * comply with content security policies and MIME type validation. If the record
 * already exists (same file_url), or the uploader is unauthorized, returns an
 * error. Related endpoints are PATCH (search/list), GET by ID, PUT (update),
 * and DELETE (soft-delete).
 *
 * @param props.connection
 * @param props.body Attachment metadata creation payload.
 * @path /discussionBoard/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Attachment metadata creation payload. */
    body: IDiscussionBoardAttachment.ICreate;
  };
  export type Body = IDiscussionBoardAttachment.ICreate;
  export type Response = IDiscussionBoardAttachment;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/attachments";
  export const random = (): IDiscussionBoardAttachment =>
    typia.random<IDiscussionBoardAttachment>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List discussion_board_attachment records with filters and pagination.
 *
 * This endpoint retrieves a paginated list of file attachments from the
 * discussion_board_attachment table, supporting search by file_name, uploader,
 * or mime_type. Used for admin dashboards or for end-user review of their own
 * uploads. Pagination information must be provided in the request body. Returns
 * file metadata records without downloading the actual file. Security: Only the
 * file owner or authorized content admin can list all records. Returns error if
 * invalid filters are applied or unauthorized. Related operations: GET, POST,
 * PUT, DELETE attachment records.
 *
 * @param props.connection
 * @param props.body Attachment search, filter, and pagination info.
 * @path /discussionBoard/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Attachment search, filter, and pagination info. */
    body: IDiscussionBoardAttachment.IRequest;
  };
  export type Body = IDiscussionBoardAttachment.IRequest;
  export type Response = IPageIDiscussionBoardAttachment;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/attachments";
  export const random = (): IPageIDiscussionBoardAttachment =>
    typia.random<IPageIDiscussionBoardAttachment>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a discussion_board_attachment record by ID.
 *
 * This API fetches the attachment metadata record from
 * discussion_board_attachment, as described in the Prisma schema. Used for
 * viewing file details, showing previews, or conducting administrative file
 * reviews. Security ensures only attachment owners or administrators can access
 * sensitive details. Related endpoints: PATCH for search/list, POST for
 * creation, PUT for update, DELETE for removal.
 *
 * @param props.connection
 * @param props.id ID of the attachment to retrieve.
 * @path /discussionBoard/attachments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** ID of the attachment to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAttachment;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/attachments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/attachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAttachment =>
    typia.random<IDiscussionBoardAttachment>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion_board_attachment record by ID.
 *
 * This operation updates fields such as file_name or mime_type for a file
 * record in discussion_board_attachment. Security ensures only the original
 * uploader or an admin can make changes. File URL and upload timestamps
 * generally must not be changed by users. If the specified attachment is not
 * found or the user is unauthorized, returns an error. Related endpoints are
 * PATCH for listing, GET by ID, POST for creation, and DELETE for logical
 * removal.
 *
 * @param props.connection
 * @param props.id ID of the attachment to update.
 * @param props.body Attachment metadata update payload.
 * @path /discussionBoard/attachments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of the attachment to update. */
    id: string & tags.Format<"uuid">;

    /** Attachment metadata update payload. */
    body: IDiscussionBoardAttachment.IUpdate;
  };
  export type Body = IDiscussionBoardAttachment.IUpdate;
  export type Response = IDiscussionBoardAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/attachments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/attachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAttachment =>
    typia.random<IDiscussionBoardAttachment>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a discussion_board_attachment record by ID.
 *
 * Performs a soft-delete of an attachment by ID, marking the deleted_at
 * timestamp to shield the file from standard queries while maintaining an audit
 * record. Only the owner or an admin can invoke this operation. Related
 * endpoints include GET (metadata retrieval), PATCH (list), POST (new upload),
 * and PUT (update). Deletion does not remove referenced files from
 * posts/comments; links must be managed separately for logical cleanup.
 *
 * @param props.connection
 * @param props.id ID of the attachment to soft-delete.
 * @path /discussionBoard/attachments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the attachment to soft-delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAttachment;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/attachments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/attachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardAttachment =>
    typia.random<IDiscussionBoardAttachment>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardGuest } from "../../../structures/IDiscussionBoardGuest";

/**
 * Create and track a new guest session entry.
 *
 * Register a new guest session. This operation stores a new record for an
 * anonymous user visit, typically when the system generates a new session
 * identifier for tracking and analytics. Required details include the
 * session_identifier, first and last seen timestamps (usually identical at
 * creation), and the initial data as defined by the schema.
 *
 * This call is generally made automatically by frontend or middleware code that
 * wishes to track unique visits and analyze guest behavior. Although no
 * personal information is stored, this route should be protected from abuse
 * (e.g., bot traffic inflating analytics).
 *
 * Field definitions are strictly those from the discussion_board_guests model
 * in the Actors schema.
 *
 * @param props.connection
 * @param props.body Session information for the new guest.
 * @path /discussionBoard/guests
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Session information for the new guest. */
    body: IDiscussionBoardGuest.ICreate;
  };
  export type Body = IDiscussionBoardGuest.ICreate;
  export type Response = IDiscussionBoardGuest;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/guests";
  export const random = (): IDiscussionBoardGuest =>
    typia.random<IDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

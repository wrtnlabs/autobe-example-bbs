import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardGuest } from "../../../structures/IDiscussionBoardGuest";
import { IPageIDiscussionBoardGuest } from "../../../structures/IPageIDiscussionBoardGuest";

/**
 * Create a new guest account/session (discussion_board_guests).
 *
 * Creates a guest entity representing an unauthenticated user session. This API
 * is primarily used for internal session management and initial session
 * handoff. It captures guest attributes (IP, session token, user agent) and
 * returns the guest session record. This endpoint does not create business
 * identities or authenticate the user. Only backend services or validated flows
 * should invoke this, not directly exposed to end-users.
 *
 * @param props.connection
 * @param props.body Guest session creation payload (discussion_board_guests).
 * @path /discussionBoard/guests
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Guest session creation payload (discussion_board_guests). */
    body: IDiscussionBoardGuest.ICreate;
  };
  export type Body = IDiscussionBoardGuest.ICreate;
  export type Response = IDiscussionBoardGuest;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/guests";
  export const random = (): IDiscussionBoardGuest =>
    typia.random<IDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List guest accounts with search/pagination (discussion_board_guests).
 *
 * Returns a list of guest sessions, possibly filtered and paginated. This API
 * is critical for moderation audit, security, and backend analytics (e.g., for
 * rate limiting or identifying abusive patterns). The listing endpoint supports
 * search queries on guest attributes (IP, user agent, session time) to
 * facilitate admin workflows. No guest authentication context is required, and
 * only authorized staff may retrieve guest data. Results adhere to privacy
 * guidelines and include all atomic fields defined in the
 * discussion_board_guests schema. Error handling occurs for request validation
 * purposes. Results use a paginated data structure, suitable for large
 * datasets.
 *
 * @param props.connection
 * @param props.body Request parameters for guest list filtering/pagination.
 * @path /discussionBoard/guests
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Request parameters for guest list filtering/pagination. */
    body: IDiscussionBoardGuest.IRequest;
  };
  export type Body = IDiscussionBoardGuest.IRequest;
  export type Response = IPageIDiscussionBoardGuest;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/guests";
  export const random = (): IPageIDiscussionBoardGuest =>
    typia.random<IPageIDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get guest details by ID (discussion_board_guests).
 *
 * Retrieves a complete representation of the specified guest session entity,
 * using its UUID. This operation supports system administration, content audit,
 * and data analytics requirements. Only system roles with audit/abuse
 * management permissions (moderator/administrator) may invoke the endpoint. The
 * returned entity contains all atomic columns from the discussion_board_guests
 * schema with privacy-compliant exposure.
 *
 * @param props.connection
 * @param props.id UUID of the guest session/account.
 * @path /discussionBoard/guests/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of the guest session/account. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardGuest;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/guests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardGuest =>
    typia.random<IDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a guest session/account (discussion_board_guests).
 *
 * Updates a guest session/account by its UUID. Used by technical teams or
 * automated moderation engines to extend session expiration, save updated user
 * agent, or correct session fields. All updates require complete entity
 * integrity due to audit constraints. The endpoint validates guest existence
 * and returns the updated entity data. Only privileged system administrators or
 * moderation bots may invoke.
 *
 * @param props.connection
 * @param props.id UUID of the guest session/account to update.
 * @param props.body Guest session update data (discussion_board_guests).
 * @path /discussionBoard/guests/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** UUID of the guest session/account to update. */
    id: string & tags.Format<"uuid">;

    /** Guest session update data (discussion_board_guests). */
    body: IDiscussionBoardGuest.IUpdate;
  };
  export type Body = IDiscussionBoardGuest.IUpdate;
  export type Response = IDiscussionBoardGuest;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/guests/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardGuest =>
    typia.random<IDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete guest session/account by ID (discussion_board_guests).
 *
 * Deletes a guest session record via soft/hard delete (per business
 * requirement) using its UUID. Intended for compliance removal, session expiry,
 * or technical abuse-mitigation. Only authorized administrators may invoke. The
 * result is the guest entity as it existed before deletion (or a confirmation
 * object). The operation fulfills audit and privacy compliance, ensuring no
 * further actions are logged for the guest after deletion.
 *
 * @param props.connection
 * @param props.id UUID of the guest to delete.
 * @path /discussionBoard/guests/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of the guest to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardGuest;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/guests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardGuest =>
    typia.random<IDiscussionBoardGuest>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

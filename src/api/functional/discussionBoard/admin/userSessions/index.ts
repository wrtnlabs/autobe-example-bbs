import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardUserSession } from "../../../../structures/IPageIDiscussionBoardUserSession";
import { IDiscussionBoardUserSession } from "../../../../structures/IDiscussionBoardUserSession";

/**
 * List all user/guest session records captured in the system.
 *
 * Retrieve a complete inventory of user session records, each associating an
 * actor (admin, moderator, member, or guest) by actor_type and actor_identifier
 * along with session_token, timestamps, and status flags such as terminated_at.
 * This endpoint is essential for session management, monitoring concurrency,
 * and supporting forced logout/audit workflows.
 *
 * Data aligns precisely with the discussion_board_user_sessions table, ensuring
 * strict normalization for actor/session linkage and time tracking. Access must
 * be limited to system admins, due to the sensitive and security-centric nature
 * of the session information contained herein.
 *
 * @param props.connection
 * @path /discussionBoard/admin/userSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardUserSession;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/userSessions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/userSessions";
  export const random = (): IPageIDiscussionBoardUserSession =>
    typia.random<IPageIDiscussionBoardUserSession>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Perform advanced search and filtering of user/guest sessions.
 *
 * Retrieve a filtered, paginated set of user or guest sessions based on
 * advanced criteria: actor_type (admin/moderator/member/guest), session_token,
 * session status, time windows, etc. Supports system dashboards, security
 * analytics, and session monitoring tools, crucial for forced logout and
 * anomaly detection workflows.
 *
 * This endpoint must be restricted to admin usage. Returned data is directly
 * matched to the normalized fields from the discussion_board_user_sessions
 * schema; no computed session/actor attributes are provided.
 *
 * Use this API for large-scale session analysis and to support compliance
 * monitoring.
 *
 * @param props.connection
 * @param props.body Complex filter, pagination, and sort parameters for
 *   user/guest sessions.
 * @path /discussionBoard/admin/userSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Complex filter, pagination, and sort parameters for user/guest
     * sessions.
     */
    body: IDiscussionBoardUserSession.IRequest;
  };
  export type Body = IDiscussionBoardUserSession.IRequest;
  export type Response = IPageIDiscussionBoardUserSession;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/userSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/userSessions";
  export const random = (): IPageIDiscussionBoardUserSession =>
    typia.random<IPageIDiscussionBoardUserSession>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch details of a specific user/guest session by ID.
 *
 * Return full attributes for a user or guest session as recorded by the session
 * tracking table. Includes actor_type, actor_identifier, session token,
 * timestamps, and termination status.
 *
 * Admins may use this endpoint for token validation, forced logout diagnosis,
 * or detailed audit analysis. Records are immutable except via session
 * lifecycle events (e.g., logout, forced expire).
 *
 * The entity structure exactly matches discussion_board_user_sessions from the
 * Actors schema.
 *
 * @param props.connection
 * @param props.userSessionId UUID of session record to retrieve.
 * @path /discussionBoard/admin/userSessions/:userSessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of session record to retrieve. */
    userSessionId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardUserSession;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/userSessions/:userSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}`;
  export const random = (): IDiscussionBoardUserSession =>
    typia.random<IDiscussionBoardUserSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details for a user or guest session by ID.
 *
 * Modify tracked session attributes such as expiry, or set the termination
 * timestamp following logout/forced expiration events. Updates must ensure
 * immutability of core PK/actor identity, affecting only updateable attributes
 * like expires_at, terminated_at, etc.
 *
 * Only system code or admins with high privileges should invoke this endpoint,
 * as improper usage could disrupt authentication flows. All updates are
 * audit-logged as per compliance requirements.
 *
 * @param props.connection
 * @param props.userSessionId UUID of the tracked session to update.
 * @param props.body Session property values to update (e.g., expiry,
 *   termination).
 * @path /discussionBoard/admin/userSessions/:userSessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the tracked session to update. */
    userSessionId: string & tags.Format<"uuid">;

    /** Session property values to update (e.g., expiry, termination). */
    body: IDiscussionBoardUserSession.IUpdate;
  };
  export type Body = IDiscussionBoardUserSession.IUpdate;
  export type Response = IDiscussionBoardUserSession;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/userSessions/:userSessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}`;
  export const random = (): IDiscussionBoardUserSession =>
    typia.random<IDiscussionBoardUserSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a tracked session entity by its record ID.
 *
 * Destroy the specified session record in the user/guest session tracking
 * table. This is used for remedial actions, such as removing expired or
 * compromised sessions, or compliance with session retention/purge policies.
 *
 * Deletion is a hard delete by PK as the discussion_board_user_sessions table
 * lacks a soft-delete field, and all removal events should be thoroughly
 * audit-logged for compliance and security monitoring. Only admins are able to
 * execute this operation.
 *
 * @param props.connection
 * @param props.userSessionId UUID of the session record to delete.
 * @path /discussionBoard/admin/userSessions/:userSessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the session record to delete. */
    userSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/userSessions/:userSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/userSessions/${encodeURIComponent(props.userSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userSessionId")(() => typia.assert(props.userSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

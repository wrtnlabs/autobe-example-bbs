import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardEngagementStat } from "../../../../structures/IPageIDiscussionBoardEngagementStat";
import { IDiscussionBoardEngagementStat } from "../../../../structures/IDiscussionBoardEngagementStat";

/**
 * List all engagement statistics entries for dashboard analytics
 * (discussion_board_engagement_stats).
 *
 * Retrieve a paginated set of engagement statistics records for the discussion
 * board analytics dashboard. This operation fetches activity summary rows from
 * the discussion_board_engagement_stats table, enabling reviews of forum
 * engagement, post/comment volumes, user activity counts, and report metrics
 * broken down by period and segment (e.g., by topic or user role).
 *
 * Access is restricted to users with the 'admin' role, in line with permission
 * policies that mandate analytics visibility for platform managers only. All
 * returned data is strictly from the analytics summary table and does not
 * include sensitive user details, maintaining privacy.
 *
 * This operation is typically used together with endpoints that fetch detailed
 * statistics or analytics for a specific period, topic, or dimension. Errors
 * from invalid queries or insufficient permissions are returned according to
 * the API's standardized error response structure.
 *
 * @param props.connection
 * @path /discussionBoard/admin/engagementStats
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardEngagementStat;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/engagementStats",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/engagementStats";
  export const random = (): IPageIDiscussionBoardEngagementStat =>
    typia.random<IPageIDiscussionBoardEngagementStat>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new engagement statistics report row
 * (discussion_board_engagement_stats).
 *
 * Create a new engagement statistics record for discussion board analytics
 * reporting. Used by the analytics pipeline or administrative users to insert a
 * new pre-calculated aggregate row with engagement metricsâ€”including post
 * count, comment count, user activity, and report statistics. The operation
 * fully aligns with the schema constraints and data normalization rules,
 * expecting required fields such as period, dimension, and counts.
 *
 * The endpoint is strictly limited to 'admin' users due to sensitivity around
 * raw analytics injection/modification. All validation, such as no duplicate
 * reporting intervals and segment combinations, follows the schema's unique
 * constraints. Error scenarios include input validation failures or attempts to
 * duplicate an existing stat entry for a period/dimension/segment.
 *
 * @param props.connection
 * @param props.body Payload for creating a new analytics statistic entry.
 * @path /discussionBoard/admin/engagementStats
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload for creating a new analytics statistic entry. */
    body: IDiscussionBoardEngagementStat.ICreate;
  };
  export type Body = IDiscussionBoardEngagementStat.ICreate;
  export type Response = IDiscussionBoardEngagementStat;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/engagementStats",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/engagementStats";
  export const random = (): IDiscussionBoardEngagementStat =>
    typia.random<IDiscussionBoardEngagementStat>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate analytics engagement stats
 * (discussion_board_engagement_stats).
 *
 * Search and filter engagement statistics from the
 * discussion_board_engagement_stats reporting table. This endpoint provides
 * advanced query capabilities as required by dashboard analytics and
 * administrative reports. Supported filters may include time range
 * (period_start/period_end), dimension, segment_value, or topic-related
 * breakdowns. Returned data gives platform managers high-level insights into
 * discussion board usage, activity, moderation reports, and engagement trends.
 *
 * Security policy restricts access to users with 'admin' privileges. Detailed
 * result sets are suitable for customized analytics dashboards, including
 * multi-dimensional breakdowns for management decision-making. Failure modes,
 * such as malformed filters, return standard validation errors as per API
 * guidelines.
 *
 * This endpoint is often used with item detail retrieval or summary chart
 * rendering for operational analytics.
 *
 * @param props.connection
 * @param props.body Query and filter parameters for analytics stats search.
 * @path /discussionBoard/admin/engagementStats
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Query and filter parameters for analytics stats search. */
    body: IDiscussionBoardEngagementStat.IRequest;
  };
  export type Body = IDiscussionBoardEngagementStat.IRequest;
  export type Response = IPageIDiscussionBoardEngagementStat;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/engagementStats",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/engagementStats";
  export const random = (): IPageIDiscussionBoardEngagementStat =>
    typia.random<IPageIDiscussionBoardEngagementStat>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific engagement statistic by ID
 * (discussion_board_engagement_stats).
 *
 * Retrieve details of a single engagement statistics record from the
 * discussion_board_engagement_stats table, by specifying the record's unique
 * ID. This operation is critical for presenting complete analytics information
 * to administrators needing granular insights into board activity over a
 * particular time interval, dimension, or segment.
 *
 * The operation is restricted to users with 'admin' privileges, as per
 * analytics and reporting access controls defined in system requirements.
 * Returned details include all fields for the reporting entity, suitable for
 * drill-down dashboard use or analytical review. Errors for nonexistent IDs or
 * unauthorized access are handled as described in the API error documentation.
 *
 * @param props.connection
 * @param props.engagementStatId Unique identifier of the target engagement
 *   statistic (UUID).
 * @path /discussionBoard/admin/engagementStats/:engagementStatId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target engagement statistic (UUID). */
    engagementStatId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardEngagementStat;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/engagementStats/:engagementStatId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/engagementStats/${encodeURIComponent(props.engagementStatId ?? "null")}`;
  export const random = (): IDiscussionBoardEngagementStat =>
    typia.random<IDiscussionBoardEngagementStat>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("engagementStatId")(() =>
        typia.assert(props.engagementStatId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an engagement statistics entry by ID
 * (discussion_board_engagement_stats).
 *
 * Update an existing engagement statistics record in the analytics reporting
 * table, identified by unique ID. This operation permits authorized
 * administrators to correct, amend, or repopulate summary data for a given
 * analytic interval, dimension, or segment. All relevant metrics including
 * period, dimension, and statistics fields can be updated as supported by the
 * schema. Only a user with 'admin' privileges may perform this action, in
 * accordance with role-based access control policies for analytics.
 *
 * Implementation must honor uniqueness and normalization constraints.
 * Violations, such as updating to overlap another record's unique key
 * (period/dimension/segment), or referencing nonexistent records, will return
 * validation or not-found errors as per API protocol.
 *
 * @param props.connection
 * @param props.engagementStatId Unique identifier of the engagement stat entry
 *   to update (UUID).
 * @param props.body Payload for updating the analytics stat entry.
 * @path /discussionBoard/admin/engagementStats/:engagementStatId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the engagement stat entry to update (UUID). */
    engagementStatId: string & tags.Format<"uuid">;

    /** Payload for updating the analytics stat entry. */
    body: IDiscussionBoardEngagementStat.IUpdate;
  };
  export type Body = IDiscussionBoardEngagementStat.IUpdate;
  export type Response = IDiscussionBoardEngagementStat;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/engagementStats/:engagementStatId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/engagementStats/${encodeURIComponent(props.engagementStatId ?? "null")}`;
  export const random = (): IDiscussionBoardEngagementStat =>
    typia.random<IDiscussionBoardEngagementStat>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("engagementStatId")(() =>
        typia.assert(props.engagementStatId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an engagement statistic entry by ID
 * (discussion_board_engagement_stats; hard delete).
 *
 * Delete (hard-delete) an engagement statistic entry from the
 * discussion_board_engagement_stats reporting table, specified by unique ID.
 * This operation is only allowed for 'admin' users, reflecting the destructive
 * and sensitive nature of analytics record deletion. As there is no soft-delete
 * provision in the schema, the record is physically removed. Attempting to
 * delete a nonexistent or in-use record will result in an error as per API
 * standards.
 *
 * Used primarily for correcting errors in analytics processing, regulatory
 * compliance, or data integrity management. Caution and audit logging are
 * strongly recommended for all delete operations in production.
 *
 * @param props.connection
 * @param props.engagementStatId Unique identifier of the engagement stat entry
 *   to delete (UUID).
 * @path /discussionBoard/admin/engagementStats/:engagementStatId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the engagement stat entry to delete (UUID). */
    engagementStatId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/engagementStats/:engagementStatId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/engagementStats/${encodeURIComponent(props.engagementStatId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("engagementStatId")(() =>
        typia.assert(props.engagementStatId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

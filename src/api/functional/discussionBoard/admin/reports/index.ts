import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardReport } from "../../../../structures/IPageIDiscussionBoardReport";
import { IDiscussionBoardReport } from "../../../../structures/IDiscussionBoardReport";

/**
 * Retrieve paginated list of discussion board content reports.
 *
 * Fetches a paginated list of user reports regarding content that may violate
 * community guidelines. This leverages the discussion_board_reports table,
 * pulling all reports, regardless of status, for review or data analytics.
 * Useful for compliance, moderation, or admin dashboards. Only trusted roles
 * such as moderators and admins may access the full reports list, as it may
 * contain sensitive content and personal details.
 *
 * Security and permissions control is enforced: only users with 'moderator' or
 * 'admin' roles may call this endpoint. Results connect with related moderation
 * actions or audit logs via UUID references, optimizing workflows for content
 * resolution or compliance tracking.
 *
 * A typical error case is requesting too many results or unauthorized access,
 * which returns a standard error and does not leak information about specific
 * reports.
 *
 * This endpoint may be used with PATCH /reports for advanced filtering, and GET
 * /reports/{reportId} for individual details.
 *
 * @param props.connection
 * @path /discussionBoard/admin/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardReport.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/reports",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/reports";
  export const random = (): IPageIDiscussionBoardReport.ISummary =>
    typia.random<IPageIDiscussionBoardReport.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new moderation report for abusive or inappropriate content.
 *
 * Allows an authenticated member to submit a report about questionable or
 * abusive content. The operation validates required fields—such as reporterId,
 * content type, reported entity, and reason for the report—before storing. All
 * new reports default to 'pending' status for review. Automated timestamping of
 * creation supports audits and follow-up.
 *
 * Only users with member, moderator, or admin roles may create reports (guests
 * cannot file complaints). Error scenarios include insufficient permissions,
 * attempts to double-report, or references to non-existent content.
 *
 * Creation triggers notifications to moderators for review. Use GET or PATCH
 * endpoints to retrieve or review submitted reports.
 *
 * @param props.connection
 * @param props.body Information required to create a new content report.
 * @path /discussionBoard/admin/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new content report. */
    body: IDiscussionBoardReport.ICreate;
  };
  export type Body = IDiscussionBoardReport.ICreate;
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/reports";
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search with filter and pagination on content reports.
 *
 * Allows moderators or admins to perform advanced queries over all reports,
 * enabling filtering by parameters like content type, status, reporter, or time
 * window. Utilizes the discussion_board_reports table and joins permitted
 * related entities for rich search functionality.
 *
 * Access is restricted to users with moderator or admin roles. Complex queries
 * assist in operational workflows (triage, follow-ups, closure monitoring) and
 * analytics. Pagination and sorting should be used to manage large result sets,
 * and results are summaries optimized for quick review.
 *
 * Errors may include malformed search queries or requests by unauthorized
 * actors. This endpoint complements GET /reports for unfiltered listings.
 *
 * @param props.connection
 * @param props.body Search and filtering options for board content reports.
 * @path /discussionBoard/admin/reports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search and filtering options for board content reports. */
    body: IDiscussionBoardReport.IRequest;
  };
  export type Body = IDiscussionBoardReport.IRequest;
  export type Response = IPageIDiscussionBoardReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/reports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/reports";
  export const random = (): IPageIDiscussionBoardReport.ISummary =>
    typia.random<IPageIDiscussionBoardReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific content report by ID.
 *
 * Retrieves a detailed report record as stored in discussion_board_reports,
 * including all required fields and any connected moderation or resolution
 * metadata (via linked entities or UUIDs). Appropriate for in-depth review or
 * for processing moderation actions.
 *
 * Permission checks ensure only admins or moderators may retrieve full details,
 * which can include sensitive user data or content allegations. Attempts by
 * unauthorized roles yield clear error messages without disclosing underlying
 * report content.
 *
 * This endpoint is typically used after locating an interesting report via
 * list/search, enabling one-by-one processing and resolution workflows.
 *
 * @param props.connection
 * @param props.reportId Unique identifier for the targeted content report
 *   (UUID).
 * @path /discussionBoard/admin/reports/:reportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the targeted content report (UUID). */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update properties of a specific report (e.g., resolve, annotate, reassign).
 *
 * Allows authorized users (moderators or admins) to update report records—for
 * instance, changing status from 'pending' to 'resolved', annotating the
 * report, or linking to a moderation action. Only fields present in the
 * underlying schema are mutable. Input undergoes validation, audit trails are
 * triggered on each update.
 *
 * Strict permissions prevent non-moderators from updating content reports.
 * Errors may arise if attempts are made to update immutable or non-existent
 * records.
 *
 * Frequently used in moderation workflows alongside GET endpoints for resolving
 * user complaints.
 *
 * @param props.connection
 * @param props.reportId UUID of the report to update.
 * @param props.body Fields permitted for update on a report.
 * @path /discussionBoard/admin/reports/:reportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the report to update. */
    reportId: string & tags.Format<"uuid">;

    /** Fields permitted for update on a report. */
    body: IDiscussionBoardReport.IUpdate;
  };
  export type Body = IDiscussionBoardReport.IUpdate;
  export type Response = IDiscussionBoardReport;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/reports/:reportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IDiscussionBoardReport =>
    typia.random<IDiscussionBoardReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a report record (hard delete).
 *
 * Removes a report from persistent storage in the reports moderation system.
 * The operation is irreversible due to the absence of a soft-delete or
 * timestamp field in the schema. Implement strict permission checks to avoid
 * improper data loss—only admins or, where policy allows, senior moderators
 * should be granted this method.
 *
 * All successful deletions must be logged in the system audit trail as per
 * moderation/compliance requirements. Attempts to delete non-existent or locked
 * records yield informative errors without side effects.
 *
 * This should be used with caution, and log review is advised after usage for
 * compliance and troubleshooting.
 *
 * @param props.connection
 * @param props.reportId UUID of the report to delete.
 * @path /discussionBoard/admin/reports/:reportId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the report to delete. */
    reportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/reports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/reports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

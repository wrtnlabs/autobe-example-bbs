import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardCategory } from "../../../../structures/IDiscussionBoardCategory";
export * as categoryModerators from "./categoryModerators";

/**
 * Create a new discussion board category (admin-only).
 *
 * Allows an authorized administrator to create a new category in the
 * discussion_board_categories schema. All required/non-null fields (name,
 * is_active) must be provided, with optional fields for parent_id and
 * description.
 *
 * This endpoint supports UI scenarios where admins configure the topic/category
 * structure. Only users with administrative roles should access this operation.
 * Validation includes enforcing category name uniqueness and verifying that the
 * optional parent_id, if used, refers to an existing category.
 *
 * Upon success, the endpoint returns the new category object. If a name
 * collision or invalid parent_id is detected, an error is returned. All
 * creation events are logged in the audit system for compliance and
 * troubleshooting.
 *
 * @param props.connection
 * @param props.body Details for the new category, including name, status, and
 *   optional parent/description.
 * @path /discussionBoard/admin/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details for the new category, including name, status, and optional
     * parent/description.
     */
    body: IDiscussionBoardCategory.ICreate;
  };
  export type Body = IDiscussionBoardCategory.ICreate;
  export type Response = IDiscussionBoardCategory;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/categories";
  export const random = (): IDiscussionBoardCategory =>
    typia.random<IDiscussionBoardCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing discussion board category by ID (admin-only).
 *
 * Enables administrative modification of an existing category identified by
 * categoryId in the discussion_board_categories schema. Editable fields include
 * all mutable properties: name, description, parent_id, and is_active. Name
 * uniqueness and valid parent_id (must refer to another existing category or be
 * null) are enforced.
 *
 * This endpoint is restricted to admin users, as changes may affect the
 * navigation, visibility, and permissions structure for the entire board. Every
 * update is logged in the audit system, including old and new values. Errors
 * are returned for name collisions or invalid parent references.
 *
 * Security: Only admins may update or reorganize categories. On success, the
 * updated category object is returned, including all metadata. Edge cases
 * include circular parent_id assignments, which must be rejected with clear
 * error responses.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier for the category to update.
 * @param props.body Fields to update for the category: name, description,
 *   parent, or status.
 * @path /discussionBoard/admin/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the category to update. */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the category: name, description, parent, or
     * status.
     */
    body: IDiscussionBoardCategory.IUpdate;
  };
  export type Body = IDiscussionBoardCategory.IUpdate;
  export type Response = IDiscussionBoardCategory;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IDiscussionBoardCategory =>
    typia.random<IDiscussionBoardCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a discussion board category by ID (admin-only, hard
 * delete).
 *
 * Permanently deletes a discussion board category from the database using its
 * categoryId. As the schema lacks a soft delete or logical removal indicator,
 * this operation performs a hard delete, removing the record entirely and
 * cascading as defined by the schema's referential integrity.
 *
 * Usage of this endpoint is restricted to admins. Deletion of a category may
 * affect related category_moderators, audit_logs, system_notices, and topics
 * due to cascading foreign key relationships. The operation must fail with a
 * clear error if the category is referenced by dependent records that prevent
 * deletion. All deletions should be fully audited for accountability.
 *
 * Security and compliance: Hard delete is irreversible, so clients should
 * require confirmation. Any attempt to delete a non-existent or protected
 * category results in a 404 or permission-denied error.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category to delete.
 * @path /discussionBoard/admin/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the category to delete. */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

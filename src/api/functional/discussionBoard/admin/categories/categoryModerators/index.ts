import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardCategoryModerator } from "../../../../../structures/IPageIDiscussionBoardCategoryModerator";
import { IDiscussionBoardCategoryModerator } from "../../../../../structures/IDiscussionBoardCategoryModerator";

/**
 * List all moderator assignments for a specific category.
 *
 * Returns a paginated list of moderator assignments specific to a category
 * (categoryId), as defined in the discussion_board_category_moderators schema.
 * This operation is mostly for admin or board management UIs that review
 * moderation coverage per category.
 *
 * Each moderator assignment object provides a cross-reference between a
 * category and a moderator, including creation time for auditing. Security is
 * moderate: public read-only for transparency is possible, but admin or
 * moderator role may be required for sensitive audit data in production
 * systems.
 *
 * Edge cases include missing/invalid categoryId or absence of assignments for a
 * given category, which results in an empty list or a not-found error.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category whose moderators
 *   are listed.
 * @path /discussionBoard/admin/categories/:categoryId/categoryModerators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the category whose moderators are listed. */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIDiscussionBoardCategoryModerator;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/categories/:categoryId/categoryModerators",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryModerators`;
  export const random = (): IPageIDiscussionBoardCategoryModerator =>
    typia.random<IPageIDiscussionBoardCategoryModerator>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Assign a moderator to a category (admin-only).
 *
 * Enables an admin to create a new moderator assignment for a given category,
 * as written to the discussion_board_category_moderators schema. The request
 * must supply both the category ID (from path) and the target moderator ID (in
 * body). Validation ensures the target moderator exists and this
 * category-moderator pair is not already present (unique constraint).
 *
 * Audit logs must capture assignment events for compliance.
 *
 * Security: Only admin users may create such assignments, because this confers
 * moderation rights and affects role coverage. Duplicate or invalid assignments
 * return errors and no changes are made. On success, the full assignment object
 * with timestamps is returned.
 *
 * @param props.connection
 * @param props.categoryId ID of category to which the moderator will be
 *   assigned.
 * @param props.body Assignment details, including target moderator's ID (and
 *   any audit metadata if required).
 * @path /discussionBoard/admin/categories/:categoryId/categoryModerators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of category to which the moderator will be assigned. */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Assignment details, including target moderator's ID (and any audit
     * metadata if required).
     */
    body: IDiscussionBoardCategoryModerator.ICreate;
  };
  export type Body = IDiscussionBoardCategoryModerator.ICreate;
  export type Response = IDiscussionBoardCategoryModerator;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/categories/:categoryId/categoryModerators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryModerators`;
  export const random = (): IDiscussionBoardCategoryModerator =>
    typia.random<IDiscussionBoardCategoryModerator>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Filtered, paginated search of moderator assignments for a category (admin
 * only).
 *
 * Provides a paginated, filtered, and sortable list of moderator assignments
 * for a specified category (categoryId). Accepts filtering criteria including
 * by moderator ID and date assigned, and supports pagination of results when
 * large numbers of moderator assignments exist.
 *
 * Designed for admin dashboards and audit tools, this endpoint ensures only
 * authorized roles may perform such searches. Any found assignments include all
 * fields from discussion_board_category_moderators, including moderator IDs and
 * timestamps.
 *
 * Security is enforced for admins only. Edge cases include invalid categoryId,
 * out-of-range pagination, or filtering for non-existent moderators, returning
 * empty results or error objects.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the target category for
 *   moderator assignment search.
 * @param props.body Search, filter, and pagination info for finding moderators
 *   in a category.
 * @path /discussionBoard/admin/categories/:categoryId/categoryModerators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Unique identifier of the target category for moderator assignment
     * search.
     */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and pagination info for finding moderators in a
     * category.
     */
    body: IDiscussionBoardCategoryModerator.IRequest;
  };
  export type Body = IDiscussionBoardCategoryModerator.IRequest;
  export type Response = IPageIDiscussionBoardCategoryModerator;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/categories/:categoryId/categoryModerators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryModerators`;
  export const random = (): IPageIDiscussionBoardCategoryModerator =>
    typia.random<IPageIDiscussionBoardCategoryModerator>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details about a specific moderator assignment for a category (admin).
 *
 * Retrieves the details of a single moderator assignment for a given
 * category-moderator pair, from the discussion_board_category_moderators
 * schema. The returned object gives assignment metadata, including links to the
 * moderator and category, and the creation timestamp.
 *
 * Primarily for admin UIs, audits, or for editors managing moderation
 * assignments. Security is enforced: only admins may view individual moderator
 * assignments, as membership in this table reflects permissions coverage at the
 * category level.
 *
 * Edge cases include not-found errors when the assignment is missing or
 * category-moderator IDs don't match an actual relationship.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier for the associated category.
 * @param props.categoryModeratorId Unique ID for this moderator assignment row.
 * @path /discussionBoard/admin/categories/:categoryId/categoryModerators/:categoryModeratorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the associated category. */
    categoryId: string & tags.Format<"uuid">;

    /** Unique ID for this moderator assignment row. */
    categoryModeratorId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardCategoryModerator;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/categories/:categoryId/categoryModerators/:categoryModeratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryModerators/${encodeURIComponent(props.categoryModeratorId ?? "null")}`;
  export const random = (): IDiscussionBoardCategoryModerator =>
    typia.random<IDiscussionBoardCategoryModerator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("categoryModeratorId")(() =>
        typia.assert(props.categoryModeratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a moderator assignment for a category (admin-only).
 *
 * Allows updating of a moderator assignment in
 * discussion_board_category_moderators for a specific category. The fields that
 * may be updated include moderator_id (for reassignment); ensuring both
 * category and moderator IDs exist, and unique constraints (no duplicate
 * assignments) are preserved.
 *
 * Primarily intended for admin dashboard workflows, role correction or
 * reassignment events. The operation is audited. Attempting to reassign to a
 * non-existent moderator, or to duplicate an extant assignment, will fail.
 *
 * Only admins can update moderator assignments. On success, the updated
 * assignment object is returned.
 *
 * @param props.connection
 * @param props.categoryId ID of the category for the moderator assignment.
 * @param props.categoryModeratorId ID for the moderator assignment record being
 *   updated.
 * @param props.body Fields for updating moderator assignment (mainly new
 *   moderator_id, if changed).
 * @path /discussionBoard/admin/categories/:categoryId/categoryModerators/:categoryModeratorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the category for the moderator assignment. */
    categoryId: string & tags.Format<"uuid">;

    /** ID for the moderator assignment record being updated. */
    categoryModeratorId: string & tags.Format<"uuid">;

    /**
     * Fields for updating moderator assignment (mainly new moderator_id, if
     * changed).
     */
    body: IDiscussionBoardCategoryModerator.IUpdate;
  };
  export type Body = IDiscussionBoardCategoryModerator.IUpdate;
  export type Response = IDiscussionBoardCategoryModerator;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/categories/:categoryId/categoryModerators/:categoryModeratorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryModerators/${encodeURIComponent(props.categoryModeratorId ?? "null")}`;
  export const random = (): IDiscussionBoardCategoryModerator =>
    typia.random<IDiscussionBoardCategoryModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("categoryModeratorId")(() =>
        typia.assert(props.categoryModeratorId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a moderator assignment from a category (admin-only, hard delete).
 *
 * Deletes a moderator assignment from the specified category by
 * categoryModeratorId and categoryId in discussion_board_category_moderators.
 * Since the schema does not support soft delete, this operation removes the row
 * entirely. Done by admin users to revoke moderation rights for a category.
 *
 * This is used in admin UIs for permission management or in disciplinary
 * workflows. Each delete event is audited for traceability. Deletion of
 * non-existent or invalid assignments throws an error (404 or permission
 * denied). Related permissions are updated in the underlying system.
 *
 * Hard deletes are irreversible, so clients should require user confirmation.
 * Audit records ensure that deleted assignments remain traceable for
 * compliance.
 *
 * @param props.connection
 * @param props.categoryId ID of the category from which the moderator
 *   assignment is to be removed.
 * @param props.categoryModeratorId ID of the moderator assignment to be
 *   deleted.
 * @path /discussionBoard/admin/categories/:categoryId/categoryModerators/:categoryModeratorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * ID of the category from which the moderator assignment is to be
     * removed.
     */
    categoryId: string & tags.Format<"uuid">;

    /** ID of the moderator assignment to be deleted. */
    categoryModeratorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/categories/:categoryId/categoryModerators/:categoryModeratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}/categoryModerators/${encodeURIComponent(props.categoryModeratorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("categoryModeratorId")(() =>
        typia.assert(props.categoryModeratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardSetting } from "../../../../structures/IPageIDiscussionBoardSetting";
import { IDiscussionBoardSetting } from "../../../../structures/IDiscussionBoardSetting";

/**
 * Get all discussion board settings (discussion_board_settings table).
 *
 * Retrieve all configuration settings for the discussion board. This operation
 * reads from the discussion_board_settings table, returning all setting entries
 * ordered as appropriate (e.g., by created_at or key). Sensitive or advanced
 * settings may be filtered based on the requesting user's authorization role.
 *
 * Authorization is restricted to users with the 'admin' role. Audit logging
 * records access to this endpoint. If no settings exist, returns an empty
 * array.
 *
 * This endpoint is paired with advanced search/patch, create, update, and
 * delete operations for complete board configuration management.
 *
 * @param props.connection
 * @path /discussionBoard/admin/settings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardSetting;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/settings",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/settings";
  export const random = (): IPageIDiscussionBoardSetting =>
    typia.random<IPageIDiscussionBoardSetting>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new discussion board setting (discussion_board_settings table).
 *
 * Create a new persistent configuration option for the board in the
 * discussion_board_settings table. Accepts setting_key, value, and optional
 * description in the request body. Uniqueness is enforced on the key, and
 * creation/update timestamps are set by the system. If a reserved or critical
 * key is used, additional validation may apply.
 *
 * Role-restricted to 'admin'. Upon creation, an audit log entry is recorded.
 * Returns the full entry including assigned id and timestamps. Produces errors
 * for key conflicts or schema violations.
 *
 * Complements update and list endpoints for settings lifecycle management.
 *
 * @param props.connection
 * @param props.body New board setting data, including key, value, and optional
 *   description.
 * @path /discussionBoard/admin/settings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * New board setting data, including key, value, and optional
     * description.
     */
    body: IDiscussionBoardSetting.ICreate;
  };
  export type Body = IDiscussionBoardSetting.ICreate;
  export type Response = IDiscussionBoardSetting;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/settings";
  export const random = (): IDiscussionBoardSetting =>
    typia.random<IDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search discussion board settings (discussion_board_settings table) with
 * filters, pagination, and sort.
 *
 * Enables advanced, paginated, and filtered retrieval of board settings via
 * POST-like search semantics. Pulls from the discussion_board_settings table,
 * leveraging indices on created_at for performance. Typical usage includes
 * searching for settings by partial key, date range, or active state. Results
 * are sorted and paged according to request criteria.
 *
 * Accessible only by users with 'admin' role. Audit logs are recorded. Error
 * responses are triggered for invalid query syntax or excessive range
 * requests.
 *
 * This endpoint complements the get/list variant with flexible query
 * construction for administrative tools.
 *
 * @param props.connection
 * @param props.body Patch search criteria and pagination for settings
 *   retrieval.
 * @path /discussionBoard/admin/settings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Patch search criteria and pagination for settings retrieval. */
    body: IDiscussionBoardSetting.IRequest;
  };
  export type Body = IDiscussionBoardSetting.IRequest;
  export type Response = IPageIDiscussionBoardSetting;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/settings";
  export const random = (): IPageIDiscussionBoardSetting =>
    typia.random<IPageIDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific discussion board setting by ID (discussion_board_settings
 * table).
 *
 * Fetch a specific discussion board setting by its UUID identifier from the
 * discussion_board_settings table. Returns the key, value, and description
 * fields, as well as creation and update timestamps, per the Prisma schema.
 * Ensures referential integrity for administrative view or management
 * workflows.
 *
 * Restricted to users with 'admin' role. Triggers audit log entries for access
 * events. Responds with appropriate error messages if the ID does not
 * correspond to an existing setting.
 *
 * This endpoint is typically used along with update, delete, and create
 * endpoints for settings management.
 *
 * @param props.connection
 * @param props.settingId The unique identifier (UUID) for the board setting
 *   entry.
 * @path /discussionBoard/admin/settings/:settingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) for the board setting entry. */
    settingId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardSetting;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/settings/:settingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): IDiscussionBoardSetting =>
    typia.random<IDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("settingId")(() => typia.assert(props.settingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific discussion board setting (discussion_board_settings table)
 * by ID.
 *
 * Update an existing configuration entry in the discussion_board_settings
 * table. Request body must conform to schema and may update key, value, and
 * description. Only fields present in the schema may be updated. The endpoint
 * is strictly for administrators and will validate permission, as well as
 * uniqueness for any updated key field.
 *
 * Audit logging is enforced, and errors are returned for conflicts, invalid
 * ids, or schema violations. Returns the full updated settings row for
 * confirmation.
 *
 * Complements the create and delete endpoints for settings lifecycle
 * management.
 *
 * @param props.connection
 * @param props.settingId Unique identifier (UUID) for the board setting entry
 *   to update.
 * @param props.body Update data for the settings row (fields per schema).
 * @path /discussionBoard/admin/settings/:settingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) for the board setting entry to update. */
    settingId: string & tags.Format<"uuid">;

    /** Update data for the settings row (fields per schema). */
    body: IDiscussionBoardSetting.IUpdate;
  };
  export type Body = IDiscussionBoardSetting.IUpdate;
  export type Response = IDiscussionBoardSetting;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/settings/:settingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): IDiscussionBoardSetting =>
    typia.random<IDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("settingId")(() => typia.assert(props.settingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (hard delete) a discussion board setting by ID
 * (discussion_board_settings table).
 *
 * Permanently remove a discussion board setting from the settings table using
 * its unique id. This hard delete (since deleted_at is not present in the
 * schema) means the setting is fully removed from the system. Primarily used
 * during administration or when board configuration requirements change.
 *
 * Deletion is restricted to users with the 'admin' role. All deletes are
 * logged, and errors are returned if the row does not exist or deletion fails
 * for integrity reasons.
 *
 * Works in conjunction with the create, update, and get endpoints for lifecycle
 * management.
 *
 * @param props.connection
 * @param props.settingId Unique identifier (UUID) for the setting to be
 *   deleted.
 * @path /discussionBoard/admin/settings/:settingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) for the setting to be deleted. */
    settingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/settings/:settingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("settingId")(() => typia.assert(props.settingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

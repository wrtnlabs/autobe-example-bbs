import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardMember } from "../../../../structures/IPageIDiscussionBoardMember";
import { IDiscussionBoardMember } from "../../../../structures/IDiscussionBoardMember";

/**
 * Retrieve all board member records from 'discussion_board_members'.
 *
 * Display a list of all board members from the 'discussion_board_members'
 * table, including id, user_identifier, join time, and suspension (if any). No
 * filtering or sorting; returns all members unconditionallyâ€”see the PATCH
 * endpoint for advanced query options.
 *
 * Only admins can invoke this to protect user identity data. Fields returned
 * strictly mirror the schema. Additional columns, computed flags, or related
 * info are NOT included. This read-only, bulk-access endpoint is best suited
 * for system admin utilities with limited data volumes.
 *
 * @param props.connection
 * @path /discussionBoard/admin/members
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardMember;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/members",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/members";
  export const random = (): IPageIDiscussionBoardMember =>
    typia.random<IPageIDiscussionBoardMember>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create/register a new board member record.
 *
 * Add a new user as a full member of the board; typically done at registration.
 * Input must contain at least user_identifier and join timestamp. Admin can use
 * this for back office onboarding or migration from other user directories.
 *
 * Upon success, response is the created member record per schema (id,
 * user_identifier, joined_at, etc). Duplicates will error out. Access is
 * admin-only to control system membership integrity.
 *
 * @param props.connection
 * @param props.body New member fields as required: user identifier, join date,
 *   etc.
 * @path /discussionBoard/admin/members
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New member fields as required: user identifier, join date, etc. */
    body: IDiscussionBoardMember.ICreate;
  };
  export type Body = IDiscussionBoardMember.ICreate;
  export type Response = IDiscussionBoardMember;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/members";
  export const random = (): IDiscussionBoardMember =>
    typia.random<IDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search with filtering/paging of board member records.
 *
 * Perform filtered and paginated retrieval of member records from
 * 'discussion_board_members'. Use this when needing specific subsets (e.g. only
 * suspended users, by registration window, or search by user_identifier).
 *
 * Supports all logical search dimensions defined by the schema (id,
 * user_identifier, join/suspension dates, etc), plus paging and ordering
 * controls as in 'IPageIDiscussionBoardMember'. Results and error handling
 * align with system standard. Only accessible to admins for user identity
 * safety and audit alignment.
 *
 * @param props.connection
 * @param props.body Request criteria and paging fields for member search.
 * @path /discussionBoard/admin/members
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Request criteria and paging fields for member search. */
    body: IDiscussionBoardMember.IRequest;
  };
  export type Body = IDiscussionBoardMember.IRequest;
  export type Response = IPageIDiscussionBoardMember;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/members";
  export const random = (): IPageIDiscussionBoardMember =>
    typia.random<IPageIDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Look up and display one board member by id.
 *
 * Return details of a single board member as found via primary id lookup in
 * discussion_board_members. Used for administrative review, role mapping, or
 * compliance reporting.
 *
 * Access limited to admin users for privacy and audit reasons. Will error as
 * not-found if the id does not exist, or forbidden for unauthorized callers.
 * All output fields are direct from schema; no sensitive or computed data
 * beyond defined fields is exposed.
 *
 * @param props.connection
 * @param props.memberId The UUID of the board member to retrieve.
 * @path /discussionBoard/admin/members/:memberId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the board member to retrieve. */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardMember;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IDiscussionBoardMember =>
    typia.random<IDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Change audit fields (e.g. suspend/reactivate) for a board member by id.
 *
 * Change a member's audit or registration data using their id. This includes
 * suspending/reactivating the account (via suspended_at), amending join time,
 * or user_identifier corrections, all fields as in schema.
 *
 * Input: memberId in path and field(s) to update as body. Return: updated
 * member record or errors as appropriate. Only admins may update, respecting
 * the system's privacy and audit requirements. Proper audit logging is expected
 * for compliance.
 *
 * @param props.connection
 * @param props.memberId UUID of the member to update.
 * @param props.body Fields to be updated for the member record.
 * @path /discussionBoard/admin/members/:memberId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the member to update. */
    memberId: string & tags.Format<"uuid">;

    /** Fields to be updated for the member record. */
    body: IDiscussionBoardMember.IUpdate;
  };
  export type Body = IDiscussionBoardMember.IUpdate;
  export type Response = IDiscussionBoardMember;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IDiscussionBoardMember =>
    typia.random<IDiscussionBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a membership record by id.
 *
 * Remove a board member from the discussion_board_members table using their
 * UUID. Since there is no soft-delete mechanism in the schema, this is a
 * permanent, unrecoverable operation, intended only for admin use.
 *
 * If the given id does not exist, standard not-found response is returned. On
 * success, response is empty. Error handling aligns with system standard for
 * data deletion, and only admins may delete to protect system integrity and
 * audit trail.
 *
 * @param props.connection
 * @param props.memberId UUID of the member to be deleted.
 * @path /discussionBoard/admin/members/:memberId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the member to be deleted. */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

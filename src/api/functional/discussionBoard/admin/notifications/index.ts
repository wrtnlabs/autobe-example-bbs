import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardNotification } from "../../../../structures/IDiscussionBoardNotification";

/**
 * Create a new notification event (discussion_board_notifications table).
 *
 * Registers a new notification in the discussion_board_notifications table.
 * Input must provide the recipient member ID, message content, type (e.g.,
 * reply, system, mention), delivery status, and any optional context
 * (subscription link, target entity info).
 *
 * Security context: Only admins, moderators, or automated systems are
 * authorized to deliver notifications directly. Audit logs track who/what
 * originated the notification, and improper access will be denied.
 *
 * Related APIs: GET/PATCH for notification retrieval; PUT for updating
 * delivery/read status; DELETE to remove notifications (e.g., manual admin
 * cleanup).
 *
 * @param props.connection
 * @param props.body Information for creating the notification event
 * @path /discussionBoard/admin/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information for creating the notification event */
    body: IDiscussionBoardNotification.ICreate;
  };
  export type Body = IDiscussionBoardNotification.ICreate;
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/notifications";
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification properties (discussion_board_notifications table).
 *
 * Update an existing notification event, typically used to mark as read, update
 * message details, change delivery status, or record a delivery failure. Only
 * the recipient, admins, or system agents can update a notification. Changes
 * are fully audit-logged according to the notifications schema.
 *
 * Business logic blocks updates on notifications not belonging to the session
 * user unless an admin role is present. Proper validation occurs on all updated
 * fields (read_at timestamp, etc.).
 *
 * Typical use: Mark notification as read in UI, report message delivery issues,
 * or manually update failed delivery records for analytics. Related: single
 * notification GET/DELETE.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the notification to update
 * @param props.body Fields to update for the specified notification
 * @path /discussionBoard/admin/notifications/:notificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the notification to update */
    notificationId: string & tags.Format<"uuid">;

    /** Fields to update for the specified notification */
    body: IDiscussionBoardNotification.IUpdate;
  };
  export type Body = IDiscussionBoardNotification.IUpdate;
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification by ID (discussion_board_notifications).
 *
 * Delete a notification from the user's notification feed according to the
 * discussion_board_notifications schema. Only the recipient, admin, or system
 * agents may remove a notification. Operation removes the record entirely if
 * there is no soft-delete flag in the schema.
 *
 * Deletion attempts by non-owners are rejected. Operation is fully audit-logged
 * for compliance and recovery. Related: use GET for single view, PATCH for
 * batch query, POST to create notifications.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the notification to remove
 * @path /discussionBoard/admin/notifications/:notificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the notification to remove */
    notificationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

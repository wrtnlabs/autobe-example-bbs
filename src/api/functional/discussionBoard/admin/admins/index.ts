import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardAdmin } from "../../../../structures/IPageIDiscussionBoardAdmin";
import { IDiscussionBoardAdmin } from "../../../../structures/IDiscussionBoardAdmin";

/**
 * List all registered admins (discussion_board_admins) with status and
 * assignment details.
 *
 * Fetches all admin records from the discussion_board_admins schema, providing
 * a directory of platform administrators. Data output includes id (PK/UUID),
 * user_identifier (identity handle or SSO/user email), grant timestamp, and
 * possible revocation timestamp for tracking current and historical admin
 * assignments.
 *
 * Exposes active admins (revoked_at null) and optionally revoked past
 * administrators. Designed for admin OWndership monitoring and dashboard
 * reporting. Paginated for scalability.
 *
 * Access: Admins only. For role assignment, use POST/PUT; to edit privileges,
 * update methods are available. To fetch a single admin, use GET
 * /admins/{adminId}.
 *
 * @param props.connection
 * @path /discussionBoard/admin/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardAdmin;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/admins",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/admins";
  export const random = (): IPageIDiscussionBoardAdmin =>
    typia.random<IPageIDiscussionBoardAdmin>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new admin user in discussion_board_admins (role assignment).
 *
 * Adds a new administrator to the system as per discussion_board_admins model.
 * Input must include user_identifier (external ID or principal string).
 * granted_at is set on creation. Optionally may provide a revoked_at time if
 * the assignment is preemptively time-limited (otherwise null for active
 * assignment).
 *
 * This operation is restricted to other admins. Used in workflows that promote
 * users to admin level, onboarding new platform managers, or for role handover
 * during organization changes. Enforces unique constraint for user_identifier.
 * Returns full record as persisted, including UUID for new admin.
 *
 * To modify or demote, use PUT or DELETE. For listing, see GET or PATCH
 * endpoints.
 *
 * @param props.connection
 * @param props.body Admin creation details: user_identifier, grant time,
 *   optional revocation.
 * @path /discussionBoard/admin/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Admin creation details: user_identifier, grant time, optional
     * revocation.
     */
    body: IDiscussionBoardAdmin.ICreate;
  };
  export type Body = IDiscussionBoardAdmin.ICreate;
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/admins";
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search/list admins by filters from discussion_board_admins table.
 *
 * Returns a filtered, paginated result set of administrator entities from
 * discussion_board_admins. The request body supports filtering by active state,
 * search for user_identifier, grant/revoke date ranges, supporting business
 * operations for privilege audits, admin activity monitoring, and automated
 * reporting consumers.
 *
 * Designed for backend/admin panel use, not general users. Advanced filtering
 * is useful to identify privilege elevation/demotion patterns, and track
 * assignment history per platform security requirements.
 *
 * Use in combination with individual GET, PUT, POST, or DELETE as needed for
 * lifecycle management. Only accessible by system admin role; returns nothing
 * for other users.
 *
 * @param props.connection
 * @param props.body Search criteria for filtering/admin lookup, including state
 *   or user_identifier.
 * @path /discussionBoard/admin/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria for filtering/admin lookup, including state or
     * user_identifier.
     */
    body: IDiscussionBoardAdmin.IRequest;
  };
  export type Body = IDiscussionBoardAdmin.IRequest;
  export type Response = IPageIDiscussionBoardAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/admins";
  export const random = (): IPageIDiscussionBoardAdmin =>
    typia.random<IPageIDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a single admin’s detail record from discussion_board_admins by ID.
 *
 * Returns full details for one administrator entity as defined in the
 * discussion_board_admins schema. Exposes id, user_identifier, grant and
 * optional revocation timestamp, supporting permission history, account status,
 * and audit review.
 *
 * Intended for admin owners and compliance/operations staff, e.g. to review a
 * specific admin’s tenure and status. Only available to admins; others denied.
 * Returns 404 if not found.
 *
 * To create, update, or delete admins see relevant endpoints. This is the
 * canonical single-lookup operation.
 *
 * @param props.connection
 * @param props.adminId UUID (PK) for the admin to retrieve. Must match
 *   discussion_board_admins.id field.
 * @path /discussionBoard/admin/admins/:adminId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * UUID (PK) for the admin to retrieve. Must match
     * discussion_board_admins.id field.
     */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details for specific admin by ID in discussion_board_admins.
 *
 * Updates the admin entity by UUID primary key, as defined in the
 * discussion_board_admins schema. Allows changing the user_identifier (e.g.,
 * after SSO change), updating the grant time, or setting/resetting the revoked
 * time for privilege changes. Only available to active admin users.
 *
 * Critical for revoking admin rights, transferring admin role, or managing
 * future-dated assignments. Audit log is updated for every modification.
 *
 * Returns the full admin entity as it stands post-update. Returns 404 if the
 * target record does not exist.
 *
 * Related endpoints for lifecycle: POST (create), DELETE (remove), GET
 * (single); supports role management UI/data flows.
 *
 * @param props.connection
 * @param props.adminId UUID of admin entity to update (must exist in
 *   discussion_board_admins.id).
 * @param props.body Updated assignment info: user_identifier, (un)assign
 *   timestamps as desired.
 * @path /discussionBoard/admin/admins/:adminId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * UUID of admin entity to update (must exist in
     * discussion_board_admins.id).
     */
    adminId: string & tags.Format<"uuid">;

    /**
     * Updated assignment info: user_identifier, (un)assign timestamps as
     * desired.
     */
    body: IDiscussionBoardAdmin.IUpdate;
  };
  export type Body = IDiscussionBoardAdmin.IUpdate;
  export type Response = IDiscussionBoardAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IDiscussionBoardAdmin =>
    typia.random<IDiscussionBoardAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete admin entity by ID from discussion_board_admins (privilege
 * removal).
 *
 * Executes hard deletion of an admin record from the system by PK (adminId:
 * UUID), according to the discussion_board_admins schema. Note: there is no
 * soft deletion (no deleted_at column), so the record is fully removed.
 * Restricted to admin users. Always updates system audit log (not included
 * here).
 *
 * Removes all admin privileges immediately from user_identifier. Should only be
 * invoked with full compliance and privilege safety procedures in place.
 *
 * Returns 204 No Content on success; 404 Not Found for missing target.
 * Lifecycle endpoints: POST (create), PUT (update).
 *
 * @param props.connection
 * @param props.adminId UUID (PK) of the admin entity to delete, matching
 *   discussion_board_admins.id.
 * @path /discussionBoard/admin/admins/:adminId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * UUID (PK) of the admin entity to delete, matching
     * discussion_board_admins.id.
     */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

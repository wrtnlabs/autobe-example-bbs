import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPostVersion } from "../../../../../structures/IDiscussionBoardPostVersion";

/**
 * Change post version data in discussion_board_post_versions (admin/mod only).
 *
 * Updates an existing version record with new content or metadata, as justified
 * by board policy. Only permitted to admin or moderator roles (not regular
 * members), as version records are normally append-only. The operation uses
 * IDiscussionBoardPostVersion.IUpdate as the expected request body. Careful
 * audit and validation ensure historical integrity, logging all modifications
 * and enforcing field-level restrictions. Most UIs will not expose this, but it
 * must be provided for compliance scenarios.
 *
 * @param props.connection
 * @param props.postId ID of the post the version belongs to.
 * @param props.versionId ID of the version record to update.
 * @param props.body Fields to update for the given version record.
 * @path /discussionBoard/admin/posts/:postId/versions/:versionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the post the version belongs to. */
    postId: string & tags.Format<"uuid">;

    /** ID of the version record to update. */
    versionId: string & tags.Format<"uuid">;

    /** Fields to update for the given version record. */
    body: IDiscussionBoardPostVersion.IUpdate;
  };
  export type Body = IDiscussionBoardPostVersion.IUpdate;
  export type Response = IDiscussionBoardPostVersion;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/posts/:postId/versions/:versionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/posts/${encodeURIComponent(props.postId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): IDiscussionBoardPostVersion =>
    typia.random<IDiscussionBoardPostVersion>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("versionId")(() => typia.assert(props.versionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (hard) a post version snapshot (admin/mod only, irreversible).
 *
 * Permanently deletes a specific post version record for a post, by versionId.
 * This operation is restricted to admin and moderator roles per compliance
 * policies. Hard deletes remove the version record from persistent storage,
 * making it unavailable in future audits or version views. Comprehensive audit
 * trails must be updated to record the deletion action and the responsible
 * actor. Related endpoints include version create, update, and retrieve.
 * Attempting this as a regular member results in an authorization error.
 *
 * @param props.connection
 * @param props.postId ID of the post whose version is to be deleted.
 * @param props.versionId ID of the version snapshot to delete.
 * @path /discussionBoard/admin/posts/:postId/versions/:versionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the post whose version is to be deleted. */
    postId: string & tags.Format<"uuid">;

    /** ID of the version snapshot to delete. */
    versionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/posts/:postId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/posts/${encodeURIComponent(props.postId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

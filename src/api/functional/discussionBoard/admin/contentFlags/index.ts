import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardContentFlag } from "../../../../structures/IPageIDiscussionBoardContentFlag";
import { IDiscussionBoardContentFlag } from "../../../../structures/IDiscussionBoardContentFlag";

/**
 * Retrieve paginated summary list of all discussion board content flags.
 *
 * This API retrieves a paginated listing of content flags attached to posts or
 * comments in the discussion board system. It provides moderators and admins
 * with an overview of all flagged content for review, enforcement, and
 * compliance auditing, supporting filter options such as flag type, creator, or
 * date range.
 *
 * Access is restricted to users with moderation or administrative privileges to
 * safeguard sensitive moderation data. The operation enforces audit trails for
 * every invocation, aligning with platform requirements for transparency and
 * role-based access.
 *
 * The output includes basic information for each flag (target type and ID, flag
 * type/source, creator identity, creation time, and if cleared), as described
 * in the schema. For details on a specific flag, use the GET
 * /contentFlags/{contentFlagId} endpoint.
 *
 * @param props.connection
 * @path /discussionBoard/admin/contentFlags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardContentFlag.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/contentFlags",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/contentFlags";
  export const random = (): IPageIDiscussionBoardContentFlag.ISummary =>
    typia.random<IPageIDiscussionBoardContentFlag.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new content flag for posts or comments, marking them for moderation.
 *
 * This endpoint allows a moderator or admin to create a new flag on a post or
 * comment. It supports polymorphic targeting by including either post_id or
 * comment_id, and specifies the flag type, source, and any additional details.
 *
 * Permissions are enforced to restrict flag creation to users with moderation
 * or admin roles. The operation is audit-logged to record flag creation events,
 * supporting traceability and compliance.
 *
 * After flag creation, the returned record includes all information for
 * reference in moderation tracking tools.
 *
 * @param props.connection
 * @param props.body Flag creation details, including target (post/comment),
 *   flag type/source, and optional notes.
 * @path /discussionBoard/admin/contentFlags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Flag creation details, including target (post/comment), flag
     * type/source, and optional notes.
     */
    body: IDiscussionBoardContentFlag.ICreate;
  };
  export type Body = IDiscussionBoardContentFlag.ICreate;
  export type Response = IDiscussionBoardContentFlag;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/contentFlags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/contentFlags";
  export const random = (): IDiscussionBoardContentFlag =>
    typia.random<IDiscussionBoardContentFlag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and retrieve detailed paginated content flag listings with
 * advanced criteria.
 *
 * This API enables authorized users (moderators/admins) to search and filter
 * content flags using advanced query parameters. Filters may include flag type
 * (spam, abuse, etc.), flag source (manual/automation), creation/clearance date
 * range, target type (post/comment), or actor identity.
 *
 * Role-based access restrictions are enforced, and operations are logged for
 * audit and compliance. The system protects sensitive information by returning
 * only permitted details per user role. Results are paginated and sortable,
 * supporting moderator dashboards and compliance analytics.
 *
 * For viewing individual flag details, use the GET
 * /contentFlags/{contentFlagId} endpoint. For flag creation or resolution, see
 * POST/PUT endpoints.
 *
 * @param props.connection
 * @param props.body Advanced search and filtering criteria for content flags,
 *   including pagination and sort options.
 * @path /discussionBoard/admin/contentFlags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Advanced search and filtering criteria for content flags, including
     * pagination and sort options.
     */
    body: IDiscussionBoardContentFlag.IRequest;
  };
  export type Body = IDiscussionBoardContentFlag.IRequest;
  export type Response = IPageIDiscussionBoardContentFlag;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/contentFlags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/contentFlags";
  export const random = (): IPageIDiscussionBoardContentFlag =>
    typia.random<IPageIDiscussionBoardContentFlag>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific content flag for moderation or
 * audit.
 *
 * Fetches detailed information for a single content flag instance specified by
 * contentFlagId. This endpoint is used by moderators and admins to investigate
 * and resolve flagged posts or comments, supporting audit requirements and
 * compliance enforcement.
 *
 * Returned details include IDs of moderator/admin who set the flag, target
 * type, flag type/source, additional notes, and relevant timestamps. Only users
 * with proper roles can access sensitive flag metadata, and unsuccessful
 * attempts are logged for security compliance.
 *
 * For modifying or clearing the flag, use PUT or DELETE on this endpoint.
 * Related moderation actions may be found via corresponding endpoints.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the target content flag
 *   instance.
 * @path /discussionBoard/admin/contentFlags/:contentFlagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target content flag instance. */
    contentFlagId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardContentFlag;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/contentFlags/:contentFlagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}`;
  export const random = (): IDiscussionBoardContentFlag =>
    typia.random<IDiscussionBoardContentFlag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing content flag’s status, type, or details for moderation
 * workflows.
 *
 * Enables moderators or admins to update an existing content flag identified by
 * contentFlagId. This includes clearing a flag, amending flag type/source, or
 * adding flag details as resolution notes.
 *
 * Authorization and auditing are strictly enforced, capturing who made updates
 * and when. Changes appear in moderation dashboards and compliance reports.
 *
 * Incorrect or unauthorized updates are blocked and recorded for audit
 * monitoring. To delete a flag completely, use the DELETE endpoint.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier for the target flag to be
 *   updated.
 * @param props.body Update instructions for the flag, such as clearing status,
 *   amending details, or flag type/source changes.
 * @path /discussionBoard/admin/contentFlags/:contentFlagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target flag to be updated. */
    contentFlagId: string & tags.Format<"uuid">;

    /**
     * Update instructions for the flag, such as clearing status, amending
     * details, or flag type/source changes.
     */
    body: IDiscussionBoardContentFlag.IUpdate;
  };
  export type Body = IDiscussionBoardContentFlag.IUpdate;
  export type Response = IDiscussionBoardContentFlag;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/contentFlags/:contentFlagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}`;
  export const random = (): IDiscussionBoardContentFlag =>
    typia.random<IDiscussionBoardContentFlag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific content flag after moderation review. Hard
 * delete—no soft delete field.
 *
 * Removes a content flag from the system, permanently deleting it from the
 * database. Hard deletion is performed since discussion_board_content_flags has
 * no soft-delete capability.
 *
 * Restricted to moderators or admins, this operation is audit-logged to ensure
 * traceability and compliance. Attempted deletion of non-existent or
 * unauthorized flags results in appropriate error responses and event logging.
 *
 * To clear (but retain) a flag, use the PUT endpoint with status update
 * instead. For listing all flags, see GET or PATCH endpoints.
 *
 * @param props.connection
 * @param props.contentFlagId Unique identifier of the flag record to delete.
 * @path /discussionBoard/admin/contentFlags/:contentFlagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the flag record to delete. */
    contentFlagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/contentFlags/:contentFlagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/contentFlags/${encodeURIComponent(props.contentFlagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentFlagId")(() => typia.assert(props.contentFlagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

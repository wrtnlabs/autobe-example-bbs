import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTopics } from "../../../../structures/IDiscussionBoardTopics";
export * as threads from "./threads";

/**
 * Create a new discussion topic (discussion_board_topics).
 *
 * Allows an authenticated member to create a new discussion topic in the board.
 * Input data includes title, optional description, category selection, and
 * initial state for pinned and closed flags. Records the creator member as the
 * author of the topic.
 *
 * All required fields must be validated: category must exist and be active,
 * title must be unique within the chosen category, and all inputs must pass
 * general business validation. The discussion_board_topics table will be
 * populated upon success, and the related category/member associations are
 * updated accordingly.
 *
 * Security: Topic creation is only available to authenticated users with the
 * member role or higher. Guests cannot create topics; admins/moderators may
 * also use this endpoint per requirements. Error handling includes duplicate
 * title, inactive category, or invalid references.
 *
 * Upon success, the created topic is returned in full. For UI/UX flows, this
 * operation is followed by redirect or prompt to create threads within the
 * topic.
 *
 * @param props.connection
 * @param props.body Full data to create a new topic; includes title, category,
 *   optional description, and flags.
 * @path /discussionBoard/admin/topics
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Full data to create a new topic; includes title, category, optional
     * description, and flags.
     */
    body: IDiscussionBoardTopics.ICreate;
  };
  export type Body = IDiscussionBoardTopics.ICreate;
  export type Response = IDiscussionBoardTopics;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/topics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/topics";
  export const random = (): IDiscussionBoardTopics =>
    typia.random<IDiscussionBoardTopics>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing discussion topic by ID (discussion_board_topics).
 *
 * Enables the update of a topic's core fields, including title, description,
 * associated category, and state flags (pinned, closed) by its unique
 * identifier. Only the original creator, moderators, or admins may perform
 * updates. The operation fetches the existing topic and applies updates as per
 * validated business logic.
 *
 * Field-level validation enforces non-null, unique title within the category,
 * category must exist/active, and changes are traceable to the updater for
 * audit. Table updates occur in discussion_board_topics; audit and analytics
 * may log the event for reporting.
 *
 * Authorization: Updates are available to topic owner (creator), moderators, or
 * admin roles. Error handling addresses invalid reference, duplicate titles,
 * unauthorized updates, or category issues.
 *
 * The operation returns the updated topic on success or an error otherwise.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) of the topic to update.
 * @param props.body Fields to update for the topic (title, description,
 *   category, pinned/closed).
 * @path /discussionBoard/admin/topics/:topicId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the topic to update. */
    topicId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the topic (title, description, category,
     * pinned/closed).
     */
    body: IDiscussionBoardTopics.IUpdate;
  };
  export type Body = IDiscussionBoardTopics.IUpdate;
  export type Response = IDiscussionBoardTopics;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/topics/:topicId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): IDiscussionBoardTopics =>
    typia.random<IDiscussionBoardTopics>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a discussion topic by ID (discussion_board_topics).
 *
 * Deletes a discussion topic from the system using its unique identifier. Based
 * on the schema (no soft delete flag), this performs a hard delete, permanently
 * removing the record from the database. The operation removes the topic from
 * discussion_board_topics and all associated cascading relationships (threads,
 * posts, etc.) per foreign key cascade.
 *
 * Only admins and moderators are authorized to perform topic deletionâ€”in line
 * with moderation and audit requirements. Members may not delete topics they do
 * not own. Deletion is audit-logged for compliance and accountability. If the
 * topic does not exist or the user lacks sufficient privileges, the request
 * fails with an appropriate error message.
 *
 * Clients should expect no response body on success; only status code and
 * standard confirmation of deletion. Subsequent attempts to access this topic
 * will fail with not found.
 *
 * @param props.connection
 * @param props.topicId Unique identifier (UUID) of the topic to be deleted.
 * @path /discussionBoard/admin/topics/:topicId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the topic to be deleted. */
    topicId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/topics/:topicId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/topics/${encodeURIComponent(props.topicId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("topicId")(() => typia.assert(props.topicId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardPostVersion } from "../../../../../structures/IPageIDiscussionBoardPostVersion";
import { IDiscussionBoardPostVersion } from "../../../../../structures/IDiscussionBoardPostVersion";

/**
 * List all version snapshots of a post from discussion_board_post_versions.
 *
 * Fetch all stored versions for a particular post as per the
 * discussion_board_post_versions schema. Returns an array of all
 * chronological/ordered snapshots, each exposing body content, version number,
 * created_at timestamp, and editor_member_id where available. Authorization
 * guarantees only allowed users can see non-public history (e.g., members see
 * their own post histories, moderators/admins can audit any). This endpoint
 * underpins the view history/rollback UI or audit reporting.
 *
 * @param props.connection
 * @param props.postId ID of the post to retrieve all version entries for.
 * @path /discussionBoard/member/posts/:postId/versions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** ID of the post to retrieve all version entries for. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIDiscussionBoardPostVersion;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/member/posts/:postId/versions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/versions`;
  export const random = (): IPageIDiscussionBoardPostVersion =>
    typia.random<IPageIDiscussionBoardPostVersion>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a revision snapshot for a post in discussion_board_post_versions.
 *
 * Enables the creation of a new version of a specific post when edits occur.
 * Follows the IDiscussionBoardPostVersion.ICreate schema for body
 * dataâ€”specifying which post, the new content, and the acting editor_member_id.
 * System-generated fields (ID, created_at) are excluded from the request body.
 * Validates that the editor is authorized and that version numbering remains
 * sequential (incremented). The operation is essential for implementing robust
 * edit history, rollback, and moderation procedures. Related endpoints allow
 * viewing all versions or fetching an individual snapshot.
 *
 * @param props.connection
 * @param props.postId The ID of the post for which the version is created.
 * @param props.body All required data for creating a new post version record.
 * @path /discussionBoard/member/posts/:postId/versions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The ID of the post for which the version is created. */
    postId: string & tags.Format<"uuid">;

    /** All required data for creating a new post version record. */
    body: IDiscussionBoardPostVersion.ICreate;
  };
  export type Body = IDiscussionBoardPostVersion.ICreate;
  export type Response = IDiscussionBoardPostVersion;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/posts/:postId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/versions`;
  export const random = (): IDiscussionBoardPostVersion =>
    typia.random<IDiscussionBoardPostVersion>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter version history for a post (discussion_board_post_versions
 * table).
 *
 * Performs advanced search and filtering for versions of a specific post. The
 * request body follows IDiscussionBoardPostVersion.IRequest and enables
 * searching by version number, editor, timestamp, or content. Used by
 * admin/moderator UIs for audit, moderation, or detailed history examination.
 * Results are paginated for efficient navigation. Security enforces viewing is
 * only allowed to the original post's owner or privileged roles. Input
 * validation errors or access refusals are clearly reported.
 *
 * @param props.connection
 * @param props.postId ID of the post for which version history search is
 *   performed.
 * @param props.body Filter, search, and pagination parameters for post version
 *   search.
 * @path /discussionBoard/member/posts/:postId/versions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** ID of the post for which version history search is performed. */
    postId: string & tags.Format<"uuid">;

    /** Filter, search, and pagination parameters for post version search. */
    body: IDiscussionBoardPostVersion.IRequest;
  };
  export type Body = IDiscussionBoardPostVersion.IRequest;
  export type Response = IPageIDiscussionBoardPostVersion;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/member/posts/:postId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/versions`;
  export const random = (): IPageIDiscussionBoardPostVersion =>
    typia.random<IPageIDiscussionBoardPostVersion>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a single version snapshot for a post from
 * discussion_board_post_versions.
 *
 * Fetches the details of a particular version of a post as stored in
 * discussion_board_post_versions. The response exposes only this version's
 * body, editor_member_id, version number, and created_at timestamp. Respects
 * role-based viewing policy: only post owners or authorized roles may access.
 * Related endpoints include retrieving full version lists or posting new
 * version snapshots (as with edits). Invalid parameters or unauthorized access
 * returns precise error responses.
 *
 * @param props.connection
 * @param props.postId ID of the post whose version is to be fetched.
 * @param props.versionId ID of the version snapshot to retrieve.
 * @path /discussionBoard/member/posts/:postId/versions/:versionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the post whose version is to be fetched. */
    postId: string & tags.Format<"uuid">;

    /** ID of the version snapshot to retrieve. */
    versionId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPostVersion;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/member/posts/:postId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): IDiscussionBoardPostVersion =>
    typia.random<IDiscussionBoardPostVersion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

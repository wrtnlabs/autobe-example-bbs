import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPostAttachment } from "../../../../../structures/IDiscussionBoardPostAttachment";

/**
 * Create a new attachment on a post (discussion_board_post_attachments).
 *
 * Creates a new attachment associated with an existing post. This operation
 * appends a record to discussion_board_post_attachments, capturing the file
 * link, file name, MIME type, upload timestamp, and the member's identity.
 *
 * Authentication is required for all uploading members; only the post owner or
 * those with reply/upload permissions may add attachments. System checks ensure
 * only active, unlocked posts allow new files, and that the post exists and is
 * accessible to the acting user.
 *
 * Responds with the metadata for the attachment as stored, including the file
 * download URI. Failed inserts (due to locked post, permission problems, or
 * missing/invalid input) result in a detailed error message. This operation is
 * crucial for supporting file/media uploads in post-creation or reply flows.
 *
 * @param props.connection
 * @param props.postId Unique identifier of post to attach the file to.
 * @param props.body New attachment details (file URI, name, type, uploader,
 *   etc.).
 * @path /discussionBoard/member/posts/:postId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of post to attach the file to. */
    postId: string & tags.Format<"uuid">;

    /** New attachment details (file URI, name, type, uploader, etc.). */
    body: IDiscussionBoardPostAttachment.ICreate;
  };
  export type Body = IDiscussionBoardPostAttachment.ICreate;
  export type Response = IDiscussionBoardPostAttachment;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/posts/:postId/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/attachments`;
  export const random = (): IDiscussionBoardPostAttachment =>
    typia.random<IDiscussionBoardPostAttachment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update post attachment metadata by post and attachment IDs
 * (discussion_board_post_attachments).
 *
 * Updates the metadata—such as file name or possibly URI—of an existing post
 * attachment. Relies on both the parent post identifier and the unique
 * attachmentId to ensure only the intended record is modified. Update requires
 * authenticated caller with appropriate permission, as enforced by role and
 * ownership logic in the application.
 *
 * Permissible only for the original uploading member, moderators, or admins.
 * Request body defines which properties are updatable, and the implementation
 * respects strict adherence to fields in the discussion_board_post_attachments
 * schema, denying updates to immutable fields (like uploaded timestamp). Errors
 * are generated for attempts to update non-existent or orphaned attachments,
 * for unauthorized access, and for immutable property updates.
 *
 * Enables correction of filenames, updates for replaced files, etc. A
 * successful update returns the full updated metadata.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post with the attachment.
 * @param props.attachmentId Unique identifier of the attachment to be updated.
 * @param props.body Updated attachment metadata fields permissible for
 *   modification.
 * @path /discussionBoard/member/posts/:postId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the post with the attachment. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the attachment to be updated. */
    attachmentId: string & tags.Format<"uuid">;

    /** Updated attachment metadata fields permissible for modification. */
    body: IDiscussionBoardPostAttachment.IUpdate;
  };
  export type Body = IDiscussionBoardPostAttachment.IUpdate;
  export type Response = IDiscussionBoardPostAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/posts/:postId/attachments/:attachmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IDiscussionBoardPostAttachment =>
    typia.random<IDiscussionBoardPostAttachment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard-delete a post attachment by post and attachment IDs
 * (discussion_board_post_attachments).
 *
 * Deletes a specific attachment from a post. The operation references both post
 * and attachment identifiers to guarantee correct record targeting.
 * Authorization checks ensure that only the original uploader, moderators, or
 * admins can perform the operation.
 *
 * The record is physically deleted from the database since the attachment model
 * does not support soft deletion in the Prisma schema. Depending on
 * implementation, removal of the physical file from external storage must be
 * orchestrated here as well. Errors are returned if the attachment or post does
 * not exist, access is denied, or if business rules (like locked posts) prevent
 * deletion.
 *
 * Deletion audit logs and cascading deletes are handled at the persistence and
 * logging layers as per compliance requirements.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post with the attachment.
 * @param props.attachmentId Unique identifier of the attachment to delete.
 * @path /discussionBoard/member/posts/:postId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the post with the attachment. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the attachment to delete. */
    attachmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/posts/:postId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

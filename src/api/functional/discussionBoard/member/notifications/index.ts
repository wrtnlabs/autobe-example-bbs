import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardNotification } from "../../../../structures/IPageIDiscussionBoardNotification";
import { IDiscussionBoardNotification } from "../../../../structures/IDiscussionBoardNotification";

/**
 * List notifications for the authenticated user (discussion_board_notifications
 * table).
 *
 * Retrieve a list of discussion board notifications for the authenticated user.
 * This operation lists both in-app and email/system notifications, permitting
 * filtering and sorting by delivery status, notification type (reply, mention,
 * post, etc.), and delivery time. The API ensures notifications are only
 * visible to recipients, supports pagination, and applies any security
 * restrictions from the notification schema. Authorization checks confirm the
 * requestor matches the recipient user.
 *
 * The operation is implemented over the discussion_board_notifications and
 * discussion_board_subscriptions tables. Filters and sorting are optimized per
 * index for delivery time and type. Error scenarios include unauthorized
 * access, invalid filters, or no results.
 *
 * Use in conjunction with PATCH /notifications for more complex search, or GET
 * /notifications/{notificationId} for single notification detail retrieval.
 *
 * @param props.connection
 * @path /discussionBoard/member/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardNotification;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/member/notifications",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/member/notifications";
  export const random = (): IPageIDiscussionBoardNotification =>
    typia.random<IPageIDiscussionBoardNotification>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Advanced notification search and filtering for authenticated user
 * (discussion_board_notifications).
 *
 * Performs an advanced search on the discussion_board_notifications table for
 * the current user, offering filtering by type, delivery status, delivery and
 * read timestamps, or failure reasons. Results include only notifications for
 * the requesting member, respecting privacy and security.
 *
 * Filtering/sorting parameters can be used for reporting unread notifications
 * or audit trails. Pagination is enforced, and the API supports complex queries
 * for in-app vs. email notifications, unread history, etc. Use this endpoint
 * for robust workflow support (batch fetch, search by content, etc.).
 *
 * Authorization ensures only recipients can access their own notifications.
 * Related APIs include GET /notifications for simple listing and GET
 * /notifications/{notificationId} for single event detail.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for filtering
 *   notifications
 * @path /discussionBoard/member/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search and pagination parameters for filtering notifications */
    body: IDiscussionBoardNotification.IRequest;
  };
  export type Body = IDiscussionBoardNotification.IRequest;
  export type Response = IPageIDiscussionBoardNotification;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/member/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/member/notifications";
  export const random = (): IPageIDiscussionBoardNotification =>
    typia.random<IPageIDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve notification details by ID (discussion_board_notifications table).
 *
 * Fetch detailed notification information corresponding to the provided
 * notificationId. This operation retrieves all fields from the
 * discussion_board_notifications table, including the notification message,
 * type, status, delivery/read timestamps, and target context.
 *
 * Access control restricts visibility to the notification recipient. Use this
 * endpoint for audit, notification rendering, or troubleshooting delivery
 * errors. Handles cases of not found, unauthorized, or system error with
 * precise error reporting.
 *
 * Related endpoints: GET /notifications (list), PATCH /notifications (search),
 * PUT /notifications/{notificationId} (update read status), DELETE
 * /notifications/{notificationId} (remove notification).
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the target notification
 * @path /discussionBoard/member/notifications/:notificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/member/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification properties (discussion_board_notifications table).
 *
 * Update an existing notification event, typically used to mark as read, update
 * message details, change delivery status, or record a delivery failure. Only
 * the recipient, admins, or system agents can update a notification. Changes
 * are fully audit-logged according to the notifications schema.
 *
 * Business logic blocks updates on notifications not belonging to the session
 * user unless an admin role is present. Proper validation occurs on all updated
 * fields (read_at timestamp, etc.).
 *
 * Typical use: Mark notification as read in UI, report message delivery issues,
 * or manually update failed delivery records for analytics. Related: single
 * notification GET/DELETE.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the notification to update
 * @param props.body Fields to update for the specified notification
 * @path /discussionBoard/member/notifications/:notificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the notification to update */
    notificationId: string & tags.Format<"uuid">;

    /** Fields to update for the specified notification */
    body: IDiscussionBoardNotification.IUpdate;
  };
  export type Body = IDiscussionBoardNotification.IUpdate;
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification by ID (discussion_board_notifications).
 *
 * Delete a notification from the user's notification feed according to the
 * discussion_board_notifications schema. Only the recipient, admin, or system
 * agents may remove a notification. Operation removes the record entirely if
 * there is no soft-delete flag in the schema.
 *
 * Deletion attempts by non-owners are rejected. Operation is fully audit-logged
 * for compliance and recovery. Related: use GET for single view, PATCH for
 * batch query, POST to create notifications.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the notification to remove
 * @path /discussionBoard/member/notifications/:notificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the notification to remove */
    notificationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/member/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardComment } from "../../../../structures/IDiscussionBoardComment";
export * as versions from "./versions";
export * as attachments from "./attachments";

/**
 * Get a single comment's details by commentId (discussion_board_comments).
 *
 * Fetches the complete record for a comment, identified by its globally unique
 * commentId. Returns all persisted fields as defined in the
 * discussion_board_comments schema: content, deletion status, relate member and
 * post IDs, and relevant timestamps.
 *
 * Companion APIs should validate that only authorized roles or the owner can
 * access this endpoint. Used for precise moderation workflows, member lookups,
 * or to populate detailed comment views.
 *
 * Includes proper error feedback if the comment does not exist, has been hard
 * deleted (if ever allowed), or if the user lacks privileges.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to retrieve.
 * @path /discussionBoard/member/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/member/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/member/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update comment content/status by commentId (discussion_board_comments).
 *
 * Updates the visible content or deletion status of a comment as defined in the
 * request body. The Prisma schema supports editing only by the comment's
 * creator, admin, or moderator. Request body must conform to the allowed
 * updatable fields (content, is_deleted). Authorization checks apply for each
 * roleâ€”members may only update their own comments, while moderators/admins may
 * edit any comment.
 *
 * This endpoint is essential for moderation, correcting prior input, or
 * soft-deleting abusive/inappropriate comments (by setting is_deleted=true). On
 * success, returns the full updated comment record. Failure to update due to
 * missing comment, invalid update, or lack of privileges returns a detailed
 * error message.
 *
 * @param props.connection
 * @param props.commentId Unique identifier for the comment to update.
 * @param props.body Fields to update: content, is_deleted.
 * @path /discussionBoard/member/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /** Fields to update: content, is_deleted. */
    body: IDiscussionBoardComment.IUpdate;
  };
  export type Body = IDiscussionBoardComment.IUpdate;
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/member/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/member/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new comment under a post (discussion_board_comments).
 *
 * Adds a new comment to a specified post. The required fields (discussed in
 * IDiscussionBoardComment.ICreate) must include the parent post ID, creator
 * member ID (from session or API context), and comment content. Comment is
 * never soft-deleted on creation. Backend logic enforces member authentication,
 * and validates that the referenced post and member exist and are active.
 *
 * A successful insert returns the full comment record with assigned ID,
 * timestamps, and reference metadata. Error responses are used for attempts by
 * unauthenticated/guest users, missing required data, or referencing
 * locked/deleted posts. This endpoint is a cornerstone of participation on the
 * board.
 *
 * @param props.connection
 * @param props.body New comment fields: content, creator, parent post, etc.
 * @path /discussionBoard/member/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New comment fields: content, creator, parent post, etc. */
    body: IDiscussionBoardComment.ICreate;
  };
  export type Body = IDiscussionBoardComment.ICreate;
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/member/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/member/comments";
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

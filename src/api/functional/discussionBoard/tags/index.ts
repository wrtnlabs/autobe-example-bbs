import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTag } from "../../../structures/IDiscussionBoardTag";
import { IPageIDiscussionBoardTag } from "../../../structures/IPageIDiscussionBoardTag";

/**
 * Create a tag in discussion_board_tags.
 *
 * Adds a new tag (a label for categorization or filtering) to the system, with
 * required metadata such as name and (optionally) description. The request body
 * must provide a unique name for the tag, conforming to uniqueness and content
 * rules. Used to expand the board's taxonomy and support richer content
 * discovery. Administrative privilege required for creation by default; may be
 * extended to advanced users if policy allows. Enforces business rules, and
 * audit logs track creation.
 *
 * @param props.connection
 * @param props.body Information for tag creation (name, description).
 * @path /discussionBoard/tags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Information for tag creation (name, description). */
    body: IDiscussionBoardTag.ICreate;
  };
  export type Body = IDiscussionBoardTag.ICreate;
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/tags";
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search tags in discussion_board_tags.
 *
 * Retrieves and searches a paginated, filterable list of tag entities for the
 * discussion board, supporting full-text keyword search and filtering on tag
 * attributes such as name or creation/update dates. Results may be sorted and
 * paginated. Used in tag browsing UIs, thread/post filters, and for analytics.
 * Satisfies discoverability and admin requirements from the business analysis;
 * audit tracks filter usage for analytics and anti-abuse. Returns tag summaries
 * by default, with metadata ideal for listings or select dropdowns.
 *
 * @param props.connection
 * @param props.body Tag search, filter, pagination criteria.
 * @path /discussionBoard/tags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Tag search, filter, pagination criteria. */
    body: IDiscussionBoardTag.IRequest;
  };
  export type Body = IDiscussionBoardTag.IRequest;
  export type Response = IPageIDiscussionBoardTag;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/tags";
  export const random = (): IPageIDiscussionBoardTag =>
    typia.random<IPageIDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a tag in discussion_board_tags.
 *
 * Fetches all metadata (name, description, audit timestamps) for a specific
 * tag, as needed for tag detail or edit screens, tag explanations, or admin
 * workflows. Used by regular users for context about content tags, and by
 * admins/moderators for tag management or audit. Not-found errors returned on
 * missing or deleted tags. Read-only operation, necessary for managing the
 * board's tag taxonomy as described in business requirements.
 *
 * @param props.connection
 * @param props.id ID of the tag to retrieve.
 * @path /discussionBoard/tags/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** ID of the tag to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/tags/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/tags/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a tag in discussion_board_tags.
 *
 * Updates tag information (such as name or description) for taxonomy management
 * or editorial adjustments. Authorization restricted to admins or moderators.
 * Operation validates updates do not introduce duplicates or break existing
 * constraints/content references. Applies audit logging for compliance,
 * preserving original data for traceability. Returns the updated tag details.
 * Handles not-found and conflict errors with explicit feedback.
 *
 * @param props.connection
 * @param props.id ID of tag to update.
 * @param props.body Update information (name/description) for tag.
 * @path /discussionBoard/tags/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of tag to update. */
    id: string & tags.Format<"uuid">;

    /** Update information (name/description) for tag. */
    body: IDiscussionBoardTag.IUpdate;
  };
  export type Body = IDiscussionBoardTag.IUpdate;
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/tags/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/tags/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a tag from discussion_board_tags.
 *
 * Removes a tag from the forum's taxonomy. Requested tag is soft-deleted for
 * compliance and audit reasons, and returned object confirms operation result.
 * Returns appropriate errors for not-found or constraint violation (if in use
 * by content). Deletion permission typically restricted to moderators/admins,
 * with all actions logged for transparency.
 *
 * @param props.connection
 * @param props.id ID of tag to delete.
 * @path /discussionBoard/tags/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of tag to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/tags/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/tags/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardBan } from "../../../structures/IDiscussionBoardBan";
import { IPageIDiscussionBoardBan } from "../../../structures/IPageIDiscussionBoardBan";

/**
 * Create a new ban record (discussion_board_bans table) for a member.
 *
 * This endpoint allows an administrator or moderator to create a new ban for a
 * specific member.
 *
 * According to the discussion_board_bans table, each ban record requires the
 * member_id (target member's uuid), moderator_id (moderator/admin uuid),
 * ban_reason, permanent flag, created_at timestamp, and may optionally include
 * expires_at (for temp bans) and deleted_at (for undo/audit). This operation
 * must enforce permission checks so that only authorized actors can perform
 * bans. On ban creation, affected members may be notified, and audit logs
 * should record the action.
 *
 * Validation rules:
 *
 * - The member being banned must exist and not already have an active permanent
 *   ban.
 * - If the ban is not permanent, expires_at must be a future date.
 * - The moderator_id must reference a user with active moderator or admin role.
 *
 * Related APIs:
 *
 * - Use DELETE /discussionBoard/bans/{id} to lift/remove a ban.
 * - Use PUT /discussionBoard/bans/{id} to update ban details (e.g., change
 *   expiry).
 * - Use PATCH /discussionBoard/members to search for eligible members to
 *   ban/verify membership.
 *
 * All user-role permission checks, reason codes, and auditing must comply with
 * moderation and security sections of the requirements analysis and table
 * comments.
 *
 * @param props.connection
 * @param props.body Payload to create a new ban. Contains member_id,
 *   moderator_id, ban_reason, permanent flag, created_at, and optional
 *   expires_at.
 * @path /discussionBoard/bans
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Payload to create a new ban. Contains member_id, moderator_id,
     * ban_reason, permanent flag, created_at, and optional expires_at.
     */
    body: IDiscussionBoardBan.ICreate;
  };
  export type Body = IDiscussionBoardBan.ICreate;
  export type Response = IDiscussionBoardBan;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/bans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/bans";
  export const random = (): IDiscussionBoardBan =>
    typia.random<IDiscussionBoardBan>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of user bans (discussion_board_bans table).
 *
 * Returns a paginated, filterable list of ban records for board members.
 * Supports filtering by member, moderator, permanence, timeframes, expiration,
 * and reason. Used for enforcement audits, reviewing policy adherence, and
 * moderation reporting.
 *
 * Bans are soft-deleted for audit purposes until permanently removed. Full
 * access restricted to authorized users; all actions logged for compliance.
 *
 * @param props.connection
 * @param props.body Filtering and pagination settings for user bans.
 * @path /discussionBoard/bans
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering and pagination settings for user bans. */
    body: IDiscussionBoardBan.IRequest;
  };
  export type Body = IDiscussionBoardBan.IRequest;
  export type Response = IPageIDiscussionBoardBan;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/bans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/bans";
  export const random = (): IPageIDiscussionBoardBan =>
    typia.random<IPageIDiscussionBoardBan>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific user ban by ID (discussion_board_bans table).
 *
 * Fetches details for an individual ban entry, including moderator, member,
 * reason, permanence, and timeline. Used for compliance checks, reviewing
 * policy enforcement, or automating re-instatement workflows. Access is
 * strictly controlled and logged for security.
 *
 * @param props.connection
 * @param props.id Unique identifier of the ban entry to retrieve.
 * @path /discussionBoard/bans/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the ban entry to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardBan;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/bans/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/bans/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardBan =>
    typia.random<IDiscussionBoardBan>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing ban (discussion_board_bans table) for a member.
 *
 * Update ban details such as reason, expiration, or permanence for an existing
 * ban record.
 *
 * The endpoint strictly enforces that only users with moderator or admin role
 * can update bans. Parameters include the ban's UUID in the path, and the body
 * defines updateable fields: ban_reason, permanent, expires_at, and deleted_at
 * (for retraction purposes), following field validation rules in the Prisma
 * schema. All changes should be logged, and related member records should be
 * referenced for ban state consistency per requirements.
 *
 * Validation rules:
 *
 * - Only active bans can be updated (not soft-deleted/lifted).
 * - Changed expires_at for temp bans must be after current time.
 * - Permanent status may only be toggled if the ban is not expired or deleted.
 * - Only authorized users may use this endpoint.
 *
 * Related endpoints:
 *
 * - POST /discussionBoard/bans for ban creation
 * - DELETE /discussionBoard/bans/{id} for lifting bans
 *
 * All updates must comply with audit and moderation traceability requirements
 * as described in the table and requirements analysis.
 *
 * @param props.connection
 * @param props.id Ban's unique ID (UUID) to update.
 * @param props.body Fields to update on an existing ban. Only ban_reason,
 *   permanent, expires_at, deleted_at allowed.
 * @path /discussionBoard/bans/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Ban's unique ID (UUID) to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Fields to update on an existing ban. Only ban_reason, permanent,
     * expires_at, deleted_at allowed.
     */
    body: IDiscussionBoardBan.IUpdate;
  };
  export type Body = IDiscussionBoardBan.IUpdate;
  export type Response = IDiscussionBoardBan;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/bans/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/bans/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardBan =>
    typia.random<IDiscussionBoardBan>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Lift/remove (soft-delete) an existing ban (discussion_board_bans table) by
 * ID.
 *
 * Lifts or soft-deletes a ban (removes active effect, marks deleted_at) for a
 * specific ban ID.
 *
 * Authors (moderator/admin) must be authorized per requirements. Only bans that
 * are active (not already deleted) may be removed. Operation must comply with
 * audit, traceability, and reversibility rules as outlined in the
 * moderation/business rules.
 *
 * Dependencies:
 *
 * - Ban must exist and be active to be lifted
 * - Audit logging of the action is mandatory
 * - Related endpoints for ban creation and updating are POST and PUT
 *
 * Security notes: All actions are subject to trace, audit, and must be logged
 * for compliance with the platform's moderation security policies.
 *
 * @param props.connection
 * @param props.id Ban's unique ID (UUID) to remove.
 * @path /discussionBoard/bans/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Ban's unique ID (UUID) to remove. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardBan;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/bans/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/bans/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardBan =>
    typia.random<IDiscussionBoardBan>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

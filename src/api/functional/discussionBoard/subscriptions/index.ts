import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardSubscription } from "../../../structures/IDiscussionBoardSubscription";
import { IPageIDiscussionBoardSubscription } from "../../../structures/IPageIDiscussionBoardSubscription";

/**
 * Create a new subscription (discussion_board_subscriptions), following
 * specified content.
 *
 * Creates a new subscription for a user to follow a content item (thread,
 * section, tag).
 *
 * Request body requires the target_type (which must match accepted values),
 * target_id (UUID of the content to follow), and infers user id from
 * authentication context. On success, returns the created subscription.
 *
 * Related endpoints:
 *
 * - PATCH for searching/listing user subscriptions
 * - GET for detail
 * - PUT for update
 *
 * Security/permission: Authenticated users only; duplicate subscriptions
 * disallowed; permissions validated against content ownership if necessary.
 *
 * Uniqueness: Combination of member_id, target_type, target_id must be unique
 * per schema.
 *
 * @param props.connection
 * @param props.body Payload for new subscription: target_type, target_id, and
 *   (implicitly) member_id.
 * @path /discussionBoard/subscriptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Payload for new subscription: target_type, target_id, and
     * (implicitly) member_id.
     */
    body: IDiscussionBoardSubscription.ICreate;
  };
  export type Body = IDiscussionBoardSubscription.ICreate;
  export type Response = IDiscussionBoardSubscription;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/subscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/subscriptions";
  export const random = (): IDiscussionBoardSubscription =>
    typia.random<IDiscussionBoardSubscription>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search user subscriptions (discussion_board_subscriptions) for
 * authenticated user.
 *
 * Fetch paginated and filterable list of all current subscriptions for the
 * authenticated user.
 *
 * Pagination, sorting, and searching match the requirements: able to filter by
 * followed content types, time, or specific entity IDs. Only current user's
 * subscriptions are returned (not deleted/malformed). User roles: member,
 * moderator, administrator.
 *
 * Associated endpoints:
 *
 * - GET /discussionBoard/subscriptions/{id} for detail
 * - POST /discussionBoard/subscriptions for subscribing to new content
 * - PUT /discussionBoard/subscriptions/{id} to modify
 * - DELETE (not listed) for unsubscribing (may be in extendable set)
 *
 * Security/permissions: User must be authenticated and can only search their
 * own items.
 *
 * @param props.connection
 * @param props.body Request/search/pagination parameters for user
 *   subscriptions.
 * @path /discussionBoard/subscriptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Request/search/pagination parameters for user subscriptions. */
    body: IDiscussionBoardSubscription.IRequest;
  };
  export type Body = IDiscussionBoardSubscription.IRequest;
  export type Response = IPageIDiscussionBoardSubscription;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/subscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/subscriptions";
  export const random = (): IPageIDiscussionBoardSubscription =>
    typia.random<IPageIDiscussionBoardSubscription>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single subscription (discussion_board_subscriptions) by ID for the
 * user.
 *
 * Get the details of a particular subscription for the authenticated user by
 * subscription ID.
 *
 * ID must be a valid UUID and must belong to the current user. Returns the
 * subscription object if authorized. Not found/error returned otherwise.
 *
 * Associated endpoints:
 *
 * - PATCH for list
 * - POST for create
 * - PUT for update
 *
 * Security/authorization: Only item owner (user) or admins can use. All access
 * subject to audit/logging.
 *
 * @param props.connection
 * @param props.id Subscription unique ID (UUID) to retrieve.
 * @path /discussionBoard/subscriptions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Subscription unique ID (UUID) to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardSubscription;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/subscriptions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/subscriptions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardSubscription =>
    typia.random<IDiscussionBoardSubscription>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a subscription (discussion_board_subscriptions) by ID for the
 * authenticated user.
 *
 * Update settings or attributes for a specific subscription by ID for the
 * authenticated user.
 *
 * The request must include the subscription ID in the path and an update body
 * containing only fields that are allowed to change (may be limited, e.g.,
 * notification preferences). Fully enforces that only owner or admin can
 * change. All actions audited for compliance.
 *
 * Associated endpoints:
 *
 * - GET for detail
 * - PATCH for search/list
 * - POST for creation
 * - DELETE (for unsubscribing, may be out of scope)
 *
 * Security: Ownership validated. Audit logs produced. Unsubscribed/deleted
 * items not returned in list/search endpoints.
 *
 * @param props.connection
 * @param props.id Subscription unique ID (UUID) to update.
 * @param props.body Subscription update payload (allowed fields per business
 *   rules for update).
 * @path /discussionBoard/subscriptions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Subscription unique ID (UUID) to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Subscription update payload (allowed fields per business rules for
     * update).
     */
    body: IDiscussionBoardSubscription.IUpdate;
  };
  export type Body = IDiscussionBoardSubscription.IUpdate;
  export type Response = IDiscussionBoardSubscription;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/subscriptions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/subscriptions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardSubscription =>
    typia.random<IDiscussionBoardSubscription>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a subscription by ID (discussion_board_subscriptions table).
 *
 * This endpoint enables a user (must be authenticated and the subscription
 * owner) to delete an existing subscription by its UUID. Operation checks
 * role-based authorization: only the subscription owner may perform the delete.
 * Underlying logic checks if the subscription exists, then performs a soft
 * delete or permanent removal as per business rules. Returns success or
 * relevant error (not found, forbidden, or gone). If subscription relates to
 * notifications or personalized feeds, removal is immediate; any queued
 * notifications are not delivered. Attempts to delete others' subscriptions
 * result in forbidden error, aiding compliance with privacy and security
 * standards. In audit log, this operation is recorded by user and time. Errors
 * handled: 404 for non-existent subscription, 403 for out-of-scope deletion,
 * 500 on internal error.
 *
 * @param props.connection
 * @param props.id The subscription UUID to delete.
 * @path /discussionBoard/subscriptions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** The subscription UUID to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/subscriptions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/subscriptions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

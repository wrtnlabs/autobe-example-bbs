import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardNotification } from "../../../structures/IDiscussionBoardNotification";
import { IPageIDiscussionBoardNotification } from "../../../structures/IPageIDiscussionBoardNotification";

/**
 * Create a new notification delivery record in the
 * discussion_board_notification table.
 *
 * This API operation allows manual or system-driven creation of a notification
 * record, specifying the target user, notification type, title, body, and
 * defaults for read status and timestamps. It is primarily intended for
 * administrators or system automation, such as forced notification updates,
 * diagnostic purposes, or handling specific moderation notification flows.
 * Closely integrated with notification delivery logic and user notification
 * settings. Related endpoints are listing (PATCH) and retrieval (GET). Full
 * validation is performed for target user, notification content, and type.
 *
 * @param props.connection
 * @param props.body Parameters required for creating a new notification record.
 * @path /discussionBoard/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Parameters required for creating a new notification record. */
    body: IDiscussionBoardNotification.ICreate;
  };
  export type Body = IDiscussionBoardNotification.ICreate;
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/notifications";
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search user notification records in the discussion_board_notification
 * table.
 *
 * This operation lists, searches, and pages through notification records for
 * users. Query parameters include filtering by recipient, type (reply, mention,
 * moderation, etc.), read/unread status, and sort options. Returns a paginated
 * set of notification records with all necessary metadata for user display.
 * Strict access control only allows the current user, moderators, or admins to
 * view notification lists. It is used for in-app notification dashboards,
 * administration panels, and user audit features. Related endpoints include
 * single notification retrieval and notification creation for system tests or
 * manual delivery.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination criteria for
 *   notifications.
 * @path /discussionBoard/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering, sorting, and pagination criteria for notifications. */
    body: IDiscussionBoardNotification.IRequest;
  };
  export type Body = IDiscussionBoardNotification.IRequest;
  export type Response = IPageIDiscussionBoardNotification;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/notifications";
  export const random = (): IPageIDiscussionBoardNotification =>
    typia.random<IPageIDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific notification by ID from the discussion_board_notification
 * table.
 *
 * This endpoint retrieves a specific notification by its unique ID, returning
 * the full record including all display fields for the notification. This
 * supports both the recipient and authorized admin/moderator users for viewing
 * history, troubleshooting, or reviewing audit logs. Proper authorization and
 * data validation is enforced through established access controls. Closely
 * related endpoints are listing (PATCH), creation (POST), and user notification
 * setting endpoints.
 *
 * @param props.connection
 * @param props.id Notification record's unique identifier (UUID).
 * @path /discussionBoard/notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Notification record's unique identifier (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion_board_notification record by ID.
 *
 * This API updates notification delivery records in the
 * discussion_board_notification table, as described in the Prisma schema. It
 * can only be used to modify mutable fields such as is_read and, optionally,
 * title or body. This ensures that changes are auditable and traceable for
 * moderation transparency. Notification types and links to related event
 * objects should not be altered with this endpoint, maintaining the atomic and
 * immutable character of those fields as intended by the schema. Security is
 * enforced so that only notification recipients or authorized personnel can
 * execute updates. If the requested notification is not found or the user is
 * not authorized, the operation returns an error. Related APIs include GET to
 * retrieve a notification and DELETE to remove one for soft-deletion
 * compliance. Only authorized users can update their own notification records.
 *
 * @param props.connection
 * @param props.id ID of the notification to update.
 * @param props.body Notification update payload.
 * @path /discussionBoard/notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of the notification to update. */
    id: string & tags.Format<"uuid">;

    /** Notification update payload. */
    body: IDiscussionBoardNotification.IUpdate;
  };
  export type Body = IDiscussionBoardNotification.IUpdate;
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/notifications/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a discussion_board_notification record by ID.
 *
 * This endpoint soft-deletes an existing notification in the
 * discussion_board_notification table, setting its deleted_at field while
 * retaining the record for compliance and audit. The operation returns an error
 * if the specified notification doesn't exist or if the user is not authorized
 * to delete it. Security ensures only the recipient of a notification
 * (discussion_board_user) or a relevant system actor can perform the operation.
 * Used in consumer applications for dismissing notifications or in
 * administrative interfaces for enforcing notification retention policies.
 * Related APIs include GET for viewing notifications and PUT for marking them
 * as read or revised.
 *
 * @param props.connection
 * @param props.id ID of the notification to soft-delete.
 * @path /discussionBoard/notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the notification to soft-delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

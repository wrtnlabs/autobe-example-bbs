import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardUserSession } from "../../../structures/IDiscussionBoardUserSession";

/**
 * Register a new user or guest session in tracking system.
 *
 * Upon new login or session tracking event, generate a new session record for
 * the actor. Required fields include actor_type, actor_identifier,
 * session_token, and time windows for creation/expiry. This operation ensures
 * that each user or guest receives a unique session entry for authentication
 * and audit purposes.
 *
 * Proper usage mandates that only legitimate system or platform logic can
 * create session recordsâ€”either as part of the login flow or to establish
 * session analytics. No personally identifiable information outside those
 * fields defined in the schema is recorded here.
 *
 * @param props.connection
 * @param props.body Session details for creation of the new user/guest session.
 * @path /discussionBoard/userSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Session details for creation of the new user/guest session. */
    body: IDiscussionBoardUserSession.ICreate;
  };
  export type Body = IDiscussionBoardUserSession.ICreate;
  export type Response = IDiscussionBoardUserSession;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/userSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/userSessions";
  export const random = (): IDiscussionBoardUserSession =>
    typia.random<IDiscussionBoardUserSession>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardForumCategorySnapshot } from "../../../structures/IDiscussionBoardForumCategorySnapshot";
import { IPageIDiscussionBoardForumCategorySnapshot } from "../../../structures/IPageIDiscussionBoardForumCategorySnapshot";

/**
 * Create a new discussion_board_forum_category_snapshot (for audit/rollback).
 *
 * Creates a record in the discussion_board_forum_category_snapshot table to
 * save the state of a forum category for auditing or rollback. The request
 * includes the source category ID, change author, name, description, and
 * snapshot timestamp. This is used by moderation or admin tools to preserve
 * change history, enable transparency, and comply with rollback and audit
 * policies. Creation is limited to privileged actions. Related endpoints: patch
 * (search/list), get (fetch), put (modify/restore), delete (erase for
 * compliance).
 *
 * @param props.connection
 * @param props.body Information to create a category snapshot record.
 * @path /discussionBoard/forumCategorySnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Information to create a category snapshot record. */
    body: IDiscussionBoardForumCategorySnapshot.ICreate;
  };
  export type Body = IDiscussionBoardForumCategorySnapshot.ICreate;
  export type Response = IDiscussionBoardForumCategorySnapshot;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/forumCategorySnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/forumCategorySnapshots";
  export const random = (): IDiscussionBoardForumCategorySnapshot =>
    typia.random<IDiscussionBoardForumCategorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search discussion_board_forum_category_snapshot records (category
 * version history).
 *
 * Fetches a paginated and optionally filtered set of forum category snapshots.
 * Each snapshot represents a point-in-time record of a category's settings,
 * including its name, description, and the user who made the change. Advanced
 * filtering enables searches by category, user, dates, or actions. Standard
 * pagination and sorting enhance performance and usability. Underlying table:
 * discussion_board_forum_category_snapshot; related: category, user. Used
 * primarily for audit and moderation review, rollback analysis, and
 * transparency reporting.
 *
 * @param props.connection
 * @param props.body Filtering/search/pagination options for forum category
 *   snapshot search.
 * @path /discussionBoard/forumCategorySnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering/search/pagination options for forum category snapshot
     * search.
     */
    body: IDiscussionBoardForumCategorySnapshot.IRequest;
  };
  export type Body = IDiscussionBoardForumCategorySnapshot.IRequest;
  export type Response = IPageIDiscussionBoardForumCategorySnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/forumCategorySnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/forumCategorySnapshots";
  export const random = (): IPageIDiscussionBoardForumCategorySnapshot =>
    typia.random<IPageIDiscussionBoardForumCategorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a single discussion_board_forum_category_snapshot by ID.
 *
 * Retrieves metadata for a specific forum category snapshot using its unique
 * UUID. This includes point-in-time category info (name, description), the
 * change author, and time of change. The operation mainly supports
 * administrative and moderation needs for audit trail and rollback review.
 * Underlying table: discussion_board_forum_category_snapshot. Related: patch
 * (search/list), put (update), post (create), delete (remove).
 *
 * @param props.connection
 * @param props.id Unique identifier for the forum category snapshot (UUID).
 * @path /discussionBoard/forumCategorySnapshots/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier for the forum category snapshot (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardForumCategorySnapshot;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/forumCategorySnapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/forumCategorySnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardForumCategorySnapshot =>
    typia.random<IDiscussionBoardForumCategorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion_board_forum_category_snapshot record by ID
 * (admin/compliance).
 *
 * Updates permitted attributes of a forum category snapshot by unique ID.
 * Permitted fields include retroactive correction of author/user reference, or
 * amending name/description for compliance or legal requirements (not typical
 * business operations). Strict logging, audit trail, and privilege validation
 * are mandatory. The operation references the
 * discussion_board_forum_category_snapshot table. Related: post (create new),
 * get (fetch existing), delete (for removal/rollback), patch (list/search).
 *
 * @param props.connection
 * @param props.id Unique identifier of the category snapshot to update (UUID).
 * @param props.body Correction metadata or field updates for the snapshot
 *   record.
 * @path /discussionBoard/forumCategorySnapshots/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the category snapshot to update (UUID). */
    id: string & tags.Format<"uuid">;

    /** Correction metadata or field updates for the snapshot record. */
    body: IDiscussionBoardForumCategorySnapshot.IUpdate;
  };
  export type Body = IDiscussionBoardForumCategorySnapshot.IUpdate;
  export type Response = IDiscussionBoardForumCategorySnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/forumCategorySnapshots/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/forumCategorySnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardForumCategorySnapshot =>
    typia.random<IDiscussionBoardForumCategorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (erase) a discussion_board_forum_category_snapshot by ID
 * (compliance/audit).
 *
 * Deletes (hard or soft, based on policy) a particular forum category snapshot,
 * specified by its UUID. Only allowed for admin or compliance roles, with full
 * audit trail logging and justification recorded. This ensures compliance with
 * legal, regulatory, or privacy erase requirements. Underlying table:
 * discussion_board_forum_category_snapshot. Related endpoints: patch
 * (search/list), get (fetch), post (create), put (update for corrections).
 *
 * @param props.connection
 * @param props.id Unique identifier of the forum category snapshot to delete
 *   (UUID).
 * @path /discussionBoard/forumCategorySnapshots/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the forum category snapshot to delete (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardForumCategorySnapshot;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/forumCategorySnapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/forumCategorySnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardForumCategorySnapshot =>
    typia.random<IDiscussionBoardForumCategorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

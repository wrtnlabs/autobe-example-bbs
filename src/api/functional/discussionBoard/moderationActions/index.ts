import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerationAction } from "../../../structures/IDiscussionBoardModerationAction";
import { IPageIDiscussionBoardModerationAction } from "../../../structures/IPageIDiscussionBoardModerationAction";

/**
 * Create a new moderation action record (discussion_board_moderation_action
 * table).
 *
 * This operation records a new moderation action, triggered in response to a
 * report, rule violation, or at a moderator's discretion. Fields include
 * subject user, moderator, action type, reason, and optional linkages to
 * related content and reports. Business logic ensures data aligns with
 * escalation and audit requirements as detailed in moderation policy. Workflow
 * triggers (notifications, status changes) are handled by downstream processes.
 * Restricted to moderators and admins. On success, the action is inserted into
 * discussion_board_moderation_action.
 *
 * @param props.connection
 * @param props.body Details of the moderation action to create (action type,
 *   reason, links)
 * @path /discussionBoard/moderationActions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Details of the moderation action to create (action type, reason,
     * links)
     */
    body: IDiscussionBoardModerationAction.ICreate;
  };
  export type Body = IDiscussionBoardModerationAction.ICreate;
  export type Response = IDiscussionBoardModerationAction;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/moderationActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderationActions";
  export const random = (): IDiscussionBoardModerationAction =>
    typia.random<IDiscussionBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter moderation actions (discussion_board_moderation_action table).
 *
 * Provides the ability to search, filter, and paginate through historical
 * moderation actions, such as bans, warnings, post removals, and other
 * interventions. Enforces permission for moderators/admins only. This endpoint
 * supports advanced queries over the discussion_board_moderation_action table,
 * with filter criteria (action type, moderator, date ranges, involved
 * content/user) sent in the request body. Results can be used with the detail
 * and create/modify action endpoints for complete lifecycle management.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for moderation
 *   actions
 * @path /discussionBoard/moderationActions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter, and pagination parameters for moderation actions */
    body: IDiscussionBoardModerationAction.IRequest;
  };
  export type Body = IDiscussionBoardModerationAction.IRequest;
  export type Response = IPageIDiscussionBoardModerationAction;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderationActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderationActions";
  export const random = (): IPageIDiscussionBoardModerationAction =>
    typia.random<IPageIDiscussionBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific moderation action
 * (discussion_board_moderation_action table).
 *
 * This endpoint retrieves detailed information about a single moderation action
 * using its unique ID. Used by admins and moderators to examine the specifics
 * of why and how a moderation event occurred. Reflects the full data structure
 * of discussion_board_moderation_action, and is required for review, audit, or
 * appeal scenarios. Permission is enforced to restrict to privileged roles.
 * Commonly used in conjunction with list and update endpoints.
 *
 * @param props.connection
 * @param props.id Unique identifier for the moderation action (UUID)
 * @path /discussionBoard/moderationActions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier for the moderation action (UUID) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardModerationAction;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderationActions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderationActions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardModerationAction =>
    typia.random<IDiscussionBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing moderation action (discussion_board_moderation_action
 * table).
 *
 * Moderators/admins use this endpoint to update moderation action records, such
 * as adding additional remarks, changing escalation status, or error
 * correction. Accepts the moderation action's UUID via path and an update
 * payload via the body. After successful update, returns the modified record
 * for continued workflow/audit. Role-based permission enforcement required.
 * Related moderation histories or dependencies (e.g., linked warnings/bans)
 * remain intact.
 *
 * @param props.connection
 * @param props.id ID of the moderation action to update (UUID)
 * @param props.body Updated moderation action data (fields to change, e.g.,
 *   status, notes)
 * @path /discussionBoard/moderationActions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of the moderation action to update (UUID) */
    id: string & tags.Format<"uuid">;

    /**
     * Updated moderation action data (fields to change, e.g., status,
     * notes)
     */
    body: IDiscussionBoardModerationAction.IUpdate;
  };
  export type Body = IDiscussionBoardModerationAction.IUpdate;
  export type Response = IDiscussionBoardModerationAction;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderationActions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderationActions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardModerationAction =>
    typia.random<IDiscussionBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft/hard) a moderation action (discussion_board_moderation_action
 * table).
 *
 * Warrants moderator/admin permissions for removing an obsolete or incorrect
 * moderation action. Takes the action ID as input and, based on business
 * policy, may perform a soft delete to preserve audit compliance. Responsible
 * for security-related restrictions, error logging, and enforcing that
 * historical dependencies are not compromised. May trigger workflow for related
 * entities (e.g., warnings, user bans).
 *
 * @param props.connection
 * @param props.id ID of the moderation action record to delete (UUID)
 * @path /discussionBoard/moderationActions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the moderation action record to delete (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderationActions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderationActions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIDiscussionBoardSystemNotice } from "../../../../structures/IPageIDiscussionBoardSystemNotice";
import { IDiscussionBoardSystemNotice } from "../../../../structures/IDiscussionBoardSystemNotice";

/**
 * List system notices (discussion_board_system_notices) with filtering and
 * search.
 *
 * Fetches a paginated list of all system-wide and per-category notices present
 * on the discussion board. Each system notice can be global (applies to all
 * categories) or tied to a specific category, according to the schema.
 *
 * Only active notices are displayed to end-users, but admins and moderators may
 * list all notices, including inactive or scheduled future ones. Results may be
 * filtered by the status (is_active), scheduled dates (start_at/end_at),
 * category (by category_id), or by text search on title and body fields, using
 * trgm index as described for those columns.
 *
 * This endpoint integrates with the discussion_board_system_notices schema,
 * presenting each notice's id, category linkage (if any), title, body, status,
 * active periods, and timestamps. Supports pagination and basic search features
 * through query parameters or default settings.
 *
 * If the user is a guest, only public, currently active, scheduled notices are
 * returned. If the user is admin or moderator, the full set is available.
 *
 * Related endpoints: Creating (POST /systemNotices), updating (PUT
 * /systemNotices/{systemNoticeId}), viewing (GET
 * /systemNotices/{systemNoticeId}), and deleting notices (DELETE
 * /systemNotices/{systemNoticeId}).
 *
 * @param props.connection
 * @path /discussionBoard/moderator/systemNotices
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIDiscussionBoardSystemNotice;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/systemNotices",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/systemNotices";
  export const random = (): IPageIDiscussionBoardSystemNotice =>
    typia.random<IPageIDiscussionBoardSystemNotice>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Advanced search and filtering for system notices
 * (discussion_board_system_notices).
 *
 * Enables advanced searching and filtering of the board's system notices, as
 * defined by the discussion_board_system_notices schema. Useful for admins and
 * moderators who need to perform complex queries on notices, for instance,
 * finding all expired, scheduled, or inactivated notices using combination
 * filters.
 *
 * The request body supports text search (trgm-based search on title and body
 * fields), filtering by is_active status, scheduled start and end times, and
 * category_id linkage. Results are paginated. This endpoint is intended for
 * backend management and dashboard data sources, providing greater control over
 * filtering than the standard GET.
 *
 * Extensive filtering is valuable for managing recurring banners, tracking
 * announcement history, or auditing scheduled system messages. Sensitive
 * notices (inactive, scheduled for future, or expired) are only listed for
 * authorized roles.
 *
 * Typical uses: Admin wants to view only currently scheduled (future) notices
 * or moderator reviews expired banners to plan reuse.
 *
 * Related APIs: Creating new notices (POST), updating (PUT), individual
 * fetching (GET by id).
 *
 * @param props.connection
 * @param props.body Filter/search criteria for querying system notices,
 *   including status, scheduled time, and text fields.
 * @path /discussionBoard/moderator/systemNotices
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Filter/search criteria for querying system notices, including status,
     * scheduled time, and text fields.
     */
    body: IDiscussionBoardSystemNotice.IRequest;
  };
  export type Body = IDiscussionBoardSystemNotice.IRequest;
  export type Response = IPageIDiscussionBoardSystemNotice;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderator/systemNotices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/systemNotices";
  export const random = (): IPageIDiscussionBoardSystemNotice =>
    typia.random<IPageIDiscussionBoardSystemNotice>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch detail for a specific system notice (discussion_board_system_notices)
 * by ID.
 *
 * Provides full details for a single system notice on the discussion board,
 * identified by its unique UUID systemNoticeId. Returns properties defined in
 * the discussion_board_system_notices schema: id, category_id (or null for
 * global), title, body, activation status, scheduling windows (start_at,
 * end_at), and timestamps (created_at, updated_at).
 *
 * Access control: All users can retrieve details for currently active and
 * public notices; only admin and moderator users can retrieve information about
 * inactive, expired, or scheduled future notices. Category association is
 * included if the notice is not global.
 *
 * This endpoint supports admin/moderator workflows, such as editing, auditing
 * or previewing scheduled notices. System integrates with audit log (not shown
 * here) for change traceability. Returns 404 if notice does not exist.
 *
 * Related endpoints: Creation (POST), update (PUT), deletion (DELETE).
 *
 * @param props.connection
 * @param props.systemNoticeId UUID of the system notice to retrieve. Must exist
 *   in discussion_board_system_notices.id.
 * @path /discussionBoard/moderator/systemNotices/:systemNoticeId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * UUID of the system notice to retrieve. Must exist in
     * discussion_board_system_notices.id.
     */
    systemNoticeId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardSystemNotice;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/systemNotices/:systemNoticeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/systemNotices/${encodeURIComponent(props.systemNoticeId ?? "null")}`;
  export const random = (): IDiscussionBoardSystemNotice =>
    typia.random<IDiscussionBoardSystemNotice>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemNoticeId")(() => typia.assert(props.systemNoticeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

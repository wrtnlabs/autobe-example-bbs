import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardComment } from "../../../../structures/IDiscussionBoardComment";
import { IPageIDiscussionBoardComment } from "../../../../structures/IPageIDiscussionBoardComment";
export * as versions from "./versions";
export * as attachments from "./attachments";

/**
 * List all comments on the board (discussion_board_comments, global).
 *
 * Retrieves all comments on the board (optionally paginated), without
 * post/thread scoping. Returns records from discussion_board_comments, each
 * containing the core fields: content, is_deleted, created/updated timestamps,
 * and references to member and parent post. For privacy and efficiency, global
 * retrieval is usually limited to authorized roles.
 *
 * Supports admin tools, moderation overviews, or reporting workflows. Filtering
 * for deleted/active comments, date ranges, or author can be introduced at
 * higher API layers.
 *
 * @param props.connection
 * @path /discussionBoard/moderator/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IDiscussionBoardComment.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/comments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/comments";
  export const random = (): IDiscussionBoardComment.ISummary =>
    typia.random<IDiscussionBoardComment.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Filtered, paginated query of comments board-wide (discussion_board_comments).
 *
 * Enables advanced searching and filtering of comments site-wide. Request body
 * supports filtering by attributes like member, parent post, created/updated
 * timestamps, and deleted state, as well as controlling pagination and sort
 * order.
 *
 * Results are paginated and optimized for use by moderation tools, reporting
 * dashboards, and advanced UI features. Error handling includes validation of
 * search criteria and appropriate feedback for no-match or excessive result
 * sets.
 *
 * Authorization is limited to moderators and admins, as global comment search
 * can expose sensitive content and requires oversight in compliance with board
 * policies.
 *
 * @param props.connection
 * @param props.body Search and filter specification for comments (members,
 *   posts, timestamps, status, etc.).
 * @path /discussionBoard/moderator/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search and filter specification for comments (members, posts,
     * timestamps, status, etc.).
     */
    body: IDiscussionBoardComment.IRequest;
  };
  export type Body = IDiscussionBoardComment.IRequest;
  export type Response = IPageIDiscussionBoardComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderator/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/comments";
  export const random = (): IPageIDiscussionBoardComment.ISummary =>
    typia.random<IPageIDiscussionBoardComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single comment's details by commentId (discussion_board_comments).
 *
 * Fetches the complete record for a comment, identified by its globally unique
 * commentId. Returns all persisted fields as defined in the
 * discussion_board_comments schema: content, deletion status, relate member and
 * post IDs, and relevant timestamps.
 *
 * Companion APIs should validate that only authorized roles or the owner can
 * access this endpoint. Used for precise moderation workflows, member lookups,
 * or to populate detailed comment views.
 *
 * Includes proper error feedback if the comment does not exist, has been hard
 * deleted (if ever allowed), or if the user lacks privileges.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to retrieve.
 * @path /discussionBoard/moderator/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update comment content/status by commentId (discussion_board_comments).
 *
 * Updates the visible content or deletion status of a comment as defined in the
 * request body. The Prisma schema supports editing only by the comment's
 * creator, admin, or moderator. Request body must conform to the allowed
 * updatable fields (content, is_deleted). Authorization checks apply for each
 * roleâ€”members may only update their own comments, while moderators/admins may
 * edit any comment.
 *
 * This endpoint is essential for moderation, correcting prior input, or
 * soft-deleting abusive/inappropriate comments (by setting is_deleted=true). On
 * success, returns the full updated comment record. Failure to update due to
 * missing comment, invalid update, or lack of privileges returns a detailed
 * error message.
 *
 * @param props.connection
 * @param props.commentId Unique identifier for the comment to update.
 * @param props.body Fields to update: content, is_deleted.
 * @path /discussionBoard/moderator/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /** Fields to update: content, is_deleted. */
    body: IDiscussionBoardComment.IUpdate;
  };
  export type Body = IDiscussionBoardComment.IUpdate;
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderator/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderator/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard-delete a comment by commentId (discussion_board_comments).
 *
 * Permanently deletes a comment given its unique identifier. The lack of a
 * deleted_at column in the schema means this operation truly erases the record,
 * not just flags it. Only users with admin or moderator privileges can perform
 * this action; members are restricted to soft deletion via updates.
 *
 * Error handling manages attempts to delete non-existent comments or
 * unauthorized requests. Compliance logs should capture each deletion for audit
 * purposes. Use of this operation is rare in production, primarily for
 * compliance or when handling spam/abuse at scale.
 *
 * On success, returns 204 with no body. Client applications should refresh
 * listings and handle missing references accordingly.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to delete.
 * @path /discussionBoard/moderator/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the comment to delete. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderator/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardNotification } from "../../../../structures/IDiscussionBoardNotification";

/**
 * Create a new notification event (discussion_board_notifications table).
 *
 * Registers a new notification in the discussion_board_notifications table.
 * Input must provide the recipient member ID, message content, type (e.g.,
 * reply, system, mention), delivery status, and any optional context
 * (subscription link, target entity info).
 *
 * Security context: Only admins, moderators, or automated systems are
 * authorized to deliver notifications directly. Audit logs track who/what
 * originated the notification, and improper access will be denied.
 *
 * Related APIs: GET/PATCH for notification retrieval; PUT for updating
 * delivery/read status; DELETE to remove notifications (e.g., manual admin
 * cleanup).
 *
 * @param props.connection
 * @param props.body Information for creating the notification event
 * @path /discussionBoard/moderator/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information for creating the notification event */
    body: IDiscussionBoardNotification.ICreate;
  };
  export type Body = IDiscussionBoardNotification.ICreate;
  export type Response = IDiscussionBoardNotification;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/moderator/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/notifications";
  export const random = (): IDiscussionBoardNotification =>
    typia.random<IDiscussionBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardCommentVote } from "../../../structures/IDiscussionBoardCommentVote";
import { IPageDiscussionBoardCommentVote } from "../../../structures/IPageDiscussionBoardCommentVote";

/**
 * Create new comment vote on a comment (discussion_board_comment_vote table).
 *
 * This API enables a registered user to upvote or otherwise mark a comment for
 * feedback in the discussion_board_comment_vote table. Only allows a single
 * vote per user/comment (enforced by schema constraint). Requires user
 * authentication. Success returns full vote record, failure for duplicate,
 * invalid, or unauthorized voting. Triggers analytics, possible notification
 * workflows, and audit trail. Moderation or anti-abuse logic may be triggered
 * for voting patterns.
 *
 * @param props.connection
 * @param props.body New comment vote info (user, comment, etc).
 * @path /discussionBoard/commentVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** New comment vote info (user, comment, etc). */
    body: IDiscussionBoardCommentVote.ICreate;
  };
  export type Body = IDiscussionBoardCommentVote.ICreate;
  export type Response = IDiscussionBoardCommentVote;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/commentVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/commentVotes";
  export const random = (): IDiscussionBoardCommentVote =>
    typia.random<IDiscussionBoardCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List comment votes with filter/pagination (discussion_board_comment_vote
 * table).
 *
 * This API returns a filtered and paginated list of comment votes from the
 * discussion_board_comment_vote table. Useful for analytics (e.g., most upvoted
 * comments), moderation, or reporting. Supports searching and sorting by
 * comment ID, user, date, etc., as per business requirements. Pagination
 * ensures performance on large datasets. Request body specifies filters
 * (comment_id, user_id, date, etc.), sorting, and page info.
 *
 * Security: Only available to authenticated users or moderators. Errors arise
 * from invalid parameters, lack of permission, or overbroad queries. Returns
 * IPageDiscussionBoardCommentVote object containing pagination and data.
 *
 * @param props.connection
 * @param props.body Search/pagination filter info for comment votes.
 * @path /discussionBoard/commentVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search/pagination filter info for comment votes. */
    body: IDiscussionBoardCommentVote.IRequest;
  };
  export type Body = IDiscussionBoardCommentVote.IRequest;
  export type Response = IPageDiscussionBoardCommentVote;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/commentVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/commentVotes";
  export const random = (): IPageDiscussionBoardCommentVote =>
    typia.random<IPageDiscussionBoardCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single comment vote's details (discussion_board_comment_vote table).
 *
 * This API retrieves a single comment vote by its unique ID from the
 * discussion_board_comment_vote table. Used for audit, moderation reporting, or
 * participant feedback. Returns full info on this specific vote (which user,
 * which comment, when cast). Authorization is required to protect privacy;
 * allowed for moderators or the voter themselves. Returns not-found or
 * forbidden on error.
 *
 * @param props.connection
 * @param props.id Unique ID of the comment vote record.
 * @path /discussionBoard/commentVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the comment vote record. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardCommentVote;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/commentVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/commentVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardCommentVote =>
    typia.random<IDiscussionBoardCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a single comment vote (discussion_board_comment_vote table).
 *
 * This API updates a single comment vote by its ID. Per the
 * discussion_board_comment_vote table, only permitted fields (e.g., vote
 * status, updated_at) may be modified, according to business and moderation
 * rules. Full audit trails maintained. Requires authentication and ownership or
 * moderator privilege. Returns full updated record on success, error
 * otherwise.
 *
 * @param props.connection
 * @param props.id Target comment vote's unique ID.
 * @param props.body Fields to update on the comment vote.
 * @path /discussionBoard/commentVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target comment vote's unique ID. */
    id: string & tags.Format<"uuid">;

    /** Fields to update on the comment vote. */
    body: IDiscussionBoardCommentVote.IUpdate;
  };
  export type Body = IDiscussionBoardCommentVote.IUpdate;
  export type Response = IDiscussionBoardCommentVote;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/commentVotes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/commentVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardCommentVote =>
    typia.random<IDiscussionBoardCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment vote by its ID (discussion_board_comment_vote table).
 *
 * This API operation enables a user to delete a vote they previously placed on
 * a comment. Permission validation ensures that the user can only delete votes
 * they personally created, in compliance with the 3NF schema and normalized
 * vote records in discussion_board_comment_vote. Associated audit trails are
 * recommended to maintain voting history for moderation and analytics. If the
 * vote does not exist or does not belong to the caller, a suitable error is
 * returned. Utilizes the path parameter 'id' to specify the target vote by its
 * UUID.
 *
 * @param props.connection
 * @param props.id Target comment vote's unique identifier (UUID)
 * @path /discussionBoard/commentVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target comment vote's unique identifier (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/commentVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/commentVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

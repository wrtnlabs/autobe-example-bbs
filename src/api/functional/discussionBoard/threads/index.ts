import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardThread } from "../../../structures/IDiscussionBoardThread";
import { IPageIDiscussionBoardThread } from "../../../structures/IPageIDiscussionBoardThread";

/**
 * Create a new thread in 'discussion_board_threads'.
 *
 * This operation receives all required data needed to create a new thread,
 * including title, body, category reference, and creator (inferred from
 * authentication context). Data validation confirms required fields, length and
 * content rules (per admin configuration policy). Thread is initially open and
 * not pinned by default; any additional moderation or posting restrictions are
 * inherited from board configuration. The thread is saved to
 * 'discussion_board_threads', and the full thread object is returned, including
 * audit fields reflecting creation metadata. Errors include validation failures
 * or permission issues. Complies with F02.
 *
 * @param props.connection
 * @param props.body Information for creating a new thread.
 * @path /discussionBoard/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Information for creating a new thread. */
    body: IDiscussionBoardThread.ICreate;
  };
  export type Body = IDiscussionBoardThread.ICreate;
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/threads";
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search all threads (discussion_board_threads) with filtering,
 * pagination, RBAC-sensitive results.
 *
 * Fetches a list of threads based on filter/search parameters. The request body
 * allows supplying filters like title keyword, category, creator ID, pinned or
 * closed status, as well as sorting and pagination controls. The endpoint must
 * support guest/member/moderator/admin access, with more advanced filter/result
 * access at higher roles (e.g., viewing deleted threads). Pagination is
 * required; returns total matching records and current page. Useful for the
 * main discussion feed, admin review, and moderation dashboards. Security
 * policy ensures that search results respect role and visibility rules. Errors
 * returned if parameters are invalid or access is not allowed. If no threads
 * match, returns an empty array/page.
 *
 * @param props.connection
 * @param props.body Thread search and filter parameters (keyword, creator ID,
 *   status, pagination).
 * @path /discussionBoard/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Thread search and filter parameters (keyword, creator ID, status,
     * pagination).
     */
    body: IDiscussionBoardThread.IRequest;
  };
  export type Body = IDiscussionBoardThread.IRequest;
  export type Response = IPageIDiscussionBoardThread;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/threads";
  export const random = (): IPageIDiscussionBoardThread =>
    typia.random<IPageIDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific thread from 'discussion_board_threads' table by ID.
 *
 * This API operation retrieves all details for a single discussion thread
 * specified by its unique identifier. The 'discussion_board_threads' table is
 * the authoritative source for top-level discussion units (threads), and this
 * operation exposes fields such as title, body (opening post), creator
 * reference, category linkage, pinned/closed flags, and full timestamps for
 * creation, update, and deletion (soft-delete for moderation). This aligns with
 * F01 (view threads), supports search/browse UX scenarios, and allows
 * audit/compliance features by exposing relevant metadata. Permissions around
 * access must be enforced at the middleware layer to ensure guests and members
 * only see threads allowed by business rules (e.g., not deleted or closed, as
 * per visibility policies).
 *
 * @param props.connection
 * @param props.id Unique ID of the thread to retrieve (UUID).
 * @path /discussionBoard/threads/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the thread to retrieve (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/threads/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/threads/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a thread in 'discussion_board_threads' by ID.
 *
 * This operation modifies an existing thread using data provided in the request
 * body. The thread is located by ID; if found, allowed properties are updated
 * after field-level validation (per admin configuration policies on editable
 * fields). Edits include changes to title/body and flag updates (e.g., marking
 * thread as closed or pinned, subject to permissions). The database record is
 * updated and full state returned. Supports moderation workflows (soft
 * deletion, pin/unpin, edit justification). Enforces ownership or
 * moderator/admin role for edit rights. Errors include missing thread,
 * validation failures, or insufficient permissions.
 *
 * @param props.connection
 * @param props.id Unique ID of the thread to update (UUID).
 * @param props.body Information to update an existing thread.
 * @path /discussionBoard/threads/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique ID of the thread to update (UUID). */
    id: string & tags.Format<"uuid">;

    /** Information to update an existing thread. */
    body: IDiscussionBoardThread.IUpdate;
  };
  export type Body = IDiscussionBoardThread.IUpdate;
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/threads/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/threads/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a thread from 'discussion_board_threads' by ID.
 *
 * This operation performs a soft delete on a selected thread. The thread is
 * found by its unique ID and, if permitted, is marked deleted by updating the
 * 'deleted_at' field (rather than removing the record). Soft-deletion aligns
 * with moderation and audit requirements, ensuring reversibility and compliance
 * with platform and regulatory needs. Permissions are restricted to authors,
 * moderators, or admins per board rules (F04). All deletions are logged for
 * traceability. Errors include not found, not permitted, or already deleted
 * threads.
 *
 * @param props.connection
 * @param props.id Unique ID of the thread to delete (UUID).
 * @path /discussionBoard/threads/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique ID of the thread to delete (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/threads/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/threads/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

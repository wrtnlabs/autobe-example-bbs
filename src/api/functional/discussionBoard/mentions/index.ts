import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardMention } from "../../../structures/IDiscussionBoardMention";
import { IPageIDiscussionBoardMention } from "../../../structures/IPageIDiscussionBoardMention";

/**
 * Create a mention event (discussion_board_mentions table).
 *
 * This endpoint allows a member to create a mention record (e.g. '@someone' in
 * a post/comment). Requires specifying both the actor (who mentions) and the
 * mentioned member, plus content type/id. On creation, triggers notification
 * flow if enabled. Business logic validates mentioned party eligibility (e.g.,
 * not mentioning banned users), existence of content, and actor permissions. On
 * success, returns the new mention object. Action is logged for
 * notification/audit. Handles errors (400 for bad input, 403 for unauthorized
 * mention, 404 for non-existent content/member). Designed for in-thread/post
 * commenting/conversation features needing mention tracking and notification
 * orchestration.
 *
 * @param props.connection
 * @param props.body Mention creation details (mentioned user, actor, content
 *   type/id).
 * @path /discussionBoard/mentions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Mention creation details (mentioned user, actor, content type/id). */
    body: IDiscussionBoardMention.ICreate;
  };
  export type Body = IDiscussionBoardMention.ICreate;
  export type Response = IDiscussionBoardMention;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/mentions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/mentions";
  export const random = (): IDiscussionBoardMention =>
    typia.random<IDiscussionBoardMention>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search mentions (discussion_board_mentions table) with advanced
 * criteria.
 *
 * This endpoint provides a paginated, filterable list of member mention
 * records. Users supply complex query/search criteria in the request body, such
 * as filtering mentions they received, sent, or by content type/id. Pagination
 * supports limit/offset or cursor-based pattern for scalable queries in large
 * datasets. Only authenticated users can search their own mentions, while
 * admin/moderators can search for any user for moderation/audit. Results are
 * sorted by recency by default, but may allow sort overrides. Underlying logic
 * ensures only allowed records are revealed: members see only their mentions;
 * moderators/admins see all for compliance investigation. Validation is
 * performed on filters and pagination params. Any search criteria not met
 * (invalid user, out-of-range) are rejected. Errors handled include 400 for bad
 * requests and 403 for unauthorized access. Fulfills advanced query
 * requirements for notification/mentions UX.
 *
 * @param props.connection
 * @param props.body Filtering, sort, and pagination criteria for searching
 *   mentions.
 * @path /discussionBoard/mentions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering, sort, and pagination criteria for searching mentions. */
    body: IDiscussionBoardMention.IRequest;
  };
  export type Body = IDiscussionBoardMention.IRequest;
  export type Response = IPageIDiscussionBoardMention;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/mentions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/mentions";
  export const random = (): IPageIDiscussionBoardMention =>
    typia.random<IPageIDiscussionBoardMention>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get mention details by ID (discussion_board_mentions table).
 *
 * This endpoint retrieves a single mention's details using its unique ID.
 * Members can only view their own mention events; moderators/admins can get any
 * record for audit. Operation includes all relevant details: mentioned member,
 * actor, content type/id, and timestamps. If the requestor is not privileged or
 * not involved in the mention, returns 403 forbidden. Underlying business logic
 * checks for data existence, permissions, and audit logging. Errors handled:
 * 404 for missing, 403 unauthorized, 500 for server errors. Supports all
 * business rules for mention access per privacy and compliance requirements.
 *
 * @param props.connection
 * @param props.id The mention event's UUID to retrieve.
 * @path /discussionBoard/mentions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The mention event's UUID to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardMention;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/mentions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/mentions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardMention =>
    typia.random<IDiscussionBoardMention>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a mention by ID (discussion_board_mentions table).
 *
 * This endpoint updates an existing mention record by ID. Only moderators or
 * admins may use this for correcting or administrative purposesâ€”members cannot
 * edit a mention after creation. Typical use case: moderation correcting a
 * mention link or reversing an erroneous notification. Requires mention ID and
 * new mention info. Logic ensures only eligible roles can perform the update.
 * All actions are audit-logged. Handles errors: 404 (missing), 403
 * (unauthorized), and 400 (bad input).
 *
 * @param props.connection
 * @param props.id The mention's UUID to update.
 * @param props.body New mention data to update (same structure as creation
 *   body).
 * @path /discussionBoard/mentions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The mention's UUID to update. */
    id: string & tags.Format<"uuid">;

    /** New mention data to update (same structure as creation body). */
    body: IDiscussionBoardMention.IUpdate;
  };
  export type Body = IDiscussionBoardMention.IUpdate;
  export type Response = IDiscussionBoardMention;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/mentions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/mentions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardMention =>
    typia.random<IDiscussionBoardMention>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a mention by ID (discussion_board_mentions table).
 *
 * This endpoint deletes a mention record by its ID. Only moderators/admins can
 * deleteâ€”members cannot remove a mention once created. On execution, does a
 * soft-delete for audit and reversibility. The operation is audit-logged (who,
 * when, reason if given). Business logic: checks existence, permissions, and
 * linkage (e.g., not deleting references in use). Errors: 404 (missing), 403
 * (unauthorized), 409 (conflict if linked), and 500 (server).
 *
 * @param props.connection
 * @param props.id Mention ID to delete.
 * @path /discussionBoard/mentions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Mention ID to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/mentions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/mentions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

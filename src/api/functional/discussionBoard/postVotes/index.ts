import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPostVote } from "../../../structures/IDiscussionBoardPostVote";
import { IPageDiscussionBoardPostVote } from "../../../structures/IPageDiscussionBoardPostVote";

/**
 * Create a new post vote (discussion_board_post_vote table).
 *
 * This API allows a registered user to upvote or mark a post as helpful. Only
 * one vote is allowed per user per post (duplicates prevented by constraints in
 * discussion_board_post_vote schema). The creation records the voter, post, and
 * vote timestamp. Used for features like upvoting, engagement analytics, and
 * feedback. Moderation may monitor voting patterns for abuse.
 *
 * Authorization required; only authenticated users can upvote. Errors include
 * duplicate votes, invalid post, or unauthorized user. Success returns full
 * vote record.
 *
 * @param props.connection
 * @param props.body Vote information to be created (user, post, timestamp).
 * @path /discussionBoard/postVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Vote information to be created (user, post, timestamp). */
    body: IDiscussionBoardPostVote.ICreate;
  };
  export type Body = IDiscussionBoardPostVote.ICreate;
  export type Response = IDiscussionBoardPostVote;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/postVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/postVotes";
  export const random = (): IDiscussionBoardPostVote =>
    typia.random<IDiscussionBoardPostVote>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a filtered/pageable list of post votes (discussion_board_post_vote
 * table).
 *
 * This API returns a paginated, filterable list of post votes from the
 * discussion_board_post_vote table. Supports querying by post ID, user ID, time
 * windows, or vote status. Used for analytics, tallying post upvotes, showing
 * user participation, and building trends for admins and moderators. Can sort
 * or search by different criteria (e.g., most upvoted, recent votes).
 *
 * Request body includes optional filters (post ID, user ID, date range, etc.),
 * page size, and ordering for analytics use cases. Returns a data page,
 * including pagination info and list of votes. Security: Only users or
 * moderators can retrieve vote lists as per privacy and analytics requirements.
 * Errors: Invalid filters, permission denied, or malformed request.
 *
 * @param props.connection
 * @param props.body Query parameters for listing post votes (filter,
 *   pagination, sort).
 * @path /discussionBoard/postVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Query parameters for listing post votes (filter, pagination, sort). */
    body: IDiscussionBoardPostVote.IRequest;
  };
  export type Body = IDiscussionBoardPostVote.IRequest;
  export type Response = IPageDiscussionBoardPostVote;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/postVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/postVotes";
  export const random = (): IPageDiscussionBoardPostVote =>
    typia.random<IPageDiscussionBoardPostVote>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a single post vote (discussion_board_post_vote table).
 *
 * This API retrieves one post vote entity by its unique ID from the
 * discussion_board_post_vote table. Used for audit, moderation, or verifying
 * user feedback status. Returns detailed information about the vote, including
 * voter, target post, and timestamps. Authorization is requiredâ€”typically only
 * moderators or the vote's author can access vote details for privacy and audit
 * reasons. Errors include not-found or insufficient permission.
 *
 * @param props.connection
 * @param props.id Unique ID of the post vote to retrieve.
 * @path /discussionBoard/postVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the post vote to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPostVote;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/postVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/postVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPostVote =>
    typia.random<IDiscussionBoardPostVote>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a single post vote (discussion_board_post_vote table).
 *
 * This API updates a single post vote using its unique ID, as found in
 * discussion_board_post_vote table. May allow changing vote timing, status, or
 * other mutable fields as per business logic (typical use: retraction or edit
 * with explicit business rationale). Full compliance with moderation and
 * analytics workflows. Requires authorization, usually only by vote's author or
 * permitted moderator. Returns updated vote data. Errors for not found,
 * forbidden edit, or immutable vote per policy.
 *
 * @param props.connection
 * @param props.id ID of the post vote to update.
 * @param props.body Vote field updates (status, timestamp, etc).
 * @path /discussionBoard/postVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of the post vote to update. */
    id: string & tags.Format<"uuid">;

    /** Vote field updates (status, timestamp, etc). */
    body: IDiscussionBoardPostVote.IUpdate;
  };
  export type Body = IDiscussionBoardPostVote.IUpdate;
  export type Response = IDiscussionBoardPostVote;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/postVotes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/postVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPostVote =>
    typia.random<IDiscussionBoardPostVote>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a post vote (discussion_board_post_vote table).
 *
 * This API deletes (usually soft delete for audit trail) a post vote identified
 * by its unique ID from discussion_board_post_vote. The user must be the vote
 * owner or a moderator. Operation supports feedback retraction, anti-abuse
 * monitoring, and user analytics. Returns confirmation with record data. Errors
 * for not found, already-deleted, or forbidden operation.
 *
 * @param props.connection
 * @param props.id ID of the post vote to delete.
 * @path /discussionBoard/postVotes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the post vote to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPostVote;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/postVotes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/postVotes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPostVote =>
    typia.random<IDiscussionBoardPostVote>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

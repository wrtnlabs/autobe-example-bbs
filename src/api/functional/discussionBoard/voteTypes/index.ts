import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardVoteType } from "../../../structures/IDiscussionBoardVoteType";
import { IPageIDiscussionBoardVoteType } from "../../../structures/IPageIDiscussionBoardVoteType";

/**
 * Create a new vote type (discussion_board_vote_types table).
 *
 * This endpoint creates a new vote type record, specifying code, name, and
 * optional description. Only privileged admin role can access; validates unique
 * code and suitable content per business rules. Used to expand or configure
 * system voting features. On create, returns new vote type object. Operation is
 * logged for system change traceability, used in analytics and voting UI.
 * Errors: 400 (bad input), 409 (code conflict), 403 (unauthorized).
 *
 * @param props.connection
 * @param props.body New vote type data (code, name, description).
 * @path /discussionBoard/voteTypes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** New vote type data (code, name, description). */
    body: IDiscussionBoardVoteType.ICreate;
  };
  export type Body = IDiscussionBoardVoteType.ICreate;
  export type Response = IDiscussionBoardVoteType;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/voteTypes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/voteTypes";
  export const random = (): IDiscussionBoardVoteType =>
    typia.random<IDiscussionBoardVoteType>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search vote types (discussion_board_vote_types table).
 *
 * This endpoint lists or searches available vote types using paginated,
 * filterable queries. Used for system UI configuration, analytics, or extending
 * vote features. Supports sorting, filtering by code/name, and result limits.
 * Only admin or moderator users can view all vote type config. General members
 * can use for hinting but may be limited. Validation ensures only allowed
 * fields are queried. Sorting defaults to creation date, but allows overrides.
 * Useful for dynamic voting system UI, or reviewing supported vote types for
 * moderation. Error handling: 400 for bad queries, 403 for unauthorized
 * access.
 *
 * @param props.connection
 * @param props.body Query and pagination for searching vote types.
 * @path /discussionBoard/voteTypes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Query and pagination for searching vote types. */
    body: IDiscussionBoardVoteType.IRequest;
  };
  export type Body = IDiscussionBoardVoteType.IRequest;
  export type Response = IPageIDiscussionBoardVoteType;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/voteTypes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/voteTypes";
  export const random = (): IPageIDiscussionBoardVoteType =>
    typia.random<IPageIDiscussionBoardVoteType>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get vote type details by ID (discussion_board_vote_types table).
 *
 * This endpoint returns the details of a single vote type by its UUID.
 * Moderators and admins can retrieve any; members may only see specific types
 * if their role allows. Returns all information: code, name, description, and
 * timestamps. Errors: 404 (not found), 403 (unauthorized for member if
 * restricted), 500 (system error). Used in admin interfaces and analytics tools
 * to show or manage voting options. Action is logged for compliance and audit
 * trail.
 *
 * @param props.connection
 * @param props.id Vote type UUID to fetch.
 * @path /discussionBoard/voteTypes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Vote type UUID to fetch. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardVoteType;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/voteTypes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/voteTypes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardVoteType =>
    typia.random<IDiscussionBoardVoteType>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update vote type by ID (discussion_board_vote_types table).
 *
 * This endpoint updates a vote type record by UUID, with new code, name or
 * description. Admins only (members cannot update vote types). Logic includes
 * code conflict/uniqueness check. The update operation is logged for
 * audit/compliance. Useful for modifying, rebranding, or correcting vote type
 * definitions as requirements evolve. Handles errors: 404 (not found), 409
 * (code in use), 403 (unauthorized), 400 (invalid input).
 *
 * @param props.connection
 * @param props.id Vote type UUID to update.
 * @param props.body Vote type data to update (code/name/description).
 * @path /discussionBoard/voteTypes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Vote type UUID to update. */
    id: string & tags.Format<"uuid">;

    /** Vote type data to update (code/name/description). */
    body: IDiscussionBoardVoteType.IUpdate;
  };
  export type Body = IDiscussionBoardVoteType.IUpdate;
  export type Response = IDiscussionBoardVoteType;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/voteTypes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/voteTypes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardVoteType =>
    typia.random<IDiscussionBoardVoteType>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete vote type by ID (discussion_board_vote_types table).
 *
 * This endpoint deletes a vote type by its UUID. Only admin can delete vote
 * types; operation is denied if votes currently refer to this type (referential
 * integrity). On success, vote type is soft-deleted for auditability and
 * reversible if required by compliance teams. The action is audit-logged with
 * user, time, and justification. Handles errors: 409 (in use), 404 (not found),
 * 403 (unauthorized), 500 (internal error).
 *
 * @param props.connection
 * @param props.id Vote type UUID to delete.
 * @path /discussionBoard/voteTypes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Vote type UUID to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/voteTypes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/voteTypes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

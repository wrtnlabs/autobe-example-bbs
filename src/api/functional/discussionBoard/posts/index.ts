import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPost } from "../../../structures/IDiscussionBoardPost";
import { IPageDiscussionBoardPost } from "../../../structures/IPageDiscussionBoardPost";

/**
 * Create a new post (discussion_board_post).
 *
 * This POST operation enables registered users to submit new posts (topics or
 * replies) using an atomic, normalized format per Prisma
 * 'discussion_board_post' schema. Required fields include thread_id (for
 * association), parent_post_id (if reply), author_id (authenticated user), and
 * content. Business logic ensures referenced threads and posts exist, that the
 * user is valid, and that all constraints are respected. On successful
 * creation, the response delivers the post record with full relationship
 * context for UI rendering or further processing. Edge cases (invalid
 * references, permission errors, duplicate/overposted content) are handled by
 * robust error responses.
 *
 * @param props.connection
 * @param props.body Post creation information
 * @path /discussionBoard/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Post creation information */
    body: IDiscussionBoardPost.ICreate;
  };
  export type Body = IDiscussionBoardPost.ICreate;
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/posts";
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search posts (discussion_board_post) with filters and paging.
 *
 * This PATCH operation provides a robust search and listing tool for posts
 * within the discussion board, supporting UI/features for browsing, moderator
 * review, and analytics. The request body ('IDiscussionBoardPost.IRequest')
 * allows filter criteria such as thread, author, parent (for reply/child post),
 * content keyword, date range, etc. The endpoint applies business logic for
 * visibility, access, and normalized output, returning paginated results in the
 * 'IPageDiscussionBoardPost' model. Handles empty results, overflows, and input
 * validation as per frontend/UX needs. Implements best practices for scalable
 * search and normalized data returns per the Prisma schema.
 *
 * @param props.connection
 * @param props.body Posts search/filter/pagination info
 * @path /discussionBoard/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Posts search/filter/pagination info */
    body: IDiscussionBoardPost.IRequest;
  };
  export type Body = IDiscussionBoardPost.IRequest;
  export type Response = IPageDiscussionBoardPost;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/posts";
  export const random = (): IPageDiscussionBoardPost =>
    typia.random<IPageDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific post (discussion_board_post) by ID.
 *
 * This GET operation obtains all data regarding a specific post entity,
 * including its content, author info, relationships, timestamps, and current
 * visibility/delete status. Matches the 'discussion_board_post' table directly
 * by 'id' (UUID). Error handling covers not found, unauthorized, and deleted
 * post cases. Data is modeled per the normalized schema for integration into
 * full thread views, moderator investigation screens, and user notification
 * systems. All audit and integrity constraints from the Prisma DB are strictly
 * observed.
 *
 * @param props.connection
 * @param props.id UUID of the post to look up.
 * @path /discussionBoard/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of the post to look up. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/posts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion_board_post record by its ID.
 *
 * This API updates an existing post in the discussion board. It supports
 * changes to the content, linked attachments (through post_attachment_link),
 * and can update parent-child reply relationships if provided. The update
 * operation requires that the post exists and that the calling user has the
 * necessary permissions (author, admin, or moderator). The operation writes
 * changes to the discussion_board_post table, referencing business logic around
 * post modification tracking, edit timestamps, and moderation checks (e.g.,
 * cannot modify posts after a certain age unless moderator). Validation
 * includes checking thread and parent_post referential integrity, updating
 * "updated_at", and rejecting updates if the post is soft-deleted or the user
 * is banned. Related endpoints: delete (for soft/hard deletion), get (for
 * viewing the post).
 *
 * @param props.connection
 * @param props.id Unique identifier of the post to update (UUID).
 * @param props.body Update information for the discussion board post.
 * @path /discussionBoard/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the post to update (UUID). */
    id: string & tags.Format<"uuid">;

    /** Update information for the discussion board post. */
    body: IDiscussionBoardPost.IUpdate;
  };
  export type Body = IDiscussionBoardPost.IUpdate;
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/posts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a discussion_board_post record by its ID.
 *
 * Marks a specific post (by UUID) as deleted, without physically removing it
 * from the database. This operation writes the current timestamp to the
 * deleted_at column, thereby hiding the post from ordinary views and enforcing
 * retention for moderation/audit. Business logic should check for user
 * authorization (author or moderator/admin), and prevent deletion if policy
 * disallows (e.g., too old, replies exist). Caution: hard deletion is not
 * performed by this endpoint. Related operations: update for modification, get
 * for viewing, and restore if available.
 *
 * @param props.connection
 * @param props.id Unique identifier of the post to delete (UUID).
 * @path /discussionBoard/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the post to delete (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/posts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPost } from "../../../structures/IDiscussionBoardPost";
import { IPageIDiscussionBoardPost } from "../../../structures/IPageIDiscussionBoardPost";

/**
 * Create a post in 'discussion_board_posts'.
 *
 * Receives new post submission data, including reference to thread, author
 * (inferred from auth context), and post body. Validates required fields
 * against admin configuration for length and content. Posts are always
 * attributed to their thread and author. The post record is inserted into
 * 'discussion_board_posts' and complete state is returned. Fails if permissions
 * denied or validation fails. Complies with board requirements for
 * authenticated posting and ensures content is only accepted from active
 * accounts. Errors reported include validation, thread closed, or suspension
 * blocks.
 *
 * @param props.connection
 * @param props.body Post creation info including thread reference and content.
 * @path /discussionBoard/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Post creation info including thread reference and content. */
    body: IDiscussionBoardPost.ICreate;
  };
  export type Body = IDiscussionBoardPost.ICreate;
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/posts";
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search posts from 'discussion_board_posts' with query.
 *
 * This endpoint accepts a request body with search, filter, and pagination
 * parameters, enabling clients to retrieve lists of posts based on criteria
 * like thread ID, creator, posted date range, keyword match, or others per
 * application needs. Implements F06 (search/filter) and supports functional
 * requirements for browsing, moderation dashboards, or analytics. Returns
 * paginated data, including metadata for total count and current page cursor.
 * Input validation includes allowed filters, sort directions, and page size
 * limits as per configuration policies. Permissions are enforced to ensure that
 * only permitted posts are returned. Errors include invalid search parameters,
 * permissions, or system errors.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination info for post list query.
 * @path /discussionBoard/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter, and pagination info for post list query. */
    body: IDiscussionBoardPost.IRequest;
  };
  export type Body = IDiscussionBoardPost.IRequest;
  export type Response = IPageIDiscussionBoardPost;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/posts";
  export const random = (): IPageIDiscussionBoardPost =>
    typia.random<IPageIDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a post from 'discussion_board_posts' by ID.
 *
 * Retrieves an individual post entity with all system-metadata, including body
 * content, author, parent thread, timestamps, and edit/deletion status.
 * Implements requirements for isolated post viewing (F02) and supports
 * moderation UI for post review (F04). Middleware must enforce proper access,
 * including moderation and deleted content visibility rules. Errors include not
 * found, access denied, or deleted posts.
 *
 * @param props.connection
 * @param props.id Unique ID of the post to retrieve (UUID).
 * @path /discussionBoard/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the post to retrieve (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/posts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a post by ID in 'discussion_board_posts'.
 *
 * Upon receiving updated data, this endpoint locates and alters an existing
 * post by ID. Permitted changes include updating post content (body), edit
 * flag, or certain metadata. Enforcement of update policies, including
 * permissible fields or edit timing, relies on middleware and admin
 * configuration. Only post owners, moderators, or administrators may perform
 * edits. Result includes full post state with updated fields and timestamps.
 * Errors include permission failure, invalid input, or not found/soft-deleted
 * post.
 *
 * @param props.connection
 * @param props.id ID of post to update (UUID).
 * @param props.body Fields for updating the post content or metadata.
 * @path /discussionBoard/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of post to update (UUID). */
    id: string & tags.Format<"uuid">;

    /** Fields for updating the post content or metadata. */
    body: IDiscussionBoardPost.IUpdate;
  };
  export type Body = IDiscussionBoardPost.IUpdate;
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/posts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a post from 'discussion_board_posts' by ID.
 *
 * This endpoint marks a chosen post as deleted (soft deletion), by populating
 * the deleted_at field in its record. Keeps history for moderation, audit, and
 * regulatory traceability. Only accessible by authors, moderators, or admins
 * with correct permissions per platform configuration. Fails if post not found,
 * already deleted, or not authorized. All deletion attempts are logged for
 * audit compliance. Supports requirements for reversibility, legal retention,
 * and moderation workflows.
 *
 * @param props.connection
 * @param props.id ID of post to delete (UUID).
 * @path /discussionBoard/posts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of post to delete (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/posts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/posts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardSearchHistory } from "../../../structures/IDiscussionBoardSearchHistory";
import { IPageIDiscussionBoardSearchHistory } from "../../../structures/IPageIDiscussionBoardSearchHistory";

/**
 * Create a new discussion board search history entry
 * (discussion_board_search_histories).
 *
 * This API operation allows the creation of a new search history item in the
 * `discussion_board_search_histories` table. It logs the execution of a search
 * (by guest or member), storing key information such as the search keyword(s),
 * any applied filters (tags/categories/dates), the search context, and the
 * actor ID.
 *
 * Used for constructing personalized user experiences or audit trails. The
 * actor ID must be validated and tied to an active guest or member. Input
 * validation ensures proper query format and integrity. On success, the created
 * history record (with its UUID and timestamps) is returned.
 *
 * Role-based access may restrict this operation to only authorized users or
 * system processes performing searches on behalf of users/guests.
 *
 * @param props.connection
 * @param props.body Search history creation payload.
 * @path /discussionBoard/searchHistories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Search history creation payload. */
    body: IDiscussionBoardSearchHistory.ICreate;
  };
  export type Body = IDiscussionBoardSearchHistory.ICreate;
  export type Response = IDiscussionBoardSearchHistory;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/searchHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/searchHistories";
  export const random = (): IDiscussionBoardSearchHistory =>
    typia.random<IDiscussionBoardSearchHistory>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and filter discussion board search histories
 * (discussion_board_search_histories).
 *
 * This API operation enables retrieval of search history records from the
 * `discussion_board_search_histories` table. It supports sophisticated
 * filtering, sorting, and pagination to help administrators and moderators
 * analyze search patterns, review auditing data, or enhance UX features such as
 * showing recent searches.
 *
 * Request parameters may include actor ID (user performing search), date/time
 * ranges, search keywords, and context metadata. The results include search
 * queries, any applied filters, timestamps, and possible user identifiers. Only
 * roles with appropriate permissions (admin, mod; regular member for their own
 * data) can retrieve histories.
 *
 * Errors are handled for invalid filters, unauthorized access, or database
 * issues. This is a read-only operation and does not alter records.
 *
 * @param props.connection
 * @param props.body Advanced search history filter, pagination, and sort
 *   parameters.
 * @path /discussionBoard/searchHistories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Advanced search history filter, pagination, and sort parameters. */
    body: IDiscussionBoardSearchHistory.IRequest;
  };
  export type Body = IDiscussionBoardSearchHistory.IRequest;
  export type Response = IPageIDiscussionBoardSearchHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/searchHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/searchHistories";
  export const random = (): IPageIDiscussionBoardSearchHistory =>
    typia.random<IPageIDiscussionBoardSearchHistory>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific search history record
 * (discussion_board_search_histories).
 *
 * This API operation fetches a single search history record from the
 * `discussion_board_search_histories` table by unique ID. The returned object
 * contains all input details submitted by the user, such as search keywords,
 * applied filters, the actor (user/guest), context, and time performed.
 *
 * Used for compliance, audit, or UX personalization flows ("view my search
 * history"). Fine-grained permissions ensure only the actor or authorized
 * administrators can view sensitive search logs. The endpoint is useful as part
 * of moderation dashboards or user-facing activity history.
 *
 * @param props.connection
 * @param props.id Unique identifier of the search history record.
 * @path /discussionBoard/searchHistories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the search history record. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardSearchHistory;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/searchHistories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/searchHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardSearchHistory =>
    typia.random<IDiscussionBoardSearchHistory>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific search history record (discussion_board_search_histories).
 *
 * This API operation enables the update of an existing search history item in
 * the `discussion_board_search_histories` table. Typical use cases include
 * correcting erroneous metadata, amending search filter records for compliance,
 * or administrative adjustments for audit trails. The operation supports fields
 * such as keyword, filters, and search context (but not actor ID, which is
 * immutable).
 *
 * Authorization checks ensure only the search-owning actor or an administrator
 * can perform updates. Audit trails are maintained for transparency, and
 * appropriate error handling is enforced for non-existent, immutable, or
 * unauthorized changes.
 *
 * Successful operation returns the amended history record, maintaining all
 * required traceability fields.
 *
 * @param props.connection
 * @param props.id Unique identifier of the search history record to update.
 * @param props.body Search history update payload following .IUpdate pattern.
 * @path /discussionBoard/searchHistories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the search history record to update. */
    id: string & tags.Format<"uuid">;

    /** Search history update payload following .IUpdate pattern. */
    body: IDiscussionBoardSearchHistory.IUpdate;
  };
  export type Body = IDiscussionBoardSearchHistory.IUpdate;
  export type Response = IDiscussionBoardSearchHistory;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/searchHistories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/searchHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardSearchHistory =>
    typia.random<IDiscussionBoardSearchHistory>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific search history entry (discussion_board_search_histories).
 *
 * This API operation deletes an individual search history record from the
 * `discussion_board_search_histories` table. It is typically used by users to
 * clear their search history for privacy reasons, or by administrators to
 * enforce data retention/compliance policies. The record identified by the UUID
 * in the path is removed from the database.
 *
 * Before removal, the endpoint verifies that the requesting user is authorized
 * to delete the record (either as owner or admin). On success, a confirmation
 * response or the deleted record (for audit) is returned. Appropriate error
 * handling is enforced for non-existent records or failed authorization
 * checks.
 *
 * @param props.connection
 * @param props.id Identifier of the search history entry to delete.
 * @path /discussionBoard/searchHistories/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Identifier of the search history entry to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardSearchHistory;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/searchHistories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/searchHistories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardSearchHistory =>
    typia.random<IDiscussionBoardSearchHistory>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerator } from "../../../structures/IDiscussionBoardModerator";
import { IPageIDiscussionBoardModerator } from "../../../structures/IPageIDiscussionBoardModerator";

/**
 * Creates a new moderator record for a user (discussion_board_moderator table).
 *
 * This API creates a new moderator record in the discussion_board_moderator
 * table, representing the assignment of moderator duties to a user. The target
 * must have the 'moderator' role assigned in discussion_board_role_assignment.
 * The request body must provide user_id, assignment date, optional revocation
 * date, and notes for onboarding or compliance.
 *
 * Only admin users can create moderator records. The operation is logged for
 * audit, with related endpoints for listing, update, get, and delete. Error
 * conditions: user missing, existing active moderator record, or access
 * violation.
 *
 * @param props.connection
 * @param props.body Information required to create a moderator record (user
 *   assignment, assignment date, notes).
 * @path /discussionBoard/moderators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Information required to create a moderator record (user assignment,
     * assignment date, notes).
     */
    body: IDiscussionBoardModerator.ICreate;
  };
  export type Body = IDiscussionBoardModerator.ICreate;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderators";
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Lists and searches moderator records (discussion_board_moderator table) with
 * pagination and search filtering.
 *
 * This API operation retrieves a paginated and filterable list of moderator
 * records from the discussion_board_moderator table. By using PATCH, advanced
 * search predicates and pagination details can be specified in the request body
 * (see schema for search options). Returns moderator user references,
 * assignment dates, revocation status, and notes as required by the
 * requirements and business logic for managing community staff.
 *
 * This endpoint is available to admin and moderator users, supporting audits
 * and team management. Related endpoints: create (POST), read (GET), update
 * (PUT), and delete (DELETE). Errors: invalid filter, unauthorized access, or
 * database issues.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for listing
 *   moderators.
 * @path /discussionBoard/moderators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter, and pagination criteria for listing moderators. */
    body: IDiscussionBoardModerator.IRequest;
  };
  export type Body = IDiscussionBoardModerator.IRequest;
  export type Response = IPageIDiscussionBoardModerator;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderators";
  export const random = (): IPageIDiscussionBoardModerator =>
    typia.random<IPageIDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Gets details of a moderator record by ID (discussion_board_moderator table).
 *
 * This endpoint fetches the full record of a moderator, as defined in the
 * discussion_board_moderator table, based on their UUID. Returns user
 * reference, assignment metadata, notes, and revocation details if present.
 * Only available to admin and moderator users for audit, compliance, and
 * management review.
 *
 * Path parameter 'id' must be a UUID. Related endpoints: moderator listing
 * (PATCH), create (POST), update (PUT), and delete (DELETE). Errors: moderator
 * record not found or access denied.
 *
 * @param props.connection
 * @param props.id ID of the moderator record to retrieve.
 * @path /discussionBoard/moderators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** ID of the moderator record to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Updates an existing moderator record by ID (discussion_board_moderator
 * table).
 *
 * Updates a moderator record specified by ID, allowing modification of notes
 * and revocation status in the discussion_board_moderator table. The request
 * body provides new values for `notes` and/or `revoked_at`. User ID and initial
 * assigned_at cannot be changed; these are immutable keys to meet compliance.
 * Only admin or elevated moderator users can update moderator records.
 * Successful update is audited for traceability.
 *
 * Related endpoints: create moderator (POST), get (GET), list (PATCH), and
 * delete (DELETE). Error cases: record not found, immutable field attempted to
 * modify, access denied, or invalid update information.
 *
 * @param props.connection
 * @param props.id ID of moderator record to update.
 * @param props.body Fields to update for moderator record (notes, revoked_at).
 * @path /discussionBoard/moderators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of moderator record to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for moderator record (notes, revoked_at). */
    body: IDiscussionBoardModerator.IUpdate;
  };
  export type Body = IDiscussionBoardModerator.IUpdate;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific moderator from discussion_board_moderator (Moderation role
 * removal).
 *
 * This endpoint provides the ability to remove a moderator record from the
 * discussion_board_moderator entity, fulfilling administrative moderation
 * removal as described in the requirements analysis and moderation policy. The
 * operation will accept the moderator's unique ID, validate that the user
 * currently holds moderator status, and fully remove all associated moderator
 * metadata, including history (but not user account or content). This action is
 * typically restricted to admins. The operation enforces business logic
 * regarding active escalations, pending moderation actions, and history
 * preservation. If the moderator has unresolved reports or actions, the delete
 * request may be rejected until resolution. Errors such as not found or
 * insufficient rights are returned clearly. This API is closely coupled with
 * endpoints for role assignments and warnings/actions logged.
 *
 * @param props.connection
 * @param props.id Target moderator's ID (must be a valid UUID referencing the
 *   discussion_board_moderator record)
 * @path /discussionBoard/moderators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /**
     * Target moderator's ID (must be a valid UUID referencing the
     * discussion_board_moderator record)
     */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

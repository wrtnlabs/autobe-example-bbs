import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerator } from "../../../structures/IDiscussionBoardModerator";
import { IPageIDiscussionBoardModerator } from "../../../structures/IPageIDiscussionBoardModerator";

/**
 * Assign moderator role to member (create discussion_board_moderators).
 *
 * Administrators can call this endpoint to assign moderator privileges to an
 * existing member. The request body must include the member ID and optional
 * notes/context. Duplicate assignments (member is already a moderator) are
 * rejected with error. After assignment, the system sets assigned_at to the
 * current timestamp and links the moderator to the member. The endpoint
 * generates logs for audit/role tracking, and may trigger an email or
 * notification to the member. The response includes full moderator assignment
 * info (ID, member, assignment timestamp, status). If the member is already an
 * admin, escalation is blocked and guidance is provided. The endpoint logs all
 * actions for compliance.
 *
 * @param props.connection
 * @param props.body Moderator assignment information (including target member
 *   ID).
 * @path /discussionBoard/moderators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return true === connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Moderator assignment information (including target member ID). */
    body: IDiscussionBoardModerator.ICreate;
  };
  export type Body = IDiscussionBoardModerator.ICreate;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderators";
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search all moderators (discussion_board_moderators) with filtering and
 * pagination.
 *
 * Retrieve a paginated and optionally filtered list of all moderator
 * assignments on the discussion board. This endpoint can filter by
 * active/revoked moderators, assignment window, or search by member attributes
 * (e.g., username/display name). It supports pagination with limit and offset
 * or page/size. Sensitive actions like viewing mod assignments are restricted
 * to administrators for transparency, accountability, and management reporting.
 * The results are returned as a page object with data on each moderator,
 * including links to their member profiles and information on when/if their
 * moderation privileges were revoked. If no moderators match the filter, an
 * empty array is returned. Use this endpoint for admin dashboards, audit
 * panels, and role management UIs.
 *
 * @param props.connection
 * @param props.body Filter/search and pagination options for moderator listing.
 * @path /discussionBoard/moderators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return true === connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filter/search and pagination options for moderator listing. */
    body: IDiscussionBoardModerator.IRequest;
  };
  export type Body = IDiscussionBoardModerator.IRequest;
  export type Response = IPageIDiscussionBoardModerator;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderators";
  export const random = (): IPageIDiscussionBoardModerator =>
    typia.random<IPageIDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get moderator assignment/details (discussion_board_moderators) by ID.
 *
 * Admins and moderators may use this endpoint to fetch all information about a
 * specific moderator â€“ including their assignment status, related member
 * attributes (username, email, display name, dates assigned/revoked), as well
 * as counts of reports or logs linked to that moderator if needed. The endpoint
 * checks for existence and access permissions. If the moderator was revoked or
 * deleted, the record will show as inactive but is still returned for audit
 * trail. This is essential for history panels and management of role
 * escalation. Security policy ensures that only authorized roles may call this
 * endpoint. Error handling includes 404 for non-existent moderators or
 * inappropriate access.
 *
 * @param props.connection
 * @param props.id Target moderator assignment ID (UUID).
 * @path /discussionBoard/moderators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return true === connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target moderator assignment ID (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update/revoke moderator assignment (discussion_board_moderators).
 *
 * This endpoint lets an administrator adjust a specific moderator assignment by
 * ID. Use it to revoke or reassign privileges (by setting revoked_at) or update
 * other mutable fields as business rules allow (notes, admin context). If the
 * moderator is already revoked or non-existent, a suitable error is returned.
 * Full audit trail is maintained for all changes. Security enforcement
 * restricts the operation to administrators. All changes should be clearly
 * reflected in UI dashboards, audit logs, and member notifications. On
 * successful update, returns the updated moderator assignment object with all
 * relevant fields (assignment status, member info, timestamps).
 *
 * @param props.connection
 * @param props.id Target moderator assignment ID (UUID) to update.
 * @param props.body Moderator assignment update data (fields allowed by
 *   business rules).
 * @path /discussionBoard/moderators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return true === connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target moderator assignment ID (UUID) to update. */
    id: string & tags.Format<"uuid">;

    /** Moderator assignment update data (fields allowed by business rules). */
    body: IDiscussionBoardModerator.IUpdate;
  };
  export type Body = IDiscussionBoardModerator.IUpdate;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (revoke/remove) moderator assignment (discussion_board_moderators).
 *
 * When invoked, this endpoint revokes and soft-deletes a moderator assignment
 * for the specified ID. It marks the moderator as no longer active, updates
 * revoked_at and/or deleted_at timestamps, and persists the change in audit
 * trails. The moderator is then removed from all role-based enforcement in the
 * system. The member record itself is not affected unless separately deleted.
 * Security rules restrict usage to administrators for compliance. Operations
 * return 204 No Content on success or 404 if non-existent. Downstream actions
 * (e.g., notifications, audit log entries) may be triggered asynchronously.
 *
 * @param props.connection
 * @param props.id Target moderator assignment ID (UUID) to delete/revoke.
 * @path /discussionBoard/moderators/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target moderator assignment ID (UUID) to delete/revoke. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

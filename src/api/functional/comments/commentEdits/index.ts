import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommentEdit } from "../../../structures/ICommentEdit";
import { IPageICommentEdit } from "../../../structures/IPageICommentEdit";

/**
 * Create new comment edit snapshot (comment_edits table, POST).
 *
 * Allows a user or moderator to create a new comment edit snapshot, with
 * references to the comment, the editor, the edited body, optional reason, and
 * the timestamp. Used on direct user edits or by moderation action. Backend
 * logic checks for valid comment/editor linkage (auth/authorization). Defaults
 * to atomic insert per strict normalization. Returns full ICommentEdit object
 * on success. Errors: validation fail, reference non-existence, forbidden
 * action.
 *
 * @param props.body Comment edit creation details (ICommentEdit.ICreate).
 * @path /comments/commentEdits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Comment edit creation details (ICommentEdit.ICreate). */
    body: ICommentEdit.ICreate;
  };
  export type Body = ICommentEdit.ICreate;
  export type Response = ICommentEdit;

  export const METADATA = {
    method: "POST",
    path: "/comments/commentEdits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/comments/commentEdits";
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentEdit =>
    typia.random<ICommentEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/history of comment edits (comment_edits table, PATCH).
 *
 * Allows authenticated users, moderators, or admins to obtain a paginated,
 * filtered, and sorted list of comment edits. Each edit name includes: which
 * comment, by whom (editor), content at that time, edit_reason, and timestamp.
 * Backend may enforce role checks: authors get their own edits, mods/admins can
 * browse all for audit. The request follows ICommentEdit.IRequest; the response
 * is a paginated IPageICommentEdit result. Related: GET for single snapshot,
 * POST/PUT for creation/update moderation intervention.
 *
 * @param props.body Search/pagination criteria for comment edit snapshots.
 * @path /comments/commentEdits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search/pagination criteria for comment edit snapshots. */
    body: ICommentEdit.IRequest;
  };
  export type Body = ICommentEdit.IRequest;
  export type Response = IPageICommentEdit;

  export const METADATA = {
    method: "PATCH",
    path: "/comments/commentEdits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/comments/commentEdits";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageICommentEdit => typia.random<IPageICommentEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get single comment edit snapshot (comment_edits table, GET).
 *
 * Fetches full detail for a single comment edit record, by unique UUID. Details
 * include which comment, the editor user, snapshot body, edit reason (if any),
 * and timestamp. Backend can control visibility per role (regular users see
 * their own, mods/admins see all edits). Used for audit, evidence in
 * moderation, or user-edit history. Returns full ICommentEdit object.
 *
 * @param props.id Unique UUID of the comment edit snapshot.
 * @path /comments/commentEdits/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique UUID of the comment edit snapshot. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommentEdit;

  export const METADATA = {
    method: "GET",
    path: "/comments/commentEdits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/comments/commentEdits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentEdit =>
    typia.random<ICommentEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update comment edit snapshot (comment_edits table, PUT).
 *
 * Allows a user (or moderator) to update a specific comment edit snapshot.
 * Changes only atomic fields: body, edit_reason (does not change comment_id or
 * editor, per normalization). Input follows ICommentEdit.IUpdate; response is
 * the new/updated snapshot. Access is checked per edit ownership and
 * roleâ€”regular users may be restricted to only their own, time-limited changes.
 * Errors: ID not found, forbidden, or immutable/edit-locked snapshot.
 *
 * @param props.id Unique UUID of comment edit snapshot to update.
 * @param props.body New values for body, edit_reason (ICommentEdit.IUpdate).
 * @path /comments/commentEdits/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique UUID of comment edit snapshot to update. */
    id: string & tags.Format<"uuid">;

    /** New values for body, edit_reason (ICommentEdit.IUpdate). */
    body: ICommentEdit.IUpdate;
  };
  export type Body = ICommentEdit.IUpdate;
  export type Response = ICommentEdit;

  export const METADATA = {
    method: "PUT",
    path: "/comments/commentEdits/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/comments/commentEdits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentEdit =>
    typia.random<ICommentEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete comment edit snapshot by ID (comment_edits table, DELETE).
 *
 * Allows authorized users to delete a comment edit snapshot by unique UUID.
 * Deletion may be hard or soft depending on audit policy (here, probably soft
 * by permission logic). A deleted snapshot cannot be used for post rendering or
 * audit. Appropriate checks ensure only the owner or a moderator can delete.
 * Returns deleted object (or status) on success. Errors: not found, forbidden,
 * already removed.
 *
 * @param props.id Unique UUID of the comment edit record to delete.
 * @path /comments/commentEdits/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique UUID of the comment edit record to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommentEdit;

  export const METADATA = {
    method: "DELETE",
    path: "/comments/commentEdits/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/comments/commentEdits/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentEdit =>
    typia.random<ICommentEdit>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

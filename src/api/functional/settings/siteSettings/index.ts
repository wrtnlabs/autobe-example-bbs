import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISiteSettings } from "../../../structures/ISiteSettings";
import { ISiteSetting } from "../../../structures/ISiteSetting";
import { IPageISiteSetting } from "../../../structures/IPageISiteSetting";

/**
 * Create new site_settings record (Prisma: site_settings).
 *
 * This endpoint creates a new global site settings record for the board. It is
 * intended for system bootstrap and initial configuration or when resetting all
 * board-wide settings due to policy change, migration, or major update.
 *
 * Typically, only one active site_settings record is allowed, and duplicate
 * creation should be guarded by business logic and unique site_name constraint.
 * Only administrators are permitted to call this API, ensuring secure and
 * controlled platform configuration management. This operation references the
 * site_settings model in the Prisma schema and validates that all settings
 * fields (site name, language, guidelines URL, branding logo, features JSON,
 * etc.) are atomic, non-derived values stored centrally.
 *
 * If the site is already configured, subsequent requests may be rejected to
 * prevent ambiguity in platform configuration. Error handling should include
 * checks for missing required fields or conflicts with existing settings.
 *
 * Related endpoints for updating/deleting settings are
 * /settings/siteSettings/{id} PUT/DELETE. For per-user settings, use
 * /settings/userSettings.
 *
 * @param props.body Site-wide configuration details to create a new settings
 *   record.
 * @path /settings/siteSettings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Site-wide configuration details to create a new settings record. */
    body: ISiteSettings.ICreate;
  };
  export type Body = ISiteSettings.ICreate;
  export type Response = ISiteSettings;

  export const METADATA = {
    method: "POST",
    path: "/settings/siteSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/settings/siteSettings";
  export const random = (g?: Partial<typia.IRandomGenerator>): ISiteSettings =>
    typia.random<ISiteSettings>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieves the global site settings from the 'site_settings' table for audit
 * and config UI.
 *
 * This endpoint returns the current global site settings, including site name,
 * language, branding, community guidelines, and feature toggles, as specified
 * in the 'site_settings' Prisma table. Administrators use this to review or
 * audit current and prior configuration. Filtering and pagination are supported
 * for audit histories or config history comparisons.
 *
 * Security: Only administrators can typically retrieve the full settings object
 * or historical changes. Results returned are fully normalized; no derived or
 * aggregate fields are included. This operation is critical for all
 * admin/config UI panels, bootstrapping frontend configuration, and ensuring
 * RBAC business rules are enforced. Related endpoints include configuration
 * update and detail view.
 *
 * @param props.body Optional advanced search/pagination parameters for config
 *   history/audit.
 * @path /settings/siteSettings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Optional advanced search/pagination parameters for config
     * history/audit.
     */
    body: ISiteSetting.IRequest;
  };
  export type Body = ISiteSetting.IRequest;
  export type Response = IPageISiteSetting;

  export const METADATA = {
    method: "PATCH",
    path: "/settings/siteSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/settings/siteSettings";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageISiteSetting => typia.random<IPageISiteSetting>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieves the full site settings object from the 'site_settings' table by
 * record id for admin/configuration UI.
 *
 * This endpoint returns the normalized full details of a single site_settings
 * record by its id. It provides data needed for admin UI to display current or
 * historical configuration (site branding, language, feature toggles, etc).
 * Typical usage includes admin audit, modification review, or comparison of
 * prior configs.
 *
 * Role-based access control is enforced so only admins can perform this
 * operation. Security and traceability are maintained for high-privilege
 * actions. Closely related endpoints are configuration patch/update and audit
 * listing.
 *
 * @param props.id Site settings record unique id to retrieve.
 * @path /settings/siteSettings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Site settings record unique id to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISiteSetting;

  export const METADATA = {
    method: "GET",
    path: "/settings/siteSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/settings/siteSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ISiteSetting =>
    typia.random<ISiteSetting>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update site_settings by id (Prisma: site_settings).
 *
 * Modifies an existing site_settings record identified by ID. This enables
 * admins to adjust platform-wide configuration, supporting the evolution of
 * community policies, branding, or available features. The API references the
 * site_settings schema, requiring only atomic, non-derived fields to be
 * updatedâ€”preventing denormalization and config drift.
 *
 * Business logic must ensure single active settings (typically one record), and
 * changes are auditable through updated_at. Only administrators have access to
 * this endpoint. If the record is not found, the API should return an
 * appropriate error. Conflict resolution follows the unique constraint on
 * site_name. Related settings endpoints include /settings/siteSettings POST for
 * creation and /settings/siteSettings/{id} DELETE for deletion.
 *
 * Validation ensures all updated fields comply with schema requirements (site
 * name, default language, etc.). The endpoint is for administrative use only
 * and designed for complete configuration management of the platform.
 *
 * @param props.id Target site_settings record's ID
 * @param props.body Updated values for the site-wide configuration.
 * @path /settings/siteSettings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target site_settings record's ID */
    id: string & tags.Format<"uuid">;

    /** Updated values for the site-wide configuration. */
    body: ISiteSettings.IUpdate;
  };
  export type Body = ISiteSettings.IUpdate;
  export type Response = ISiteSettings;

  export const METADATA = {
    method: "PUT",
    path: "/settings/siteSettings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/settings/siteSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ISiteSettings =>
    typia.random<ISiteSettings>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete site_settings by id (Prisma: site_settings).
 *
 * Soft-deletes the specified site_settings record by ID. Rather than removing
 * the record permanently, this sets a deleted_at timestamp, maintaining audit
 * trails and compliance with business/information retention rules. Only
 * administrators may call this endpoint due to its irreversible impact on the
 * operational configuration of the platform.
 *
 * This operation references the site_settings schema and only marks records as
 * deleted (as per the Prisma model, which uses deleted_at for soft deletions).
 * If the specified record does not exist, an error is returned. Validation
 * ensures only authorized users perform this action. The platform may block all
 * normal operations until a new settings record is created, emphasizing the
 * criticality of this endpoint. Related endpoints: creation
 * (/settings/siteSettings POST), updating (/settings/siteSettings/{id} PUT).
 *
 * @param props.id Target site_settings record's ID
 * @path /settings/siteSettings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target site_settings record's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISiteSettings;

  export const METADATA = {
    method: "DELETE",
    path: "/settings/siteSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/settings/siteSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ISiteSettings =>
    typia.random<ISiteSettings>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommentReport } from "../../../structures/ICommentReport";
import { IPageICommentReport } from "../../../structures/IPageICommentReport";

/**
 * Create a new comment report in the comment_reports table.
 *
 * This endpoint enables users to create a new comment report in the
 * comment_reports table, initiating the moderation process for problematic
 * comments. Request validation includes ensuring the reporter is a registered
 * user and that provided data such as comment ID and report reason are complete
 * and valid.
 *
 * Post-submission, moderators are notified to review and act on the new report
 * as per moderation workflow. Duplicate reporting protections and abuse rate
 * limits may apply. Upon creation, a reference to the new report is returned
 * for tracking, and moderators can subsequently use GET/PUT/DELETE endpoints
 * for follow-up.
 *
 * Error handling covers non-existent target comments, malformed requests, and
 * lack of authentication. Proper audit logging is recommended for
 * transparency.
 *
 * @param props.body Information needed to create a new comment report.
 * @path /moderation/commentReports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Information needed to create a new comment report. */
    body: ICommentReport.ICreate;
  };
  export type Body = ICommentReport.ICreate;
  export type Response = ICommentReport;

  export const METADATA = {
    method: "POST",
    path: "/moderation/commentReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/moderation/commentReports";
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentReport =>
    typia.random<ICommentReport>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search comment_reports entries for moderation, backed by
 * comment_reports table.
 *
 * This endpoint is used to retrieve a list of comment reports from the
 * comment_reports table with advanced filtering, pagination, and optional
 * sorting. The ability to search by status, creation/resolution date, reporter,
 * or comment target enhances moderation workflows.
 *
 * Only moderators and admins can access this operation due to the sensitive
 * nature of reported content, enforced via RBAC using roles and
 * role_assignments tables. Pagination and limit parameters prevent excessive
 * result sets and performance bottlenecks.
 *
 * Common usages include displaying an inbox of pending reports, tracking
 * resolution metrics, or auditing moderator actions. Filtered access helps
 * prioritize high-severity reports.
 *
 * Dependency: Moderators often fetch the list before acting on individual
 * reports (using GET/PUT/DELETE by ID endpoints). Error handling covers
 * insufficient permissions and invalid filter syntax.
 *
 * @param props.body Request filtering, pagination, and sorting options for
 *   retrieving comment reports.
 * @path /moderation/commentReports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Request filtering, pagination, and sorting options for retrieving
     * comment reports.
     */
    body: ICommentReport.IRequest;
  };
  export type Body = ICommentReport.IRequest;
  export type Response = IPageICommentReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/moderation/commentReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/moderation/commentReports";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageICommentReport.ISummary =>
    typia.random<IPageICommentReport.ISummary>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details for a comment report by ID from comment_reports table.
 *
 * This endpoint allows authorized moderation users to view the complete
 * information of a particular comment report. The target is identified by an ID
 * path parameter corresponding to the primary key of the comment_reports table.
 * Returned data includes all fields in the model and often includes expanded
 * info such as the reporter's identity and referenced comment.
 *
 * RBAC policies grant access only to moderators and administrators, as reports
 * may contain sensitive or privacy-related information. The endpoint is
 * essential for moderation action-taking workflows: after reviewing the report
 * with this endpoint, a moderator may resolve, dismiss, or escalate it using
 * the PUT endpoint.
 *
 * Error scenarios include missing records, insufficient permissions, or
 * attempts by non-moderators.
 *
 * @param props.id Unique ID of the comment report to retrieve (UUID).
 * @path /moderation/commentReports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the comment report to retrieve (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICommentReport;

  export const METADATA = {
    method: "GET",
    path: "/moderation/commentReports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/moderation/commentReports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentReport =>
    typia.random<ICommentReport>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a comment report's status or details by ID (comment_reports table).
 *
 * This endpoint updates a comment report in the comment_reports table by its
 * unique identifier. Common usage scenarios include changing the status (from
 * pending to resolved/dismissed), adding moderator notes, or updating the
 * report reason. Access is restricted to users granted moderator or admin
 * roles, enforced through RBAC policies.
 *
 * Full validation ensures status transitions and input data are appropriate
 * (e.g., cannot mark as resolved without specifying resolution time). Updates
 * are thoroughly audit-logged in moderation_logs for transparency/compliance.
 * Marked as resolved, the report will typically be removed from the pending
 * inbox and shown in history/analytics.
 *
 * Input validation, permission errors, or missing records are notable error
 * cases. Related endpoints include GET to fetch the report before/after changes
 * and PATCH for filtered lists.
 *
 * @param props.id Unique ID of the comment report to update (UUID).
 * @param props.body Fields to update (status, resolution data, moderator notes,
 *   etc.)
 * @path /moderation/commentReports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique ID of the comment report to update (UUID). */
    id: string & tags.Format<"uuid">;

    /** Fields to update (status, resolution data, moderator notes, etc.) */
    body: ICommentReport.IUpdate;
  };
  export type Body = ICommentReport.IUpdate;
  export type Response = ICommentReport;

  export const METADATA = {
    method: "PUT",
    path: "/moderation/commentReports/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/moderation/commentReports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICommentReport =>
    typia.random<ICommentReport>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Deletes a comment report by ID from the comment_reports table.
 *
 * Allows deletion of a comment report identified by ID from the comment_reports
 * table, removing it from further moderation consideration and report listings.
 * Only users with moderation privileges may use this endpoint (as enforced by
 * the RBAC configuration in roles/role_assignments).
 *
 * Action is generally audit-logged for compliance. Deletion is final and should
 * only be used after review/processing as per moderation workflow policy.
 * Typical error scenarios: missing report ID, insufficient user permissions, or
 * attempting to delete a report still needed for active review.
 *
 * Closely related to the PATCH (list/search), GET (detail), POST (create), or
 * PUT (status update) endpoints for comment_reports.
 *
 * @param props.id Unique ID of the comment report to delete (UUID).
 * @path /moderation/commentReports/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique ID of the comment report to delete (UUID). */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/moderation/commentReports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/moderation/commentReports/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserWarning } from "../../../structures/IUserWarning";
import { IPageIUserWarning } from "../../../structures/IPageIUserWarning";

/**
 * Create a new user warning in the user_warnings Prisma table.
 *
 * Allows creation of a user warning by submitting relevant information in the
 * request body – including the target user, moderator, reason, and (optionally)
 * related post/comment. This formally documents a moderation warning, alerts
 * the user, and becomes part of the user’s moderation history. Input validation
 * ensures entities exist and required information is included.
 *
 * Operation restricted to users with moderator or administrator role by RBAC
 * logic. After creation, the issued warning can trigger user notifications (see
 * notifications tables). Follow-up actions may include PUT to adjust/resolve or
 * DELETE to remove mistaken records. All warning creations should be reflected
 * in moderation_logs for transparency/compliance.
 *
 * @param props.body Data required to create a warning (target user, moderator,
 *   reason, etc.)
 * @path /moderation/userWarnings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Data required to create a warning (target user, moderator, reason,
     * etc.)
     */
    body: IUserWarning.ICreate;
  };
  export type Body = IUserWarning.ICreate;
  export type Response = IUserWarning;

  export const METADATA = {
    method: "POST",
    path: "/moderation/userWarnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/moderation/userWarnings";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserWarning =>
    typia.random<IUserWarning>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search user_warnings rows for moderation, using user_warnings table.
 *
 * Enables moderators and administrators to access a filtered and paginated
 * listing of user warnings from the user_warnings table. This is key in
 * enforcing escalating moderation actions as outlined in content rules and
 * business policies. Data returned may be filtered by user, moderator, post,
 * comment, status, or date/time, supporting moderation dashboard review.
 *
 * Sensitive access is RBAC-restricted. User warning records support metrics,
 * individual case review, and aggregate user moderation history analysis.
 *
 * Pagination, sorting, and search criteria must be handled to optimize
 * performance and avoid large response payloads. In typical workflows, a
 * moderator may list warnings to decide if further action is warranted (e.g.,
 * suspension/ban).
 *
 * Preceding or related calls might include user-case GET, POST to issue
 * warning, PUT/DELETE to update or remove warning records. Error cases include
 * permission denial or invalid filters.
 *
 * @param props.body Filter and pagination parameters for searching user
 *   warnings.
 * @path /moderation/userWarnings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filter and pagination parameters for searching user warnings. */
    body: IUserWarning.IRequest;
  };
  export type Body = IUserWarning.IRequest;
  export type Response = IPageIUserWarning.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/moderation/userWarnings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/moderation/userWarnings";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIUserWarning.ISummary => typia.random<IPageIUserWarning.ISummary>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get detail for a user warning by ID from user_warnings table.
 *
 * Provides comprehensive information for a single user warning identified by
 * ID, from the user_warnings table. Includes key data such as reason, involved
 * moderator, affected user, target content (post/comment), and issuance data.
 * Access is secured for moderators/admin use only.
 *
 * This detail view informs moderation escalation, appeal review, and analytics
 * of warning frequency/types. The endpoint is frequently called after listing
 * warnings or when auditing a user's moderation history. Errors include missing
 * records, permission restrictions, or attempts by regular users to access
 * restricted warning details.
 *
 * Related endpoints: PATCH for warning list/search, POST for creating new
 * warnings, PUT for updates, and DELETE for removals.
 *
 * @param props.id Unique warning ID (UUID) from user_warnings table.
 * @path /moderation/userWarnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique warning ID (UUID) from user_warnings table. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserWarning;

  export const METADATA = {
    method: "GET",
    path: "/moderation/userWarnings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/moderation/userWarnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserWarning =>
    typia.random<IUserWarning>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a user warning record by ID in user_warnings table.
 *
 * Updates selected fields of a user warning specified by ID. Typical changes
 * include amending the reason, linking/unlinking to a new post/comment, or
 * adding workflow notes. Full validation ensures only authorized users and
 * valid updates.
 *
 * All changes are audit-logged for compliance. RBAC policies enforce access.
 * This endpoint is used in moderation follow-up, escalating or revising
 * warnings as behavior unfolds. Related endpoints include GET for the record,
 * PATCH for searching, or DELETE for removals.
 *
 * @param props.id Unique user warning ID (UUID) to update.
 * @param props.body Fields to update (reason, related content, notes, etc.)
 * @path /moderation/userWarnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique user warning ID (UUID) to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update (reason, related content, notes, etc.) */
    body: IUserWarning.IUpdate;
  };
  export type Body = IUserWarning.IUpdate;
  export type Response = IUserWarning;

  export const METADATA = {
    method: "PUT",
    path: "/moderation/userWarnings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/moderation/userWarnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserWarning =>
    typia.random<IUserWarning>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Deletes a user warning record by ID (user_warnings table).
 *
 * This operation permits deletion of a user warning by its ID from the
 * user_warnings table. RBAC enforces access for only moderators/admins, per
 * business policies.
 *
 * Once deleted, the warning is not visible for future audits or moderation
 * history, so strict caution and audit-logging are recommended. Typically used
 * after resolving or overturning a warning—especially upon appeal or admin
 * review. Error handling covers not found records, permission restrictions, and
 * attempts to delete non-terminal warnings.
 *
 * @param props.id Unique user warning ID (UUID) to delete.
 * @path /moderation/userWarnings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique user warning ID (UUID) to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/moderation/userWarnings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/moderation/userWarnings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

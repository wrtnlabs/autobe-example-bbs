/// [Thread Entity] - This implements the core discussion grouping requirement (see Requirements: Posting & Content Creation, Categories, Tagging, and Threaded Discussions). 
///
/// Each thread represents a single ongoing discussion (topic) in the forum, under which many posts (initial post and subsequent replies) are organized. A thread is always associated with a category, has a creator, and can have many tags (relationship with thread_tags) but stores only atomic details itself.
///
/// Maintains full 3NF by storing only normalized, atomic data; all content beyond identifiers and metadata is stored in posts. Example: 'Should universal basic income be implemented?'.
///
/// Key relationships: links to users (creator), categories, posts, and thread_tags. Special behaviors: threads can be locked or pinned by moderators/admins for elevated visibility or to prevent further replies.
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model threads {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for the thread.
  id String @id @db.Uuid
  
  /// Creator's {@link users.id} - Who started the thread. Implements creator relationship.
  creator_id String @db.Uuid
  
  /// Category's {@link categories.id} - Categorizes the thread. Maintains link to a single category.
  category_id String @db.Uuid
  
  /// Title of the thread - Implements requirement for labeling discussion topics. Used for listing/browsing. Normalized as atomic text. Example: 'Economic effects of trade wars'.
  title String
  
  /// Whether the thread is currently locked. Implements moderation rules for preventing further posts (see moderation control requirements). Only moderators and admins can lock threads. Always normalized, never pre-calculated.
  locked Boolean
  
  /// Whether the thread is pinned for visibility. Implements requirement for increased prominence of important or ongoing discussions. Only moderators/admins can pin. Follows normalization: atomic flag value only.
  pinned Boolean
  
  /// Thread creation timestamp - Implements requirement for audit trails and chronological ordering. Atomic; never a calculated value. Example usage: sorting latest threads.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp of last thread update. Implements requirement for UI freshness/recency and sorting. Example: Sort threads by recent activity. Atomic, normalized value.
  updated_at DateTime @db.Timestamptz
  
  /// Deletion timestamp (nullable for soft deletes). Implements rule to keep data for audit/evidence and allow content recovery per moderation workflow.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  creator users @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  category categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  
  posts posts[]
  thread_tags thread_tags[]
  
  @@index([creator_id])
  
  @@unique([title, category_id])
  @@index([created_at])
  @@index([category_id])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Post Entity] - Implements the posting requirement from the board (see Core Features: Posting, Commenting). 
///
/// Each post represents a top-level contribution in a thread (either the main subject or any reply). Contains only atomic, normalized information; edited content is versioned in related post_edits. All posts belong to a thread and a creator.
///
/// Full 3NF: Only references to related content, not calculated/aggregated counts. Example: A user's answer or viewpoint in a thread.
///
/// Relationships: links to threads, users (creator), post_edits, post_votes, comments. Special: Moderators/admins can mark posts as 'hidden' for moderation. Soft deletion via deleted_at.
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model posts {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for the post.
  id String @id @db.Uuid
  
  /// Thread's {@link threads.id} - post's parent thread.
  thread_id String @db.Uuid
  
  /// Post author's {@link users.id}.
  creator_id String @db.Uuid
  
  /// Whether the post is hidden from normal view (moderation). Implements moderation workflow: Admins/moderators can hide (not delete) posts for violations. Atomic, normalized flag only.
  hidden Boolean
  
  /// Creation timestamp, for ordering and audit trails. Always atomic and normalized.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp of last post update (excluding content edits). Used for bumping threads or tracking last activity. Atomic only.
  updated_at DateTime @db.Timestamptz
  
  /// Soft deletion timestamp. Null if not deleted. Implements auditability, business rules for retention. Never pre-calculated; nullable atomic value only.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  thread threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  creator users @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  
  post_edits post_edits[]
  post_votes post_votes[]
  polls polls?
  comments comments[]
  moderation_logs moderation_logs[]
  post_reports post_reports[]
  user_warnings user_warnings[]
  notifications notifications[]
  
  @@index([creator_id])
  
  @@index([thread_id, created_at])
}

/// [Post Edit Snapshot Entity] - Implements snapshot/versioning for post content, as required for audit trail, dispute resolution, and to maintain historical versions following the snapshot pattern. 
///
/// Each record in post_edits represents a single state (version) of a post's content (including the body and title at that time). Used for evidence in disputes or moderation. Never stores calculated/pre-calculated summaries.
///
/// Fully normalized: Only references and atomic edit/version details. Example: Editing a typo in a post creates a new post_edits record. One-to-many: each post can have many snapshot versions.
///
/// Relationships: Belongs to one post; linked to user who made the edit (must match post creator for regular edits; admin for forced edits).
/// Special: Each edit includes reason, edit timestamp, and IP. Content is stored here for full edit history; hidden/removed on moderation may be reflected by edit reason.
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model post_edits {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for the edit/version.
  id String @id @db.Uuid
  
  /// Belonged post's {@link posts.id} - which post this edit snapshot belongs to.
  post_id String @db.Uuid
  
  /// User's {@link users.id} who made the edit. Generally same as post creator unless admin/mod overrides.
  editor_id String @db.Uuid
  
  /// Snapshot title at edit time. Maintains 3NF by storing actual text as it was. Example: If user corrects a typo, the new title is stored here.
  title String
  
  /// Snapshot of post content at edit time. Implements audit-trail snapshotting. Maintains atomicity (no summaries/derivatives).
  body String
  
  /// Reason for editing. Supports moderation, requirement for transparency and evidence. Atomic field for transparency: e.g., 'typo', 'clarification', 'admin removal'.
  edit_reason String
  
  /// IP address of editor for audit purposes. Implements security requirements, normalized as atomic field.
  ip String
  
  /// Timestamp when this version was created. Implements audit trail, moderation, and transparency requirements. Example: '2023-06-21T15:20Z'.
  edited_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  editor users @relation(fields: [editor_id], references: [id], onDelete: Cascade)
  
  @@index([editor_id])
  
  @@index([post_id, edited_at])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([body(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Post Vote Entity] - Implements the voting mechanism (see Core Features: Upvoting/Downvoting, Reputation) following strict normalization. Each row is a single user's vote (up or down) on a post. Vote type is atomic boolean (+1/-1), never aggregated (no total_votes field here).
///
/// Maintains 3NF: No derived or summary fields. Enforcement of single vote per user per post by unique index. Example: User upvotes a post and can change/withdraw vote (update/delete record).
///
/// Relationships: Links to post, voting user. Used for generating totals elsewhere (e.g., in a materialized view).
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model post_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per post-user vote.
  id String @id @db.Uuid
  
  /// Targeted post's {@link posts.id}.
  post_id String @db.Uuid
  
  /// Voting user's {@link users.id}. Only registered users can vote.
  user_id String @db.Uuid
  
  /// Whether the vote is an upvote (true) or downvote (false). Implements voting rules. Always atomic.
  is_upvote Boolean
  
  /// Timestamp of the voting action for audit and future analysis. Maintains strict 3NF, only records the event itself. Example: For calculating most-upvoted posts in a timeframe.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  
  @@unique([post_id, user_id])
}

/// [Poll Entity] - Implements Optional Enhancement for polls as described in Core Features. Each poll is attached to a post and consists only of atomic details (question, start/end dates). Never stores aggregate/summary data.
///
/// Fits 3NF: Each poll belongs to a single post, and poll options are modeled in a separate table. Example: A user asks, 'Which economic policy do you support?' and attaches a poll. 
///
/// Relationships: Links to post, poll_options.
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model polls {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique for each poll.
  id String @id @db.Uuid
  
  /// Associated post's {@link posts.id}. One poll per post. Enforces 1:1 with unique.
  post_id String @db.Uuid
  
  /// Poll question presented to users. Atomic, normalized text field fulfilling poll requirement. Example: 'Which policy do you support?'.
  question String
  
  /// Poll opening time. Implements scheduling and audit. Atomic value, not derived.
  start_at DateTime @db.Timestamptz
  
  /// Poll closing time. Implements business requirements on vote window. Nullable for open-ended polls, atomic only.
  end_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  
  poll_options poll_options[]
  poll_votes poll_votes[]
  notifications notifications[]
  
  @@unique([post_id])
  
  @@index([question(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Poll Option Entity] - Implements requirement for polling with multiple choices. Each option belongs to a single poll and stores only atomic text (the option) and sequence order for UI.
///
/// Strict normalization: Does not store summary or count. Each record is a possible answer choice for the poll. Example: Option A, Option B, etc.
///
/// Key relationships: Belongs to one poll. Used in poll_votes to record user selections.
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model poll_options {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique for each poll option.
  id String @id @db.Uuid
  
  /// Parent poll's {@link polls.id}.
  poll_id String @db.Uuid
  
  /// Visible text for this option. Implements requirement for user-readable poll options. Example: 'Flat Tax'. Atomic only, normalized.
  title String
  
  /// Order in which the option should appear. Implements user interface requirement for poll ordering. Example: 1,2,3, etc. Atomic value.
  sequence Int @db.Integer
  
  //----
  // RELATIONS
  //----
  poll polls @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  
  poll_votes poll_votes[]
  
  @@unique([poll_id, sequence])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Poll Vote Entity] - Records each user's response to a poll by referencing a poll_option. Implements business rules described in Core Features: Polls, voting once per poll, strict normalization.
///
/// 3NF: Each row = one user's vote for one option in one poll; no aggregated vote totals are stored here. Example: User picks 'Flat Tax' in a poll, a new poll_votes record is created. Users can vote once per poll; enforced by unique index.
///
/// Relationships: poll_option, poll, user.
///
/// @namespace ThreadsPosts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model poll_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique (per user per poll) record of a user's poll response.
  id String @id @db.Uuid
  
  /// Poll's {@link polls.id}. Denormalized for query efficiency (redundant with poll_option.poll_id but necessary for unique index enforcement). Atomic reference only.
  poll_id String @db.Uuid
  
  /// Voted option's {@link poll_options.id}.
  poll_option_id String @db.Uuid
  
  /// Voting user's {@link users.id}. Only registered users can vote.
  user_id String @db.Uuid
  
  /// Timestamp when the poll vote occurred. Maintains normalization by marking individual vote event atomically. For example, used in audit logs and tracking timing of poll participation.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  poll polls @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  poll_option poll_options @relation(fields: [poll_option_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([poll_option_id])
  @@index([user_id])
  
  @@unique([poll_id, user_id])
}
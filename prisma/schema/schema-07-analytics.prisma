/// Discussion Board Activity Log - This implements the tracking/audit trail requirement from the analytics and audit reporting sections. 
///
/// Records every significant user or system action relevant for site analytics, moderation audit, and user engagement metrics. Maintains 3NF normalization by storing atomic events (each row is a single action: view, post, report, moderation action, etc), separating factual event data from analytics summaries. For example, when a member views a post or a moderator hides a comment, an entry is created here with all relevant metadata.
///
/// Key relationships: references user/actor (from Actors domain), topic/thread/post (from Articles domain) when applicable.
/// Special behaviors: immutable log (never update/delete except per retention policy); supports security, compliance, and analytics.
///
/// @namespace Analytics
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_activity_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique log entry identifier
  id String @id
  
  /// The actor's {@link discussion_board_members.id}, {@link discussion_board_moderators.id}, etc. Foreign key to user who performed the action - references the appropriate user/role table, depending on actor_type. Enables linking analytics to specific users or roles.
  actor_id String
  
  /// The affected {@link discussion_board_topics.id}: references the discussion topic if the activity relates to a whole topic. Nullable if the activity is not scoped to a topic.
  topic_id String?
  
  /// The affected {@link discussion_board_threads.id}: references the thread if the activity is about a particular thread. Nullable if the activity is about the whole topic or other entity.
  thread_id String?
  
  /// The affected {@link discussion_board_posts.id}. Nullable if the activity is not directly about a post (could be a view, report, thread creation, etc).
  post_id String?
  
  /// Role type of actor performing the action ("member", "moderator", "admin", "guest"). Implements requirement to distinguish actions by role for security and analytics reporting. Ensures normalization by storing as a flag/enumeration; for example: used to partition engagement heatmaps by user type.
  actor_type String
  
  /// Type of activity ("view_topic", "view_post", "post_created", "comment_created", "report_submitted", "moderation_action", etc). Implements the requirement to classify the kind of interaction for analytics/audit. Ensures normalization (atomic non-calculated field). Used when aggregating engagement stats.
  action_type String
  
  /// Timestamp when the activity occurred. Atomic, required field for temporal analytics and ordering. Implements requirements for audit logging and report building.
  action_timestamp DateTime
  
  /// IP address of the actor (if available). Implements legal compliance and security/audit requirements for analytics. Allows for location-based reporting and abuse detection. Ensures normalization by being a standalone attribute. Nullable if not collected (e.g. system action).
  ip_address String?
  
  /// User agent string of the request origin (browser/device details). Implements device analytics and troubleshooting. Separate atomic data for normalization. Nullable if not recorded (e.g. system job, API).
  user_agent String?
  
  /// Extensible JSON metadata for activity-specific detail (e.g. moderation reason, previous/after details on edits, report evidence, etc). Implements the extensibility requirement from requirements analysis. Stays normalized by being a single atomic JSON dump, not denormalized fields. Allows platform extension without schema change.
  metadata_json String?
  
  //----
  // RELATIONS
  //----
  actor_discussion_board_activity_log_actor_id discussion_board_members @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  topic_discussion_board_activity_log_topic_id discussion_board_topics? @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  thread_discussion_board_activity_log_thread_id discussion_board_threads? @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  post_discussion_board_activity_log_post_id discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id, action_timestamp])
  @@index([topic_id, action_timestamp])
  @@index([thread_id, action_timestamp])
  @@index([post_id, action_timestamp])
}

/// Discussion Board Engagement Stats - Implements the requirement for summarized analytics/statistical reporting to admins and moderators, as specified in the requirements under analytics and dashboards.
///
/// Stores pre-calculated, periodically updated aggregate data for dashboard efficiency: e.g., daily/weekly/monthly active users, post/comment counts, report rates. Maintains normalization for atomic periods (scope is always a specific interval, such as day/week/month); each row is a summary for one period, dimension, and optional segment (e.g., by topic, role, etc).
///
/// Key relationships: Segments relate to users by role/type, topics, or system-wide. Populated by background jobs. Usage example: Admin views stats dashboard; values come from here instead of slow full log scans.
/// Special behaviors: must be marked material=true as it contains denormalized/pre-aggregated values.
///
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_engagement_stats {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique stat record identifier
  id String @id
  
  /// Segmented stat's {@link discussion_board_topics.id}. Nullable when stats are aggregated across all topics or for site-wide metrics.
  topic_id String?
  
  /// Start timestamp of the analysis period (e.g., beginning of day, week, etc). Normalized: atomic, not calculated. For example, 2025-07-29 00:00:00 for daily period.
  period_start DateTime
  
  /// End timestamp of the analysis period (inclusive/exclusive; as defined). Implements requirement for temporal analytics. Normalized: atomic field. For example, 2025-07-29 23:59:59 for daily aggregate.
  period_end DateTime
  
  /// Type of dimension for stats: e.g., "site", "topic", "role", "device_type". Implements requirement to segment analytics by various attributes; normalized and not calculated. Used e.g. to report active Moderators in a week.
  dimension String
  
  /// Value of the dimension segment (e.g., topic UUID string, "admin", "moderator", "member", "guest", "all"). May be a topic ID, a role name, etc. Implements requirement for multidimensional reporting; normalized as atomic segment. Example: reporting posts per role per day.
  segment_value String
  
  /// Summed total of posts in the segment and period. Denormalized, thus only in materialized view. Implements requirement for rapid dashboard reporting of volume metrics; e.g., total new posts sitewide per day.
  post_count Int
  
  /// Summed total of comments created in this period/segment. Same requirements/context as post_count. Ensures denormalized aggregation is in the analytics-derived table, not original comments table.
  comment_count Int
  
  /// Number of unique active users (by actor/role/dimension) in the current period segment. Implements requirement for retention/engagement dashboard values. Denormalized, so only here. Used for key stats such as DAU/WAU/MAU.
  active_user_count Int
  
  /// Count of abuse reports handled/raised for the segment in the period. Implements moderation workload analysis; denormalized for reporting. Used in analytics dashboard.
  report_count Int
  
  //----
  // RELATIONS
  //----
  topic_discussion_board_engagement_stats_topic_id discussion_board_topics? @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  
  @@unique([period_start, period_end, dimension, segment_value], map: "discussion_board_engagement_stats_period_start_period__56c54da2")
  @@index([topic_id, period_start, period_end], map: "discussion_board_engagement_stats_topic_id_period_star_7fe28751")
}
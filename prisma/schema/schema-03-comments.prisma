/// Comment entity - This implements the threaded commenting requirement from the requirements document (Section 04_core_features.md: 'Commenting & Threaded Discussions'). 
///
/// Allows users to add responses to posts and other comments, forming threaded discussions. Maintains 3NF by keeping only atomic data (author, content reference, parent info, audit fields, etc.), and separates mutable details into comment_edits. For example, Mary replies to a Post with her own comment, or Jim replies to Mary, creating a reply chain. 
///
/// Key relationships: Connects to posts (each comment belongs to a post), users (each comment is authored), and optionally a parent comment (for threading). 
/// Special behaviors: Soft-delete (deleted_at), supports many children (threading), only references IDs (not containing any derived/post or user data), no calculated vote counts (these are for materialized views only).
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model comments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Uniquely identifies a comment.
  id String @id @db.Uuid
  
  /// Belonged post's {@link posts.id} - Links this comment to the parent post per requirement: comments must always be on a specific post. Maintains 3NF by not duplicating post information.
  post_id String @db.Uuid
  
  /// Author's {@link users.id} - Who wrote this comment. Enforces the business rule that every comment must have a responsible user. Maintains 3NF by reference only.
  author_id String @db.Uuid
  
  /// Parent comment's {@link comments.id} - For a reply, references the immediate parent comment for proper threading. Null if top-level comment. Maintains 3NF by not storing redundant tree paths.
  parent_id String? @db.Uuid
  
  /// Comment creation timestamp - Implements the auditability requirement (Section: Technical Requirements). For example: Jane posts a comment at 2025-02-01T10:00. Always set; never null.
  created_at DateTime @db.Timestamptz
  
  /// Soft-delete timestamp - Implements moderation/archival business rules (Section 07). Notifies when a comment is marked deleted (cannot be permanently removed for evidence). Example: Moderator deletes a hateful comment, but its historical data is retained. Nullable.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author users @relation(fields: [author_id], references: [id], onDelete: Cascade)
  parent comments? @relation("recursive", fields: [parent_id], references: [id], onDelete: Cascade)
  
  recursive comments[] @relation("recursive")
  comment_edits comment_edits[]
  comment_votes comment_votes[]
  moderation_logs moderation_logs[]
  comment_reports comment_reports[]
  user_warnings user_warnings[]
  notifications notifications[]
  
  @@index([author_id])
  @@index([parent_id])
  
  @@index([post_id, parent_id, created_at])
}

/// Comment edit snapshot - This implements the moderation and edit-history requirement (Section 06_content_moderation_and_rules.md and audit trail rules in Section 07). 
///
/// Every time a comment is edited, a new comment_edits record is created, preserving prior versions for evidence and moderation review. Keeps comment content out of the main comments table for full normalization. For example: User Alice fixes a typo, and both old and new versions are traceable. 
///
/// Key relationships: Each edit links to its parent comment, and to the editor (which can differ from author for moderator edits). 
/// Special behaviors: Each edit is immutable and timestamped. No edit in-place; updates always create a new row. Never stores calculated fields (such as vote counts).
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model comment_edits {
  //----
  // COLUMNS
  //----
  /// Primary Key. Each edit uniquely identified.
  id String @id @db.Uuid
  
  /// Belonged comment's {@link comments.id} - Each edit is attached to a single comment. Normalized by only referencing IDs.
  comment_id String @db.Uuid
  
  /// Editor's {@link users.id} - Who made this particular edit (could be author or moderator). Normalized by reference only.
  editor_id String @db.Uuid
  
  /// Comment textual content - Implements the content snapshot requirement (full history). Atomic field, no embedded formatting. E.g., old and new versions stored here across multiple edits.
  body String
  
  /// Edit reason/annotation (optional) - Documents 'why' an edit was made (e.g., fixed typo, removed language, moderator note). Maintains normalization as it's always atomic. Nullable, e.g., empty if the author made a trivial fix.
  edit_reason String?
  
  /// Edit creation timestamp - When the edit was made. Used for audit trails. Always set.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  comment comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  editor users @relation(fields: [editor_id], references: [id], onDelete: Cascade)
  
  @@index([editor_id])
  
  @@index([comment_id, created_at])
  @@index([body(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Comment voting entity - Implements upvote/downvote system and voting business rules (Section 04_core_features.md 'Voting System').
///
/// Tracks each user's vote (up or down) on a comment. Maintains 3NF by putting only the atomic information (is_upvote flag, timestamp, no denormalized vote totals), not storing voter/comment details beyond IDs. For example, Bob upvotes a comment, and his action is recorded uniquely (no duplicate votes allowed per user per comment).
///
/// Key relationships: Each vote is linked to a comment and the user who voted.
/// Special behaviors: Each (user_id, comment_id) pair is unique; can't vote twice on the same comment; votes can be retracted or changed.
///
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model comment_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique for each vote action.
  id String @id @db.Uuid
  
  /// Target comment's {@link comments.id} - The comment being upvoted or downvoted. Maintains 3NF by referencing only IDs.
  comment_id String @db.Uuid
  
  /// Voting user's {@link users.id} - Identifies who voted. Normalized reference, never embeds user info.
  voter_id String @db.Uuid
  
  /// Indicates upvote (true) or downvote (false) - Implements the atomic voting choice. E.g.: If true, user upvotes, if false, downvotes. Always required.
  is_upvote Boolean
  
  /// Timestamp of cast vote - When the vote occurred. Ensures traceability and audit trails. Not nullable.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  comment comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  voter users @relation(fields: [voter_id], references: [id], onDelete: Cascade)
  
  @@index([voter_id])
  
  @@unique([comment_id, voter_id])
  @@index([created_at])
}
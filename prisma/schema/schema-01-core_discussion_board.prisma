/// [User Core Record] - This implements the 'User Registration and Login' and 'User Roles & Permissions' requirements from the requirements analysis document.
///
/// This model represents the base registered user of the discussion board. It stores the essential authentication and identification information required for account-based access to discussion board features, and forms the foundation for linking to user profiles, role assignments, and actions. Maintains 3NF by separating core user identity from profile data, roles, and activity logs. For example, use this model to register, log in, and associate subsequent profile and permissions data.
///
/// Key relationships: One-to-one with discussion_board_user_profile; one-to-many with discussion_board_role_assignment, discussion_board_notification; one-to-many with posts, comments, reports, votes, and moderation actions via foreign keys.
/// Special behaviors: Email is unique per user; soft delete is supported with 'deleted_at'.
///
/// @namespace CoreDiscussionBoard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_user {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Implements unique identification for each user. Guarantees user-level uniqueness and supports referential integrity for all relations. Required for all business operations that target a user entity.
  id String @id @db.Uuid
  
  /// [Username] - Implements the username requirement for display and mentions.
  /// A unique, human-friendly identifier used for display and tagging within the board. Maintains normalization by being atomic and not reused across users. For example, '@policyDebater'. Must be unique (enforced below).
  username String
  
  /// [User Email] - For registration, authentication, and notifications. Implements the core user communication channel required by 'User Registration and Login.' Normalized atomic value. Enforced unique (see uniqueIndexes).
  email String
  
  /// [Password Hash] - Securely stores the user's password in a one-way hashed format. Implements authentication requirement. Maintains normalization; no computed/derived data.
  password_hash String
  
  /// [Active Status] - Indicates whether the user's account is currently active. Used to implement onboarding, activation, or ban-flow business logic. Atomic boolean; supports role and moderation workflows.
  is_active Boolean
  
  /// [Creation Timestamp] - Records when the user entity was created. Maintains full audit compliance and supports query for registration trends.
  created_at DateTime @db.Timestamptz
  
  /// [Last Update Timestamp] - Tracks last profile/account update, enabling modification history and change tracking.
  updated_at DateTime @db.Timestamptz
  
  /// [Soft Delete Timestamp] - Null unless the account is deleted. Implements reversible account deactivation for moderation and GDPR compliance.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_user_profile discussion_board_user_profile?
  discussion_board_role_assignment discussion_board_role_assignment[]
  discussion_board_admin discussion_board_admin?
  discussion_board_moderator discussion_board_moderator?
  discussion_board_thread discussion_board_thread[]
  discussion_board_post discussion_board_post[]
  discussion_board_forum_category_snapshot discussion_board_forum_category_snapshot[]
  discussion_board_forum_subcategory_snapshot discussion_board_forum_subcategory_snapshot[]
  discussion_board_comment discussion_board_comment[]
  discussion_board_comment_reply discussion_board_comment_reply[]
  discussion_board_post_vote discussion_board_post_vote[]
  discussion_board_comment_vote discussion_board_comment_vote[]
  discussion_board_report discussion_board_report[]
  discussion_board_moderation_action discussion_board_moderation_action[]
  discussion_board_warning discussion_board_warning[]
  discussion_board_user_ban discussion_board_user_ban[]
  discussion_board_notification discussion_board_notification[]
  discussion_board_user_setting discussion_board_user_setting?
  discussion_board_attachment discussion_board_attachment[]
  
  @@unique([email])
  @@unique([username])
  @@index([created_at])
}

/// [User Profile] - Implements part of 'User Registration/Profile' and 'Customizable User Profiles.'
///
/// Contains customizable and optional profile data (display name, bio, profile pic URI) separate from core user credentials. Ensures normalized split between authentication and profile info (3NF), supports GDPR compliance. For example, updating profile image, displaying bio, showing user info in posts.
///
/// Key relationships: One-to-one with discussion_board_user (user_id is unique), allows fast joins to user details.
/// Special behaviors: user_id is unique; will cascade null on user delete where appropriate.
///
/// @namespace CoreDiscussionBoard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_user_profile {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique profile record for atomic, normalized user profile data. Referential integrity for profile-specific fields.
  id String @id @db.Uuid
  
  /// [User FK] - References the core user entity for profile linkage. Maintains strict 1:1 mapping; cannot be null.
  user_id String @db.Uuid
  
  /// [Display Name] - Optional user display alias, separate from username. Implements profile customization feature.
  display_name String?
  
  /// [User Bio] - Optional user biography for richer profile info. Normalized atomic field.
  bio String?
  
  /// [Profile Picture URI] - Optional link to user's avatar/profile image. Supports external and internal URLs.
  profile_picture_uri String? @db.VarChar(80000)
  
  /// [Created] - When the profile was created. Enables history queries.
  created_at DateTime @db.Timestamptz
  
  /// [Updated] - Last profile update.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id])
  @@index([display_name])
  @@index([bio(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Role Assignment] - Implements 'User Roles & Permissions' and multi-role support.
///
/// Links users to their roles (member/moderator/admin/guest). Normalized to support multiple or historical role assignments per user, role revocation, start/end dates.
/// Maintains 3NF by splitting user/role join logic out of user objects. For example, assigning 'Moderator' to a user, revoking privileges, or auditing user roles over time.
///
/// Key relationships: Many-to-one with discussion_board_user; role_type ENUM differentiates role types; may associate with admin/moderator/guest tables for additional data.
/// Special behaviors: No direct role fields on user; supports composite unique constraint for (user_id, role_type, assigned_at).
///
/// @namespace CoreDiscussionBoard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_role_assignment {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique identifier for each role assignment instance. Essential for audit trail and normalization.
  id String @id @db.Uuid
  
  /// [User FK] - References the user who is assigned this role. Enables role tracking and permission checks.
  user_id String @db.Uuid
  
  /// [Role Type] - Implements which role (member/admin/moderator/guest) is assigned. ENUM-validated at app level; 3NF compliant.
  role_type String
  
  /// [Assigned Timestamp] - When this role assignment began.
  assigned_at DateTime @db.Timestamptz
  
  /// [Revoked Timestamp] - If role was revoked, the time it ended. Null if active.
  revoked_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, role_type, assigned_at])
  @@index([role_type])
}

/// [Admin Role Record] - Implements 'Admin' from 'User Roles & Permissions' for escalated platform control.
///
/// This table supports storing escalated admin metadata for users with admin-level privileges. Strictly separated from core user data for 3NF, containing only admin-relevant metadata (e.g., elevation reasons, assignment notes). For example, maintain dates for admin role assignment, internal comments for accountability.
///
/// Key relationships: Many-to-one with discussion_board_user; join to role assignments for correspondence.
/// Special behaviors: Only users with an active 'admin' role in discussion_board_role_assignment should have a record here. Admin status should be revoked in both this table and in role_assignment.
///
/// @namespace CoreDiscussionBoard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_admin {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique identifier for each admin metadata record. Atomic ID for 3NF structure.
  id String @id @db.Uuid
  
  /// [Admin User FK] - The user who is an admin. Restricted to 1:1 mapping with user.
  user_id String @db.Uuid
  
  /// [Elevation Reason] - Reason for admin assignment; supports audit trail and Justification Policy.
  elevation_reason String?
  
  /// [Admin Notes] - Misc. admin-related notes, e.g., contact channels, policies.
  notes String?
  
  /// [Elevation Date] - When admin permission was granted.
  assigned_at DateTime @db.Timestamptz
  
  /// [Revocation Date] - When admin permission ended; null if currently active.
  revoked_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id])
}

/// [Moderator Role Record] - Implements 'Moderator' from 'User Roles & Permissions' for specialized content moderation privileges.
///
/// Holds moderator-specific metadata for users, cleanly separated from core user and admin records (3NF). Contains moderator onboarding info, special notes, and change history. For example, shows who assigned moderator status, start/end moderation tenure, and relevant notes.
///
/// Key relationships: One-to-one with discussion_board_user; cross-references role assignments.
/// Special behaviors: Only users with active 'moderator' role in discussion_board_role_assignment may appear here.
///
/// @namespace CoreDiscussionBoard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_moderator {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique record for moderator metadata. Required for atomic 3NF storage.
  id String @id @db.Uuid
  
  /// [Moderator User FK] - References the user with moderator permission (strict 1:1 mapping).
  user_id String @db.Uuid
  
  /// [Moderator Assignment Date] - Start of moderation privileges.
  assigned_at DateTime @db.Timestamptz
  
  /// [End Date] - Date/Time moderator status was revoked, if applicable.
  revoked_at DateTime? @db.Timestamptz
  
  /// [Moderator Notes] - Comments, onboarding reasons, or specialist qualifications.
  notes String?
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  discussion_board_report discussion_board_report[]
  discussion_board_moderation_action discussion_board_moderation_action[]
  discussion_board_warning discussion_board_warning[]
  discussion_board_user_ban discussion_board_user_ban[]
  
  @@unique([user_id])
}

/// [Guest Record] - Implements the 'Guest' (unregistered user) role as referenced in role documentation.
///
/// Records minimal info about unregistered (guest) users when tracking certain interactions or access history. Normalized (3NF) by only storing atomic guest identity data, not storing calculated fields or multiple info types.
///
/// Key relationships: None typically mandatory, but can support analytic or audit features.
/// Special behaviors: Does not link to user logins - guests never authenticate; never assigned to posts/comments directly.
///
/// @namespace CoreDiscussionBoard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_guest {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique atomic identifier for guest record.
  id String @id @db.Uuid
  
  /// [Guest Session Token] - Optionally store a guest's browser/session key for basic tracking.
  session_token String?
  
  /// [First Seen] - Timestamp when guest was first detected.
  first_seen_at DateTime @db.Timestamptz
  
  /// [Last Seen] - Most recent guest activity. Supports analytics/audit.
  last_seen_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  @@index([first_seen_at])
  @@index([last_seen_at])
}
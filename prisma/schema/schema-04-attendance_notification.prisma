/// [Attendance Notification] - This implements requirements from '학부모 알림 서비스', '관리자/교사 실시간 통지', and '학생 출석 이벤트 발생 시 알림 자동 발송' in the requirements document.
///
/// This table acts as the master record for all scheduled or triggered notifications sent to parents, admins, or other interested parties related to attendance events (출석, 지각, 결석, 조퇴, 등). Maintains full 3NF normalization by separating channel-specific, delivery, and logging details to related tables. For example, when a student's attendance is recorded, a record is created here, traceably triggering one or more outbound notifications via allowed channels.
///
/// Key relationships: Linked to attendance_notification_channel for channel management, attendance_notification_history for delivery logging, and foreign keys referencing the event source (attendance_record, student, etc.).
/// Special behaviors: Only stores normalized trigger/event data, never caches actual delivery results—those are kept in the history table.
///
/// @namespace AttendanceNotification
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_notification {
  //----
  // COLUMNS
  //----
  /// [PK] - Implements unique identification for each notification event.
  /// Globally unique identifier for tracking and referencing attendance-related notifications. Ensures normalization and system-wide traceability.
  /// For example, used as a foreign key in notification channels and history records.
  id String @id
  
  /// [FK] - Implements linkage to the attendance event that caused this notification.
  /// Links back to the student's attendance record so full audit trail is retained.
  /// For example, notification references a specific student's daily check-in/absence event.
  attendance_record_id String
  
  /// [FK] - References attendance_student.
  /// Specifies which student this notification relates to. Maintains 3NF by not duplicating student attributes here; join as needed.
  /// For example, so parent notifications are correctly directed.
  student_id String
  
  /// [FK] - References attendance_teacher.
  /// Who triggered the event/notification (if applicable). Maintains 3NF by not duplicating teacher details.
  /// Useful for teacher-determined notifications or exception notes.
  teacher_id String?
  
  /// [FK] - References attendance_classroom.
  /// Facilitates filtering/group notification by classroom context. Maintains normalization.
  /// For example: Notifications related to whole class events.
  classroom_id String
  
  /// [Event Type] - Implements notification event typing.
  /// Enumerates triggers such as 'present', 'late', 'absent', 'leave'. Maintains normalization by not duplicating status logic elsewhere.
  /// For example: 'present' when a student checks in on time.
  event_type String
  
  /// [Triggered Timestamp] - When this notification event was generated.
  /// Ensures auditability and sequential event tracking.
  /// For example: Record created at the moment attendance is submitted.
  triggered_at DateTime
  
  /// [Message Template] - Stores the notification template used for this event.
  /// Does not store actual sent message (see history table). Maintains normalization.
  /// For example: A message like '홍길동 학생이 정상 출석하였습니다.' with placeholders.
  message_template String
  
  //----
  // RELATIONS
  //----
  attendance_record attendance_attendance_record @relation(fields: [attendance_record_id], references: [id], onDelete: Cascade)
  student attendance_student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  teacher attendance_teacher? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  classroom attendance_classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  
  attendance_notification_history attendance_notification_history[]
  
  @@index([student_id])
  @@index([teacher_id])
  @@index([classroom_id])
  
  @@unique([attendance_record_id, event_type])
  @@index([triggered_at])
}

/// [Attendance Notification Channel] - Implements requirements for '선호 채널 설정', '알림 방식(앱푸시/SMS/이메일 등) 관리', and '보호자별/학생별 알림 경로 분리 관리' from the requirements document.
///
/// This model manages the available notification delivery channels (push, sms, email, etc.), user-specific preferences, and active/disable settings for outbound messaging. Maintains full 3NF by relating to student, parent, and notification tables without duplicating recipient or contact data.
///
/// Key relationships: References student, parent, and notification tables for proper channel delivery. Does not store message delivery results (see history).
/// Special behaviors: Only the facts about allowed or preferred channels are kept here; status/results are always kept in the history table.
///
/// @namespace AttendanceNotification
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_notification_channel {
  //----
  // COLUMNS
  //----
  /// [PK] - Unique identifier for each channel binding.
  /// Enables reliable foreign key referencing and traceability across the system.
  /// For example, maps each channel preference to notifications and history tables.
  id String @id
  
  /// [FK] - References attendance_student, to route per-student preferences.
  /// Maintains normalized storage of channel logic without duplicating student or parent info.
  /// Allows lookups of a student's preferred notification channel.
  student_id String
  
  /// [FK] - References attendance_parent, maps to legal guardians/recipients.
  /// For multi-child parents, allows consolidation of notification channel entries per student.
  /// Does not duplicate parent contact—always join on FK.
  parent_id String?
  
  /// [Channel Type] - Defines the type of channel (app_push, sms, email, etc).
  /// Enumerates all supported outbound notification patterns. Maintains normalization by not embedding channel behavior.
  /// For example: 'app_push', 'sms', 'email'.
  channel_type String
  
  /// [Is Enabled] - Whether this channel is currently active for this (student, parent).
  /// For example, app_push can be disabled by parent, sms left enabled.
  is_enabled Boolean
  
  /// [Preference Order] - Rank or fallback order for channels when multiple are available.
  /// Lower value = higher priority. Used for automated failover logic.
  /// For example, 1 for app, 2 for sms, 3 for email.
  preference_order Int
  
  //----
  // RELATIONS
  //----
  student attendance_student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  parent attendance_parent? @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  
  attendance_notification_history attendance_notification_history[]
  
  @@index([parent_id])
  
  @@unique([student_id, parent_id, channel_type])
  @@index([is_enabled])
}

/// [Attendance Notification History] - Implements requirements from '알림 이력 관리', '성공/실패 전송 로그', '관리자/교사 피드백', and '발송 결과 데이터 감시 및 분석' in the requirements document.
///
/// This table logs every actual delivery attempt or result per notification and channel, supporting full audit trails, troubleshooting, analytics, and operational reporting. It enforces full normalization by never duplicating notification or channel info, instead referencing via FKs.
///
/// Key relationships: Ties to attendance_notification (event), attendance_notification_channel (route/preference), and provides outcome context for analysis/dashboards.
/// Special behaviors: Marks full status lifecycle: pending, delivered, failed, retried, etc. Never includes user message bodies, only references templates/notification ids.
///
/// @namespace AttendanceNotification
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_notification_history {
  //----
  // COLUMNS
  //----
  /// [PK] - Uniquely identifies each delivery log entry.
  /// Allows tracking, troubleshooting, and reporting per notification delivery attempt.
  /// For example, one notification can have several attempts/rows per channel.
  id String @id
  
  /// [FK] - Links to attendance_notification.
  /// Matches each history record to the exact event/notification it logs. Maintains strict 3NF.
  notification_id String
  
  /// [FK] - Links to attendance_notification_channel.
  /// Allows each attempt/result row to be tied to its delivery channel context. Strictly normalized.
  channel_id String
  
  /// [Sent Timestamp] - Timestamp message was sent or attempted.
  /// Supports auditability and analytics.
  sent_at DateTime
  
  /// [Delivered Timestamp] - When delivery was confirmed by provider or feedback API.
  /// May be null if not delivered.
  delivered_at DateTime?
  
  /// [Status] - Status of this attempt: 'pending', 'delivered', 'failed', 'retried', etc.
  /// Maintains normalization by never caching per-notification status elsewhere. Example: 'delivered', 'failed', 'pending'.
  status String
  
  /// [Error Message] - Stores provider or system error reason if delivery failed (nullable).
  /// Never exposes user data. Normalized: no templated message is included.
  /// For example, the reported reason by SMS API or system ('invalid phone', 'timeout', etc').
  error_message String?
  
  //----
  // RELATIONS
  //----
  notification attendance_notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  channel attendance_notification_channel @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@index([notification_id])
  @@index([channel_id])
  
  @@index([status])
  @@index([sent_at])
}
/// [Content reporting entity] - This implements the user-driven content reporting feature from the requirements analysis (Core Functional Requirement #4: Moderation Tools, Feature List: Post & Comment Moderation, Moderation Process).
///
/// Enables users to report posts or comments for violating board policies or through user feedback. Maintains 3NF compliance by holding only the reporting action details, with references to both the reporting user and the target (post or comment).
/// For example, a user can report a comment for hate speech. Key relationships: links to user, moderator (optional, after handling), target post or comment, and the review action. Special behaviors: All reports are auditable and must trigger notifications and potential moderation workflow.
///
/// @namespace ModerationAndReports
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_report {
  //----
  // COLUMNS
  //----
  /// [Primary key] - Unique UUID identifier for each report. Implements the requirement for unique identification of each report instance. Maintains normalization by serving as the table's reference point.
  id String @id @db.Uuid
  
  /// [Reporter] - Implements the requirement to know which user initiated the report. Links to the reporting user. Maintains normalization by storing a single user UUID, not denormalized details. For example, a user who submits a report on a comment.
  reporting_user_id String @db.Uuid
  
  /// [Moderator who handles the report] - Implements the requirement for tracking who moderates or closes a report. Nullable at creation; assigned after review is completed. Maintains normalization as a link only, not a record of moderator data.
  moderator_id String? @db.Uuid
  
  /// [Reported post] - Refers to the reported post if applicable. Null when the report is for a comment. Maintains normalization by pointing only to the post ID.
  reported_post_id String? @db.Uuid
  
  /// [Reported comment] - Refers to the reported comment if applicable. Null when the report is for a post. Maintains normalization by linking to comment UUID only.
  reported_comment_id String? @db.Uuid
  
  /// [Report reason] - Implements requirement to capture user-selected reason for reporting. Business meaning: The reason the reporting user chose for flagging content. Maintains normalization by storing only atomic reason text. For example: "hate speech", "spam".
  reason String
  
  /// [Report status] - Tracks the current processing status of the report. E.g., "pending", "in_review", "resolved", "dismissed". Maintains normalization by using a single status string, not state history.
  status String
  
  /// [Report creation time] - Stores when the report was filed. Implements audit compliance requirement.
  created_at DateTime @db.Timestamptz
  
  /// [Report resolution time] - When the report was resolved (nullable until handled by a moderator). Ensures normalization as a timestamp only.
  resolved_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  reporting_user discussion_board_user @relation(fields: [reporting_user_id], references: [id], onDelete: Cascade)
  moderator discussion_board_moderator? @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  reported_post discussion_board_post? @relation(fields: [reported_post_id], references: [id], onDelete: Cascade)
  reported_comment discussion_board_comment? @relation(fields: [reported_comment_id], references: [id], onDelete: Cascade)
  
  discussion_board_moderation_action discussion_board_moderation_action?
  
  @@index([reporting_user_id])
  @@index([moderator_id])
  @@index([reported_post_id])
  @@index([reported_comment_id])
  
  @@index([status, created_at])
  @@index([reason(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Moderator action log] - Implements the requirement for tracking and auditing all moderation decisions (Requirements Analysis: Moderation Tools, Moderation Policy: Record-Keeping).
///
/// Records every moderation step (warn, ban, post removal, etc.) taken in response to content or users. Maintains 3NF compliance by storing atomic action details and foreign keys only. For example, logs every 'warn user' or 'remove post' event.
///
/// Key relationships: Connects to moderator who performed the action, the subject user, and the content involved (if any). Special behaviors: Must support comprehensive auditability of all moderation outcomes.
///
/// @namespace ModerationAndReports
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_moderation_action {
  //----
  // COLUMNS
  //----
  /// [Primary key] - Unique UUID for each moderation action. Guarantees unique tracking with referential security.
  id String @id @db.Uuid
  
  /// [Moderator reference] - Implements requirement for knowing the responsible moderator for every action. Maintains normalization and accountability.
  moderator_id String @db.Uuid
  
  /// [Subject user] - The user affected by this moderation action. Maintains 3NF by storing only foreign key reference. E.g., user who is warned, banned, etc.
  subject_user_id String @db.Uuid
  
  /// [Involved post] - References the post affected by the action if applicable. Null if, e.g., pure user action (ban/warning, unrelated to a post).
  related_post_id String? @db.Uuid
  
  /// [Involved comment] - References the comment affected by the action if applicable. Null if not relevant.
  related_comment_id String? @db.Uuid
  
  /// [Originating report] - (Optional) References the report that triggered this moderation action, if relevant. Maintains strict 1:1 relationship for direct audit trail.
  report_id String? @db.Uuid
  
  /// [Type of action] - Implements requirement for well-classified, auditable actions (e.g., "warn", "ban", "remove_post"). Ensures normalization by recording only atomic action label.
  action_type String
  
  /// [Action rationale] - Explains why moderator took this action, for audit and transparency. Maintains normalization as atomic field. E.g., "Repeated hate speech violations".
  action_reason String
  
  /// [Action timestamp] - The time (UTC) when the moderation action was recorded. For audit compliance.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  moderator discussion_board_moderator @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  subject_user discussion_board_user @relation(fields: [subject_user_id], references: [id], onDelete: Cascade)
  related_post discussion_board_post? @relation(fields: [related_post_id], references: [id], onDelete: Cascade)
  related_comment discussion_board_comment? @relation(fields: [related_comment_id], references: [id], onDelete: Cascade)
  report discussion_board_report? @relation(fields: [report_id], references: [id], onDelete: Cascade)
  
  discussion_board_warning discussion_board_warning?
  discussion_board_user_ban discussion_board_user_ban?
  
  @@index([moderator_id])
  @@index([subject_user_id])
  @@index([related_post_id])
  @@index([related_comment_id])
  @@unique([report_id])
  
  @@index([action_type, created_at])
  @@index([action_reason(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Warning log] - Implements the warning/strike escalation requirement (Requirements Analysis: Moderation Tools, Moderation Policy: Enforcement Actions).
///
/// Captures records of warnings issued to users before bans. Maintains 3NF by referencing users and moderators without duplicating details. Example: User receives a warning for inappropriate language prior to suspension.
///
/// Key relationships: Links to subject user and moderator who issued the warning. Special behaviors: Warnings are auditable, connected to possible subsequent bans, and must be counted for escalation triggers.
///
/// @namespace ModerationAndReports
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_warning {
  //----
  // COLUMNS
  //----
  /// [Primary key] - Unique identifier for each warning. Maintains entity uniqueness and normalization.
  id String @id @db.Uuid
  
  /// [Warned user] - User receiving the warning. Referenced for escalation and audit. Maintains normalization as atomic relation.
  subject_user_id String @db.Uuid
  
  /// [Moderator issuer] - Moderator who issued the warning. Maintains a normalized record of accountability.
  moderator_id String @db.Uuid
  
  /// [Related moderation action] - Optionally links this warning to the moderation action log in strict 1:1 mapping.
  related_action_id String? @db.Uuid
  
  /// [Warning reason] - Explains to user and moderators why the warning was issued. Maintains normalization as atomic value. E.g., "First time using slurs in a post."
  warning_reason String
  
  /// [Timestamp] - Date and time the warning was set. For auditing and escalation count purposes.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  subject_user discussion_board_user @relation(fields: [subject_user_id], references: [id], onDelete: Cascade)
  moderator discussion_board_moderator @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  related_action discussion_board_moderation_action? @relation(fields: [related_action_id], references: [id], onDelete: Cascade)
  
  @@index([moderator_id])
  @@unique([related_action_id])
  
  @@index([subject_user_id, created_at])
  @@index([warning_reason(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [User ban record] - Implements the enforcement requirement for user bans and permanent suspensions (Requirements Analysis: Moderation Tools, Moderation Policy: Enforcement Actions, Record-Keeping).
///
/// Records bans with links to subject user, issuing moderator, and (optionally) the originating action. Maintains strict normalization by referencing users/moderators without copying details and separating ban timelines. Example: A user is permanently banned for repeated severe policy violations.
///
/// Key relationships: Connects moderator to banned user and source action where relevant. Special behaviors: Ban durations may be permanent or timed, with clear lift dates.
///
/// @namespace ModerationAndReports
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_user_ban {
  //----
  // COLUMNS
  //----
  /// [Primary key] - Unique UUID for each ban record. Ensures normalization and traceability.
  id String @id @db.Uuid
  
  /// [Banned user] - User receiving the ban. Maintains normalization by storing atomic UUID reference.
  subject_user_id String @db.Uuid
  
  /// [Moderator issuer] - Moderator who enacted the ban. Maintains separate accountability and linkage.
  moderator_id String @db.Uuid
  
  /// [Related moderation action] - Optionally links ban to full moderation audit and reporting chain.
  related_action_id String? @db.Uuid
  
  /// [Reason for ban] - States the policy or specific action meriting the ban for audit and notification. Maintains normalization as atomic string.
  ban_reason String
  
  /// [Ban date/time] - When the ban was enforced. Maintains auditability as atomic timestamp.
  banned_at DateTime @db.Timestamptz
  
  /// [Ban end date/time] - If temporary, when the ban ends. Null for permanent bans.
  ban_lifted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  subject_user discussion_board_user @relation(fields: [subject_user_id], references: [id], onDelete: Cascade)
  moderator discussion_board_moderator @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  related_action discussion_board_moderation_action? @relation(fields: [related_action_id], references: [id], onDelete: Cascade)
  
  @@index([moderator_id])
  @@unique([related_action_id])
  
  @@index([subject_user_id, banned_at])
  @@index([ban_reason(ops: raw("gin_trgm_ops"))], type: Gin)
}
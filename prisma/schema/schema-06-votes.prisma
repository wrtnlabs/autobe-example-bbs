/// Vote Type Entity - This implements the requirements for supporting different voting mechanisms (e.g., upvote, downvote, like, etc.) as needed for features like voting threads, posts, or comments (from RA Section 3: F03 and Features 2.2). 
///
/// Business explanation: This table contains specific types of votes allowed in the system. Keeps the vote action design extensible and normalized. Maintains 3NF by separating static vote-type data from actual votes or users. For example, 'upvote' and 'downvote' are two types stored here and referenced by individual votes.
///
/// Key relationships: Referenced by {@link discussion_board_votes.vote_type_id} to indicate what kind of vote each vote is. Used by various voting features for content items.
/// Special behaviors: System integrity—vote records must always reference a valid type.
///
/// @namespace Votes
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_vote_types {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each vote type entry.
  id String @id
  
  /// Vote type code - Implements code for programmatic referencing (e.g., 'upvote', 'downvote'). Ensures normalization by storing type semantics here. Example: 'upvote'. Unique per vote type.
  code String
  
  /// Vote type display name - Human-friendly name for the vote type (e.g., 'Upvote', 'Downvote'). Keeps display strings separate from logic. Example: 'Upvote'.
  name String
  
  /// Description of the vote type - Explains what this vote type represents or when to use it. Example: 'Indicates positive reception from users.' Maintains normalization by isolating type explanations here. Nullable for simpler types.
  description String?
  
  /// Creation timestamp. Tracks when this vote type was added to the system. Required for audit trails. 3NF-compliant field.
  created_at DateTime
  
  /// Last update time. For auditability and change tracking, required for compliance and good record-keeping. 3NF-compliant.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  discussion_board_votes discussion_board_votes[]
  
  @@unique([code])
  @@index([created_at])
}

/// Vote Entity - This implements the requirement to record user votes on threads, posts, or comments (from RA Section 3: F03 and Features 2.2). 
///
/// Business explanation: Each record is a single vote by a user on a specific content item (thread/post/comment) using a particular vote type. This model maintains full normalization by separating votes from users and content. For example, a user upvotes a post or downvotes a comment—each as a row in this table.
///
/// Key relationships: Foreign keys reference Actors (voter), Articles (the item being voted), and Vote Types. Enables features like upvote/downvote on content and ensures referential integrity. Critical for voting UX and analytics. All votes reference existing vote types and voters.
/// Special behaviors: Uniqueness enforcement (voter cannot cast same-type vote on same item twice), full audit trail (created_at, updated_at).
///
/// @namespace Votes
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each vote entry.
  id String @id
  
  /// Voter's {@link discussion_board_members.id} (or another Actor-role table). Indicates who cast the vote. This is a required reference for all votes and enables construction of voting histories and restriction enforcement (e.g., one vote per user per item).
  voter_id String
  
  /// Vote type's {@link discussion_board_vote_types.id} field. Defines what kind of vote this is (e.g., upvote, downvote).
  vote_type_id String
  
  /// Target thread's {@link discussion_board_threads.id} field, if the vote is cast on a thread. Nullable because not all votes are on threads (some on posts/comments).
  thread_id String?
  
  /// Target post's {@link discussion_board_posts.id} field, if the vote is cast on a post. Nullable because not all votes are on posts (some on threads/comments).
  post_id String?
  
  /// Target comment's {@link discussion_board_comments.id} field, if the vote is cast on a comment. Nullable because not all votes are on comments (some on threads/posts).
  comment_id String?
  
  /// Vote timestamp. Shows when this vote was cast. For full accountability, auditing, and analysis. 3NF-compliant.
  created_at DateTime
  
  /// When this vote record was last updated (such as in correcting a misvote). For audit log compliance and analytics. 3NF-compliant.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  discussion_board_members_fk discussion_board_members @relation(fields: [voter_id], references: [id], onDelete: Cascade)
  discussion_board_vote_types_fk discussion_board_vote_types @relation(fields: [vote_type_id], references: [id], onDelete: Cascade)
  discussion_board_threads_fk discussion_board_threads? @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  discussion_board_posts_fk discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  discussion_board_comments_fk discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  
  @@unique([voter_id, vote_type_id, thread_id])
  @@unique([voter_id, vote_type_id, post_id])
  @@unique([voter_id, vote_type_id, comment_id])
  @@index([created_at])
  @@index([vote_type_id, created_at])
  @@index([thread_id, created_at])
  @@index([post_id, created_at])
  @@index([comment_id, created_at])
}
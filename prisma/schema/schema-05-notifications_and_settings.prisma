/// [Notification Delivery Record] - This implements the user notification delivery requirement from the requirements analysis ("Notifications" in both functional and feature list docs). 
///
/// This model records all notification events (e.g., replies to posts, mentions, direct moderation actions) sent to users. Maintains 3NF compliance by keeping each notification atomic and tied to its business trigger—for example, a reply to a user's post generates a row here, which can reference the triggering event elsewhere if needed.
///
/// Key relationships: Each notification is associated with a single user (recipient) via discussion_board_user_id. Optionally, can reference other objects (e.g., thread, post, comment) if needed—see enrichment extensions. 
/// Special behaviors: Records must not be deleted for audit purposes (soft deletion via deleted_at). Ensures all notification data is atomic; all aggregations/tracking are handled elsewhere (not here).
///
/// @namespace NotificationsAndSettings
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_notification {
  //----
  // COLUMNS
  //----
  /// [Primary key] - Uniquely identifies each notification delivery record. Implements system-wide entity integrity for notifications.
  id String @id @db.Uuid
  
  /// [Recipient User FK] - Implements user targeting for notifications as per notification delivery requirements.
  ///
  /// Indicates which user receives the notification. Ensures normalization by separating user data from notification message.
  /// Example: discussion_board_user_id references the recipient when a new comment/reply triggers this notification.
  /// Required, no special constraints beyond FK.
  discussion_board_user_id String @db.Uuid
  
  /// [Notification type] - Implements notification event classification from requirements (reply, mention, moderation, etc.).
  /// Indicates why the notification was generated. Ensures atomic, single-reason classification.
  /// Example: type = 'reply', 'mention', 'moderation', etc.
  type String
  
  /// [Notification title] - Implements the user notification display requirement (subject/summary).
  /// A short summary for the notification popup or list.
  /// Example: title = 'You were mentioned in a reply'. Normalized - no derived data.
  title String
  
  /// [Notification message body] - The full message for the notification, as per user notification spec.
  /// Atomic (not derived). No aggregation. Example: body = 'user123 replied to your post...'.
  body String
  
  /// [Read status flag] - Implements notification read tracking for user convenience as required ("in-app alerts").
  /// Indicates if a user has already seen the notification. Not pre-calculated.
  /// Example: is_read = false (unread), true (user has seen).
  is_read Boolean
  
  /// [Timestamp] - Implements delivery time requirement for chronological sorting/audit. 
  /// Example: created_at = time sent. Not pre-calculated; not duplicated elsewhere.
  created_at DateTime @db.Timestamptz
  
  /// [Soft deletion timestamp] - Implements auditability requirement for moderation and legal compliance. 
  /// If not null, record has been deleted (soft; for audit/history). Never hard delete for traceability.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_user discussion_board_user @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)
  
  @@index([discussion_board_user_id, created_at])
  @@index([is_read])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([body(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [User Notification & Preference Settings] - This implements the user notification opt-in/out and user preference storage requirement from the requirements doc. 
///
/// Solves for flexible, individual settings per user (e.g., notification preferences, email opt-in, UI settings). Fully 3NF normalized: each row represents a single user's preferences—no aggregation or derived values.
///
/// Key relationships: 1:1 with discussion_board_user (user_id is unique). Each user has exactly one settings record, enforcing unique settings per user.
/// Special behaviors: No pre-calculated fields; only stores raw settings flags and parameters. Any derived summaries must be placed in a materialized view.
///
/// @namespace NotificationsAndSettings
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_user_setting {
  //----
  // COLUMNS
  //----
  /// [Primary key] - Uniquely identifies each user settings record. Entity integrity for user preferences.
  id String @id @db.Uuid
  
  /// [User FK] - Links settings to specific user as per requirement: individualized notification/storage settings.
  /// Normalization compliance: settings entity separate from user main entity. 1:1 via unique index.
  /// Example: user opts into email notifications—only this row updates, not user profile.
  /// Required, unique (1:1 constraint).
  discussion_board_user_id String @db.Uuid
  
  /// [Email notification flag] - Stores user opt-in/out (requirement: 'Notification preferences').
  /// Example: false = do not email the user for notifications. Pure flag; not derived.
  notification_email_enabled Boolean
  
  /// [In-app notification flag] - Enables or disables in-app notification alerts as per user preference requirement.
  /// Example: true = show notifications in app. Atomic, not calculated.
  notification_in_app_enabled Boolean
  
  /// [Theme preference] - User UI setting for accessibility/non-functional requirement.
  /// E.g.: 'light', 'dark', or other valid strings describing color scheme. Not derived. Atomic; can be used to comply with high-contrast/accessibility requirements.
  theme_preference String?
  
  /// [Language preference] - User's preferred interface language/locale, as required by UI/UX standard.
  /// Example: 'en', 'ko', etc. Optional, atomic.
  /// Atomic—changes only by user input. Not derived.
  language_preference String?
  
  /// [Creation timestamp] - Implements audit/history requirement for settings changes. 
  /// E.g.: created_at = when user settings first created. Not calculated.
  created_at DateTime @db.Timestamptz
  
  /// [Updated timestamp] - Last time user changed a preference (audit log compliance).
  /// Normalization: not a pre-calculated summary. Example: updated_at = when last change saved.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_user discussion_board_user @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)
  
  @@unique([discussion_board_user_id])
  @@index([theme_preference])
  @@index([language_preference])
}
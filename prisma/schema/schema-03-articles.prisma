/// Topics on the discussion board - Implements the requirements for topic and thread management from the Features & Workflow documentation, supporting the creation and organization of main discussion areas. This model allows users to see a list of topics, and admins/moderators to manage (pin, close, delete) topics. Maintains 3NF compliance by keeping only atomic, non-aggregated data with referential integrity for creator, category, and status. Key relationships: category (to discussion_board_categories) and creator (to discussion_board_members). Special behaviors: topics may be pinned, closed, or deleted; closure restricts new posts at thread level.
///
/// @namespace Articles
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_topics {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each topic.
  id String @id
  
  /// Category association – References the parent category's {@link discussion_board_categories.id} for hierarchical topic organization.
  discussion_board_category_id String
  
  /// Creator member – References the member's {@link discussion_board_members.id} who created the topic, needed for audit trail and permissions enforcement.
  creator_member_id String
  
  /// Topic title - Short text for headline display. Atomic, normalized.
  title String
  
  /// Topic description - Provides summary or guidelines for the topic. Optional, can be null for brief topics.
  description String?
  
  /// Indicates if topic is pinned.
  pinned Boolean
  
  /// Indicates if topic is closed.
  closed Boolean
  
  /// Timestamp of topic creation.
  created_at DateTime
  
  /// Timestamp of last update to the topic.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  category discussion_board_categories @relation(fields: [discussion_board_category_id], references: [id], onDelete: Cascade)
  creator_member discussion_board_members @relation(fields: [creator_member_id], references: [id], onDelete: Cascade)
  
  discussion_board_threads discussion_board_threads[]
  discussion_board_activity_logs discussion_board_activity_logs[]
  discussion_board_engagement_stats discussion_board_engagement_stats[]
  
  @@index([creator_member_id])
  
  @@unique([discussion_board_category_id, title])
  @@index([created_at])
  @@index([pinned])
}

/// Threads within a topic - Implements threaded sub-discussions for separate conversations under one topic. Each thread belongs to a topic, and to a creator member. Fully normalized. Closure of parent topic invalidates new threads/posts.
///
/// @namespace Articles
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_threads {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each thread.
  id String @id
  
  /// Parent topic – References {@link discussion_board_topics.id}, linking thread to its top-level area.
  discussion_board_topic_id String
  
  /// Thread starter – References the member's {@link discussion_board_members.id} who created the thread.
  creator_member_id String
  
  /// Thread title - User-provided, atomic.
  title String
  
  /// Timestamp when thread created.
  created_at DateTime
  
  /// Timestamp of last update/modification.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  topic discussion_board_topics @relation(fields: [discussion_board_topic_id], references: [id], onDelete: Cascade)
  creator_member discussion_board_members @relation(fields: [creator_member_id], references: [id], onDelete: Cascade)
  
  discussion_board_posts discussion_board_posts[]
  discussion_board_activity_logs discussion_board_activity_logs[]
  
  @@index([creator_member_id])
  
  @@unique([discussion_board_topic_id, title])
  @@index([discussion_board_topic_id, created_at], map: "discussion_board_threads_discussion_board_topic_id_cre_1d94f0ec")
}

/// Atomic posts in discussion threads - Implements posting and commenting functionality. Each post is an individual contribution to a thread and references its creator and thread. Designed for atomic, normalized content. Soft-deletion handled by deleted_at. No aggregation of comment count/etc.
///
/// @namespace Articles
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_posts {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each post.
  id String @id
  
  /// Parent thread – References {@link discussion_board_threads.id}.
  discussion_board_thread_id String
  
  /// Post author – References {@link discussion_board_members.id}.
  creator_member_id String
  
  /// Post body - Markdown/atomic text. Not calculated.
  body String
  
  /// Edit status - True if post edited. Atomic flag, 3NF compliant.
  is_edited Boolean
  
  /// Time of post creation.
  created_at DateTime
  
  /// Time of last update.
  updated_at DateTime
  
  /// Deletion timestamp if soft-deleted. Nullable.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  thread discussion_board_threads @relation(fields: [discussion_board_thread_id], references: [id], onDelete: Cascade)
  creator_member discussion_board_members @relation(fields: [creator_member_id], references: [id], onDelete: Cascade)
  
  discussion_board_post_versions discussion_board_post_versions[]
  discussion_board_post_attachments discussion_board_post_attachments[]
  discussion_board_comments discussion_board_comments[]
  discussion_board_reports discussion_board_reports[]
  discussion_board_moderation_actions discussion_board_moderation_actions[]
  discussion_board_content_flags discussion_board_content_flags[]
  discussion_board_activity_logs discussion_board_activity_logs[]
  
  @@index([creator_member_id])
  
  @@index([discussion_board_thread_id, created_at], map: "discussion_board_posts_discussion_board_thread_id_crea_bf476e65")
}

/// Snapshots of post revisions (version history/audit) - Implements snapshot-based architecture for post edit tracking, supporting rollback and audit history. Each entry stores a snapshot of the post content and incrementing version number. No aggregation. Each version is linked to an editor and to the associated post.
///
/// @namespace Articles
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_post_versions {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique, immutable identifier for each versioned snapshot.
  id String @id
  
  /// Target post – References {@link discussion_board_posts.id}.
  discussion_board_post_id String
  
  /// Editor responsible for this version – References {@link discussion_board_members.id}.
  editor_member_id String
  
  /// Version number - Starts at 1, increments per edit.
  version Int
  
  /// Snapshot of post content.
  body String
  
  /// Timestamp when version created.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)
  editor_member discussion_board_members @relation(fields: [editor_member_id], references: [id], onDelete: Cascade)
  
  @@unique([discussion_board_post_id, version], map: "discussion_board_post_versions_discussion_board_post_i_bcb5ae9c")
  @@index([editor_member_id, created_at])
}

/// Attachment files for posts - Stores pure file/link metadata with reference to its post. Files are stored externally as URIs. Soft deletes handled via post or by removing external file, not by field aggregation. Each attachment links to both the post and uploader member.
///
/// @namespace Articles
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_post_attachments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each attachment.
  id String @id
  
  /// Associated post – References {@link discussion_board_posts.id}.
  discussion_board_post_id String
  
  /// Uploader – References {@link discussion_board_members.id}.
  uploader_member_id String
  
  /// Location of the attachment file (external or CDN URI). Atomic, normalized.
  file_uri String
  
  /// Original file name. Plain text, atomic.
  file_name String
  
  /// Attachment MIME type. E.g., 'image/png'.
  mime_type String
  
  /// Timestamp when file uploaded. Atomic event.
  uploaded_at DateTime
  
  //----
  // RELATIONS
  //----
  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)
  uploader_member discussion_board_members @relation(fields: [uploader_member_id], references: [id], onDelete: Cascade)
  
  @@index([discussion_board_post_id])
  @@index([uploader_member_id])
  
  @@index([uploaded_at])
}
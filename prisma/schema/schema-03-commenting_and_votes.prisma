/// [Comment Entity] - This implements the requirement for inline commenting and threaded discussions from the requirements analysis and feature list documents.
///
/// This model represents individual comments attached to discussion posts. It supports threaded/nested discussions when combined with 'discussion_board_comment_reply'. Maintains third normal form (3NF) compliance by only storing atomic, non-aggregated information relating to a single comment, such as author, post association, content, and timestamps. For example, used when a member leaves a comment on a thread post. 
///
/// Key relationships: References 'discussion_board_post' for the parent post and 'discussion_board_user' for the comment author. Special behaviors: Comments can be edited or deleted by their author or a moderator, and are subject to moderation rules.
///
/// @namespace CommentingAndVotes
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_comment {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Implements unique identification for each comment.
  ///
  /// A unique, immutable identifier for the comment, stored as UUID. Supports data integrity and normalization by guaranteeing uniqueness for each comment.
  id String @id @db.Uuid
  
  /// [Post Foreign Key] - Links the comment to its parent post (thread), implementing the requirement for associating comments with the correct discussion.
  ///
  /// Enforces referential integrity to the 'discussion_board_post' model. Ensures normalization by not storing post details redundantly for each comment.
  post_id String @db.Uuid
  
  /// [User Foreign Key] - References the author (member) that created the comment.
  ///
  /// Supports attribution and moderation. Enforces normalized storage of author info.
  user_id String @db.Uuid
  
  /// [Comment Content] - Implements storage for the body of the comment.
  ///
  /// Stores atomic text data for the comment. Ensures normalization by keeping the comment body separate from user and post data. Example: 'I agree with your point on fiscal policy.'
  content String
  
  /// [Creation Timestamp] - Captures when the comment was first published.
  ///
  /// Required for audit trails and ordering comments. Enforces normalization as this atomic event relates only to the comment entity.
  created_at DateTime @db.Timestamptz
  
  /// [Update Timestamp] - Captures when the comment was last modified.
  ///
  /// Supports edit history per requirements. Null if never updated.
  updated_at DateTime? @db.Timestamptz
  
  /// [Deletion Timestamp] - Marks when the comment was soft-deleted for moderation.
  ///
  /// Null unless deleted. Supports non-destructive moderation policies.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  post discussion_board_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  discussion_board_comment_reply discussion_board_comment_reply[]
  discussion_board_comment_vote discussion_board_comment_vote[]
  discussion_board_report discussion_board_report[]
  discussion_board_moderation_action discussion_board_moderation_action[]
  
  @@index([user_id])
  
  @@index([post_id, created_at])
  @@index([content(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Comment Reply Entity] - Implements threaded replies under parent comments, fulfilling the 'threaded discussion' and nested commenting requirements.
///
/// This model represents second-level (reply) comments and supports branching conversation trees. Fully normalized: replies store atomic linkage to both parent comment and author, no redundant user/post data. For example, used when a user replies directly to someone else's comment rather than the entire post.
///
/// Key relationships: References 'discussion_board_comment' (parent) and 'discussion_board_user' (replier). Special behaviors: Subject to moderation, only created by registered members.
///
/// @namespace CommentingAndVotes
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_comment_reply {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique identifier for each comment reply.
  id String @id @db.Uuid
  
  /// [Parent Comment Foreign Key] - Links to the original comment being replied to. Enforces normalized conversation tree.
  parent_comment_id String @db.Uuid
  
  /// [User Foreign Key] - References the registered user who authored the reply. Maintains author attribution and normalization.
  user_id String @db.Uuid
  
  /// [Reply Content] - Atomic text content of the reply.
  content String
  
  /// [Creation Timestamp] - When the reply was made.
  created_at DateTime @db.Timestamptz
  
  /// [Update Timestamp] - Last edit time for the reply.
  updated_at DateTime? @db.Timestamptz
  
  /// [Deletion Timestamp] - If set, reply is soft deleted.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  parent_comment discussion_board_comment @relation(fields: [parent_comment_id], references: [id], onDelete: Cascade)
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  
  @@index([parent_comment_id, created_at])
  @@index([content(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// [Post Vote Entity] - Implements upvoting/feedback requirements for posts as found in the feature list and requirements analysis.
///
/// Each record reflects a user's upvote or helpfulness mark for a post. Ensures 3NF, storing only the link between user, post, and their vote status (no aggregations). Example: a user upvotes a post to indicate it was insightful. 
///
/// Key relationships: User can vote once per post, and votes are tracked per user and post. Special behaviors: Unique constraint prevents duplicate voting.
///
/// @namespace CommentingAndVotes
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_post_vote {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique vote record ID.
  id String @id @db.Uuid
  
  /// [User Foreign Key] - The member casting the vote. Enforces normalization and user attribution.
  user_id String @db.Uuid
  
  /// [Post Foreign Key] - The post being upvoted.
  post_id String @db.Uuid
  
  /// [Vote Timestamp] - When the vote was cast.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post discussion_board_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, post_id])
  @@index([post_id])
}

/// [Comment Vote Entity] - Implements voting/feedback for comments per feature list.
///
/// This tracks individual user's upvotes on comments. Third normal form is maintained by tracking one record per user/comment pair, no aggregation is stored. For example, when a user flags a reply as helpful. 
///
/// Key relationships: References user and comment, and each user can vote only once per comment.
/// Special behaviors: Enforced by unique index on (user_id, comment_id).
///
/// @namespace CommentingAndVotes
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_comment_vote {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique identifier for each vote record.
  id String @id @db.Uuid
  
  /// [User Foreign Key] - Who cast the vote. Enables user-specific voting records.
  user_id String @db.Uuid
  
  /// [Comment Foreign Key] - The comment that was upvoted.
  comment_id String @db.Uuid
  
  /// [Vote Timestamp] - When the vote was placed.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment discussion_board_comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, comment_id])
  @@index([comment_id])
}
/// Reports of inappropriate or abusive content - Tracks user reports of posts or comments that may violate guidelines. Maintains strict 3NF by separating each report as an atomic record. Polymorphic reference resolved by two nullable foreign keys: one for post and one for comment.
///
/// @namespace Moderation
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_reports {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each report instance.
  id String @id
  
  /// Reporter user's {@link discussion_board_members.id}. Identifies who made the report. Ensures normalized reference to member entity.
  reporter_id String
  
  /// The ID of the discussion_board_posts being reported. Null unless content_type is 'post'.
  reported_post_id String?
  
  /// The ID of the discussion_board_comments being reported. Null unless content_type is 'comment'.
  reported_comment_id String?
  
  /// Indicates what type of content is being reported, e.g., 'post' or 'comment'.
  content_type String
  
  /// Explanation/reason for reporting content. Implements the user-provided reason requirement.
  reason String
  
  /// Current moderation status of the report (e.g., 'pending', 'reviewed', 'resolved').
  status String
  
  /// Timestamp when report was created.
  created_at DateTime
  
  /// Timestamp when report was resolved (null if unresolved).
  resolved_at DateTime?
  
  //----
  // RELATIONS
  //----
  fk_reporter_members discussion_board_members @relation(fields: [reporter_id], references: [id], onDelete: Cascade)
  fk_reported_post_content discussion_board_posts? @relation(fields: [reported_post_id], references: [id], onDelete: Cascade)
  fk_reported_comment_content discussion_board_comments? @relation(fields: [reported_comment_id], references: [id], onDelete: Cascade)
  
  discussion_board_moderation_actions discussion_board_moderation_actions[]
  
  @@index([reported_post_id])
  @@index([reported_comment_id])
  
  @@unique([reporter_id, reported_post_id, reported_comment_id], map: "discussion_board_reports_reporter_id_reported_post_id__ebf89e91")
  @@index([status])
  @@index([created_at])
}

/// Actions taken by moderators or admins regarding content moderation - Each moderation action references either a moderator or an admin (never both); action may target a post or a comment, resolved via separate nullable foreign keys.
///
/// @namespace Moderation
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_moderation_actions {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each moderation action event.
  id String @id
  
  /// Moderator user's {@link discussion_board_moderators.id}. Null unless a moderator acted.
  actor_moderator_id String?
  
  /// Admin user's {@link discussion_board_admins.id}. Null unless an admin acted.
  actor_admin_id String?
  
  /// The ID of the discussion_board_posts being moderated. Null unless the action targets a post.
  post_id String?
  
  /// The ID of the discussion_board_comments being moderated. Null unless the action targets a comment.
  comment_id String?
  
  /// If action relates directly to a report, this field links to the discussion_board_reports entry. Nullable for stand-alone moderation.
  report_id String?
  
  /// Describes the moderation action performed (e.g., 'delete', 'edit', 'warn', 'ban').
  action_type String
  
  /// Additional details (eg, reason, notes, evidence).
  action_details String?
  
  /// Timestamp when moderation action was performed.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_actor_moderator discussion_board_moderators? @relation(fields: [actor_moderator_id], references: [id], onDelete: Cascade)
  fk_actor_admin discussion_board_admins? @relation(fields: [actor_admin_id], references: [id], onDelete: Cascade)
  fk_moderated_post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  fk_moderated_comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  fk_action_report discussion_board_reports? @relation(fields: [report_id], references: [id], onDelete: Cascade)
  
  @@index([actor_admin_id])
  @@index([report_id])
  
  @@index([actor_moderator_id, actor_admin_id, created_at], map: "discussion_board_moderation_actions_actor_moderator_id_e7b8d0e8")
  @@index([post_id])
  @@index([comment_id])
}

/// Flags attached to posts or comments for moderation - Polymorphic reference is two separate nullable FKs (post and comment). Flagged by a moderator, admin, or system; these are represented by two nullable FKs for human actors.
///
/// @namespace Moderation
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_content_flags {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each content flag instance.
  id String @id
  
  /// ID of post being flagged. Nullable; set if flag is on a post.
  post_id String?
  
  /// ID of comment being flagged. Nullable; set if flag is on a comment.
  comment_id String?
  
  /// Moderator user's {@link discussion_board_moderators.id}. Nullable.
  flagged_by_moderator_id String?
  
  /// Admin user's {@link discussion_board_admins.id}. Nullable.
  flagged_by_admin_id String?
  
  /// Nature of flag (e.g., 'spam', 'abuse', 'automation', 'duplicate').
  flag_type String
  
  /// Source/origin of flag, e.g. 'manual', 'automation', 'external'.
  flag_source String
  
  /// Additional notes about why flag was set (free form, optional).
  flag_details String?
  
  /// Timestamp when flag was created. Implements audit trace per EARS specs.
  created_at DateTime
  
  /// Timestamp when flag was cleared/resolved (null if still active).
  cleared_at DateTime?
  
  //----
  // RELATIONS
  //----
  fk_flagged_post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  fk_flagged_comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  fk_flagged_by_moderator discussion_board_moderators? @relation(fields: [flagged_by_moderator_id], references: [id], onDelete: Cascade)
  fk_flagged_by_admin discussion_board_admins? @relation(fields: [flagged_by_admin_id], references: [id], onDelete: Cascade)
  
  @@index([comment_id])
  @@index([flagged_by_moderator_id])
  @@index([flagged_by_admin_id])
  
  @@unique([post_id, comment_id, flag_type, flag_source], map: "discussion_board_content_flags_post_id_comment_id_flag_18d1d7d2")
  @@index([created_at])
  @@index([flag_type])
}
/// [Daily Attendance Statistics] - Implements the requirement for daily classroom and school-level attendance summaries (admin/teacher dashboards, period exports) as described in the requirement analysis.
///
/// Business purpose: Tracks attendance outcomes (present, late, absent, early leave counts) for each classroom and school for a given day. No detailed student-level data, strictly day-level aggregates only. Maintains 3NF by making sure no per-student details or pre-calculated roll-ups outside the denominated statistics. Used for powering summary dashboards and exportable daily reports for teachers/admins.
///
/// Key relationships: FK to classroom (required) and school (required).
/// Special behaviors: One and only one record per classroom+day. Periodic upsert allowed. No denormalized/cached subrecords.
///
/// Usage example: Used in dashboard charts, daily reporting, period-over-period comparisons.
///
/// @namespace AttendanceStatsDashboard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_stats_daily {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique identifier for this daily classroom/school statistic row. Always atomic, guarantees uniqueness by row.
  id String @id @db.Uuid
  
  /// [Classroom Reference] - FK to classroom. Ensures stats are specific to a classroom, not global. Required.
  classroom_id String @db.Uuid
  
  /// [School Reference] - FK to school. Provides option to aggregate/partition stats by institution. Required.
  school_id String @db.Uuid
  
  /// [Target Day] - The date string (YYYY-MM-DD) for this statistics row. Always atomic. For filtering/aggregation.
  day String
  
  /// [Present Count] - Number of present students. Must match attendance record aggregation result. No duplication.
  present_count Int @db.Integer
  
  /// [Late Count] - Number of late students. Atomic, no duplication.
  late_count Int @db.Integer
  
  /// [Absent Count] - Number of absentees for the day.
  absent_count Int @db.Integer
  
  /// [Early Leave Count] - Number of students with early leave (if supported), atomic and normalized.
  early_leave_count Int @db.Integer
  
  /// [Created At Timestamp] - Row creation time (auditing).
  created_at DateTime @db.Timestamptz
  
  /// [Updated At Timestamp] - Last modification time (auditing).
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  classroom attendance_classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  school attendance_school @relation(fields: [school_id], references: [id], onDelete: Cascade)
  
  @@unique([classroom_id, day])
  @@index([school_id, day])
}

/// [Student Period Summary Stats] - Implements the requirement for summary dashboards of student-centric attendance aggregation within teacher/student and risk-detection portals.
///
/// Business purpose: Tracks per-student attendance statistics per term/period (e.g., a semester or month). Maintains strict normalization: each record is for (student, period), not by day; never duplicates per-attendance details. Used for summary dashboards, risk analysis, student historical queries.
///
/// Key relationships: FK to student (required), classroom (required).
/// Special behaviors: Each summary is (student, period), recomputed on record changes.
///
/// Usage example: Answers queries like "student X, semester 1, present: 27, late: 2, absent: 1" and populates risk-detection views.
///
/// @namespace AttendanceStatsDashboard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_stats_student_summary {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique summary for (student, period).
  id String @id @db.Uuid
  
  /// [Student Reference] - FK to the student. Ensures all stats are per student. Required.
  student_id String @db.Uuid
  
  /// [Classroom Reference] - FK to the student's main classroom for the period. Required.
  classroom_id String @db.Uuid
  
  /// [Period Start Date] - First day of aggregation (YYYY-MM-DD, atomic, not nullable).
  period_start String
  
  /// [Period End Date] - Last day of aggregation (YYYY-MM-DD, atomic, not nullable).
  period_end String
  
  /// [Total Present] - Days present in period.
  total_present Int @db.Integer
  
  /// [Total Late] - Days late in period.
  total_late Int @db.Integer
  
  /// [Total Absent] - Days absent in period.
  total_absent Int @db.Integer
  
  /// [Total Early Leave] - Days with early leave. Atomic, not nullable.
  total_early_leave Int @db.Integer
  
  /// [Created At Timestamp] - Row creation time for provenance.
  created_at DateTime @db.Timestamptz
  
  /// [Updated At Timestamp] - Last modification time for provenance.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  student attendance_student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  classroom attendance_classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  
  @@unique([student_id, period_start, period_end])
  @@index([classroom_id, period_start, period_end])
}

/// [Classroom Period Summary Stats] - Implements the class-by-class, per-period aggregate statistics needed for power dashboards, ranking, reporting, and period-based monitoring by admin/teacher.
///
/// Business purpose: Aggregates attendance statistics for a classroom within a fixed period (e.g. semester, month). Strict normalization: one record per (classroom, period). Powers dashboard summary tables, quick health views, or exports. No per-student duplication inside each summary.
///
/// Key relationships: FK to classroom (required), school (required).
/// Special behaviors: Each record is (classroom, period). Always recalculated from normalized records.
///
/// Usage example: Allows, e.g., "Class 1: Total 80 student-days, Present 75, Late 2, Absent 1, Early Leave 2" over a semester.
///
/// @namespace AttendanceStatsDashboard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_stats_classroom_summary {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique summary for (classroom, period).
  id String @id @db.Uuid
  
  /// [Classroom Reference] - FK to classroom. Required, normalizes aggregation to exact class.
  ///
  classroom_id String @db.Uuid
  
  /// [School Reference] - FK to school. Extra aggregation support for admin, mandatory.
  school_id String @db.Uuid
  
  /// [Summary Start Date] - Beginning day of summary period (YYYY-MM-DD).
  period_start String
  
  /// [Summary End Date] - Final day covered by this period (YYYY-MM-DD).
  period_end String
  
  /// [Total Present] - Present count for classroom/period.
  total_present Int @db.Integer
  
  /// [Total Late] - Late count for classroom/period.
  total_late Int @db.Integer
  
  /// [Total Absent] - Absence count for classroom/period.
  total_absent Int @db.Integer
  
  /// [Total Early Leave] - Early leave count for class/period.
  total_early_leave Int @db.Integer
  
  /// [Created At Timestamp] - Creation time for auditing.
  created_at DateTime @db.Timestamptz
  
  /// [Updated At Timestamp] - Modification time for auditing.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  classroom attendance_classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  school attendance_school @relation(fields: [school_id], references: [id], onDelete: Cascade)
  
  @@unique([classroom_id, period_start, period_end])
  @@index([school_id, period_start, period_end])
}

/// [Abnormal Attendance Log] - Implements anomaly detection and auditability as required for admin/teacher monitoring and reporting.
///
/// Business purpose: Records all detected anomalies for a specific attendance record and student. 3NF: strictly FK-driven per event, never duplicates record or student Meta. Supports dashboard lists of "problematic patterns" (frequent absentees, suspicious codes), and audit history of handling/resolution per anomaly instance.
///
/// Key relationships: FK to attendance record (required), student (required), admin (optional - who flagged/resolved event).
/// Special behaviors: Multiple logs per attendance. Status field allows open/closed/in_review. All timestamps atomic.
///
/// Usage example: Used for daily audit logs, anomaly dashboard widgets, risk analysis features.
///
/// @namespace AttendanceStatsDashboard
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model attendance_stats_abnormal_log {
  //----
  // COLUMNS
  //----
  /// [Primary Key] - Unique anomaly log. Each row is a single anomaly instance.
  id String @id @db.Uuid
  
  /// [Attendance Record Reference] - FK to the atom-level attendance record that this anomaly log is attached to.
  attendance_record_id String @db.Uuid
  
  /// [Student Reference] - FK to student involved in anomaly.
  student_id String @db.Uuid
  
  /// [Admin Reference] - FK to admin who manually tagged/resolved anomaly. Optional (nullable if anomaly unresolved or system-detected only).
  admin_id String? @db.Uuid
  
  /// [Anomaly Type] - Label (duplicate, location_mismatch, code_invalid, etc). Required for audit/search. Normalized, not nullable.
  anomaly_type String
  
  /// [Detection Rule] - Mechanism/rule which detected anomaly (e.g., code reuse, location mismatch, late submission). Not nullable.
  anomaly_rule String
  
  /// [Status] - Workflow: open, closed, in_review. Not nullable. (Enum enforced at business logic.)
  status String
  
  /// [Detected At] - When this anomaly was first detected. Not nullable.
  occurred_at DateTime @db.Timestamptz
  
  /// [Resolved At] - When status changed to closed (nullable).
  resolved_at DateTime? @db.Timestamptz
  
  /// [Log Created At] - Provenance/audit.
  created_at DateTime @db.Timestamptz
  
  /// [Last Updated At] - Audit trail for log changes.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  record attendance_attendance_record @relation(fields: [attendance_record_id], references: [id], onDelete: Cascade)
  student attendance_student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  admin attendance_admin? @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  
  @@index([admin_id])
  
  @@unique([attendance_record_id, anomaly_type])
  @@index([student_id, anomaly_type])
}
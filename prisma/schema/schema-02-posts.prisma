/// Post entity - This implements the 'Post' entity from the requirements document (see Data Structure and Business Rules, section 1, and Example Scenario). 
///
/// Represents discussion topics or articles submitted by users. Provides a core construct to enable users to initiate threads, share analysis, and start community debates. For example, a user posts a discussion about inflation in the 'Economics' category. 
///
/// Key relationships: Each post belongs to one user (author) and one category. Each post can have many comments and votes. 
/// Special behaviors: A post must be assigned to a category, may be edited/deleted by its author, and is visible to all users. Vote tally and creation metadata are key for surfacing relevant content.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model posts {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each post.
  id String @id @db.Uuid
  
  /// Author's {@link users.id} - Links each post to its authoring user account. Enforces the association between posts and registered users. Required for accountability and profile-related features.
  user_id String @db.Uuid
  
  /// Category's {@link categories.id} - Associates the post with a topic/category, used for board structure and navigation. Enforces the requirement that every post has a topical context.
  category_id String @db.Uuid
  
  /// Title of the post - Implements the requirement that each post has a headline/subject. Business meaning: summary/subject line visible in post lists and thread views. For example, 'Economic Impact of Inflation in 2025'.
  title String
  
  /// Body content of the post - Implements the rule that posts have main text where users express opinions, share news, analysis, etc. For example, a 400-word analysis of current economic events. Allows rich content or text.
  content String
  
  /// Creation timestamp - Implements transparency and audit requirements by recording when the post was created. Business use: shows recency in lists, allows moderation tracking.
  created_at DateTime @db.Timestamptz
  
  /// Last edited timestamp - Allows tracking of post edits for evidence/history. Enforces business constraint of allowing users to edit posts within the permitted window. For example, updated_at is changed when a user fixes a typo.
  updated_at DateTime @db.Timestamptz
  
  /// Soft deletion timestamp - Implements moderation rules (see Moderation and User Roles). Posts are not hard deleted but marked with this field if removed for rule violations or by user request. For example, moderators mark spam here for audit/history.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  author users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  
  comments comments[]
  votes votes[]
  
  @@index([category_id, created_at])
  @@index([user_id, created_at])
  @@index([created_at])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([content(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Comment entity - This implements the 'Comment' entity from the requirements (see Data Structure and Business Rules section 1, and Example Scenario).
///
/// Represents replies to posts or other comments, allowing for nested conversations and community discussion. For example, a user comments on a post about inflation, or replies to another comment with their opinion.
///
/// Key relationships: Each comment is written by a user and is attached either directly to a post or as a nested reply to another comment. Each comment can have multiple votes. Replies form a hierarchy.
/// Special behaviors: Only registered users can comment. Comments may be deleted/edited by their author within constraints. Vote tally supports surfacing relevant replies. Threaded (self-referential) relations supported.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model comments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each comment.
  id String @id @db.Uuid
  
  /// Author's {@link users.id} - Indicates the owner/author of the comment. Enforces accountability, links to profile and reputation system. Required for audit and moderation.
  user_id String @db.Uuid
  
  /// Parent post's {@link posts.id} - The post that this comment is in response to. Implements the association between comments and discussions. Required unless it's a reply to another comment only.
  post_id String @db.Uuid
  
  /// Parent comment's {@link comments.id} - Implements threaded/nested replies, allowing for comment hierarchies. Enables conversations to branch. Nullable for top-level comments (direct responses to posts).
  parent_id String? @db.Uuid
  
  /// Comment body - Implements the rule that each comment consists of user-written text/content. Used for replies, opinions, and ongoing discussion. For example, 'I agree and hereâ€™s why...'.
  content String
  
  /// Creation timestamp - Implements audit/history requirement for comment posting, tracking the date and time for moderation and display ordering. For example, enables 'most recent first' sorting.
  created_at DateTime @db.Timestamptz
  
  /// Last edited timestamp - Implements edit history tracking for evidence and transparency. If a user updates their comment, this records when.
  updated_at DateTime @db.Timestamptz
  
  /// Soft deletion timestamp - Implements moderation controls by marking comments removed (not hard deleted) for evidence/history. Used if comment violates rules, is self-removed, or by moderator action.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  author users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  parent comments? @relation("recursive", fields: [parent_id], references: [id], onDelete: Cascade)
  
  recursive comments[] @relation("recursive")
  votes votes[]
  
  @@index([post_id, created_at])
  @@index([user_id, created_at])
  @@index([parent_id, created_at])
  @@index([content(ops: raw("gin_trgm_ops"))], type: Gin)
}
/// Comment Entity - This implements the persistent storage of all user-submitted comments in discussions, derived principally from the Posting and Commenting, Reporting, and Moderation requirements. Enables business: Members (authenticated users) can add comments to posts or threads, drive participation, and trigger moderation/reporting workflows. Maintains 3NF compliance by storing only basic comment data here, with version history and attachments managed by related tables. For example, a member posts a reply under a thread; this comment is stored here, and all edits spawn version records in discussion_board_comment_versions. Key relationships: References creator/member, post/thread, and version history. Special behaviors: Enforces logical deletion (soft delete), role-based permissions, and audit trails via related domain tables.
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_comments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for this comment entity instance, required for versioning, audit, and referencing from attachments, reports, or moderation actions.
  id String @id
  
  /// Belonged member's {@link discussion_board_members.id} Identifies the member who created the comment. This links each comment to a registered member in the Actors domain. Ensures only authenticated users can create comments. For example, when 'JaneDoe' comments on a thread, discussion_board_member_id references her unique member id.
  discussion_board_member_id String
  
  /// Target post's {@link discussion_board_posts.id} Associates comment with its parent post. Maintains comment thread context. For example, when commenting on a specific post in a topic, this points to the post id.
  discussion_board_post_id String
  
  /// Current visible content of the comment - Implements base comment storage per Posting and Commenting requirements. Contains the editable text body at its most recent version. Ensures normalization by separating version history. For example, shows the latest text for all viewing users. Prohibited from containing calculation or aggregation data. Constraints: non-empty, max length per business rule.
  content String
  
  /// Soft delete flag - Supports moderation requirements and audit regulation. Indicates whether the comment is logically deleted (hidden but not physically removed). Preserves normalization; logical deletions marked here while historical data and audit remain intact. For example, when a comment is removed for moderation, it is flagged true here but retained for review purposes.
  is_deleted Boolean
  
  /// Timestamp when the comment was created - Fulfills audit trail, reporting, and workflow timing requirements. Captures creation date and time for version order and temporal queries. For example, used in sorting threads by newest activity. Non-nullable, set at insert; not updatable.
  created_at DateTime
  
  /// Timestamp for most recent update - Implements last-change tracking per Posting/Moderation requirements. Records when this comment was last edited (directly, not via version). Distinct from versioning. For example, indicates if and when a comment was updated. Non-nullable; system-managed.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_discussion_board_comments_member discussion_board_members @relation(fields: [discussion_board_member_id], references: [id], onDelete: Cascade)
  fk_discussion_board_comments_post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)
  
  discussion_board_comment_versions discussion_board_comment_versions[]
  discussion_board_comment_attachments discussion_board_comment_attachments[]
  discussion_board_reports discussion_board_reports[]
  discussion_board_moderation_actions discussion_board_moderation_actions[]
  discussion_board_content_flags discussion_board_content_flags[]
  
  @@unique([discussion_board_member_id, created_at], map: "discussion_board_comments_discussion_board_member_id_c_8a025dea")
  @@index([discussion_board_post_id, created_at], map: "discussion_board_comments_discussion_board_post_id_cre_571d2d84")
}

/// Comment Version Entity - Implements comment versioning as mandated by audit, edit history, and moderation transparency requirements. Business purpose: Captures every revision of a comment, supporting features like rollback, moderator review, or version diff display. Maintains 3NF by isolating mutable historic data from the main comments table. For example, if a member edits a comment three times, each version is preserved here for audit and possible reversion. Key relationships: Each record links to its parent comment and the editing member. Special constraints: Must maintain strict sequential ordering, cannot be orphaned.
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_comment_versions {
  //----
  // COLUMNS
  //----
  /// Primary Key. Distinct identifier for this version entity. Guarantees auditibility and reference from moderation or analytics tables.
  id String @id
  
  /// Parent comment's {@link discussion_board_comments.id} Defines which logical comment this version belongs to. Maintains strict referential integrity – cannot exist unless parent exists. Example: all edits to Comment A reference its id.
  discussion_board_comment_id String
  
  /// Editing member's {@link discussion_board_members.id} Records who performed this edit (original author or admin/moderator on behalf). Supports moderation requirements and rollback logic. For example, if a post is edited by moderator, reference shows the responsible party.
  editor_member_id String
  
  /// Full content snapshot for this version - Implements versioning per Editing/Audit requirements. Holds exact comment text at time of this revision. Maintains normalization by never storing aggregated history or derived summaries. For example, supports diff view between versions. Constraints: non-nullable, limited to max allowed text size.
  content String
  
  /// Timestamp for when the version was created - Satisfies audit and sequencing needs. Critical for ordering comment versions and reconstructing edit history. Non-nullable; fixed at version creation. System-managed; not modifiable after insertion.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_comment_versions_comment discussion_board_comments @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)
  fk_comment_versions_editor discussion_board_members @relation(fields: [editor_member_id], references: [id], onDelete: Cascade)
  
  @@unique([discussion_board_comment_id, created_at], map: "discussion_board_comment_versions_discussion_board_com_c69a5d87")
  @@index([editor_member_id, created_at], map: "discussion_board_comment_versions_editor_member_id_cre_6ee1839b")
}

/// Comment Attachment Entity - Implements comment file/media upload and management in line with Posting and Commenting functional requirements and audit expectations. Business purpose: Enables the association of external files (e.g., images, documents) with user comments. Maintains normalization by separating binary/meta file data from core comment or version entities. For example, a user attaches a PNG file when commenting – info here links the file and describes its purpose/type. Key relationships: References parent comment and the uploading member. May link to moderation, abuse workflows. Behavior notes: Attachment deletion upon comment removal is logical, not physical, until moderation review completes.
///
/// @namespace Comments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_comment_attachments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each comment attachment; referenced from comment or moderation action records.
  id String @id
  
  /// Parent comment's {@link discussion_board_comments.id} Links the attachment to the specific comment it accompanies. Preserves referential integrity, cascade deletes if comment is deleted. For example, when removing a comment, related attachments are flagged for review or logical deletion.
  discussion_board_comment_id String
  
  /// Uploading member's {@link discussion_board_members.id} Identifies which member uploaded this attachment, fulfilling moderation and reporting needs. For example, provides traceability in the event of abuse or copyright complaints.
  uploader_member_id String
  
  /// Original filename as uploaded - Implements user experience and file management requirements. Captured to show download/display name. Normalized, atomic string, no file data or MIME-type here. Example: 'user-guide.pdf'.
  file_name String
  
  /// URL or URI where file is stored - Implements file referencing and download logic. Contains the safe-accessible storage or CDN link for retrieval and scanning. For example: 'https://cdn.example.com/upload/abc1234.pdf'. Must be a valid URI. Completely normalized – no aggregate content, no calculations, no stored binaries.
  file_url String
  
  /// MIME type of attachment content - Implements compatibility and validation coverage. Stores attachment's content-type for serving/display and content policy enforcement. For example: 'image/png', 'application/pdf'. Required, non-nullable. Ensures only atomic media/meta data is present.
  mime_type String
  
  /// Timestamp for file upload - Fulfills audit and tracking for moderation or download logs. Set immediately upon successful upload. Not modifiable, required. Used for reporting and analytics. Example: display upload date/time on comment view or for anti-abuse workflow.
  uploaded_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_comment_attachments_comment discussion_board_comments @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)
  fk_comment_attachments_uploader discussion_board_members @relation(fields: [uploader_member_id], references: [id], onDelete: Cascade)
  
  @@unique([discussion_board_comment_id, file_url], map: "discussion_board_comment_attachments_discussion_board__18b5d720")
  @@index([uploader_member_id, uploaded_at], map: "discussion_board_comment_attachments_uploader_member_i_c30b86ed")
}
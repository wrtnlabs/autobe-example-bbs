/// [Site-wide settings] - This implements the requirement for centralized, system-wide configuration from the requirements document (see 'Technical Requirements', 'Business Rules', and 'Core Features'). 
///
/// Provides a single source of truth for global site configuration such as community guidelines, feature toggles, branding, and moderation policies. Maintains 3NF compliance by storing only atomic, non-redundant settings at the site level; does not mix per-user preferences here. For example, editing site name, default language, or enabling/disabling voting. 
///
/// Key relationships: Does not reference other tables (site-wide scope). Used at runtime for fetching current configuration, and can be updated only by admins. 
/// Special behaviors: Only one active record should exist (enforced in business logic). Typically cacheable for performance.
///
/// @namespace Settings
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model site_settings {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for the site settings record.
  id String @id @db.Uuid
  
  /// [Name of the discussion board] - Implements the branded display requirement.
  site_name String
  
  /// [Default language code] - Implements internationalization and accessibility requirement. Example: 'en-US'.
  default_language String
  
  /// [URL to site rules/guidelines] - Implements requirements around transparency and easy rule access.
  guidelines_url String @db.VarChar(80000)
  
  /// [Logo image URL] - Implements the visual branding requirement.
  branding_logo_url String? @db.VarChar(80000)
  
  /// [Feature toggles JSON] - Stores enabled/disabled status for core and optional features, such as voting, comments, or notifications. Ensures normalization by storing complex feature switches as serialized config.
  features_json String
  
  /// [Creation timestamp] - Tracks when the site settings were created.
  created_at DateTime @db.Timestamptz
  
  /// [Update timestamp] - Indicates last updated for auditing purposes.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  @@unique([site_name])
  @@index([created_at])
}

/// [User-specific settings] - This implements the per-user customization requirement from the requirements document (see 'User Profiles', 'Notification Preferences', and 'Accessibility').
///
/// Allows each user to specify preferences such as language, theme, notification frequency, and accessibility options. Maintains 3NF by linking each record to exactly one user, storing only non-derived, atomic values. For example, a user can choose 'dark mode', set notification types, or change language. 
///
/// Key relationships: Each record references one {@link users.id} to scope settings to a user. 
/// Special behaviors: Only one record per user enforced by unique index. Admins can update or reset settings if needed; settings are loaded at user login/session.
///
///
/// @namespace Settings
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_settings {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for user settings record.
  id String @id @db.Uuid
  
  /// Belonged user's {@link users.id} - Identifies the user to whom these settings apply.
  user_id String @db.Uuid
  
  /// [User interface language] - Implements internationalization for user accessibility. Example: 'en-US'.
  language String
  
  /// [Site theme preference] - Implements accessibility and personalization (e.g. 'light', 'dark').
  theme String
  
  /// [Serialized notification preferences] - Implements customizable notification delivery, stored as normalized JSON.
  notification_preferences_json String
  
  /// [Accessibility options] - Implements per-user accessibility requirements for UI features.
  accessibility_options_json String
  
  /// [Creation timestamp] - Tracks when user settings were created.
  created_at DateTime @db.Timestamptz
  
  /// [Update timestamp] - Tracks last user settings update for auditing and support.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id])
  @@index([created_at])
}
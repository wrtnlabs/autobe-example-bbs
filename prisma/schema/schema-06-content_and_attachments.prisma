/// Attachment Table - This implements the 'Rich text support: formatting, hyperlinks, quoting, and simple image attachments' and 'Support for images, videos, attachments within posts and comments' requirements from the requirements analysis and feature list documents. 
///
/// This table stores metadata about files (images, documents, etc.) that users can attach to posts or comments. Maintains full 3NF compliance by separating attachment data from posts/comments – only storing atomic, non-derived file information per attachment. For example, when a user uploads an image for their post, a new row is inserted here with file URL, MIME type, and creator.
///
/// Key relationships: Linked from post/comment via the discussion_board_post_attachment_link table. 
/// Special behaviors: Only atomic metadata fields, no pre-calculated or denormalized data. Attachments can exist independently of post linkage, allowing re-use or orphan clean up.
///
/// @namespace ContentAndAttachments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_attachment {
  //----
  // COLUMNS
  //----
  /// Primary key - Unique identifier for each attachment. Implements the core need for entity integrity. Ensures normalization by using a surrogate key, not natural (e.g., filename). For example, 'dde0c1b6-adde-40f6-b624-f61d438d1951'.
  id String @id @db.Uuid
  
  /// Uploader Reference - Implements auditability. Points to the user who uploaded the attachment. Ensures normalization by linking to user table, not duplicating any user info. For example, retrieves uploader username via join. Enforced as NOT NULL; attachments must be owned.
  uploaded_by_user_id String @db.Uuid
  
  /// File URL - Implements the attachment access requirement. Stores the exact URL or URI where the uploaded file can be retrieved. Atomic, with no derived data. For example, 'https://cdn.example.com/uploads/abc123.png'.
  file_url String @db.VarChar(80000)
  
  /// Original File Name - Human-readable uploaded filename. Implements the need for user context, without duplicating elsewhere. Atomic, e.g., 'budget_chart_2025.pdf'.
  file_name String
  
  /// MIME Type - Describes file content type for client rendering. Atomic, non-derived. For example, 'image/png', 'application/pdf'.
  mime_type String
  
  /// Upload Timestamp - Records exact instant of upload. Implements audit trail. Ensures normalization by not storing redundant date info. Example: '2025-07-11T13:36:05'.
  created_at DateTime @db.Timestamptz
  
  /// Soft Delete Timestamp - Implements safe deletion policies. Null if the attachment is active, populated if scheduled/deleted. Enables 3NF compliance by representing deletion as a state, not a derived/conflated field. Example: null or '2025-07-11T13:50:00'.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_user @relation(fields: [uploaded_by_user_id], references: [id], onDelete: Cascade)
  
  discussion_board_post_attachment_link discussion_board_post_attachment_link[]
  
  @@unique([file_url])
  @@index([uploaded_by_user_id, created_at])
}

/// Post-Attachment Link Table - This implements 'Support for images, videos, attachments within posts and comments' and 'Rich media embeds' as described in the requirements and feature list.
///
/// Links attachments to posts, enabling posts to reference multiple files or for files to be linked to multiple posts (M:N relationship). Maintains strict 3NF by removing arrays or repeated groups from posts—always modeled as separate linking records. For example, a post with two attachments will have two rows in this table, specifying the order of display.
///
/// Key relationships: FK to discussion_board_post and to discussion_board_attachment. No denormalized or derived fields. 
/// Special behaviors: The link may include an attachment order/sequence. Links can be disabled instead of physically deleted for auditability.
///
/// @namespace ContentAndAttachments
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_post_attachment_link {
  //----
  // COLUMNS
  //----
  /// Primary key - Unique identifier for each link between a post and an attachment. Implements atomicity and uniqueness, not derived from other columns. For example, '594b9c7c-2b91-4b5b-89f4-8277e7b58232'.
  id String @id @db.Uuid
  
  /// Post Reference - Links this attachment usage to a specific post. Implements normalized linking with no duplication of post information. All post attachment links must specify a valid post.
  post_id String @db.Uuid
  
  /// Attachment Reference - Links this record to exactly one file in discussion_board_attachment. No derived or duplicated fields about the attachment itself. Ensures referential integrity – cannot link to nonexistent files.
  attachment_id String @db.Uuid
  
  /// Attachment Order - Stores the display or embedding sequence for multiple attachments within a single post. Implements display ordering without violating normalization. Example: 1=first image, 2=second, etc. Atomic field only.
  attachment_order Int @db.Integer
  
  /// Attachment Link Disabled Flag - Marks whether this attachment link is logically disabled (e.g., hidden, not shown). Allows reversible removal without deleting the underlying attachment. Atomic, no derived meaning. Example: true/false.
  disabled Boolean
  
  /// Link Creation Timestamp - When the attachment was first associated with the post. For audit trails. Example: '2025-07-11T13:36:05'.
  created_at DateTime @db.Timestamptz
  
  /// Soft Delete Timestamp - If set, logically deletes the attachment link rather than physically removing it. Maintains history and 3NF compliance. Example: null or '2025-07-11T14:00:00'.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  post discussion_board_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  attachment discussion_board_attachment @relation(fields: [attachment_id], references: [id], onDelete: Cascade)
  
  @@unique([post_id, attachment_order])
  @@unique([post_id, attachment_id])
  @@index([attachment_id, created_at])
}
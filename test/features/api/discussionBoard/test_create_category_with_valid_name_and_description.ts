import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IDiscussionBoardCategory } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardCategory";

/**
 * Validate successful creation of a discussion board category.
 *
 * Ensures the POST /discussionBoard/categories endpoint creates a new category with a unique name and valid description, and that the API returns all required system-generated metadata fields.
 *
 * Steps:
 * 1. Construct a unique category name and a valid description.
 * 2. Send a POST request to create the category using the discussionBoard.categories.post API.
 * 3. Verify that the returned category object:
 *    - Includes an automatically assigned UUID as 'id' (check format).
 *    - Contains the provided name and description.
 *    - Contains correctly formatted 'created_at' and 'updated_at' timestamps.
 *    - The 'deleted_at' field is either absent or null.
 * 4. Assert type safety for the returned object.
 */
export async function test_api_discussionBoard_test_create_category_with_valid_name_and_description(
  connection: api.IConnection,
) {
  // 1. Construct unique name and valid description
  const uniqueName: string = `E2E-Test-Category-${typia.random<string & tags.Format<"uuid">>()}`;
  const description: string = "Autogenerated test category for E2E validation.";

  // 2. Send POST request to create the category
  const category = await api.functional.discussionBoard.categories.post(connection, {
    body: {
      name: uniqueName,
      description,
    } satisfies IDiscussionBoardCategory.ICreate,
  });
  typia.assert(category);

  // 3. Verify system-generated metadata and provided fields
  TestValidator.predicate("UUID is present and formatted correctly")(!!category.id && /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(category.id));
  TestValidator.equals("Created name matches") (category.name) (uniqueName);
  TestValidator.equals("Created description matches") (category.description)(description);
  TestValidator.predicate("created_at is ISO8601 date-time")(!!category.created_at && /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(.\d+)?Z?/.test(category.created_at));
  TestValidator.predicate("updated_at is ISO8601 date-time")(!!category.updated_at && /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(.\d+)?Z?/.test(category.updated_at));
  TestValidator.predicate("deleted_at is null or absent")(!category.deleted_at);
}
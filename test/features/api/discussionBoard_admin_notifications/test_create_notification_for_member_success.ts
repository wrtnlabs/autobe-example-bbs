import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IDiscussionBoardNotification } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardNotification";

/**
 * Test that admins can successfully create a new notification event for a
 * member via the admin discussion board notifications API.
 *
 * Business context: Only authorized admin accounts should be able to directly
 * create notification events for any member. This is for scenarios such as
 * forced notifications, system alerts, or high-priority events that may not
 * originate from normal discussion triggers.
 *
 * Steps:
 *
 * 1. Prepare a random but valid recipient user ID (UUID).
 * 2. Construct a valid notification payload including recipient ID, type (e.g.,
 *    'reply'), message content, delivery status (e.g., 'delivered'), and
 *    linking context (target_type, target_id).
 * 3. Call the POST /discussionBoard/admin/notifications endpoint as an admin.
 * 4. Validate the created notification object matches all input fields and is
 *    associated with the correct recipient.
 * 5. Verify that the system assigns ID, timestamps (delivered_at), and audit
 *    logging would be in place for traceability.
 */
export async function test_api_discussionBoard_admin_notifications_test_create_notification_for_member_success(
  connection: api.IConnection,
) {
  // 1. Prepare recipient and related entity IDs (UUID).
  const recipientId = typia.random<string & tags.Format<"uuid">>();
  const targetId = typia.random<string & tags.Format<"uuid">>();
  // Optional: associate with a subscription event
  const subscriptionId =
    Math.random() < 0.5 ? typia.random<string & tags.Format<"uuid">>() : null;
  // 2. Build notification creation payload
  const payload: IDiscussionBoardNotification.ICreate = {
    recipient_id: recipientId,
    subscription_id: subscriptionId,
    notification_type: "reply",
    target_type: "thread",
    target_id: targetId,
    message: `Test notification ${Date.now()}`,
    delivered_at: new Date().toISOString(),
    delivery_status: "delivered",
    // failure_reason is null since this is a success scenario
    failure_reason: null,
  };

  // 3. Issue the admin notifications create endpoint call
  const notification =
    await api.functional.discussionBoard.admin.notifications.create(
      connection,
      { body: payload },
    );
  typia.assert(notification);

  // 4. Validate output: All fields should match input, additional properties (id, delivered_at, etc.) should be present and valid.
  TestValidator.equals("recipient matches")(notification.recipient_id)(
    recipientId,
  );
  TestValidator.equals("target matches")(notification.target_id)(targetId);
  TestValidator.equals("type matches")(notification.notification_type)(
    payload.notification_type,
  );
  TestValidator.equals("delivery status matches")(notification.delivery_status)(
    payload.delivery_status,
  );
  TestValidator.equals("message matches")(notification.message)(
    payload.message,
  );
  if (subscriptionId !== null)
    TestValidator.equals("subscription matches")(notification.subscription_id)(
      subscriptionId,
    );

  // 5. Ensure system-generated properties are present
  TestValidator.predicate("Has autogenerated notification ID")(
    !!notification.id,
  );
  TestValidator.predicate("Valid delivered_at timestamp")(
    !!notification.delivered_at,
  );
}
